//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Subtarget Enumeration Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//


#ifdef GET_SUBTARGETINFO_ENUM
#undef GET_SUBTARGETINFO_ENUM
namespace llvm {
namespace Alpha {
enum {
  FeatureCIX =  1ULL << 0
};
}
} // End llvm namespace 
#endif // GET_SUBTARGETINFO_ENUM


#ifdef GET_SUBTARGETINFO_MC_DESC
#undef GET_SUBTARGETINFO_MC_DESC
namespace llvm {
// Sorted (by key) array of values for CPU features.
llvm::SubtargetFeatureKV AlphaFeatureKV[] = {
  { "cix", "Enable CIX extensions", Alpha::FeatureCIX, 0ULL }
};

// Sorted (by key) array of values for CPU subtype.
llvm::SubtargetFeatureKV AlphaSubTypeKV[] = {
  { "ev6", "Select the ev6 processor", 0ULL, 0ULL },
  { "ev67", "Select the ev67 processor", Alpha::FeatureCIX, 0ULL },
  { "generic", "Select the generic processor", 0ULL, 0ULL }
};


// Functional units for itineraries "Alpha21264Itineraries"
namespace Alpha21264ItinerariesFU {
  const unsigned L0 = 1 << 0;
  const unsigned L1 = 1 << 1;
  const unsigned FST0 = 1 << 2;
  const unsigned FST1 = 1 << 3;
  const unsigned U0 = 1 << 4;
  const unsigned U1 = 1 << 5;
  const unsigned FA = 1 << 6;
  const unsigned FM = 1 << 7;
}

llvm::InstrStage AlphaStages[] = {
  { 0, 0, 0, llvm::InstrStage::Required }, // No itinerary
  { 3, Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 1
  { 4, Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 2
  { 0, Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 3
  { 0, Alpha21264ItinerariesFU::FST0 | Alpha21264ItinerariesFU::FST1 | Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 4
  { 1, Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1 | Alpha21264ItinerariesFU::U0 | Alpha21264ItinerariesFU::U1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 5
  { 1, Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 6
  { 1, Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 7
  { 0, Alpha21264ItinerariesFU::U0 | Alpha21264ItinerariesFU::U1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 8
  { 3, Alpha21264ItinerariesFU::U0 | Alpha21264ItinerariesFU::U1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 9
  { 3, Alpha21264ItinerariesFU::L0, -1, (llvm::InstrStage::ReservationKinds)0 }, // 10
  { 1, Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::U0 | Alpha21264ItinerariesFU::L1 | Alpha21264ItinerariesFU::U1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 11
  { 1, Alpha21264ItinerariesFU::U0 | Alpha21264ItinerariesFU::U1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 12
  { 7, Alpha21264ItinerariesFU::U1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 13
  { 3, Alpha21264ItinerariesFU::U0, -1, (llvm::InstrStage::ReservationKinds)0 }, // 14
  { 0, Alpha21264ItinerariesFU::FA, -1, (llvm::InstrStage::ReservationKinds)0 }, // 15
  { 6, Alpha21264ItinerariesFU::FA, -1, (llvm::InstrStage::ReservationKinds)0 }, // 16
  { 6, Alpha21264ItinerariesFU::FM, -1, (llvm::InstrStage::ReservationKinds)0 }, // 17
  { 12, Alpha21264ItinerariesFU::FA, -1, (llvm::InstrStage::ReservationKinds)0 }, // 18
  { 15, Alpha21264ItinerariesFU::FA, -1, (llvm::InstrStage::ReservationKinds)0 }, // 19
  { 18, Alpha21264ItinerariesFU::FA, -1, (llvm::InstrStage::ReservationKinds)0 }, // 20
  { 33, Alpha21264ItinerariesFU::FA, -1, (llvm::InstrStage::ReservationKinds)0 }, // 21
  { 3, Alpha21264ItinerariesFU::FST0 | Alpha21264ItinerariesFU::FST1 | Alpha21264ItinerariesFU::L0 | Alpha21264ItinerariesFU::L1, -1, (llvm::InstrStage::ReservationKinds)0 }, // 22
  { 0, 0, 0, llvm::InstrStage::Required } // End itinerary
};
unsigned AlphaOperandCycles[] = {
  0, // No itinerary
  0 // End itinerary
};
unsigned AlphaForwardingPathes[] = {
  0, // No itinerary
  0 // End itinerary
};

llvm::InstrItinerary Alpha21264Itineraries[] = {
  { 1, 0, 0, 0, 0 }, // 0 NoItinerary
  { 1, 11, 12, 0, 0 }, // 1 s_cmov
  { 1, 16, 17, 0, 0 }, // 2 s_fadd
  { 1, 15, 16, 0, 0 }, // 3 s_fbr
  { 1, 16, 17, 0, 0 }, // 4 s_fcmov
  { 1, 18, 19, 0, 0 }, // 5 s_fdivs
  { 1, 19, 20, 0, 0 }, // 6 s_fdivt
  { 1, 2, 3, 0, 0 }, // 7 s_fld
  { 1, 17, 18, 0, 0 }, // 8 s_fmul
  { 1, 20, 21, 0, 0 }, // 9 s_fsqrts
  { 1, 21, 22, 0, 0 }, // 10 s_fsqrtt
  { 1, 4, 5, 0, 0 }, // 11 s_fst
  { 1, 22, 23, 0, 0 }, // 12 s_ftoi
  { 1, 11, 12, 0, 0 }, // 13 s_iadd
  { 1, 8, 9, 0, 0 }, // 14 s_icbr
  { 1, 1, 2, 0, 0 }, // 15 s_ild
  { 1, 11, 12, 0, 0 }, // 16 s_ilog
  { 1, 14, 15, 0, 0 }, // 17 s_imisc
  { 1, 13, 14, 0, 0 }, // 18 s_imul
  { 1, 12, 13, 0, 0 }, // 19 s_ishf
  { 1, 3, 4, 0, 0 }, // 20 s_ist
  { 1, 2, 3, 0, 0 }, // 21 s_itof
  { 1, 10, 11, 0, 0 }, // 22 s_jsr
  { 1, 5, 6, 0, 0 }, // 23 s_lda
  { 1, 7, 8, 0, 0 }, // 24 s_mxpr
  { 1, 0, 0, 0, 0 }, // 25 s_pseudo
  { 1, 6, 7, 0, 0 }, // 26 s_rpcc
  { 1, 6, 7, 0, 0 }, // 27 s_rx
  { 1, 9, 10, 0, 0 }, // 28 s_ubr
  { 1, ~0U, ~0U, ~0U, ~0U } // end marker
};

// Sorted (by key) array of itineraries for CPU subtype.
llvm::SubtargetInfoKV AlphaProcItinKV[] = {
  { "ev6", (void *)&Alpha21264Itineraries },
  { "ev67", (void *)&Alpha21264Itineraries },
  { "generic", (void *)&Alpha21264Itineraries }
};

static inline void InitAlphaMCSubtargetInfo(MCSubtargetInfo *II, StringRef TT, StringRef CPU, StringRef FS) {
  II->InitMCSubtargetInfo(TT, CPU, FS, AlphaFeatureKV, AlphaSubTypeKV, AlphaProcItinKV, AlphaStages, AlphaOperandCycles, AlphaForwardingPathes, 1, 3);
}

} // End llvm namespace 
#endif // GET_SUBTARGETINFO_MC_DESC


#ifdef GET_SUBTARGETINFO_TARGET_DESC
#undef GET_SUBTARGETINFO_TARGET_DESC
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"
// ParseSubtargetFeatures - Parses features string setting specified
// subtarget options.
void llvm::AlphaSubtarget::ParseSubtargetFeatures(StringRef CPU, StringRef FS) {
  DEBUG(dbgs() << "\nFeatures:" << FS);
  DEBUG(dbgs() << "\nCPU:" << CPU);
  uint64_t Bits = ReInitMCSubtargetInfo(CPU, FS);
  if ((Bits & Alpha::FeatureCIX) != 0) HasCT = true;
}
#endif // GET_SUBTARGETINFO_TARGET_DESC


#ifdef GET_SUBTARGETINFO_HEADER
#undef GET_SUBTARGETINFO_HEADER
namespace llvm {
struct AlphaGenSubtargetInfo : public TargetSubtargetInfo {
  explicit AlphaGenSubtargetInfo(StringRef TT, StringRef CPU, StringRef FS);
};
} // End llvm namespace 
#endif // GET_SUBTARGETINFO_HEADER


#ifdef GET_SUBTARGETINFO_CTOR
#undef GET_SUBTARGETINFO_CTOR
namespace llvm {
extern llvm::SubtargetFeatureKV AlphaFeatureKV[];
extern llvm::SubtargetFeatureKV AlphaSubTypeKV[];
extern llvm::SubtargetInfoKV AlphaProcItinKV[];
extern llvm::InstrStage AlphaStages[];
extern unsigned AlphaOperandCycles[];
extern unsigned AlphaForwardingPathes[];
AlphaGenSubtargetInfo::AlphaGenSubtargetInfo(StringRef TT, StringRef CPU, StringRef FS)
  : TargetSubtargetInfo() {
  InitMCSubtargetInfo(TT, CPU, FS, AlphaFeatureKV, AlphaSubTypeKV, AlphaProcItinKV, AlphaStages, AlphaOperandCycles, AlphaForwardingPathes, 1, 3);
}

} // End llvm namespace 
#endif // GET_SUBTARGETINFO_CTOR

