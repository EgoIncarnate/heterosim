//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void X86IntelInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    11U,	// AAA
    134217743U,	// AAD8i8
    134217748U,	// AAM8i8
    25U,	// AAS
    29U,	// ABS_F
    0U,	// ABS_Fp32
    0U,	// ABS_Fp64
    0U,	// ABS_Fp80
    134217762U,	// ADC16i16
    272629804U,	// ADC16mi
    272629804U,	// ADC16mi8
    272629804U,	// ADC16mr
    411041836U,	// ADC16ri
    411041836U,	// ADC16ri8
    415236140U,	// ADC16rm
    411041836U,	// ADC16rr
    138543148U,	// ADC16rr_REV
    134217777U,	// ADC32i32
    541065260U,	// ADC32mi
    541065260U,	// ADC32mi8
    541065260U,	// ADC32mr
    411041836U,	// ADC32ri
    411041836U,	// ADC32ri8
    419430444U,	// ADC32rm
    411041836U,	// ADC32rr
    138543148U,	// ADC32rr_REV
    134217788U,	// ADC64i32
    675282988U,	// ADC64mi32
    675282988U,	// ADC64mi8
    675282988U,	// ADC64mr
    411041836U,	// ADC64ri32
    411041836U,	// ADC64ri8
    423624748U,	// ADC64rm
    411041836U,	// ADC64rr
    138543148U,	// ADC64rr_REV
    134217799U,	// ADC8i8
    809500716U,	// ADC8mi
    809500716U,	// ADC8mr
    411041836U,	// ADC8ri
    427819052U,	// ADC8rm
    411041836U,	// ADC8rr
    138543148U,	// ADC8rr_REV
    134217809U,	// ADD16i16
    272629851U,	// ADD16mi
    272629851U,	// ADD16mi8
    272629851U,	// ADD16mr
    411041883U,	// ADD16ri
    411041883U,	// ADD16ri8
    0U,	// ADD16ri8_DB
    0U,	// ADD16ri_DB
    415236187U,	// ADD16rm
    411041883U,	// ADD16rr
    0U,	// ADD16rr_DB
    138543195U,	// ADD16rr_REV
    134217824U,	// ADD32i32
    541065307U,	// ADD32mi
    541065307U,	// ADD32mi8
    541065307U,	// ADD32mr
    411041883U,	// ADD32ri
    411041883U,	// ADD32ri8
    0U,	// ADD32ri8_DB
    0U,	// ADD32ri_DB
    419430491U,	// ADD32rm
    411041883U,	// ADD32rr
    0U,	// ADD32rr_DB
    138543195U,	// ADD32rr_REV
    134217835U,	// ADD64i32
    675283035U,	// ADD64mi32
    675283035U,	// ADD64mi8
    675283035U,	// ADD64mr
    411041883U,	// ADD64ri32
    0U,	// ADD64ri32_DB
    411041883U,	// ADD64ri8
    0U,	// ADD64ri8_DB
    423624795U,	// ADD64rm
    411041883U,	// ADD64rr
    0U,	// ADD64rr_DB
    138543195U,	// ADD64rr_REV
    134217846U,	// ADD8i8
    809500763U,	// ADD8mi
    809500763U,	// ADD8mr
    411041883U,	// ADD8ri
    427819099U,	// ADD8rm
    411041883U,	// ADD8rr
    138543195U,	// ADD8rr_REV
    138674304U,	// ADDPDrm
    138543232U,	// ADDPDrr
    138674311U,	// ADDPSrm
    138543239U,	// ADDPSrr
    138805390U,	// ADDSDrm
    138805390U,	// ADDSDrm_Int
    138543246U,	// ADDSDrr
    138543246U,	// ADDSDrr_Int
    138936469U,	// ADDSSrm
    138936469U,	// ADDSSrm_Int
    138543253U,	// ADDSSrr
    138543253U,	// ADDSSrr_Int
    138674332U,	// ADDSUBPDrm
    138543260U,	// ADDSUBPDrr
    138674342U,	// ADDSUBPSrm
    138543270U,	// ADDSUBPSrr
    939524272U,	// ADD_F32m
    1073742000U,	// ADD_F64m
    268435638U,	// ADD_FI16m
    536871094U,	// ADD_FI32m
    134217917U,	// ADD_FPrST0
    134217904U,	// ADD_FST0r
    0U,	// ADD_Fp32
    0U,	// ADD_Fp32m
    0U,	// ADD_Fp64
    0U,	// ADD_Fp64m
    0U,	// ADD_Fp64m32
    0U,	// ADD_Fp80
    0U,	// ADD_Fp80m32
    0U,	// ADD_Fp80m64
    0U,	// ADD_FpI16m32
    0U,	// ADD_FpI16m64
    0U,	// ADD_FpI16m80
    0U,	// ADD_FpI32m32
    0U,	// ADD_FpI32m64
    0U,	// ADD_FpI32m80
    163578032U,	// ADD_FrST0
    196U,	// ADJCALLSTACKDOWN32
    196U,	// ADJCALLSTACKDOWN64
    214U,	// ADJCALLSTACKUP32
    214U,	// ADJCALLSTACKUP64
    139067622U,	// AESDECLASTrm
    138543334U,	// AESDECLASTrr
    139067634U,	// AESDECrm
    138543346U,	// AESDECrr
    139067642U,	// AESENCLASTrm
    138543354U,	// AESENCLASTrr
    139067654U,	// AESENCrm
    138543366U,	// AESENCrr
    139198734U,	// AESIMCrm
    139329806U,	// AESIMCrr
    139215126U,	// AESKEYGENASSIST128rm
    139346198U,	// AESKEYGENASSIST128rr
    134218023U,	// AND16i16
    272630065U,	// AND16mi
    272630065U,	// AND16mi8
    272630065U,	// AND16mr
    411042097U,	// AND16ri
    411042097U,	// AND16ri8
    415236401U,	// AND16rm
    411042097U,	// AND16rr
    138543409U,	// AND16rr_REV
    134218038U,	// AND32i32
    541065521U,	// AND32mi
    541065521U,	// AND32mi8
    541065521U,	// AND32mr
    411042097U,	// AND32ri
    411042097U,	// AND32ri8
    419430705U,	// AND32rm
    411042097U,	// AND32rr
    138543409U,	// AND32rr_REV
    134218049U,	// AND64i32
    675283249U,	// AND64mi32
    675283249U,	// AND64mi8
    675283249U,	// AND64mr
    411042097U,	// AND64ri32
    411042097U,	// AND64ri8
    423625009U,	// AND64rm
    411042097U,	// AND64rr
    138543409U,	// AND64rr_REV
    134218060U,	// AND8i8
    809500977U,	// AND8mi
    809500977U,	// AND8mr
    411042097U,	// AND8ri
    427819313U,	// AND8rm
    411042097U,	// AND8rr
    138543409U,	// AND8rr_REV
    138674518U,	// ANDNPDrm
    138543446U,	// ANDNPDrr
    138674526U,	// ANDNPSrm
    138543454U,	// ANDNPSrr
    138674534U,	// ANDPDrm
    138543462U,	// ANDPDrr
    138674541U,	// ANDPSrm
    138543469U,	// ANDPSrr
    1207959924U,	// ARPL16mr
    436207988U,	// ARPL16rr
    378U,	// ATOMADD6432
    399U,	// ATOMAND16
    418U,	// ATOMAND32
    437U,	// ATOMAND64
    456U,	// ATOMAND6432
    477U,	// ATOMAND8
    495U,	// ATOMMAX16
    514U,	// ATOMMAX32
    533U,	// ATOMMAX64
    552U,	// ATOMMIN16
    571U,	// ATOMMIN32
    590U,	// ATOMMIN64
    609U,	// ATOMNAND16
    629U,	// ATOMNAND32
    649U,	// ATOMNAND64
    669U,	// ATOMNAND6432
    691U,	// ATOMNAND8
    710U,	// ATOMOR16
    728U,	// ATOMOR32
    746U,	// ATOMOR64
    764U,	// ATOMOR6432
    784U,	// ATOMOR8
    801U,	// ATOMSUB6432
    822U,	// ATOMSWAP6432
    844U,	// ATOMUMAX16
    864U,	// ATOMUMAX32
    884U,	// ATOMUMAX64
    904U,	// ATOMUMIN16
    924U,	// ATOMUMIN32
    944U,	// ATOMUMIN64
    964U,	// ATOMXOR16
    983U,	// ATOMXOR32
    1002U,	// ATOMXOR64
    1021U,	// ATOMXOR6432
    1042U,	// ATOMXOR8
    0U,	// AVX_SET0PD
    0U,	// AVX_SET0PDY
    0U,	// AVX_SET0PI
    0U,	// AVX_SET0PS
    0U,	// AVX_SET0PSY
    0U,	// AVX_SETALLONES
    139084836U,	// BLENDPDrmi
    138560548U,	// BLENDPDrri
    139084845U,	// BLENDPSrmi
    138560557U,	// BLENDPSrri
    139068470U,	// BLENDVPDrm0
    138544182U,	// BLENDVPDrr0
    139068480U,	// BLENDVPSrm0
    138544192U,	// BLENDVPSrr0
    139461706U,	// BOUNDS16rm
    139592778U,	// BOUNDS32rm
    139461713U,	// BSF16rm
    139330641U,	// BSF16rr
    139592785U,	// BSF32rm
    139330641U,	// BSF32rr
    139723857U,	// BSF64rm
    139330641U,	// BSF64rr
    139461718U,	// BSR16rm
    139330646U,	// BSR16rr
    139592790U,	// BSR32rm
    139330646U,	// BSR32rr
    139723862U,	// BSR64rm
    139330646U,	// BSR64rr
    134218843U,	// BSWAP32r
    134218843U,	// BSWAP64r
    272630882U,	// BT16mi8
    272630882U,	// BT16mr
    139330658U,	// BT16ri8
    139330658U,	// BT16rr
    541066338U,	// BT32mi8
    541066338U,	// BT32mr
    139330658U,	// BT32ri8
    139330658U,	// BT32rr
    675284066U,	// BT64mi8
    675284066U,	// BT64mr
    139330658U,	// BT64ri8
    139330658U,	// BT64rr
    272630886U,	// BTC16mi8
    272630886U,	// BTC16mr
    139330662U,	// BTC16ri8
    139330662U,	// BTC16rr
    541066342U,	// BTC32mi8
    541066342U,	// BTC32mr
    139330662U,	// BTC32ri8
    139330662U,	// BTC32rr
    675284070U,	// BTC64mi8
    675284070U,	// BTC64mr
    139330662U,	// BTC64ri8
    139330662U,	// BTC64rr
    272630891U,	// BTR16mi8
    272630891U,	// BTR16mr
    139330667U,	// BTR16ri8
    139330667U,	// BTR16rr
    541066347U,	// BTR32mi8
    541066347U,	// BTR32mr
    139330667U,	// BTR32ri8
    139330667U,	// BTR32rr
    675284075U,	// BTR64mi8
    675284075U,	// BTR64mr
    139330667U,	// BTR64ri8
    139330667U,	// BTR64rr
    272630896U,	// BTS16mi8
    272630896U,	// BTS16mr
    139330672U,	// BTS16ri8
    139330672U,	// BTS16rr
    541066352U,	// BTS32mi8
    541066352U,	// BTS32mr
    139330672U,	// BTS32ri8
    139330672U,	// BTS32rr
    675284080U,	// BTS64mi8
    675284080U,	// BTS64mr
    139330672U,	// BTS64ri8
    139330672U,	// BTS64rr
    536872053U,	// CALL32m
    134218869U,	// CALL32r
    671089781U,	// CALL64m
    1342178421U,	// CALL64pcrel32
    134218869U,	// CALL64r
    1342178427U,	// CALLpcrel16
    1342178421U,	// CALLpcrel32
    1154U,	// CBW
    1158U,	// CDQ
    1162U,	// CDQE
    1167U,	// CHS_F
    0U,	// CHS_Fp32
    0U,	// CHS_Fp64
    0U,	// CHS_Fp80
    1172U,	// CLC
    1176U,	// CLD
    805307548U,	// CLFLUSH
    1189U,	// CLI
    1193U,	// CLTS
    1198U,	// CMC
    139855026U,	// CMOVA16rm
    138544306U,	// CMOVA16rr
    139986098U,	// CMOVA32rm
    138544306U,	// CMOVA32rr
    140117170U,	// CMOVA64rm
    138544306U,	// CMOVA64rr
    139855033U,	// CMOVAE16rm
    138544313U,	// CMOVAE16rr
    139986105U,	// CMOVAE32rm
    138544313U,	// CMOVAE32rr
    140117177U,	// CMOVAE64rm
    138544313U,	// CMOVAE64rr
    139855041U,	// CMOVB16rm
    138544321U,	// CMOVB16rr
    139986113U,	// CMOVB32rm
    138544321U,	// CMOVB32rr
    140117185U,	// CMOVB64rm
    138544321U,	// CMOVB64rr
    139855048U,	// CMOVBE16rm
    138544328U,	// CMOVBE16rr
    139986120U,	// CMOVBE32rm
    138544328U,	// CMOVBE32rr
    140117192U,	// CMOVBE64rm
    138544328U,	// CMOVBE64rr
    134218960U,	// CMOVBE_F
    0U,	// CMOVBE_Fp32
    0U,	// CMOVBE_Fp64
    0U,	// CMOVBE_Fp80
    134218977U,	// CMOVB_F
    0U,	// CMOVB_Fp32
    0U,	// CMOVB_Fp64
    0U,	// CMOVB_Fp80
    139855089U,	// CMOVE16rm
    138544369U,	// CMOVE16rr
    139986161U,	// CMOVE32rm
    138544369U,	// CMOVE32rr
    140117233U,	// CMOVE64rm
    138544369U,	// CMOVE64rr
    134219000U,	// CMOVE_F
    0U,	// CMOVE_Fp32
    0U,	// CMOVE_Fp64
    0U,	// CMOVE_Fp80
    139855112U,	// CMOVG16rm
    138544392U,	// CMOVG16rr
    139986184U,	// CMOVG32rm
    138544392U,	// CMOVG32rr
    140117256U,	// CMOVG64rm
    138544392U,	// CMOVG64rr
    139855119U,	// CMOVGE16rm
    138544399U,	// CMOVGE16rr
    139986191U,	// CMOVGE32rm
    138544399U,	// CMOVGE32rr
    140117263U,	// CMOVGE64rm
    138544399U,	// CMOVGE64rr
    139855127U,	// CMOVL16rm
    138544407U,	// CMOVL16rr
    139986199U,	// CMOVL32rm
    138544407U,	// CMOVL32rr
    140117271U,	// CMOVL64rm
    138544407U,	// CMOVL64rr
    139855134U,	// CMOVLE16rm
    138544414U,	// CMOVLE16rr
    139986206U,	// CMOVLE32rm
    138544414U,	// CMOVLE32rr
    140117278U,	// CMOVLE64rm
    138544414U,	// CMOVLE64rr
    134219046U,	// CMOVNBE_F
    0U,	// CMOVNBE_Fp32
    0U,	// CMOVNBE_Fp64
    0U,	// CMOVNBE_Fp80
    134219064U,	// CMOVNB_F
    0U,	// CMOVNB_Fp32
    0U,	// CMOVNB_Fp64
    0U,	// CMOVNB_Fp80
    139855177U,	// CMOVNE16rm
    138544457U,	// CMOVNE16rr
    139986249U,	// CMOVNE32rm
    138544457U,	// CMOVNE32rr
    140117321U,	// CMOVNE64rm
    138544457U,	// CMOVNE64rr
    134219089U,	// CMOVNE_F
    0U,	// CMOVNE_Fp32
    0U,	// CMOVNE_Fp64
    0U,	// CMOVNE_Fp80
    139855202U,	// CMOVNO16rm
    138544482U,	// CMOVNO16rr
    139986274U,	// CMOVNO32rm
    138544482U,	// CMOVNO32rr
    140117346U,	// CMOVNO64rm
    138544482U,	// CMOVNO64rr
    139855210U,	// CMOVNP16rm
    138544490U,	// CMOVNP16rr
    139986282U,	// CMOVNP32rm
    138544490U,	// CMOVNP32rr
    140117354U,	// CMOVNP64rm
    138544490U,	// CMOVNP64rr
    134219122U,	// CMOVNP_F
    0U,	// CMOVNP_Fp32
    0U,	// CMOVNP_Fp64
    0U,	// CMOVNP_Fp80
    139855235U,	// CMOVNS16rm
    138544515U,	// CMOVNS16rr
    139986307U,	// CMOVNS32rm
    138544515U,	// CMOVNS32rr
    140117379U,	// CMOVNS64rm
    138544515U,	// CMOVNS64rr
    139855243U,	// CMOVO16rm
    138544523U,	// CMOVO16rr
    139986315U,	// CMOVO32rm
    138544523U,	// CMOVO32rr
    140117387U,	// CMOVO64rm
    138544523U,	// CMOVO64rr
    139855250U,	// CMOVP16rm
    138544530U,	// CMOVP16rr
    139986322U,	// CMOVP32rm
    138544530U,	// CMOVP32rr
    140117394U,	// CMOVP64rm
    138544530U,	// CMOVP64rr
    134219161U,	// CMOVP_F
    0U,	// CMOVP_Fp32
    0U,	// CMOVP_Fp64
    0U,	// CMOVP_Fp80
    139855274U,	// CMOVS16rm
    138544554U,	// CMOVS16rr
    139986346U,	// CMOVS32rm
    138544554U,	// CMOVS32rr
    140117418U,	// CMOVS64rm
    138544554U,	// CMOVS64rr
    1457U,	// CMOV_FR32
    1476U,	// CMOV_FR64
    1495U,	// CMOV_GR16
    1515U,	// CMOV_GR32
    1535U,	// CMOV_GR8
    1553U,	// CMOV_RFP32
    1573U,	// CMOV_RFP64
    1593U,	// CMOV_RFP80
    1613U,	// CMOV_V2F64
    1633U,	// CMOV_V2I64
    1653U,	// CMOV_V4F32
    1673U,	// CMOV_V4F64
    1693U,	// CMOV_V4I64
    1713U,	// CMOV_V8F32
    134219461U,	// CMP16i16
    272631503U,	// CMP16mi
    272631503U,	// CMP16mi8
    272631503U,	// CMP16mr
    139331279U,	// CMP16ri
    139331279U,	// CMP16ri8
    139462351U,	// CMP16rm
    139331279U,	// CMP16rr
    138544847U,	// CMP16rr_REV
    134219476U,	// CMP32i32
    541066959U,	// CMP32mi
    541066959U,	// CMP32mi8
    541066959U,	// CMP32mr
    139331279U,	// CMP32ri
    139331279U,	// CMP32ri8
    139593423U,	// CMP32rm
    139331279U,	// CMP32rr
    138544847U,	// CMP32rr_REV
    134219487U,	// CMP64i32
    675284687U,	// CMP64mi32
    675284687U,	// CMP64mi8
    675284687U,	// CMP64mr
    139331279U,	// CMP64ri32
    139331279U,	// CMP64ri8
    139724495U,	// CMP64rm
    139331279U,	// CMP64rr
    138544847U,	// CMP64rr_REV
    134219498U,	// CMP8i8
    809502415U,	// CMP8mi
    809502415U,	// CMP8mr
    139331279U,	// CMP8ri
    140248783U,	// CMP8rm
    139331279U,	// CMP8rr
    138544847U,	// CMP8rr_REV
    1514407668U,	// CMPPDrmi
    138692344U,	// CMPPDrmi_alt
    1648494324U,	// CMPPDrri
    138561272U,	// CMPPDrri_alt
    1518601972U,	// CMPPSrmi
    138692351U,	// CMPPSrmi_alt
    1652688628U,	// CMPPSrri
    138561279U,	// CMPPSrri_alt
    1798U,	// CMPS16
    1798U,	// CMPS32
    1803U,	// CMPS64
    1798U,	// CMPS8
    1522927348U,	// CMPSDrm
    138823441U,	// CMPSDrm_alt
    1656882932U,	// CMPSDrr
    138561297U,	// CMPSDrr_alt
    1527252724U,	// CMPSSrm
    138954520U,	// CMPSSrm_alt
    1661077236U,	// CMPSSrr
    138561304U,	// CMPSSrr_alt
    1744832287U,	// CMPXCHG16B
    272631595U,	// CMPXCHG16rm
    139331371U,	// CMPXCHG16rr
    541067051U,	// CMPXCHG32rm
    139331371U,	// CMPXCHG32rr
    675284779U,	// CMPXCHG64rm
    139331371U,	// CMPXCHG64rr
    671090484U,	// CMPXCHG8B
    809502507U,	// CMPXCHG8rm
    139331371U,	// CMPXCHG8rr
    140379967U,	// COMISDrm
    139331391U,	// COMISDrr
    140379975U,	// COMISSrm
    139331399U,	// COMISSrr
    134219599U,	// COMP_FST0r
    134219606U,	// COM_FIPr
    134219614U,	// COM_FIr
    134219621U,	// COM_FST0r
    1899U,	// COS_F
    0U,	// COS_Fp32
    0U,	// COS_Fp64
    0U,	// COS_Fp80
    1904U,	// CPUID
    1910U,	// CQO
    415238010U,	// CRC32r32m16
    419432314U,	// CRC32r32m32
    427820922U,	// CRC32r32m8
    411043706U,	// CRC32r32r16
    411043706U,	// CRC32r32r32
    411043706U,	// CRC32r32r8
    423626618U,	// CRC32r64m64
    427820922U,	// CRC32r64m8
    411043706U,	// CRC32r64r64
    411043706U,	// CRC32r64r8
    1922U,	// CS_PREFIX
    140380037U,	// CVTDQ2PDrm
    139331461U,	// CVTDQ2PDrr
    139200399U,	// CVTDQ2PSrm
    139331471U,	// CVTDQ2PSrr
    140380057U,	// CVTPD2DQrm
    139331481U,	// CVTPD2DQrr
    140380067U,	// CVTPD2PSrm
    139331491U,	// CVTPD2PSrr
    140380077U,	// CVTPS2DQrm
    139331501U,	// CVTPS2DQrr
    140511159U,	// CVTPS2PDrm
    139331511U,	// CVTPS2PDrr
    140380097U,	// CVTSD2SI64rm
    139331521U,	// CVTSD2SI64rr
    140380097U,	// CVTSD2SIrm
    139331521U,	// CVTSD2SIrr
    140511179U,	// CVTSD2SSrm
    139331531U,	// CVTSD2SSrr
    139724757U,	// CVTSI2SD64rm
    139331541U,	// CVTSI2SD64rr
    139593685U,	// CVTSI2SDrm
    139331541U,	// CVTSI2SDrr
    139724767U,	// CVTSI2SS64rm
    139331551U,	// CVTSI2SS64rr
    139593695U,	// CVTSI2SSrm
    139331551U,	// CVTSI2SSrr
    140642281U,	// CVTSS2SDrm
    139331561U,	// CVTSS2SDrr
    140642291U,	// CVTSS2SI64rm
    139331571U,	// CVTSS2SI64rr
    140642291U,	// CVTSS2SIrm
    139331571U,	// CVTSS2SIrr
    140380157U,	// CVTTPD2DQrm
    139331581U,	// CVTTPD2DQrr
    140380168U,	// CVTTPS2DQrm
    139331592U,	// CVTTPS2DQrr
    140511251U,	// CVTTSD2SI64rm
    139331603U,	// CVTTSD2SI64rr
    140511251U,	// CVTTSD2SIrm
    139331603U,	// CVTTSD2SIrr
    140642334U,	// CVTTSS2SI64rm
    139331614U,	// CVTTSS2SI64rr
    140642334U,	// CVTTSS2SIrm
    139331614U,	// CVTTSS2SIrr
    2089U,	// CWD
    2093U,	// CWDE
    2098U,	// DAA
    2102U,	// DAS
    2106U,	// DATA16_PREFIX
    268437569U,	// DEC16m
    134219841U,	// DEC16r
    536873025U,	// DEC32m
    134219841U,	// DEC32r
    268437569U,	// DEC64_16m
    134219841U,	// DEC64_16r
    536873025U,	// DEC64_32m
    134219841U,	// DEC64_32r
    671090753U,	// DEC64m
    134219841U,	// DEC64r
    805308481U,	// DEC8m
    134219841U,	// DEC8r
    268437574U,	// DIV16m
    134219846U,	// DIV16r
    536873030U,	// DIV32m
    134219846U,	// DIV32r
    671090758U,	// DIV64m
    134219846U,	// DIV64r
    805308486U,	// DIV8m
    134219846U,	// DIV8r
    138676299U,	// DIVPDrm
    138545227U,	// DIVPDrr
    138676306U,	// DIVPSrm
    138545234U,	// DIVPSrr
    939526233U,	// DIVR_F32m
    1073743961U,	// DIVR_F64m
    268437600U,	// DIVR_FI16m
    536873056U,	// DIVR_FI32m
    134219880U,	// DIVR_FPrST0
    134219865U,	// DIVR_FST0r
    0U,	// DIVR_Fp32m
    0U,	// DIVR_Fp64m
    0U,	// DIVR_Fp64m32
    0U,	// DIVR_Fp80m32
    0U,	// DIVR_Fp80m64
    0U,	// DIVR_FpI16m32
    0U,	// DIVR_FpI16m64
    0U,	// DIVR_FpI16m80
    0U,	// DIVR_FpI32m32
    0U,	// DIVR_FpI32m64
    0U,	// DIVR_FpI32m80
    163579993U,	// DIVR_FrST0
    138807408U,	// DIVSDrm
    138807408U,	// DIVSDrm_Int
    138545264U,	// DIVSDrr
    138545264U,	// DIVSDrr_Int
    138938487U,	// DIVSSrm
    138938487U,	// DIVSSrm_Int
    138545271U,	// DIVSSrr
    138545271U,	// DIVSSrr_Int
    939526270U,	// DIV_F32m
    1073743998U,	// DIV_F64m
    268437636U,	// DIV_FI16m
    536873092U,	// DIV_FI32m
    134219915U,	// DIV_FPrST0
    134219902U,	// DIV_FST0r
    0U,	// DIV_Fp32
    0U,	// DIV_Fp32m
    0U,	// DIV_Fp64
    0U,	// DIV_Fp64m
    0U,	// DIV_Fp64m32
    0U,	// DIV_Fp80
    0U,	// DIV_Fp80m32
    0U,	// DIV_Fp80m64
    0U,	// DIV_FpI16m32
    0U,	// DIV_FpI16m64
    0U,	// DIV_FpI16m80
    0U,	// DIV_FpI32m32
    0U,	// DIV_FpI32m64
    0U,	// DIV_FpI32m80
    163580030U,	// DIV_FrST0
    139085970U,	// DPPDrmi
    138561682U,	// DPPDrri
    139085976U,	// DPPSrmi
    138561688U,	// DPPSrri
    2206U,	// DS_PREFIX
    134219937U,	// EH_RETURN
    134219937U,	// EH_RETURN64
    139331768U,	// ENTER
    2239U,	// ES_PREFIX
    943737026U,	// EXTRACTPSmr
    139348162U,	// EXTRACTPSrr
    2253U,	// F2XM1
    139331795U,	// FARCALL16i
    1879050451U,	// FARCALL16m
    139331795U,	// FARCALL32i
    1879050451U,	// FARCALL32m
    1879050451U,	// FARCALL64
    139331802U,	// FARJMP16i
    1879050458U,	// FARJMP16m
    139331802U,	// FARJMP32i
    1879050458U,	// FARJMP32m
    1879050458U,	// FARJMP64
    939526368U,	// FBLDm
    939526374U,	// FBSTPm
    939525989U,	// FCOM32m
    1073743717U,	// FCOM64m
    939525967U,	// FCOMP32m
    1073743695U,	// FCOMP64m
    2285U,	// FCOMPP
    2292U,	// FDECSTP
    2300U,	// FEMMS
    134220034U,	// FFREE
    268437769U,	// FICOM16m
    536873225U,	// FICOM32m
    268437776U,	// FICOMP16m
    536873232U,	// FICOMP32m
    2328U,	// FINCSTP
    268437792U,	// FLDCW16m
    939526439U,	// FLDENVm
    2351U,	// FLDL2E
    2358U,	// FLDL2T
    2365U,	// FLDLG2
    2372U,	// FLDLN2
    2379U,	// FLDPI
    2385U,	// FNCLEX
    2392U,	// FNINIT
    2399U,	// FNOP
    268437860U,	// FNSTCW16m
    2412U,	// FNSTSW8r
    939526519U,	// FNSTSWm
    0U,	// FP32_TO_INT16_IN_MEM
    0U,	// FP32_TO_INT32_IN_MEM
    0U,	// FP32_TO_INT64_IN_MEM
    0U,	// FP64_TO_INT16_IN_MEM
    0U,	// FP64_TO_INT32_IN_MEM
    0U,	// FP64_TO_INT64_IN_MEM
    0U,	// FP80_TO_INT16_IN_MEM
    0U,	// FP80_TO_INT32_IN_MEM
    0U,	// FP80_TO_INT64_IN_MEM
    2431U,	// FPATAN
    2438U,	// FPREM
    2444U,	// FPREM1
    2451U,	// FPTAN
    2457U,	// FRNDINT
    939526561U,	// FRSTORm
    939526569U,	// FSAVEm
    2481U,	// FSCALE
    2488U,	// FSINCOS
    939526592U,	// FSTENVm
    2505U,	// FS_PREFIX
    2508U,	// FXAM
    1879050705U,	// FXRSTOR
    1879050714U,	// FXRSTOR64
    1879050724U,	// FXSAVE
    1879050732U,	// FXSAVE64
    2549U,	// FXTRACT
    2557U,	// FYL2X
    2563U,	// FYL2XP1
    0U,	// FpPOP_RETVAL
    138674518U,	// FsANDNPDrm
    138543446U,	// FsANDNPDrr
    138674526U,	// FsANDNPSrm
    138543454U,	// FsANDNPSrr
    138674534U,	// FsANDPDrm
    138543462U,	// FsANDPDrr
    138674541U,	// FsANDPSrm
    138543469U,	// FsANDPSrr
    0U,	// FsFLD0SD
    0U,	// FsFLD0SS
    140380683U,	// FsMOVAPDrm
    139332107U,	// FsMOVAPDrr
    140380691U,	// FsMOVAPSrm
    139332115U,	// FsMOVAPSrr
    138676763U,	// FsORPDrm
    138545691U,	// FsORPDrr
    138676769U,	// FsORPSrm
    138545697U,	// FsORPSrr
    138676775U,	// FsXORPDrm
    138545703U,	// FsXORPDrr
    138676782U,	// FsXORPSrm
    138545710U,	// FsXORPSrr
    2613U,	// GS_PREFIX
    138676792U,	// HADDPDrm
    138545720U,	// HADDPDrr
    138676800U,	// HADDPSrm
    138545728U,	// HADDPSrr
    2632U,	// HLT
    138676812U,	// HSUBPDrm
    138545740U,	// HSUBPDrr
    138676820U,	// HSUBPSrm
    138545748U,	// HSUBPSrr
    268438108U,	// IDIV16m
    134220380U,	// IDIV16r
    536873564U,	// IDIV32m
    134220380U,	// IDIV32r
    671091292U,	// IDIV64m
    134220380U,	// IDIV64r
    805309020U,	// IDIV8m
    134220380U,	// IDIV8r
    268438114U,	// ILD_F16m
    536873570U,	// ILD_F32m
    671091298U,	// ILD_F64m
    0U,	// ILD_Fp16m32
    0U,	// ILD_Fp16m64
    0U,	// ILD_Fp16m80
    0U,	// ILD_Fp32m32
    0U,	// ILD_Fp32m64
    0U,	// ILD_Fp32m80
    0U,	// ILD_Fp64m32
    0U,	// ILD_Fp64m64
    0U,	// ILD_Fp64m80
    268438120U,	// IMUL16m
    134220392U,	// IMUL16r
    139856488U,	// IMUL16rm
    139479656U,	// IMUL16rmi
    139479656U,	// IMUL16rmi8
    138545768U,	// IMUL16rr
    139348584U,	// IMUL16rri
    139348584U,	// IMUL16rri8
    536873576U,	// IMUL32m
    134220392U,	// IMUL32r
    139987560U,	// IMUL32rm
    139610728U,	// IMUL32rmi
    139610728U,	// IMUL32rmi8
    138545768U,	// IMUL32rr
    139348584U,	// IMUL32rri
    139348584U,	// IMUL32rri8
    671091304U,	// IMUL64m
    134220392U,	// IMUL64r
    140118632U,	// IMUL64rm
    139741800U,	// IMUL64rmi32
    139741800U,	// IMUL64rmi8
    138545768U,	// IMUL64rr
    139348584U,	// IMUL64rri32
    139348584U,	// IMUL64rri8
    805309032U,	// IMUL8m
    134220392U,	// IMUL8r
    2670U,	// IN16
    134220402U,	// IN16ri
    2683U,	// IN16rr
    2670U,	// IN32
    134220423U,	// IN32ri
    2705U,	// IN32rr
    2670U,	// IN8
    134220446U,	// IN8ri
    2727U,	// IN8rr
    268438195U,	// INC16m
    134220467U,	// INC16r
    536873651U,	// INC32m
    134220467U,	// INC32r
    268438195U,	// INC64_16m
    134220467U,	// INC64_16r
    536873651U,	// INC64_32m
    134220467U,	// INC64_32r
    671091379U,	// INC64m
    134220467U,	// INC64r
    805309107U,	// INC8m
    134220467U,	// INC8r
    138955448U,	// INSERTPSrm
    138562232U,	// INSERTPSrr
    134220482U,	// INT
    2759U,	// INT3
    2764U,	// INTO
    2769U,	// INVD
    2774U,	// INVEPT
    805309149U,	// INVLPG
    2789U,	// INVVPID
    2797U,	// IRET16
    2803U,	// IRET32
    2809U,	// IRET64
    268438271U,	// ISTT_FP16m
    536873727U,	// ISTT_FP32m
    671091455U,	// ISTT_FP64m
    0U,	// ISTT_Fp16m32
    0U,	// ISTT_Fp16m64
    0U,	// ISTT_Fp16m80
    0U,	// ISTT_Fp32m32
    0U,	// ISTT_Fp32m64
    0U,	// ISTT_Fp32m80
    0U,	// ISTT_Fp64m32
    0U,	// ISTT_Fp64m64
    0U,	// ISTT_Fp64m80
    268438279U,	// IST_F16m
    536873735U,	// IST_F32m
    268438285U,	// IST_FP16m
    536873741U,	// IST_FP32m
    671091469U,	// IST_FP64m
    0U,	// IST_Fp16m32
    0U,	// IST_Fp16m64
    0U,	// IST_Fp16m80
    0U,	// IST_Fp32m32
    0U,	// IST_Fp32m64
    0U,	// IST_Fp32m80
    0U,	// IST_Fp64m32
    0U,	// IST_Fp64m64
    0U,	// IST_Fp64m80
    1523058420U,	// Int_CMPSDrm
    1656882932U,	// Int_CMPSDrr
    1527252724U,	// Int_CMPSSrm
    1661077236U,	// Int_CMPSSrr
    140379967U,	// Int_COMISDrm
    139331391U,	// Int_COMISDrr
    140379975U,	// Int_COMISSrm
    139331399U,	// Int_COMISSrr
    139724677U,	// Int_CVTDQ2PDrm
    139331461U,	// Int_CVTDQ2PDrr
    139200399U,	// Int_CVTDQ2PSrm
    139331471U,	// Int_CVTDQ2PSrr
    140380057U,	// Int_CVTPD2DQrm
    139331481U,	// Int_CVTPD2DQrr
    140380067U,	// Int_CVTPD2PSrm
    139331491U,	// Int_CVTPD2PSrr
    140380077U,	// Int_CVTPS2DQrm
    139331501U,	// Int_CVTPS2DQrr
    140511159U,	// Int_CVTPS2PDrm
    139331511U,	// Int_CVTPS2PDrr
    138807243U,	// Int_CVTSD2SSrm
    138545099U,	// Int_CVTSD2SSrr
    140117973U,	// Int_CVTSI2SD64rm
    138545109U,	// Int_CVTSI2SD64rr
    139986901U,	// Int_CVTSI2SDrm
    138545109U,	// Int_CVTSI2SDrr
    140117983U,	// Int_CVTSI2SS64rm
    138545119U,	// Int_CVTSI2SS64rr
    139986911U,	// Int_CVTSI2SSrm
    138545119U,	// Int_CVTSI2SSrr
    138938345U,	// Int_CVTSS2SDrm
    138545129U,	// Int_CVTSS2SDrr
    140380179U,	// Int_CVTTSD2SI64rm
    139331603U,	// Int_CVTTSD2SI64rr
    140380179U,	// Int_CVTTSD2SIrm
    139331603U,	// Int_CVTTSD2SIrr
    140642334U,	// Int_CVTTSS2SI64rm
    139331614U,	// Int_CVTTSS2SI64rr
    140642334U,	// Int_CVTTSS2SIrm
    139331614U,	// Int_CVTTSS2SIrr
    2836U,	// Int_MemBarrier
    134220576U,	// Int_MemBarrierNoSSE64
    140380978U,	// Int_UCOMISDrm
    139332402U,	// Int_UCOMISDrr
    140380987U,	// Int_UCOMISSrm
    139332411U,	// Int_UCOMISSrr
    1523469124U,	// Int_VCMPSDrm
    1657686852U,	// Int_VCMPSDrr
    1527663428U,	// Int_VCMPSSrm
    1661881156U,	// Int_VCMPSSrr
    140381001U,	// Int_VCOMISDrm
    139332425U,	// Int_VCOMISDrr
    140381010U,	// Int_VCOMISSrm
    139332434U,	// Int_VCOMISSrr
    139725659U,	// Int_VCVTDQ2PDrm
    139332443U,	// Int_VCVTDQ2PDrr
    139201382U,	// Int_VCVTDQ2PSrm
    139332454U,	// Int_VCVTDQ2PSrr
    140381041U,	// Int_VCVTPD2DQrm
    139332465U,	// Int_VCVTPD2DQrr
    140381052U,	// Int_VCVTPD2PSrm
    139332476U,	// Int_VCVTPD2PSrr
    140381063U,	// Int_VCVTPS2DQrm
    139332487U,	// Int_VCVTPS2DQrr
    140512146U,	// Int_VCVTPS2PDrm
    139332498U,	// Int_VCVTPS2PDrr
    140381085U,	// Int_VCVTSD2SI64rm
    139332509U,	// Int_VCVTSD2SI64rr
    140381085U,	// Int_VCVTSD2SIrm
    139332509U,	// Int_VCVTSD2SIrr
    139348904U,	// Int_VCVTSD2SSrm
    139348904U,	// Int_VCVTSD2SSrr
    139348915U,	// Int_VCVTSI2SD64rm
    139348915U,	// Int_VCVTSI2SD64rr
    139348915U,	// Int_VCVTSI2SDrm
    139348915U,	// Int_VCVTSI2SDrr
    139348926U,	// Int_VCVTSI2SS64rm
    139348926U,	// Int_VCVTSI2SS64rr
    139348926U,	// Int_VCVTSI2SSrm
    139348926U,	// Int_VCVTSI2SSrr
    139348937U,	// Int_VCVTSS2SDrm
    139348937U,	// Int_VCVTSS2SDrr
    140381140U,	// Int_VCVTTPD2DQrm
    139332564U,	// Int_VCVTTPD2DQrr
    140381152U,	// Int_VCVTTPS2DQrm
    139332576U,	// Int_VCVTTPS2DQrr
    140381164U,	// Int_VCVTTSD2SI64rm
    139332588U,	// Int_VCVTTSD2SI64rr
    140381164U,	// Int_VCVTTSD2SIrm
    139332588U,	// Int_VCVTTSD2SIrr
    140643320U,	// Int_VCVTTSS2SI64rm
    139332600U,	// Int_VCVTTSS2SI64rr
    140643320U,	// Int_VCVTTSS2SIrm
    139332600U,	// Int_VCVTTSS2SIrr
    140381188U,	// Int_VUCOMISDrm
    139332612U,	// Int_VUCOMISDrr
    140381198U,	// Int_VUCOMISSrm
    139332622U,	// Int_VUCOMISSrr
    1342180376U,	// JAE_1
    1342180376U,	// JAE_4
    1342180381U,	// JA_1
    1342180381U,	// JA_4
    1342180385U,	// JBE_1
    1342180385U,	// JBE_4
    1342180390U,	// JB_1
    1342180390U,	// JB_4
    1342180394U,	// JCXZ
    1342180400U,	// JECXZ_32
    1342180400U,	// JECXZ_64
    1342180407U,	// JE_1
    1342180407U,	// JE_4
    1342180411U,	// JGE_1
    1342180411U,	// JGE_4
    1342180416U,	// JG_1
    1342180416U,	// JG_4
    1342180420U,	// JLE_1
    1342180420U,	// JLE_4
    1342180425U,	// JL_1
    1342180425U,	// JL_4
    536874061U,	// JMP32m
    134220877U,	// JMP32r
    671091789U,	// JMP64m
    1342180429U,	// JMP64pcrel32
    134220877U,	// JMP64r
    1342180429U,	// JMP_1
    1342180429U,	// JMP_4
    1342180434U,	// JNE_1
    1342180434U,	// JNE_4
    1342180439U,	// JNO_1
    1342180439U,	// JNO_4
    1342180444U,	// JNP_1
    1342180444U,	// JNP_4
    1342180449U,	// JNS_1
    1342180449U,	// JNS_4
    1342180454U,	// JO_1
    1342180454U,	// JO_4
    1342180458U,	// JP_1
    1342180458U,	// JP_4
    1342180462U,	// JRCXZ
    1342180469U,	// JS_1
    1342180469U,	// JS_4
    3193U,	// LAHF
    139463806U,	// LAR16rm
    139332734U,	// LAR16rr
    139463806U,	// LAR32rm
    139332734U,	// LAR32rr
    139463806U,	// LAR64rm
    139332734U,	// LAR64rr
    272632963U,	// LCMPXCHG16
    541068419U,	// LCMPXCHG32
    2013269138U,	// LCMPXCHG64
    809503875U,	// LCMPXCHG8
    671091874U,	// LCMPXCHG8B
    139201715U,	// LDDQUrm
    536874170U,	// LDMXCSR
    140774595U,	// LDS16rm
    140774595U,	// LDS32rm
    3272U,	// LD_F0
    3277U,	// LD_F1
    939527378U,	// LD_F32m
    1073745106U,	// LD_F64m
    2147486930U,	// LD_F80m
    0U,	// LD_Fp032
    0U,	// LD_Fp064
    0U,	// LD_Fp080
    0U,	// LD_Fp132
    0U,	// LD_Fp164
    0U,	// LD_Fp180
    0U,	// LD_Fp32m
    0U,	// LD_Fp32m64
    0U,	// LD_Fp32m80
    0U,	// LD_Fp64m
    0U,	// LD_Fp64m80
    0U,	// LD_Fp80m
    134221010U,	// LD_Frr
    139594967U,	// LEA16r
    139594967U,	// LEA32r
    139594967U,	// LEA64_32r
    139726039U,	// LEA64r
    3292U,	// LEAVE
    3292U,	// LEAVE64
    140774626U,	// LES16rm
    140774626U,	// LES32rm
    3303U,	// LFENCE
    140774638U,	// LFS16rm
    140774638U,	// LFS32rm
    140774638U,	// LFS64rm
    1879051507U,	// LGDT16m
    1879051514U,	// LGDTm
    140774656U,	// LGS16rm
    140774656U,	// LGS32rm
    140774656U,	// LGS64rm
    1879051525U,	// LIDT16m
    1879051532U,	// LIDTm
    268438802U,	// LLDT16m
    134221074U,	// LLDT16r
    268438808U,	// LMSW16m
    134221080U,	// LMSW16r
    272633118U,	// LOCK_ADD16mi
    272633118U,	// LOCK_ADD16mi8
    272633118U,	// LOCK_ADD16mr
    541068574U,	// LOCK_ADD32mi
    541068574U,	// LOCK_ADD32mi8
    541068574U,	// LOCK_ADD32mr
    675286302U,	// LOCK_ADD64mi32
    675286302U,	// LOCK_ADD64mi8
    675286302U,	// LOCK_ADD64mr
    809504030U,	// LOCK_ADD8mi
    809504030U,	// LOCK_ADD8mr
    272633129U,	// LOCK_AND16mi
    272633129U,	// LOCK_AND16mi8
    272633129U,	// LOCK_AND16mr
    541068585U,	// LOCK_AND32mi
    541068585U,	// LOCK_AND32mi8
    541068585U,	// LOCK_AND32mr
    675286313U,	// LOCK_AND64mi32
    675286313U,	// LOCK_AND64mi8
    675286313U,	// LOCK_AND64mr
    809504041U,	// LOCK_AND8mi
    809504041U,	// LOCK_AND8mr
    268438836U,	// LOCK_DEC16m
    536874292U,	// LOCK_DEC32m
    671092020U,	// LOCK_DEC64m
    805309748U,	// LOCK_DEC8m
    268438847U,	// LOCK_INC16m
    536874303U,	// LOCK_INC32m
    671092031U,	// LOCK_INC64m
    805309759U,	// LOCK_INC8m
    272633162U,	// LOCK_OR16mi
    272633162U,	// LOCK_OR16mi8
    272633162U,	// LOCK_OR16mr
    541068618U,	// LOCK_OR32mi
    541068618U,	// LOCK_OR32mi8
    541068618U,	// LOCK_OR32mr
    675286346U,	// LOCK_OR64mi32
    675286346U,	// LOCK_OR64mi8
    675286346U,	// LOCK_OR64mr
    809504074U,	// LOCK_OR8mi
    809504074U,	// LOCK_OR8mr
    3412U,	// LOCK_PREFIX
    272633177U,	// LOCK_SUB16mi
    272633177U,	// LOCK_SUB16mi8
    272633177U,	// LOCK_SUB16mr
    541068633U,	// LOCK_SUB32mi
    541068633U,	// LOCK_SUB32mi8
    541068633U,	// LOCK_SUB32mr
    675286361U,	// LOCK_SUB64mi32
    675286361U,	// LOCK_SUB64mi8
    675286361U,	// LOCK_SUB64mr
    809504089U,	// LOCK_SUB8mi
    809504089U,	// LOCK_SUB8mr
    272633188U,	// LOCK_XOR16mi
    272633188U,	// LOCK_XOR16mi8
    272633188U,	// LOCK_XOR16mr
    541068644U,	// LOCK_XOR32mi
    541068644U,	// LOCK_XOR32mi8
    541068644U,	// LOCK_XOR32mr
    675286372U,	// LOCK_XOR64mi32
    675286372U,	// LOCK_XOR64mi8
    675286372U,	// LOCK_XOR64mr
    809504100U,	// LOCK_XOR8mi
    809504100U,	// LOCK_XOR8mr
    3439U,	// LODSB
    3445U,	// LODSD
    3451U,	// LODSQ
    3457U,	// LODSW
    1342180743U,	// LOOP
    1342180749U,	// LOOPE
    1342180756U,	// LOOPNE
    134221212U,	// LRETI
    134221218U,	// LRETIW
    3497U,	// LRETL
    3503U,	// LRETQ
    139464117U,	// LSL16rm
    139333045U,	// LSL16rr
    139595189U,	// LSL32rm
    139333045U,	// LSL32rr
    139726261U,	// LSL64rm
    139333045U,	// LSL64rr
    140774842U,	// LSS16rm
    140774842U,	// LSS32rm
    140774842U,	// LSS64rm
    3519U,	// LTRm
    3519U,	// LTRr
    2281704900U,	// LXADD16
    2415922628U,	// LXADD32
    423628228U,	// LXADD64
    2550140356U,	// LXADD8
    139333072U,	// MASKMOVDQU
    139333072U,	// MASKMOVDQU64
    138677724U,	// MAXPDrm
    138677724U,	// MAXPDrm_Int
    138546652U,	// MAXPDrr
    138546652U,	// MAXPDrr_Int
    138677731U,	// MAXPSrm
    138677731U,	// MAXPSrm_Int
    138546659U,	// MAXPSrr
    138546659U,	// MAXPSrr_Int
    138808810U,	// MAXSDrm
    138808810U,	// MAXSDrm_Int
    138546666U,	// MAXSDrr
    138546666U,	// MAXSDrr_Int
    138939889U,	// MAXSSrm
    138939889U,	// MAXSSrm_Int
    138546673U,	// MAXSSrr
    138546673U,	// MAXSSrr_Int
    3576U,	// MFENCE
    138677759U,	// MINPDrm
    138677759U,	// MINPDrm_Int
    138546687U,	// MINPDrr
    138546687U,	// MINPDrr_Int
    138677766U,	// MINPSrm
    138677766U,	// MINPSrm_Int
    138546694U,	// MINPSrr
    138546694U,	// MINPSrr_Int
    138808845U,	// MINSDrm
    138808845U,	// MINSDrm_Int
    138546701U,	// MINSDrr
    138546701U,	// MINSDrr_Int
    138939924U,	// MINSSrm
    138939924U,	// MINSSrm_Int
    138546708U,	// MINSSrr
    138546708U,	// MINSSrr_Int
    140381723U,	// MMX_CVTPD2PIirm
    139333147U,	// MMX_CVTPD2PIirr
    139726373U,	// MMX_CVTPI2PDirm
    139333157U,	// MMX_CVTPI2PDirr
    140119599U,	// MMX_CVTPI2PSirm
    138546735U,	// MMX_CVTPI2PSirr
    140512825U,	// MMX_CVTPS2PIirm
    139333177U,	// MMX_CVTPS2PIirr
    140381763U,	// MMX_CVTTPD2PIirm
    139333187U,	// MMX_CVTTPD2PIirr
    140512846U,	// MMX_CVTTPS2PIirm
    139333198U,	// MMX_CVTTPS2PIirr
    3673U,	// MMX_EMMS
    139333214U,	// MMX_MASKMOVQ
    139333214U,	// MMX_MASKMOVQ64
    139333224U,	// MMX_MOVD64from64rr
    139333224U,	// MMX_MOVD64grr
    541068904U,	// MMX_MOVD64mr
    139595368U,	// MMX_MOVD64rm
    139333224U,	// MMX_MOVD64rr
    139333224U,	// MMX_MOVD64rrv164
    139333224U,	// MMX_MOVD64to64rr
    139333230U,	// MMX_MOVDQ2Qrr
    139333230U,	// MMX_MOVFR642Qrr
    675286647U,	// MMX_MOVNTQmr
    139333247U,	// MMX_MOVQ2DQrr
    139333247U,	// MMX_MOVQ2FR64rr
    675286664U,	// MMX_MOVQ64mr
    139726472U,	// MMX_MOVQ64rm
    139333256U,	// MMX_MOVQ64rr
    139595368U,	// MMX_MOVZDI2PDIrm
    139333224U,	// MMX_MOVZDI2PDIrr
    139726478U,	// MMX_PABSBrm64
    139333262U,	// MMX_PABSBrr64
    139726485U,	// MMX_PABSDrm64
    139333269U,	// MMX_PABSDrr64
    139726492U,	// MMX_PABSWrm64
    139333276U,	// MMX_PABSWrr64
    140119715U,	// MMX_PACKSSDWirm
    138546851U,	// MMX_PACKSSDWirr
    140119725U,	// MMX_PACKSSWBirm
    138546861U,	// MMX_PACKSSWBirr
    140119735U,	// MMX_PACKUSWBirm
    138546871U,	// MMX_PACKUSWBirr
    140119745U,	// MMX_PADDBirm
    138546881U,	// MMX_PADDBirr
    140119752U,	// MMX_PADDDirm
    138546888U,	// MMX_PADDDirr
    140119759U,	// MMX_PADDQirm
    138546895U,	// MMX_PADDQirr
    140119766U,	// MMX_PADDSBirm
    138546902U,	// MMX_PADDSBirr
    140119774U,	// MMX_PADDSWirm
    138546910U,	// MMX_PADDSWirr
    140119782U,	// MMX_PADDUSBirm
    138546918U,	// MMX_PADDUSBirr
    140119791U,	// MMX_PADDUSWirm
    138546927U,	// MMX_PADDUSWirr
    140119800U,	// MMX_PADDWirm
    138546936U,	// MMX_PADDWirr
    140136191U,	// MMX_PALIGNR64irm
    138563327U,	// MMX_PALIGNR64irr
    140119816U,	// MMX_PANDNirm
    138546952U,	// MMX_PANDNirr
    140119823U,	// MMX_PANDirm
    138546959U,	// MMX_PANDirr
    140119829U,	// MMX_PAVGBirm
    138546965U,	// MMX_PAVGBirr
    140119836U,	// MMX_PAVGWirm
    138546972U,	// MMX_PAVGWirr
    140119843U,	// MMX_PCMPEQBirm
    138546979U,	// MMX_PCMPEQBirr
    140119852U,	// MMX_PCMPEQDirm
    138546988U,	// MMX_PCMPEQDirr
    140119861U,	// MMX_PCMPEQWirm
    138546997U,	// MMX_PCMPEQWirr
    140119870U,	// MMX_PCMPGTBirm
    138547006U,	// MMX_PCMPGTBirr
    140119879U,	// MMX_PCMPGTDirm
    138547015U,	// MMX_PCMPGTDirr
    140119888U,	// MMX_PCMPGTWirm
    138547024U,	// MMX_PCMPGTWirr
    139349849U,	// MMX_PEXTRWirri
    140119905U,	// MMX_PHADDSWrm64
    138547041U,	// MMX_PHADDSWrr64
    140119914U,	// MMX_PHADDWrm64
    138547050U,	// MMX_PHADDWrr64
    140119922U,	// MMX_PHADDrm64
    138547058U,	// MMX_PHADDrr64
    140119930U,	// MMX_PHSUBDrm64
    138547066U,	// MMX_PHSUBDrr64
    140119938U,	// MMX_PHSUBSWrm64
    138547074U,	// MMX_PHSUBSWrr64
    140119947U,	// MMX_PHSUBWrm64
    138547083U,	// MMX_PHSUBWrr64
    139874195U,	// MMX_PINSRWirmi
    138563475U,	// MMX_PINSRWirri
    140119963U,	// MMX_PMADDUBSWrm64
    138547099U,	// MMX_PMADDUBSWrr64
    140119974U,	// MMX_PMADDWDirm
    138547110U,	// MMX_PMADDWDirr
    140119983U,	// MMX_PMAXSWirm
    138547119U,	// MMX_PMAXSWirr
    140119991U,	// MMX_PMAXUBirm
    138547127U,	// MMX_PMAXUBirr
    140119999U,	// MMX_PMINSWirm
    138547135U,	// MMX_PMINSWirr
    140120007U,	// MMX_PMINUBirm
    138547143U,	// MMX_PMINUBirr
    139333583U,	// MMX_PMOVMSKBrr
    140120025U,	// MMX_PMULHRSWrm64
    138547161U,	// MMX_PMULHRSWrr64
    140120035U,	// MMX_PMULHUWirm
    138547171U,	// MMX_PMULHUWirr
    140120044U,	// MMX_PMULHWirm
    138547180U,	// MMX_PMULHWirr
    140120052U,	// MMX_PMULLWirm
    138547188U,	// MMX_PMULLWirr
    140120060U,	// MMX_PMULUDQirm
    138547196U,	// MMX_PMULUDQirr
    140120069U,	// MMX_PORirm
    138547205U,	// MMX_PORirr
    140120074U,	// MMX_PSADBWirm
    138547210U,	// MMX_PSADBWirr
    140120082U,	// MMX_PSHUFBrm64
    138547218U,	// MMX_PSHUFBrr64
    139743258U,	// MMX_PSHUFWmi
    139350042U,	// MMX_PSHUFWri
    140120098U,	// MMX_PSIGNBrm64
    138547234U,	// MMX_PSIGNBrr64
    140120106U,	// MMX_PSIGNDrm64
    138547242U,	// MMX_PSIGNDrr64
    140120114U,	// MMX_PSIGNWrm64
    138547250U,	// MMX_PSIGNWrr64
    138547258U,	// MMX_PSLLDri
    140120122U,	// MMX_PSLLDrm
    138547258U,	// MMX_PSLLDrr
    138547265U,	// MMX_PSLLQri
    140120129U,	// MMX_PSLLQrm
    138547265U,	// MMX_PSLLQrr
    138547272U,	// MMX_PSLLWri
    140120136U,	// MMX_PSLLWrm
    138547272U,	// MMX_PSLLWrr
    138547279U,	// MMX_PSRADri
    140120143U,	// MMX_PSRADrm
    138547279U,	// MMX_PSRADrr
    138547286U,	// MMX_PSRAWri
    140120150U,	// MMX_PSRAWrm
    138547286U,	// MMX_PSRAWrr
    138547293U,	// MMX_PSRLDri
    140120157U,	// MMX_PSRLDrm
    138547293U,	// MMX_PSRLDrr
    138547300U,	// MMX_PSRLQri
    140120164U,	// MMX_PSRLQrm
    138547300U,	// MMX_PSRLQrr
    138547307U,	// MMX_PSRLWri
    140120171U,	// MMX_PSRLWrm
    138547307U,	// MMX_PSRLWrr
    140120178U,	// MMX_PSUBBirm
    138547314U,	// MMX_PSUBBirr
    140120185U,	// MMX_PSUBDirm
    138547321U,	// MMX_PSUBDirr
    140120192U,	// MMX_PSUBQirm
    138547328U,	// MMX_PSUBQirr
    140120199U,	// MMX_PSUBSBirm
    138547335U,	// MMX_PSUBSBirr
    140120207U,	// MMX_PSUBSWirm
    138547343U,	// MMX_PSUBSWirr
    140120215U,	// MMX_PSUBUSBirm
    138547351U,	// MMX_PSUBUSBirr
    140120224U,	// MMX_PSUBUSWirm
    138547360U,	// MMX_PSUBUSWirr
    140120233U,	// MMX_PSUBWirm
    138547369U,	// MMX_PSUBWirr
    140120240U,	// MMX_PUNPCKHBWirm
    138547376U,	// MMX_PUNPCKHBWirr
    140120251U,	// MMX_PUNPCKHDQirm
    138547387U,	// MMX_PUNPCKHDQirr
    140120262U,	// MMX_PUNPCKHWDirm
    138547398U,	// MMX_PUNPCKHWDirr
    140120273U,	// MMX_PUNPCKLBWirm
    138547409U,	// MMX_PUNPCKLBWirr
    140120284U,	// MMX_PUNPCKLDQirm
    138547420U,	// MMX_PUNPCKLDQirr
    140120295U,	// MMX_PUNPCKLWDirm
    138547431U,	// MMX_PUNPCKLWDirr
    140120306U,	// MMX_PXORirm
    138547442U,	// MMX_PXORirr
    0U,	// MONITOR
    4344U,	// MONITORrrr
    4352U,	// MONTMUL
    1396707592U,	// MOV16ao16
    272634120U,	// MOV16mi
    272634120U,	// MOV16mr
    272634120U,	// MOV16ms
    1342181645U,	// MOV16o16a
    0U,	// MOV16r0
    139333896U,	// MOV16ri
    139464968U,	// MOV16rm
    139333896U,	// MOV16rr
    139333896U,	// MOV16rr_REV
    139333896U,	// MOV16rs
    139464968U,	// MOV16sm
    139333896U,	// MOV16sr
    1400901896U,	// MOV32ao32
    139333896U,	// MOV32cr
    139333896U,	// MOV32dr
    541069576U,	// MOV32mi
    541069576U,	// MOV32mr
    541069576U,	// MOV32ms
    1342181655U,	// MOV32o32a
    0U,	// MOV32r0
    139333896U,	// MOV32rc
    139333896U,	// MOV32rd
    139333896U,	// MOV32ri
    139596040U,	// MOV32rm
    139333896U,	// MOV32rr
    139333896U,	// MOV32rr_REV
    139333896U,	// MOV32rs
    139596040U,	// MOV32sm
    139333896U,	// MOV32sr
    139333896U,	// MOV64cr
    139333896U,	// MOV64dr
    675287304U,	// MOV64mi32
    675287304U,	// MOV64mr
    675287304U,	// MOV64ms
    0U,	// MOV64r0
    139333896U,	// MOV64rc
    139333896U,	// MOV64rd
    139333922U,	// MOV64ri
    139333896U,	// MOV64ri32
    0U,	// MOV64ri64i32
    139727112U,	// MOV64rm
    139333896U,	// MOV64rr
    139333896U,	// MOV64rr_REV
    139333896U,	// MOV64rs
    139727112U,	// MOV64sm
    139333896U,	// MOV64sr
    139333256U,	// MOV64toPQIrr
    139726472U,	// MOV64toSDrm
    139333256U,	// MOV64toSDrr
    1405096200U,	// MOV8ao8
    809505032U,	// MOV8mi
    809505032U,	// MOV8mr
    809537800U,	// MOV8mr_NOREX
    1342181674U,	// MOV8o8a
    0U,	// MOV8r0
    139333896U,	// MOV8ri
    140251400U,	// MOV8rm
    140284168U,	// MOV8rm_NOREX
    139333896U,	// MOV8rr
    139366664U,	// MOV8rr_NOREX
    139333896U,	// MOV8rr_REV
    2684357131U,	// MOVAPDmr
    140380683U,	// MOVAPDrm
    139332107U,	// MOVAPDrr
    2684357139U,	// MOVAPSmr
    140380691U,	// MOVAPSrm
    139332115U,	// MOVAPSrr
    140513588U,	// MOVDDUPrm
    139333940U,	// MOVDDUPrr
    139595368U,	// MOVDI2PDIrm
    139333224U,	// MOVDI2PDIrr
    139595368U,	// MOVDI2SSrm
    139333224U,	// MOVDI2SSrr
    1749029181U,	// MOVDQAmr
    139202877U,	// MOVDQArm
    139333949U,	// MOVDQArr
    1749029189U,	// MOVDQUmr
    1749029189U,	// MOVDQUmr_Int
    139202885U,	// MOVDQUrm
    139333957U,	// MOVDQUrr
    138547533U,	// MOVHLPSrr
    1077940566U,	// MOVHPDmr
    138809686U,	// MOVHPDrm
    1077940574U,	// MOVHPSmr
    138809694U,	// MOVHPSrm
    138547558U,	// MOVLHPSrr
    1077940591U,	// MOVLPDmr
    138809711U,	// MOVLPDrm
    1077940599U,	// MOVLPSmr
    138809719U,	// MOVLPSrm
    675286664U,	// MOVLQ128mr
    139334015U,	// MOVMSKPDrr32
    139334015U,	// MOVMSKPDrr32_alt
    139334015U,	// MOVMSKPDrr64
    139334015U,	// MOVMSKPDrr64_alt
    139334025U,	// MOVMSKPSrr32
    139334025U,	// MOVMSKPSrr32_alt
    139334025U,	// MOVMSKPSrr64
    139334025U,	// MOVMSKPSrr64_alt
    139202963U,	// MOVNTDQArm
    2684359069U,	// MOVNTDQ_64mr
    2684359069U,	// MOVNTDQmr
    675287462U,	// MOVNTI_64mr
    541069734U,	// MOVNTImr
    2684359086U,	// MOVNTPDmr
    2684359095U,	// MOVNTPSmr
    0U,	// MOVPC32r
    541068904U,	// MOVPDI2DImr
    139333224U,	// MOVPDI2DIrr
    675286664U,	// MOVPQI2QImr
    139333256U,	// MOVPQIto64rr
    139726472U,	// MOVQI2PQIrm
    139333256U,	// MOVQxrxr
    4544U,	// MOVSB
    4545U,	// MOVSD
    1077940679U,	// MOVSDmr
    140513735U,	// MOVSDrm
    138547655U,	// MOVSDrr
    675286664U,	// MOVSDto64mr
    139333256U,	// MOVSDto64rr
    140382670U,	// MOVSHDUPrm
    139334094U,	// MOVSHDUPrr
    140382680U,	// MOVSLDUPrm
    139334104U,	// MOVSLDUPrr
    4578U,	// MOVSQ
    541068904U,	// MOVSS2DImr
    139333224U,	// MOVSS2DIrr
    943722984U,	// MOVSSmr
    140644840U,	// MOVSSrm
    138547688U,	// MOVSSrr
    4544U,	// MOVSW
    140251631U,	// MOVSX16rm8
    139334127U,	// MOVSX16rr8
    139465199U,	// MOVSX32rm16
    140251631U,	// MOVSX32rm8
    139334127U,	// MOVSX32rr16
    139334127U,	// MOVSX32rr8
    139465199U,	// MOVSX64rm16
    139596278U,	// MOVSX64rm32
    140251631U,	// MOVSX64rm8
    139334127U,	// MOVSX64rr16
    139334134U,	// MOVSX64rr32
    139334127U,	// MOVSX64rr8
    2684359166U,	// MOVUPDmr
    2684359166U,	// MOVUPDmr_Int
    140382718U,	// MOVUPDrm
    139334142U,	// MOVUPDrr
    2684359174U,	// MOVUPSmr
    2684359174U,	// MOVUPSmr_Int
    140382726U,	// MOVUPSrm
    139334150U,	// MOVUPSrr
    139595368U,	// MOVZDI2PDIrm
    139333224U,	// MOVZDI2PDIrr
    139202184U,	// MOVZPQILo2PQIrm
    139333256U,	// MOVZPQILo2PQIrr
    139726472U,	// MOVZQI2PQIrm
    139333256U,	// MOVZQI2PQIrr
    140251662U,	// MOVZX16rm8
    139334158U,	// MOVZX16rr8
    140251662U,	// MOVZX32_NOREXrm8
    139334158U,	// MOVZX32_NOREXrr8
    139465230U,	// MOVZX32rm16
    140251662U,	// MOVZX32rm8
    139334158U,	// MOVZX32rr16
    139334158U,	// MOVZX32rr8
    0U,	// MOVZX64rm16
    139465230U,	// MOVZX64rm16_Q
    0U,	// MOVZX64rm32
    0U,	// MOVZX64rm8
    140251662U,	// MOVZX64rm8_Q
    0U,	// MOVZX64rr16
    139334158U,	// MOVZX64rr16_Q
    0U,	// MOVZX64rr32
    0U,	// MOVZX64rr8
    139334158U,	// MOVZX64rr8_Q
    139088405U,	// MPSADBWrmi
    138564117U,	// MPSADBWrri
    268440094U,	// MUL16m
    134222366U,	// MUL16r
    536875550U,	// MUL32m
    134222366U,	// MUL32r
    671093278U,	// MUL64m
    134222366U,	// MUL64r
    805311006U,	// MUL8m
    134222366U,	// MUL8r
    138678819U,	// MULPDrm
    138547747U,	// MULPDrr
    138678826U,	// MULPSrm
    138547754U,	// MULPSrr
    138809905U,	// MULSDrm
    138809905U,	// MULSDrm_Int
    138547761U,	// MULSDrr
    138547761U,	// MULSDrr_Int
    138940984U,	// MULSSrm
    138940984U,	// MULSSrm_Int
    138547768U,	// MULSSrr
    138547768U,	// MULSSrr_Int
    939528767U,	// MUL_F32m
    1073746495U,	// MUL_F64m
    268440133U,	// MUL_FI16m
    536875589U,	// MUL_FI32m
    134222412U,	// MUL_FPrST0
    134222399U,	// MUL_FST0r
    0U,	// MUL_Fp32
    0U,	// MUL_Fp32m
    0U,	// MUL_Fp64
    0U,	// MUL_Fp64m
    0U,	// MUL_Fp64m32
    0U,	// MUL_Fp80
    0U,	// MUL_Fp80m32
    0U,	// MUL_Fp80m64
    0U,	// MUL_FpI16m32
    0U,	// MUL_FpI16m64
    0U,	// MUL_FpI16m80
    0U,	// MUL_FpI32m32
    0U,	// MUL_FpI32m64
    0U,	// MUL_FpI32m80
    163582527U,	// MUL_FrST0
    0U,	// MWAIT
    4691U,	// MWAITrr
    268440153U,	// NEG16m
    134222425U,	// NEG16r
    536875609U,	// NEG32m
    134222425U,	// NEG32r
    671093337U,	// NEG64m
    134222425U,	// NEG64r
    805311065U,	// NEG8m
    134222425U,	// NEG8r
    4702U,	// NOOP
    536875618U,	// NOOPL
    268440162U,	// NOOPW
    268440167U,	// NOT16m
    134222439U,	// NOT16r
    536875623U,	// NOT32m
    134222439U,	// NOT32r
    671093351U,	// NOT64m
    134222439U,	// NOT64r
    805311079U,	// NOT8m
    134222439U,	// NOT8r
    134222444U,	// OR16i16
    272634485U,	// OR16mi
    272634485U,	// OR16mi8
    272634485U,	// OR16mr
    411046517U,	// OR16ri
    411046517U,	// OR16ri8
    415240821U,	// OR16rm
    411046517U,	// OR16rr
    138547829U,	// OR16rr_REV
    134222457U,	// OR32i32
    541069941U,	// OR32mi
    541069941U,	// OR32mi8
    541069941U,	// OR32mr
    541068618U,	// OR32mrLocked
    411046517U,	// OR32ri
    411046517U,	// OR32ri8
    419435125U,	// OR32rm
    411046517U,	// OR32rr
    138547829U,	// OR32rr_REV
    134222467U,	// OR64i32
    675287669U,	// OR64mi32
    675287669U,	// OR64mi8
    675287669U,	// OR64mr
    411046517U,	// OR64ri32
    411046517U,	// OR64ri8
    423629429U,	// OR64rm
    411046517U,	// OR64rr
    138547829U,	// OR64rr_REV
    134222477U,	// OR8i8
    809505397U,	// OR8mi
    809505397U,	// OR8mr
    411046517U,	// OR8ri
    427823733U,	// OR8rm
    411046517U,	// OR8rr
    138547829U,	// OR8rr_REV
    138676763U,	// ORPDrm
    138545691U,	// ORPDrr
    138676769U,	// ORPSrm
    138545697U,	// ORPSrr
    201331350U,	// OUT16ir
    4763U,	// OUT16rr
    205525654U,	// OUT32ir
    4776U,	// OUT32rr
    209719958U,	// OUT8ir
    4790U,	// OUT8rr
    4803U,	// OUTSB
    4809U,	// OUTSD
    4815U,	// OUTSW
    139202190U,	// PABSBrm128
    139333262U,	// PABSBrr128
    139202197U,	// PABSDrm128
    139333269U,	// PABSDrr128
    139202204U,	// PABSWrm128
    139333276U,	// PABSWrr128
    139071139U,	// PACKSSDWrm
    138546851U,	// PACKSSDWrr
    139071149U,	// PACKSSWBrm
    138546861U,	// PACKSSWBrr
    139072213U,	// PACKUSDWrm
    138547925U,	// PACKUSDWrr
    139071159U,	// PACKUSWBrm
    138546871U,	// PACKUSWBrr
    139071169U,	// PADDBrm
    138546881U,	// PADDBrr
    139071176U,	// PADDDrm
    138546888U,	// PADDDrr
    139071183U,	// PADDQrm
    138546895U,	// PADDQrr
    139071190U,	// PADDSBrm
    138546902U,	// PADDSBrr
    139071198U,	// PADDSWrm
    138546910U,	// PADDSWrr
    139071206U,	// PADDUSBrm
    138546918U,	// PADDUSBrr
    139071215U,	// PADDUSWrm
    138546927U,	// PADDUSWrr
    139071224U,	// PADDWrm
    138546936U,	// PADDWrr
    139087615U,	// PALIGNR128rm
    138563327U,	// PALIGNR128rr
    139071240U,	// PANDNrm
    138546952U,	// PANDNrr
    139071247U,	// PANDrm
    138546959U,	// PANDrr
    4831U,	// PAUSE
    139071253U,	// PAVGBrm
    138546965U,	// PAVGBrr
    140120805U,	// PAVGUSBrm
    138547941U,	// PAVGUSBrr
    139071260U,	// PAVGWrm
    138546972U,	// PAVGWrr
    139072238U,	// PBLENDVBrm0
    138547950U,	// PBLENDVBrr0
    139088632U,	// PBLENDWrmi
    138564344U,	// PBLENDWrri
    139088641U,	// PCLMULQDQrm
    138564353U,	// PCLMULQDQrr
    139071267U,	// PCMPEQBrm
    138546979U,	// PCMPEQBrr
    139071276U,	// PCMPEQDrm
    138546988U,	// PCMPEQDrr
    139072268U,	// PCMPEQQrm
    138547980U,	// PCMPEQQrr
    139071285U,	// PCMPEQWrm
    138546997U,	// PCMPEQWrr
    139219733U,	// PCMPESTRIArm
    139350805U,	// PCMPESTRIArr
    139219733U,	// PCMPESTRICrm
    139350805U,	// PCMPESTRICrr
    139219733U,	// PCMPESTRIOrm
    139350805U,	// PCMPESTRIOrr
    139219733U,	// PCMPESTRISrm
    139350805U,	// PCMPESTRISrr
    139219733U,	// PCMPESTRIZrm
    139350805U,	// PCMPESTRIZrr
    139219733U,	// PCMPESTRIrm
    139350805U,	// PCMPESTRIrr
    0U,	// PCMPESTRM128MEM
    0U,	// PCMPESTRM128REG
    139219744U,	// PCMPESTRM128rm
    139350816U,	// PCMPESTRM128rr
    139071294U,	// PCMPGTBrm
    138547006U,	// PCMPGTBrr
    139071303U,	// PCMPGTDrm
    138547015U,	// PCMPGTDrr
    139072299U,	// PCMPGTQrm
    138548011U,	// PCMPGTQrr
    139071312U,	// PCMPGTWrm
    138547024U,	// PCMPGTWrr
    139219764U,	// PCMPISTRIArm
    139350836U,	// PCMPISTRIArr
    139219764U,	// PCMPISTRICrm
    139350836U,	// PCMPISTRICrr
    139219764U,	// PCMPISTRIOrm
    139350836U,	// PCMPISTRIOrr
    139219764U,	// PCMPISTRISrm
    139350836U,	// PCMPISTRISrr
    139219764U,	// PCMPISTRIZrm
    139350836U,	// PCMPISTRIZrr
    139219764U,	// PCMPISTRIrm
    139350836U,	// PCMPISTRIrr
    0U,	// PCMPISTRM128MEM
    0U,	// PCMPISTRM128REG
    139219775U,	// PCMPISTRM128rm
    139350847U,	// PCMPISTRM128rr
    809521994U,	// PEXTRBmr
    139350858U,	// PEXTRBrr
    541086546U,	// PEXTRDmr
    139350866U,	// PEXTRDrr
    675304282U,	// PEXTRQmr
    139350874U,	// PEXTRQrr
    272650073U,	// PEXTRWmr
    139349849U,	// PEXTRWri
    139727714U,	// PF2IDrm
    139334498U,	// PF2IDrr
    139727721U,	// PF2IWrm
    139334505U,	// PF2IWrr
    140120944U,	// PFACCrm
    138548080U,	// PFACCrr
    140120951U,	// PFADDrm
    138548087U,	// PFADDrr
    140120958U,	// PFCMPEQrm
    138548094U,	// PFCMPEQrr
    140120967U,	// PFCMPGErm
    138548103U,	// PFCMPGErr
    140120976U,	// PFCMPGTrm
    138548112U,	// PFCMPGTrr
    140120985U,	// PFMAXrm
    138548121U,	// PFMAXrr
    140120992U,	// PFMINrm
    138548128U,	// PFMINrr
    140120999U,	// PFMULrm
    138548135U,	// PFMULrr
    140121006U,	// PFNACCrm
    138548142U,	// PFNACCrr
    140121014U,	// PFPNACCrm
    138548150U,	// PFPNACCrr
    140121023U,	// PFRCPIT1rm
    138548159U,	// PFRCPIT1rr
    140121033U,	// PFRCPIT2rm
    138548169U,	// PFRCPIT2rr
    139727827U,	// PFRCPrm
    139334611U,	// PFRCPrr
    140121050U,	// PFRSQIT1rm
    138548186U,	// PFRSQIT1rr
    139727844U,	// PFRSQRTrm
    139334628U,	// PFRSQRTrr
    140121069U,	// PFSUBRrm
    138548205U,	// PFSUBRrr
    140121077U,	// PFSUBrm
    138548213U,	// PFSUBrr
    139071346U,	// PHADDDrm128
    138547058U,	// PHADDDrr128
    139071329U,	// PHADDSWrm128
    138547041U,	// PHADDSWrr128
    139071338U,	// PHADDWrm128
    138547050U,	// PHADDWrr128
    139203580U,	// PHMINPOSUWrm128
    139334652U,	// PHMINPOSUWrr128
    139071354U,	// PHSUBDrm128
    138547066U,	// PHSUBDrr128
    139071362U,	// PHSUBSWrm128
    138547074U,	// PHSUBSWrr128
    139071371U,	// PHSUBWrm128
    138547083U,	// PHSUBWrr128
    139727880U,	// PI2FDrm
    139334664U,	// PI2FDrr
    139727887U,	// PI2FWrm
    139334671U,	// PI2FWrr
    140907542U,	// PINSRBrm
    138564630U,	// PINSRBrr
    140006430U,	// PINSRDrm
    138564638U,	// PINSRDrr
    140137510U,	// PINSRQrm
    138564646U,	// PINSRQrr
    139874195U,	// PINSRWrmi
    138563475U,	// PINSRWrri
    139071387U,	// PMADDUBSWrm128
    138547099U,	// PMADDUBSWrr128
    139071398U,	// PMADDWDrm
    138547110U,	// PMADDWDrr
    139072558U,	// PMAXSBrm
    138548270U,	// PMAXSBrr
    139072566U,	// PMAXSDrm
    138548278U,	// PMAXSDrr
    139071407U,	// PMAXSWrm
    138547119U,	// PMAXSWrr
    139071415U,	// PMAXUBrm
    138547127U,	// PMAXUBrr
    139072574U,	// PMAXUDrm
    138548286U,	// PMAXUDrr
    139072582U,	// PMAXUWrm
    138548294U,	// PMAXUWrr
    139072590U,	// PMINSBrm
    138548302U,	// PMINSBrr
    139072598U,	// PMINSDrm
    138548310U,	// PMINSDrr
    139071423U,	// PMINSWrm
    138547135U,	// PMINSWrr
    139071431U,	// PMINUBrm
    138547143U,	// PMINUBrr
    139072606U,	// PMINUDrm
    138548318U,	// PMINUDrr
    139072614U,	// PMINUWrm
    138548326U,	// PMINUWrr
    139333583U,	// PMOVMSKBrr
    139596910U,	// PMOVSXBDrm
    139334766U,	// PMOVSXBDrr
    139465848U,	// PMOVSXBQrm
    139334776U,	// PMOVSXBQrr
    139728002U,	// PMOVSXBWrm
    139334786U,	// PMOVSXBWrr
    139728012U,	// PMOVSXDQrm
    139334796U,	// PMOVSXDQrr
    139728022U,	// PMOVSXWDrm
    139334806U,	// PMOVSXWDrr
    139596960U,	// PMOVSXWQrm
    139334816U,	// PMOVSXWQrr
    139596970U,	// PMOVZXBDrm
    139334826U,	// PMOVZXBDrr
    139465908U,	// PMOVZXBQrm
    139334836U,	// PMOVZXBQrr
    139728062U,	// PMOVZXBWrm
    139334846U,	// PMOVZXBWrr
    139728072U,	// PMOVZXDQrm
    139334856U,	// PMOVZXDQrr
    139728082U,	// PMOVZXWDrm
    139334866U,	// PMOVZXWDrr
    139597020U,	// PMOVZXWQrm
    139334876U,	// PMOVZXWQrr
    139072742U,	// PMULDQrm
    138548454U,	// PMULDQrr
    139071449U,	// PMULHRSWrm128
    138547161U,	// PMULHRSWrr128
    140121326U,	// PMULHRWrm
    138548462U,	// PMULHRWrr
    139071459U,	// PMULHUWrm
    138547171U,	// PMULHUWrr
    139071468U,	// PMULHWrm
    138547180U,	// PMULHWrr
    139072759U,	// PMULLDrm
    138548471U,	// PMULLDrr
    139071476U,	// PMULLWrm
    138547188U,	// PMULLWrr
    139071484U,	// PMULUDQrm
    138547196U,	// PMULUDQrr
    134223103U,	// POP16r
    268440831U,	// POP16rmm
    134223103U,	// POP16rmr
    134223103U,	// POP32r
    536876287U,	// POP32rmm
    134223103U,	// POP32rmr
    134223103U,	// POP64r
    671094015U,	// POP64rmm
    134223103U,	// POP64rmr
    5380U,	// POPA32
    139465993U,	// POPCNT16rm
    139334921U,	// POPCNT16rr
    139597065U,	// POPCNT32rm
    139334921U,	// POPCNT32rr
    139728137U,	// POPCNT64rm
    139334921U,	// POPCNT64rr
    5393U,	// POPDS16
    5393U,	// POPDS32
    5401U,	// POPES16
    5401U,	// POPES32
    5409U,	// POPF16
    5414U,	// POPF32
    5420U,	// POPF64
    5426U,	// POPFS16
    5426U,	// POPFS32
    5426U,	// POPFS64
    5434U,	// POPGS16
    5434U,	// POPGS32
    5434U,	// POPGS64
    5442U,	// POPSS16
    5442U,	// POPSS32
    139071493U,	// PORrm
    138547205U,	// PORrr
    536876362U,	// PREFETCH
    805311828U,	// PREFETCHNTA
    805311841U,	// PREFETCHT0
    805311853U,	// PREFETCHT1
    805311865U,	// PREFETCHT2
    268440965U,	// PREFETCHW
    139071498U,	// PSADBWrm
    138547210U,	// PSADBWrr
    139071506U,	// PSHUFBrm128
    138547218U,	// PSHUFBrr128
    139220368U,	// PSHUFDmi
    139351440U,	// PSHUFDri
    139220376U,	// PSHUFHWmi
    139351448U,	// PSHUFHWri
    139220385U,	// PSHUFLWmi
    139351457U,	// PSHUFLWri
    139071522U,	// PSIGNBrm128
    138547234U,	// PSIGNBrr128
    139071530U,	// PSIGNDrm128
    138547242U,	// PSIGNDrr128
    139071538U,	// PSIGNWrm128
    138547250U,	// PSIGNWrr128
    138548650U,	// PSLLDQri
    138547258U,	// PSLLDri
    139071546U,	// PSLLDrm
    138547258U,	// PSLLDrr
    138547265U,	// PSLLQri
    139071553U,	// PSLLQrm
    138547265U,	// PSLLQrr
    138547272U,	// PSLLWri
    139071560U,	// PSLLWrm
    138547272U,	// PSLLWrr
    138547279U,	// PSRADri
    139071567U,	// PSRADrm
    138547279U,	// PSRADrr
    138547286U,	// PSRAWri
    139071574U,	// PSRAWrm
    138547286U,	// PSRAWrr
    138548658U,	// PSRLDQri
    138547293U,	// PSRLDri
    139071581U,	// PSRLDrm
    138547293U,	// PSRLDrr
    138547300U,	// PSRLQri
    139071588U,	// PSRLQrm
    138547300U,	// PSRLQrr
    138547307U,	// PSRLWri
    139071595U,	// PSRLWrm
    138547307U,	// PSRLWrr
    139071602U,	// PSUBBrm
    138547314U,	// PSUBBrr
    139071609U,	// PSUBDrm
    138547321U,	// PSUBDrr
    139071616U,	// PSUBQrm
    138547328U,	// PSUBQrr
    139071623U,	// PSUBSBrm
    138547335U,	// PSUBSBrr
    139071631U,	// PSUBSWrm
    138547343U,	// PSUBSWrr
    139071639U,	// PSUBUSBrm
    138547351U,	// PSUBUSBrr
    139071648U,	// PSUBUSWrm
    138547360U,	// PSUBUSWrr
    139071657U,	// PSUBWrm
    138547369U,	// PSUBWrr
    139728314U,	// PSWAPDrm
    139335098U,	// PSWAPDrr
    140383682U,	// PTESTrm
    139335106U,	// PTESTrr
    139071664U,	// PUNPCKHBWrm
    138547376U,	// PUNPCKHBWrr
    139071675U,	// PUNPCKHDQrm
    138547387U,	// PUNPCKHDQrr
    139072970U,	// PUNPCKHQDQrm
    138548682U,	// PUNPCKHQDQrr
    139071686U,	// PUNPCKHWDrm
    138547398U,	// PUNPCKHWDrr
    139071697U,	// PUNPCKLBWrm
    138547409U,	// PUNPCKLBWrr
    139071708U,	// PUNPCKLDQrm
    138547420U,	// PUNPCKLDQrr
    139072982U,	// PUNPCKLQDQrm
    138548694U,	// PUNPCKLQDQrr
    139071719U,	// PUNPCKLWDrm
    138547431U,	// PUNPCKLWDrr
    134223330U,	// PUSH16r
    268441058U,	// PUSH16rmm
    134223330U,	// PUSH16rmr
    134223330U,	// PUSH32r
    536876514U,	// PUSH32rmm
    134223330U,	// PUSH32rmr
    134223330U,	// PUSH64i16
    134223330U,	// PUSH64i32
    134223330U,	// PUSH64i8
    134223330U,	// PUSH64r
    671094242U,	// PUSH64rmm
    134223330U,	// PUSH64rmr
    5608U,	// PUSHA32
    5614U,	// PUSHCS16
    5614U,	// PUSHCS32
    5623U,	// PUSHDS16
    5623U,	// PUSHDS32
    5632U,	// PUSHES16
    5632U,	// PUSHES32
    5641U,	// PUSHF16
    5647U,	// PUSHF32
    5654U,	// PUSHF64
    5661U,	// PUSHFS16
    5661U,	// PUSHFS32
    5661U,	// PUSHFS64
    5670U,	// PUSHGS16
    5670U,	// PUSHGS32
    5670U,	// PUSHGS64
    5679U,	// PUSHSS16
    5679U,	// PUSHSS32
    134223330U,	// PUSHi16
    134223330U,	// PUSHi32
    134223330U,	// PUSHi8
    139071730U,	// PXORrm
    138547442U,	// PXORrr
    268441144U,	// RCL16m1
    348132920U,	// RCL16mCL
    272635448U,	// RCL16mi
    134223416U,	// RCL16r1
    213915192U,	// RCL16rCL
    138548792U,	// RCL16ri
    536876600U,	// RCL32m1
    616568376U,	// RCL32mCL
    541070904U,	// RCL32mi
    134223416U,	// RCL32r1
    213915192U,	// RCL32rCL
    138548792U,	// RCL32ri
    671094328U,	// RCL64m1
    750786104U,	// RCL64mCL
    675288632U,	// RCL64mi
    134223416U,	// RCL64r1
    213915192U,	// RCL64rCL
    138548792U,	// RCL64ri
    805312056U,	// RCL8m1
    885003832U,	// RCL8mCL
    809506360U,	// RCL8mi
    134223416U,	// RCL8r1
    213915192U,	// RCL8rCL
    138548792U,	// RCL8ri
    140383805U,	// RCPPSm
    140383805U,	// RCPPSm_Int
    139335229U,	// RCPPSr
    139335229U,	// RCPPSr_Int
    140645956U,	// RCPSSm
    140645956U,	// RCPSSm_Int
    139335236U,	// RCPSSr
    139335236U,	// RCPSSr_Int
    268441163U,	// RCR16m1
    348132939U,	// RCR16mCL
    272635467U,	// RCR16mi
    134223435U,	// RCR16r1
    213915211U,	// RCR16rCL
    138548811U,	// RCR16ri
    536876619U,	// RCR32m1
    616568395U,	// RCR32mCL
    541070923U,	// RCR32mi
    134223435U,	// RCR32r1
    213915211U,	// RCR32rCL
    138548811U,	// RCR32ri
    671094347U,	// RCR64m1
    750786123U,	// RCR64mCL
    675288651U,	// RCR64mi
    134223435U,	// RCR64r1
    213915211U,	// RCR64rCL
    138548811U,	// RCR64ri
    805312075U,	// RCR8m1
    885003851U,	// RCR8mCL
    809506379U,	// RCR8mi
    134223435U,	// RCR8r1
    213915211U,	// RCR8rCL
    138548811U,	// RCR8ri
    5712U,	// RDMSR
    5718U,	// RDPMC
    5724U,	// RDTSC
    5730U,	// RDTSCP
    5737U,	// REPNE_PREFIX
    5743U,	// REP_MOVSB
    5753U,	// REP_MOVSD
    5763U,	// REP_MOVSQ
    5773U,	// REP_MOVSW
    5783U,	// REP_PREFIX
    5787U,	// REP_STOSB
    5797U,	// REP_STOSD
    5807U,	// REP_STOSQ
    5817U,	// REP_STOSW
    5827U,	// RET
    134223559U,	// RETI
    134223564U,	// RETIW
    5842U,	// REX64_PREFIX
    268441304U,	// ROL16m1
    348133080U,	// ROL16mCL
    272635608U,	// ROL16mi
    134223576U,	// ROL16r1
    213915352U,	// ROL16rCL
    138548952U,	// ROL16ri
    536876760U,	// ROL32m1
    616568536U,	// ROL32mCL
    541071064U,	// ROL32mi
    134223576U,	// ROL32r1
    213915352U,	// ROL32rCL
    138548952U,	// ROL32ri
    671094488U,	// ROL64m1
    754980568U,	// ROL64mCL
    675288792U,	// ROL64mi
    134223576U,	// ROL64r1
    218109656U,	// ROL64rCL
    138548952U,	// ROL64ri
    805312216U,	// ROL8m1
    885003992U,	// ROL8mCL
    809506520U,	// ROL8mi
    134223576U,	// ROL8r1
    213915352U,	// ROL8rCL
    138548952U,	// ROL8ri
    268441309U,	// ROR16m1
    348133085U,	// ROR16mCL
    272635613U,	// ROR16mi
    134223581U,	// ROR16r1
    213915357U,	// ROR16rCL
    138548957U,	// ROR16ri
    536876765U,	// ROR32m1
    616568541U,	// ROR32mCL
    541071069U,	// ROR32mi
    134223581U,	// ROR32r1
    213915357U,	// ROR32rCL
    138548957U,	// ROR32ri
    671094493U,	// ROR64m1
    754980573U,	// ROR64mCL
    675288797U,	// ROR64mi
    134223581U,	// ROR64r1
    218109661U,	// ROR64rCL
    138548957U,	// ROR64ri
    805312221U,	// ROR8m1
    885003997U,	// ROR8mCL
    809506525U,	// ROR8mi
    134223581U,	// ROR8r1
    213915357U,	// ROR8rCL
    138548957U,	// ROR8ri
    141055714U,	// ROUNDPDm
    139351778U,	// ROUNDPDr
    141055723U,	// ROUNDPSm
    139351787U,	// ROUNDPSr
    138827508U,	// ROUNDSDm
    138565364U,	// ROUNDSDr
    138958589U,	// ROUNDSSm
    138565373U,	// ROUNDSSr
    5894U,	// RSM
    140384010U,	// RSQRTPSm
    140384010U,	// RSQRTPSm_Int
    139335434U,	// RSQRTPSr
    139335434U,	// RSQRTPSr_Int
    140646163U,	// RSQRTSSm
    140646163U,	// RSQRTSSm_Int
    139335443U,	// RSQRTSSr
    139335443U,	// RSQRTSSr_Int
    5916U,	// SAHF
    268441377U,	// SAR16m1
    348133153U,	// SAR16mCL
    272635681U,	// SAR16mi
    134223649U,	// SAR16r1
    213915425U,	// SAR16rCL
    138549025U,	// SAR16ri
    536876833U,	// SAR32m1
    616568609U,	// SAR32mCL
    541071137U,	// SAR32mi
    134223649U,	// SAR32r1
    213915425U,	// SAR32rCL
    138549025U,	// SAR32ri
    671094561U,	// SAR64m1
    754980641U,	// SAR64mCL
    675288865U,	// SAR64mi
    134223649U,	// SAR64r1
    218109729U,	// SAR64rCL
    138549025U,	// SAR64ri
    805312289U,	// SAR8m1
    885004065U,	// SAR8mCL
    809506593U,	// SAR8mi
    134223649U,	// SAR8r1
    213915425U,	// SAR8rCL
    138549025U,	// SAR8ri
    134223654U,	// SBB16i16
    272635696U,	// SBB16mi
    272635696U,	// SBB16mi8
    272635696U,	// SBB16mr
    411047728U,	// SBB16ri
    411047728U,	// SBB16ri8
    415242032U,	// SBB16rm
    411047728U,	// SBB16rr
    138549040U,	// SBB16rr_REV
    134223669U,	// SBB32i32
    541071152U,	// SBB32mi
    541071152U,	// SBB32mi8
    541071152U,	// SBB32mr
    411047728U,	// SBB32ri
    411047728U,	// SBB32ri8
    419436336U,	// SBB32rm
    411047728U,	// SBB32rr
    138549040U,	// SBB32rr_REV
    134223680U,	// SBB64i32
    675288880U,	// SBB64mi32
    675288880U,	// SBB64mi8
    675288880U,	// SBB64mr
    411047728U,	// SBB64ri32
    411047728U,	// SBB64ri8
    423630640U,	// SBB64rm
    411047728U,	// SBB64rr
    138549040U,	// SBB64rr_REV
    134223691U,	// SBB8i8
    809506608U,	// SBB8mi
    809506608U,	// SBB8mr
    411047728U,	// SBB8ri
    427824944U,	// SBB8rm
    411047728U,	// SBB8rr
    138549040U,	// SBB8rr_REV
    5973U,	// SCAS16
    5973U,	// SCAS32
    5978U,	// SCAS64
    5973U,	// SCAS8
    805312352U,	// SETAEm
    134223712U,	// SETAEr
    805312359U,	// SETAm
    134223719U,	// SETAr
    805312365U,	// SETBEm
    134223725U,	// SETBEr
    0U,	// SETB_C16r
    0U,	// SETB_C32r
    0U,	// SETB_C64r
    0U,	// SETB_C8r
    805312372U,	// SETBm
    134223732U,	// SETBr
    805312378U,	// SETEm
    134223738U,	// SETEr
    805312384U,	// SETGEm
    134223744U,	// SETGEr
    805312391U,	// SETGm
    134223751U,	// SETGr
    805312397U,	// SETLEm
    134223757U,	// SETLEr
    805312404U,	// SETLm
    134223764U,	// SETLr
    805312410U,	// SETNEm
    134223770U,	// SETNEr
    805312417U,	// SETNOm
    134223777U,	// SETNOr
    805312424U,	// SETNPm
    134223784U,	// SETNPr
    805312431U,	// SETNSm
    134223791U,	// SETNSr
    805312438U,	// SETOm
    134223798U,	// SETOr
    805312444U,	// SETPm
    134223804U,	// SETPr
    805312450U,	// SETSm
    134223810U,	// SETSr
    6088U,	// SFENCE
    1879054287U,	// SGDT16m
    1879054294U,	// SGDTm
    268441564U,	// SHL16m1
    348133340U,	// SHL16mCL
    272635868U,	// SHL16mi
    134223836U,	// SHL16r1
    213915612U,	// SHL16rCL
    138549212U,	// SHL16ri
    536877020U,	// SHL32m1
    616568796U,	// SHL32mCL
    541071324U,	// SHL32mi
    134223836U,	// SHL32r1
    213915612U,	// SHL32rCL
    138549212U,	// SHL32ri
    671094748U,	// SHL64m1
    754980828U,	// SHL64mCL
    675289052U,	// SHL64mi
    134223836U,	// SHL64r1
    218109916U,	// SHL64rCL
    138549212U,	// SHL64ri
    805312476U,	// SHL8m1
    885004252U,	// SHL8mCL
    809506780U,	// SHL8mi
    134223836U,	// SHL8r1
    213915612U,	// SHL8rCL
    138549212U,	// SHL8ri
    272685025U,	// SHLD16mrCL
    272652257U,	// SHLD16mri8
    138598369U,	// SHLD16rrCL
    138565601U,	// SHLD16rri8
    541120481U,	// SHLD32mrCL
    541087713U,	// SHLD32mri8
    138598369U,	// SHLD32rrCL
    138565601U,	// SHLD32rri8
    675354593U,	// SHLD64mrCL
    675305441U,	// SHLD64mri8
    138614753U,	// SHLD64rrCL
    138565601U,	// SHLD64rri8
    268441575U,	// SHR16m1
    348133351U,	// SHR16mCL
    272635879U,	// SHR16mi
    134223847U,	// SHR16r1
    213915623U,	// SHR16rCL
    138549223U,	// SHR16ri
    536877031U,	// SHR32m1
    616568807U,	// SHR32mCL
    541071335U,	// SHR32mi
    134223847U,	// SHR32r1
    213915623U,	// SHR32rCL
    138549223U,	// SHR32ri
    671094759U,	// SHR64m1
    754980839U,	// SHR64mCL
    675289063U,	// SHR64mi
    134223847U,	// SHR64r1
    218109927U,	// SHR64rCL
    138549223U,	// SHR64ri
    805312487U,	// SHR8m1
    885004263U,	// SHR8mCL
    809506791U,	// SHR8mi
    134223847U,	// SHR8r1
    213915623U,	// SHR8rCL
    138549223U,	// SHR8ri
    272685036U,	// SHRD16mrCL
    272652268U,	// SHRD16mri8
    138598380U,	// SHRD16rrCL
    138565612U,	// SHRD16rri8
    541120492U,	// SHRD32mrCL
    541087724U,	// SHRD32mri8
    138598380U,	// SHRD32rrCL
    138565612U,	// SHRD32rri8
    675354604U,	// SHRD64mrCL
    675305452U,	// SHRD64mri8
    138614764U,	// SHRD64rrCL
    138565612U,	// SHRD64rri8
    138696690U,	// SHUFPDrmi
    138565618U,	// SHUFPDrri
    138696698U,	// SHUFPSrmi
    138565626U,	// SHUFPSrri
    1879054338U,	// SIDT16m
    1879054345U,	// SIDTm
    6159U,	// SIN_F
    0U,	// SIN_Fp32
    0U,	// SIN_Fp64
    0U,	// SIN_Fp80
    268441620U,	// SLDT16m
    134223892U,	// SLDT16r
    134223892U,	// SLDT32r
    268441620U,	// SLDT64m
    134223892U,	// SLDT64r
    268441626U,	// SMSW16m
    134223898U,	// SMSW16r
    134223898U,	// SMSW32r
    134223898U,	// SMSW64r
    140384288U,	// SQRTPDm
    140384288U,	// SQRTPDm_Int
    139335712U,	// SQRTPDr
    139335712U,	// SQRTPDr_Int
    140384296U,	// SQRTPSm
    140384296U,	// SQRTPSm_Int
    139335720U,	// SQRTPSr
    139335720U,	// SQRTPSr_Int
    140515376U,	// SQRTSDm
    140515376U,	// SQRTSDm_Int
    139335728U,	// SQRTSDr
    139335728U,	// SQRTSDr_Int
    140646456U,	// SQRTSSm
    140646456U,	// SQRTSSm_Int
    139335736U,	// SQRTSSr
    139335736U,	// SQRTSSr_Int
    6208U,	// SQRT_F
    0U,	// SQRT_Fp32
    0U,	// SQRT_Fp64
    0U,	// SQRT_Fp80
    6214U,	// SS_PREFIX
    6217U,	// STC
    6221U,	// STD
    6225U,	// STI
    536877141U,	// STMXCSR
    4544U,	// STOSB
    6238U,	// STOSD
    6244U,	// STOSQ
    4544U,	// STOSW
    6250U,	// STR16r
    6250U,	// STR32r
    6250U,	// STR64r
    6250U,	// STRm
    939530351U,	// ST_F32m
    1073748079U,	// ST_F64m
    939530356U,	// ST_FP32m
    1073748084U,	// ST_FP64m
    2147489908U,	// ST_FP80m
    134223988U,	// ST_FPrr
    0U,	// ST_Fp32m
    0U,	// ST_Fp64m
    0U,	// ST_Fp64m32
    0U,	// ST_Fp80m32
    0U,	// ST_Fp80m64
    0U,	// ST_FpP32m
    0U,	// ST_FpP64m
    0U,	// ST_FpP64m32
    0U,	// ST_FpP80m
    0U,	// ST_FpP80m32
    0U,	// ST_FpP80m64
    134223983U,	// ST_Frr
    134223994U,	// SUB16i16
    272636036U,	// SUB16mi
    272636036U,	// SUB16mi8
    272636036U,	// SUB16mr
    411048068U,	// SUB16ri
    411048068U,	// SUB16ri8
    415242372U,	// SUB16rm
    411048068U,	// SUB16rr
    138549380U,	// SUB16rr_REV
    134224009U,	// SUB32i32
    541071492U,	// SUB32mi
    541071492U,	// SUB32mi8
    541071492U,	// SUB32mr
    411048068U,	// SUB32ri
    411048068U,	// SUB32ri8
    419436676U,	// SUB32rm
    411048068U,	// SUB32rr
    138549380U,	// SUB32rr_REV
    134224020U,	// SUB64i32
    675289220U,	// SUB64mi32
    675289220U,	// SUB64mi8
    675289220U,	// SUB64mr
    411048068U,	// SUB64ri32
    411048068U,	// SUB64ri8
    423630980U,	// SUB64rm
    411048068U,	// SUB64rr
    138549380U,	// SUB64rr_REV
    134224031U,	// SUB8i8
    809506948U,	// SUB8mi
    809506948U,	// SUB8mr
    411048068U,	// SUB8ri
    427825284U,	// SUB8rm
    411048068U,	// SUB8rr
    138549380U,	// SUB8rr_REV
    138680489U,	// SUBPDrm
    138549417U,	// SUBPDrr
    138680496U,	// SUBPSrm
    138549424U,	// SUBPSrr
    939530423U,	// SUBR_F32m
    1073748151U,	// SUBR_F64m
    268441790U,	// SUBR_FI16m
    536877246U,	// SUBR_FI32m
    134224070U,	// SUBR_FPrST0
    134224055U,	// SUBR_FST0r
    0U,	// SUBR_Fp32m
    0U,	// SUBR_Fp64m
    0U,	// SUBR_Fp64m32
    0U,	// SUBR_Fp80m32
    0U,	// SUBR_Fp80m64
    0U,	// SUBR_FpI16m32
    0U,	// SUBR_FpI16m64
    0U,	// SUBR_FpI16m80
    0U,	// SUBR_FpI32m32
    0U,	// SUBR_FpI32m64
    0U,	// SUBR_FpI32m80
    163584183U,	// SUBR_FrST0
    138811598U,	// SUBSDrm
    138811598U,	// SUBSDrm_Int
    138549454U,	// SUBSDrr
    138549454U,	// SUBSDrr_Int
    138942677U,	// SUBSSrm
    138942677U,	// SUBSSrm_Int
    138549461U,	// SUBSSrr
    138549461U,	// SUBSSrr_Int
    939530460U,	// SUB_F32m
    1073748188U,	// SUB_F64m
    268441826U,	// SUB_FI16m
    536877282U,	// SUB_FI32m
    134224105U,	// SUB_FPrST0
    134224092U,	// SUB_FST0r
    0U,	// SUB_Fp32
    0U,	// SUB_Fp32m
    0U,	// SUB_Fp64
    0U,	// SUB_Fp64m
    0U,	// SUB_Fp64m32
    0U,	// SUB_Fp80
    0U,	// SUB_Fp80m32
    0U,	// SUB_Fp80m64
    0U,	// SUB_FpI16m32
    0U,	// SUB_FpI16m64
    0U,	// SUB_FpI16m80
    0U,	// SUB_FpI32m32
    0U,	// SUB_FpI32m64
    0U,	// SUB_FpI32m80
    163584220U,	// SUB_FrST0
    6384U,	// SWAPGS
    6391U,	// SYSCALL
    6399U,	// SYSENTER
    6408U,	// SYSEXIT
    6408U,	// SYSEXIT64
    6416U,	// SYSRETL
    6424U,	// SYSRETQ
    1430260813U,	// TAILJMPd
    1430260813U,	// TAILJMPd64
    624954445U,	// TAILJMPm
    759172173U,	// TAILJMPm64
    0U,	// TAILJMPr
    222301261U,	// TAILJMPr64
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi64
    0U,	// TCRETURNmi
    0U,	// TCRETURNmi64
    0U,	// TCRETURNri
    0U,	// TCRETURNri64
    134224160U,	// TEST16i16
    272636203U,	// TEST16mi
    139335979U,	// TEST16ri
    139467051U,	// TEST16rm
    139335979U,	// TEST16rr
    134224177U,	// TEST32i32
    541071659U,	// TEST32mi
    139335979U,	// TEST32ri
    139598123U,	// TEST32rm
    139335979U,	// TEST32rr
    134224189U,	// TEST64i32
    675289387U,	// TEST64mi32
    139335979U,	// TEST64ri32
    139729195U,	// TEST64rm
    139335979U,	// TEST64rr
    134224201U,	// TEST8i8
    809507115U,	// TEST8mi
    139335979U,	// TEST8ri
    140253483U,	// TEST8rm
    139335979U,	// TEST8rr
    6484U,	// TLSCall_32
    6497U,	// TLSCall_64
    6510U,	// TLS_addr32
    6523U,	// TLS_addr64
    6536U,	// TRAP
    6540U,	// TST_F
    0U,	// TST_Fp32
    0U,	// TST_Fp64
    0U,	// TST_Fp80
    140512050U,	// UCOMISDrm
    139332402U,	// UCOMISDrr
    140643131U,	// UCOMISSrm
    139332411U,	// UCOMISSrr
    134224273U,	// UCOM_FIPr
    134224282U,	// UCOM_FIr
    6562U,	// UCOM_FPPr
    134224298U,	// UCOM_FPr
    0U,	// UCOM_FpIr32
    0U,	// UCOM_FpIr64
    0U,	// UCOM_FpIr80
    0U,	// UCOM_Fpr32
    0U,	// UCOM_Fpr64
    0U,	// UCOM_Fpr80
    134224306U,	// UCOM_Fr
    6585U,	// UD2B
    138680766U,	// UNPCKHPDrm
    138549694U,	// UNPCKHPDrr
    138680776U,	// UNPCKHPSrm
    138549704U,	// UNPCKHPSrr
    138680786U,	// UNPCKLPDrm
    138549714U,	// UNPCKLPDrr
    138680796U,	// UNPCKLPSrm
    138549724U,	// UNPCKLPSrr
    140270054U,	// VAARG_64
    139352561U,	// VADDPDYrm
    139352561U,	// VADDPDYrr
    139352561U,	// VADDPDrm
    139352561U,	// VADDPDrr
    139352569U,	// VADDPSYrm
    139352569U,	// VADDPSYrr
    139352569U,	// VADDPSrm
    139352569U,	// VADDPSrr
    139352577U,	// VADDSDrm
    139352577U,	// VADDSDrm_Int
    139352577U,	// VADDSDrr
    139352577U,	// VADDSDrr_Int
    139352585U,	// VADDSSrm
    139352585U,	// VADDSSrm_Int
    139352585U,	// VADDSSrr
    139352585U,	// VADDSSrr_Int
    139352593U,	// VADDSUBPDYrm
    139352593U,	// VADDSUBPDYrr
    139352593U,	// VADDSUBPDrm
    139352593U,	// VADDSUBPDrr
    139352604U,	// VADDSUBPSYrm
    139352604U,	// VADDSUBPSYrr
    139352604U,	// VADDSUBPSrm
    139352604U,	// VADDSUBPSrr
    139352615U,	// VAESDECLASTrm
    139352615U,	// VAESDECLASTrr
    139352628U,	// VAESDECrm
    139352628U,	// VAESDECrr
    139352637U,	// VAESENCLASTrm
    139352637U,	// VAESENCLASTrr
    139352650U,	// VAESENCrm
    139352650U,	// VAESENCrr
    139205203U,	// VAESIMCrm
    139336275U,	// VAESIMCrr
    139221596U,	// VAESKEYGENASSIST128rm
    139352668U,	// VAESKEYGENASSIST128rr
    139352686U,	// VANDNPDYrm
    139352686U,	// VANDNPDYrr
    139352686U,	// VANDNPDrm
    139352686U,	// VANDNPDrr
    139352695U,	// VANDNPSYrm
    139352695U,	// VANDNPSYrr
    139352695U,	// VANDNPSrm
    139352695U,	// VANDNPSrr
    139352704U,	// VANDPDYrm
    139352704U,	// VANDPDYrr
    139352704U,	// VANDPDrm
    139352704U,	// VANDPDrr
    139352712U,	// VANDPSYrm
    139352712U,	// VANDPSYrr
    139352712U,	// VANDPSrm
    139352712U,	// VANDPSrr
    139352720U,	// VASTART_SAVE_XMM_REGS
    139352744U,	// VBLENDPDYrmi
    139352744U,	// VBLENDPDYrri
    139352744U,	// VBLENDPDrmi
    139352744U,	// VBLENDPDrri
    139352754U,	// VBLENDPSYrmi
    139352754U,	// VBLENDPSYrri
    139352754U,	// VBLENDPSrmi
    139352754U,	// VBLENDPSrri
    139352764U,	// VBLENDVPDYrm
    139352764U,	// VBLENDVPDYrr
    139352764U,	// VBLENDVPDrm
    139352764U,	// VBLENDVPDrr
    139352775U,	// VBLENDVPSYrm
    139352775U,	// VBLENDVPSYrr
    139352775U,	// VBLENDVPSrm
    139352775U,	// VBLENDVPSrr
    140384978U,	// VBROADCASTF128
    140516066U,	// VBROADCASTSD
    140647152U,	// VBROADCASTSS
    140647152U,	// VBROADCASTSSY
    1515080516U,	// VCMPPDYrmi
    139352830U,	// VCMPPDYrmi_alt
    1649298244U,	// VCMPPDYrri
    139352830U,	// VCMPPDYrri_alt
    1515080516U,	// VCMPPDrmi
    139352830U,	// VCMPPDrmi_alt
    1649298244U,	// VCMPPDrri
    139352830U,	// VCMPPDrri_alt
    1519274820U,	// VCMPPSYrmi
    139352838U,	// VCMPPSYrmi_alt
    1653492548U,	// VCMPPSYrri
    139352838U,	// VCMPPSYrri_alt
    1519274820U,	// VCMPPSrmi
    139352838U,	// VCMPPSrmi_alt
    1653492548U,	// VCMPPSrri
    139352838U,	// VCMPPSrri_alt
    1523469124U,	// VCMPSDrm
    139352846U,	// VCMPSDrm_alt
    1657686852U,	// VCMPSDrr
    139352846U,	// VCMPSDrr_alt
    1527663428U,	// VCMPSSrm
    139352854U,	// VCMPSSrm_alt
    1661881156U,	// VCMPSSrr
    139352854U,	// VCMPSSrr_alt
    140381001U,	// VCOMISDrm
    139332425U,	// VCOMISDrr
    140381010U,	// VCOMISSrm
    139332434U,	// VCOMISSrr
    140381019U,	// VCVTDQ2PDYrm
    139332443U,	// VCVTDQ2PDYrr
    140381019U,	// VCVTDQ2PDrm
    139332443U,	// VCVTDQ2PDrr
    141167462U,	// VCVTDQ2PSYrm
    139332454U,	// VCVTDQ2PSYrr
    139201382U,	// VCVTDQ2PSrm
    139332454U,	// VCVTDQ2PSrr
    139332465U,	// VCVTPD2DQXrYr
    140385054U,	// VCVTPD2DQXrm
    139336478U,	// VCVTPD2DQXrr
    141040426U,	// VCVTPD2DQYrm
    139336490U,	// VCVTPD2DQYrr
    139332465U,	// VCVTPD2DQrr
    139332476U,	// VCVTPD2PSXrYr
    140385078U,	// VCVTPD2PSXrm
    139336502U,	// VCVTPD2PSXrr
    141040450U,	// VCVTPD2PSYrm
    139336514U,	// VCVTPD2PSYrr
    139332476U,	// VCVTPD2PSrr
    141036423U,	// VCVTPS2DQYrm
    139332487U,	// VCVTPS2DQYrr
    140381063U,	// VCVTPS2DQrm
    139332487U,	// VCVTPS2DQrr
    140381074U,	// VCVTPS2PDYrm
    139332498U,	// VCVTPS2PDYrr
    140512146U,	// VCVTPS2PDrm
    139332498U,	// VCVTPS2PDrr
    140512157U,	// VCVTSD2SI64rm
    139332509U,	// VCVTSD2SI64rr
    140512157U,	// VCVTSD2SI_altrm
    139332509U,	// VCVTSD2SI_altrr
    139348904U,	// VCVTSD2SSrm
    139348904U,	// VCVTSD2SSrr
    139348915U,	// VCVTSI2SD64rm
    139348915U,	// VCVTSI2SD64rr
    139348915U,	// VCVTSI2SDLrm
    139348915U,	// VCVTSI2SDLrr
    139348915U,	// VCVTSI2SDrm
    139348915U,	// VCVTSI2SDrr
    139348926U,	// VCVTSI2SS64rm
    139348926U,	// VCVTSI2SS64rr
    139348926U,	// VCVTSI2SSrm
    139348926U,	// VCVTSI2SSrr
    139348937U,	// VCVTSS2SDrm
    139348937U,	// VCVTSS2SDrr
    140647246U,	// VCVTSS2SI64rm
    139336526U,	// VCVTSS2SI64rr
    140647246U,	// VCVTSS2SIrm
    139336526U,	// VCVTSS2SIrr
    139332564U,	// VCVTTPD2DQXrYr
    140385113U,	// VCVTTPD2DQXrm
    139336537U,	// VCVTTPD2DQXrr
    141040486U,	// VCVTTPD2DQYrm
    139336550U,	// VCVTTPD2DQYrr
    139332564U,	// VCVTTPD2DQrr
    141036512U,	// VCVTTPS2DQYrm
    139332576U,	// VCVTTPS2DQYrr
    140381152U,	// VCVTTPS2DQrm
    139332576U,	// VCVTTPS2DQrr
    140512236U,	// VCVTTSD2SI64rm
    139332588U,	// VCVTTSD2SI64rr
    140512236U,	// VCVTTSD2SIrm
    139332588U,	// VCVTTSD2SIrr
    140643320U,	// VCVTTSS2SI64rm
    139332600U,	// VCVTTSS2SI64rr
    140643320U,	// VCVTTSS2SIrm
    139332600U,	// VCVTTSS2SIrr
    139352947U,	// VDIVPDYrm
    139352947U,	// VDIVPDYrr
    139352947U,	// VDIVPDrm
    139352947U,	// VDIVPDrr
    139352955U,	// VDIVPSYrm
    139352955U,	// VDIVPSYrr
    139352955U,	// VDIVPSrm
    139352955U,	// VDIVPSrr
    139352963U,	// VDIVSDrm
    139352963U,	// VDIVSDrm_Int
    139352963U,	// VDIVSDrr
    139352963U,	// VDIVSDrr_Int
    139352971U,	// VDIVSSrm
    139352971U,	// VDIVSSrm_Int
    139352971U,	// VDIVSSrr
    139352971U,	// VDIVSSrr_Int
    139352979U,	// VDPPDrmi
    139352979U,	// VDPPDrri
    139352986U,	// VDPPSYrmi
    139352986U,	// VDPPSYrri
    139352986U,	// VDPPSrmi
    139352986U,	// VDPPSrri
    268442529U,	// VERRm
    134224801U,	// VERRr
    268442535U,	// VERWm
    134224807U,	// VERWr
    2691439533U,	// VEXTRACTF128mr
    139353005U,	// VEXTRACTF128rr
    943741883U,	// VEXTRACTPSmr
    139353019U,	// VEXTRACTPSrr
    139353031U,	// VEXTRACTPSrr64
    139353044U,	// VFMADDPDr132m
    139353044U,	// VFMADDPDr132mY
    139353044U,	// VFMADDPDr132r
    139353044U,	// VFMADDPDr132rY
    139353057U,	// VFMADDPDr213m
    139353057U,	// VFMADDPDr213mY
    139353057U,	// VFMADDPDr213r
    139353057U,	// VFMADDPDr213rY
    139353070U,	// VFMADDPDr231m
    139353070U,	// VFMADDPDr231mY
    139353070U,	// VFMADDPDr231r
    139353070U,	// VFMADDPDr231rY
    139353083U,	// VFMADDPSr132m
    139353083U,	// VFMADDPSr132mY
    139353083U,	// VFMADDPSr132r
    139353083U,	// VFMADDPSr132rY
    139353096U,	// VFMADDPSr213m
    139353096U,	// VFMADDPSr213mY
    139353096U,	// VFMADDPSr213r
    139353096U,	// VFMADDPSr213rY
    139353109U,	// VFMADDPSr231m
    139353109U,	// VFMADDPSr231mY
    139353109U,	// VFMADDPSr231r
    139353109U,	// VFMADDPSr231rY
    139353122U,	// VFMADDSUBPDr132m
    139353122U,	// VFMADDSUBPDr132mY
    139353122U,	// VFMADDSUBPDr132r
    139353122U,	// VFMADDSUBPDr132rY
    139353138U,	// VFMADDSUBPDr213m
    139353138U,	// VFMADDSUBPDr213mY
    139353138U,	// VFMADDSUBPDr213r
    139353138U,	// VFMADDSUBPDr213rY
    139353154U,	// VFMADDSUBPDr231m
    139353154U,	// VFMADDSUBPDr231mY
    139353154U,	// VFMADDSUBPDr231r
    139353154U,	// VFMADDSUBPDr231rY
    139353170U,	// VFMADDSUBPSr132m
    139353170U,	// VFMADDSUBPSr132mY
    139353170U,	// VFMADDSUBPSr132r
    139353170U,	// VFMADDSUBPSr132rY
    139353186U,	// VFMADDSUBPSr213m
    139353186U,	// VFMADDSUBPSr213mY
    139353186U,	// VFMADDSUBPSr213r
    139353186U,	// VFMADDSUBPSr213rY
    139353202U,	// VFMADDSUBPSr231m
    139353202U,	// VFMADDSUBPSr231mY
    139353202U,	// VFMADDSUBPSr231r
    139353202U,	// VFMADDSUBPSr231rY
    139353218U,	// VFMSUBADDPDr132m
    139353218U,	// VFMSUBADDPDr132mY
    139353218U,	// VFMSUBADDPDr132r
    139353218U,	// VFMSUBADDPDr132rY
    139353234U,	// VFMSUBADDPDr213m
    139353234U,	// VFMSUBADDPDr213mY
    139353234U,	// VFMSUBADDPDr213r
    139353234U,	// VFMSUBADDPDr213rY
    139353250U,	// VFMSUBADDPDr231m
    139353250U,	// VFMSUBADDPDr231mY
    139353250U,	// VFMSUBADDPDr231r
    139353250U,	// VFMSUBADDPDr231rY
    139353266U,	// VFMSUBADDPSr132m
    139353266U,	// VFMSUBADDPSr132mY
    139353266U,	// VFMSUBADDPSr132r
    139353266U,	// VFMSUBADDPSr132rY
    139353282U,	// VFMSUBADDPSr213m
    139353282U,	// VFMSUBADDPSr213mY
    139353282U,	// VFMSUBADDPSr213r
    139353282U,	// VFMSUBADDPSr213rY
    139353298U,	// VFMSUBADDPSr231m
    139353298U,	// VFMSUBADDPSr231mY
    139353298U,	// VFMSUBADDPSr231r
    139353298U,	// VFMSUBADDPSr231rY
    139353314U,	// VFMSUBPDr132m
    139353314U,	// VFMSUBPDr132mY
    139353314U,	// VFMSUBPDr132r
    139353314U,	// VFMSUBPDr132rY
    139353327U,	// VFMSUBPDr213m
    139353327U,	// VFMSUBPDr213mY
    139353327U,	// VFMSUBPDr213r
    139353327U,	// VFMSUBPDr213rY
    139353340U,	// VFMSUBPDr231m
    139353340U,	// VFMSUBPDr231mY
    139353340U,	// VFMSUBPDr231r
    139353340U,	// VFMSUBPDr231rY
    139353353U,	// VFMSUBPSr132m
    139353353U,	// VFMSUBPSr132mY
    139353353U,	// VFMSUBPSr132r
    139353353U,	// VFMSUBPSr132rY
    139353366U,	// VFMSUBPSr213m
    139353366U,	// VFMSUBPSr213mY
    139353366U,	// VFMSUBPSr213r
    139353366U,	// VFMSUBPSr213rY
    139353379U,	// VFMSUBPSr231m
    139353379U,	// VFMSUBPSr231mY
    139353379U,	// VFMSUBPSr231r
    139353379U,	// VFMSUBPSr231rY
    139353392U,	// VFNMADDPDr132m
    139353392U,	// VFNMADDPDr132mY
    139353392U,	// VFNMADDPDr132r
    139353392U,	// VFNMADDPDr132rY
    139353406U,	// VFNMADDPDr213m
    139353406U,	// VFNMADDPDr213mY
    139353406U,	// VFNMADDPDr213r
    139353406U,	// VFNMADDPDr213rY
    139353420U,	// VFNMADDPDr231m
    139353420U,	// VFNMADDPDr231mY
    139353420U,	// VFNMADDPDr231r
    139353420U,	// VFNMADDPDr231rY
    139353434U,	// VFNMADDPSr132m
    139353434U,	// VFNMADDPSr132mY
    139353434U,	// VFNMADDPSr132r
    139353434U,	// VFNMADDPSr132rY
    139353448U,	// VFNMADDPSr213m
    139353448U,	// VFNMADDPSr213mY
    139353448U,	// VFNMADDPSr213r
    139353448U,	// VFNMADDPSr213rY
    139353462U,	// VFNMADDPSr231m
    139353462U,	// VFNMADDPSr231mY
    139353462U,	// VFNMADDPSr231r
    139353462U,	// VFNMADDPSr231rY
    139353476U,	// VFNMSUBPDr132m
    139353476U,	// VFNMSUBPDr132mY
    139353476U,	// VFNMSUBPDr132r
    139353476U,	// VFNMSUBPDr132rY
    139353490U,	// VFNMSUBPDr213m
    139353490U,	// VFNMSUBPDr213mY
    139353490U,	// VFNMSUBPDr213r
    139353490U,	// VFNMSUBPDr213rY
    139353504U,	// VFNMSUBPDr231m
    139353504U,	// VFNMSUBPDr231mY
    139353504U,	// VFNMSUBPDr231r
    139353504U,	// VFNMSUBPDr231rY
    139353518U,	// VFNMSUBPSr132m
    139353518U,	// VFNMSUBPSr132mY
    139353518U,	// VFNMSUBPSr132r
    139353518U,	// VFNMSUBPSr132rY
    139353532U,	// VFNMSUBPSr213m
    139353532U,	// VFNMSUBPSr213mY
    139353532U,	// VFNMSUBPSr213r
    139353532U,	// VFNMSUBPSr213rY
    139353546U,	// VFNMSUBPSr231m
    139353546U,	// VFNMSUBPSr231mY
    139353546U,	// VFNMSUBPSr231r
    139353546U,	// VFNMSUBPSr231rY
    139352686U,	// VFsANDNPDrm
    139352686U,	// VFsANDNPDrr
    139352695U,	// VFsANDNPSrm
    139352695U,	// VFsANDNPSrr
    139352704U,	// VFsANDPDrm
    139352704U,	// VFsANDPDrr
    139352712U,	// VFsANDPSrm
    139352712U,	// VFsANDPSrr
    0U,	// VFsFLD0SD
    0U,	// VFsFLD0SS
    139353560U,	// VFsORPDrm
    139353560U,	// VFsORPDrr
    139353567U,	// VFsORPSrm
    139353567U,	// VFsORPSrr
    139353574U,	// VFsXORPDrm
    139353574U,	// VFsXORPDrr
    139353582U,	// VFsXORPSrm
    139353582U,	// VFsXORPSrr
    139353590U,	// VHADDPDYrm
    139353590U,	// VHADDPDYrr
    139353590U,	// VHADDPDrm
    139353590U,	// VHADDPDrr
    139353599U,	// VHADDPSYrm
    139353599U,	// VHADDPSYrr
    139353599U,	// VHADDPSrm
    139353599U,	// VHADDPSrr
    139353608U,	// VHSUBPDYrm
    139353608U,	// VHSUBPDYrr
    139353608U,	// VHSUBPDrm
    139353608U,	// VHSUBPDrr
    139353617U,	// VHSUBPSYrm
    139353617U,	// VHSUBPSYrr
    139353617U,	// VHSUBPSrm
    139353617U,	// VHSUBPSrr
    139353626U,	// VINSERTF128rm
    139353626U,	// VINSERTF128rr
    139353639U,	// VINSERTPSrm
    139353639U,	// VINSERTPSrr
    141172274U,	// VLDDQUYrm
    139206194U,	// VLDDQUrm
    536878650U,	// VLDMXCSR
    139337284U,	// VMASKMOVDQU
    139337284U,	// VMASKMOVDQU64
    2825657937U,	// VMASKMOVPDYmr
    139353681U,	// VMASKMOVPDYrm
    2691440209U,	// VMASKMOVPDmr
    139353681U,	// VMASKMOVPDrm
    2825657949U,	// VMASKMOVPSYmr
    139353693U,	// VMASKMOVPSYrm
    2691440221U,	// VMASKMOVPSmr
    139353693U,	// VMASKMOVPSrm
    139353705U,	// VMAXPDYrm
    139353705U,	// VMAXPDYrm_Int
    139353705U,	// VMAXPDYrr
    139353705U,	// VMAXPDYrr_Int
    139353705U,	// VMAXPDrm
    139353705U,	// VMAXPDrm_Int
    139353705U,	// VMAXPDrr
    139353705U,	// VMAXPDrr_Int
    139353713U,	// VMAXPSYrm
    139353713U,	// VMAXPSYrm_Int
    139353713U,	// VMAXPSYrr
    139353713U,	// VMAXPSYrr_Int
    139353713U,	// VMAXPSrm
    139353713U,	// VMAXPSrm_Int
    139353713U,	// VMAXPSrr
    139353713U,	// VMAXPSrr_Int
    139353721U,	// VMAXSDrm
    139353721U,	// VMAXSDrm_Int
    139353721U,	// VMAXSDrr
    139353721U,	// VMAXSDrr_Int
    139353729U,	// VMAXSSrm
    139353729U,	// VMAXSSrm_Int
    139353729U,	// VMAXSSrr
    139353729U,	// VMAXSSrr_Int
    7817U,	// VMCALL
    671096464U,	// VMCLEARm
    139353753U,	// VMINPDYrm
    139353753U,	// VMINPDYrm_Int
    139353753U,	// VMINPDYrr
    139353753U,	// VMINPDYrr_Int
    139353753U,	// VMINPDrm
    139353753U,	// VMINPDrm_Int
    139353753U,	// VMINPDrr
    139353753U,	// VMINPDrr_Int
    139353761U,	// VMINPSYrm
    139353761U,	// VMINPSYrm_Int
    139353761U,	// VMINPSYrr
    139353761U,	// VMINPSYrr_Int
    139353761U,	// VMINPSrm
    139353761U,	// VMINPSrm_Int
    139353761U,	// VMINPSrr
    139353761U,	// VMINPSrr_Int
    139353769U,	// VMINSDrm
    139353769U,	// VMINSDrm_Int
    139353769U,	// VMINSDrr
    139353769U,	// VMINSDrr_Int
    139353777U,	// VMINSSrm
    139353777U,	// VMINSSrm_Int
    139353777U,	// VMINSSrr
    139353777U,	// VMINSSrr_Int
    7865U,	// VMLAUNCH
    139337410U,	// VMOV64toPQIrr
    139337410U,	// VMOV64toSDrr
    2818580169U,	// VMOVAPDYmr
    141041353U,	// VMOVAPDYrm
    139337417U,	// VMOVAPDYrr
    2684362441U,	// VMOVAPDmr
    140385993U,	// VMOVAPDrm
    139337417U,	// VMOVAPDrr
    2818580178U,	// VMOVAPSYmr
    141041362U,	// VMOVAPSYrm
    139337426U,	// VMOVAPSYrr
    2684362450U,	// VMOVAPSmr
    140386002U,	// VMOVAPSrm
    139337426U,	// VMOVAPSrr
    141041371U,	// VMOVDDUPYrm
    139337435U,	// VMOVDDUPYrr
    140517083U,	// VMOVDDUPrm
    139337435U,	// VMOVDDUPrr
    139599589U,	// VMOVDI2PDIrm
    139337445U,	// VMOVDI2PDIrr
    139599589U,	// VMOVDI2SSrm
    139337445U,	// VMOVDI2SSrr
    2952797932U,	// VMOVDQAYmr
    141172460U,	// VMOVDQAYrm
    139337452U,	// VMOVDQAYrr
    1749032684U,	// VMOVDQAmr
    139206380U,	// VMOVDQArm
    139337452U,	// VMOVDQArr
    2952797941U,	// VMOVDQUYmr
    141172469U,	// VMOVDQUYrm
    139337461U,	// VMOVDQUYrr
    1749032693U,	// VMOVDQUmr
    1749032693U,	// VMOVDQUmr_Int
    139206389U,	// VMOVDQUrm
    139337461U,	// VMOVDQUrr
    139353854U,	// VMOVHLPSrr
    1077944072U,	// VMOVHPDmr
    139353864U,	// VMOVHPDrm
    1077944081U,	// VMOVHPSmr
    139353873U,	// VMOVHPSrm
    139353882U,	// VMOVLHPSrr
    1077944100U,	// VMOVLPDmr
    139353892U,	// VMOVLPDrm
    1077944109U,	// VMOVLPSmr
    139353901U,	// VMOVLPSrm
    675290818U,	// VMOVLQ128mr
    139337526U,	// VMOVMSKPDYr64r
    139337526U,	// VMOVMSKPDYrr32
    139337526U,	// VMOVMSKPDYrr64
    139337526U,	// VMOVMSKPDr64r
    139337526U,	// VMOVMSKPDrr32
    139337526U,	// VMOVMSKPDrr64
    139337537U,	// VMOVMSKPSYr64r
    139337537U,	// VMOVMSKPSYrr32
    139337537U,	// VMOVMSKPSYrr64
    139337537U,	// VMOVMSKPSr64r
    139337537U,	// VMOVMSKPSrr32
    139337537U,	// VMOVMSKPSrr64
    139206476U,	// VMOVNTDQArm
    2818580311U,	// VMOVNTDQY_64mr
    2818580311U,	// VMOVNTDQYmr
    2684362583U,	// VMOVNTDQ_64mr
    2684362583U,	// VMOVNTDQmr
    2818580321U,	// VMOVNTPDYmr
    2684362593U,	// VMOVNTPDmr
    2818580331U,	// VMOVNTPSYmr
    2684362603U,	// VMOVNTPSmr
    541073125U,	// VMOVPDI2DImr
    139337445U,	// VMOVPDI2DIrr
    675290818U,	// VMOVPQI2QImr
    139730626U,	// VMOVQI2PQIrm
    139337410U,	// VMOVQd64rr
    139337445U,	// VMOVQd64rr_alt
    139337410U,	// VMOVQs64rr
    139337410U,	// VMOVQxrxr
    1077944181U,	// VMOVSDmr
    140517237U,	// VMOVSDrm
    139353973U,	// VMOVSDrr
    141041533U,	// VMOVSHDUPYrm
    139337597U,	// VMOVSHDUPYrr
    140386173U,	// VMOVSHDUPrm
    139337597U,	// VMOVSHDUPrr
    141041544U,	// VMOVSLDUPYrm
    139337608U,	// VMOVSLDUPYrr
    140386184U,	// VMOVSLDUPrm
    139337608U,	// VMOVSLDUPrr
    541073125U,	// VMOVSS2DImr
    139337445U,	// VMOVSS2DIrr
    943726483U,	// VMOVSSmr
    140648339U,	// VMOVSSrm
    139354003U,	// VMOVSSrr
    2818580379U,	// VMOVUPDYmr
    141041563U,	// VMOVUPDYrm
    139337627U,	// VMOVUPDYrr
    2684362651U,	// VMOVUPDmr
    2684362651U,	// VMOVUPDmr_Int
    140386203U,	// VMOVUPDrm
    139337627U,	// VMOVUPDrr
    2818580388U,	// VMOVUPSYmr
    141041572U,	// VMOVUPSYrm
    139337636U,	// VMOVUPSYrr
    2684362660U,	// VMOVUPSmr
    2684362660U,	// VMOVUPSmr_Int
    140386212U,	// VMOVUPSrm
    139337636U,	// VMOVUPSrr
    139599589U,	// VMOVZDI2PDIrm
    139337445U,	// VMOVZDI2PDIrr
    139206338U,	// VMOVZPQILo2PQIrm
    139337410U,	// VMOVZPQILo2PQIrr
    139730626U,	// VMOVZQI2PQIrm
    139337410U,	// VMOVZQI2PQIrr
    139354029U,	// VMPSADBWrmi
    139354029U,	// VMPSADBWrri
    671096759U,	// VMPTRLDm
    671096768U,	// VMPTRSTm
    541073353U,	// VMREAD32rm
    139337673U,	// VMREAD32rr
    675291081U,	// VMREAD64rm
    139337673U,	// VMREAD64rr
    8145U,	// VMRESUME
    139354074U,	// VMULPDYrm
    139354074U,	// VMULPDYrr
    139354074U,	// VMULPDrm
    139354074U,	// VMULPDrr
    139354082U,	// VMULPSYrm
    139354082U,	// VMULPSYrr
    139354082U,	// VMULPSrm
    139354082U,	// VMULPSrr
    139354090U,	// VMULSDrm
    139354090U,	// VMULSDrm_Int
    139354090U,	// VMULSDrr
    139354090U,	// VMULSDrr_Int
    139354098U,	// VMULSSrm
    139354098U,	// VMULSSrm_Int
    139354098U,	// VMULSSrr
    139354098U,	// VMULSSrr_Int
    139599866U,	// VMWRITE32rm
    139337722U,	// VMWRITE32rr
    139730938U,	// VMWRITE64rm
    139337722U,	// VMWRITE64rr
    8195U,	// VMXOFF
    8202U,	// VMXON
    139353560U,	// VORPDYrm
    139353560U,	// VORPDYrr
    139353560U,	// VORPDrm
    139353560U,	// VORPDrr
    139353567U,	// VORPSYrm
    139353567U,	// VORPSYrr
    139353567U,	// VORPSrm
    139353567U,	// VORPSrr
    139206673U,	// VPABSBrm128
    139337745U,	// VPABSBrr128
    139206681U,	// VPABSDrm128
    139337753U,	// VPABSDrr128
    139206689U,	// VPABSWrm128
    139337761U,	// VPABSWrr128
    139354153U,	// VPACKSSDWrm
    139354153U,	// VPACKSSDWrr
    139354164U,	// VPACKSSWBrm
    139354164U,	// VPACKSSWBrr
    139354175U,	// VPACKUSDWrm
    139354175U,	// VPACKUSDWrr
    139354186U,	// VPACKUSWBrm
    139354186U,	// VPACKUSWBrr
    139354197U,	// VPADDBrm
    139354197U,	// VPADDBrr
    139354205U,	// VPADDDrm
    139354205U,	// VPADDDrr
    139354213U,	// VPADDQrm
    139354213U,	// VPADDQrr
    139354221U,	// VPADDSBrm
    139354221U,	// VPADDSBrr
    139354230U,	// VPADDSWrm
    139354230U,	// VPADDSWrr
    139354239U,	// VPADDUSBrm
    139354239U,	// VPADDUSBrr
    139354249U,	// VPADDUSWrm
    139354249U,	// VPADDUSWrr
    139354259U,	// VPADDWrm
    139354259U,	// VPADDWrr
    139354267U,	// VPALIGNR128rm
    139354267U,	// VPALIGNR128rr
    139354277U,	// VPANDNrm
    139354277U,	// VPANDNrr
    139354285U,	// VPANDrm
    139354285U,	// VPANDrr
    139354292U,	// VPAVGBrm
    139354292U,	// VPAVGBrr
    139354300U,	// VPAVGWrm
    139354300U,	// VPAVGWrr
    139354308U,	// VPBLENDVBrm
    139354308U,	// VPBLENDVBrr
    139354319U,	// VPBLENDWrmi
    139354319U,	// VPBLENDWrri
    139354329U,	// VPCLMULQDQrm
    139354329U,	// VPCLMULQDQrr
    139354341U,	// VPCMPEQBrm
    139354341U,	// VPCMPEQBrr
    139354351U,	// VPCMPEQDrm
    139354351U,	// VPCMPEQDrr
    139354361U,	// VPCMPEQQrm
    139354361U,	// VPCMPEQQrr
    139354371U,	// VPCMPEQWrm
    139354371U,	// VPCMPEQWrr
    139223309U,	// VPCMPESTRIArm
    139354381U,	// VPCMPESTRIArr
    139223309U,	// VPCMPESTRICrm
    139354381U,	// VPCMPESTRICrr
    139223309U,	// VPCMPESTRIOrm
    139354381U,	// VPCMPESTRIOrr
    139223309U,	// VPCMPESTRISrm
    139354381U,	// VPCMPESTRISrr
    139223309U,	// VPCMPESTRIZrm
    139354381U,	// VPCMPESTRIZrr
    139223309U,	// VPCMPESTRIrm
    139354381U,	// VPCMPESTRIrr
    0U,	// VPCMPESTRM128MEM
    0U,	// VPCMPESTRM128REG
    139223321U,	// VPCMPESTRM128rm
    139354393U,	// VPCMPESTRM128rr
    139354405U,	// VPCMPGTBrm
    139354405U,	// VPCMPGTBrr
    139354415U,	// VPCMPGTDrm
    139354415U,	// VPCMPGTDrr
    139354425U,	// VPCMPGTQrm
    139354425U,	// VPCMPGTQrr
    139354435U,	// VPCMPGTWrm
    139354435U,	// VPCMPGTWrr
    139223373U,	// VPCMPISTRIArm
    139354445U,	// VPCMPISTRIArr
    139223373U,	// VPCMPISTRICrm
    139354445U,	// VPCMPISTRICrr
    139223373U,	// VPCMPISTRIOrm
    139354445U,	// VPCMPISTRIOrr
    139223373U,	// VPCMPISTRISrm
    139354445U,	// VPCMPISTRISrr
    139223373U,	// VPCMPISTRIZrm
    139354445U,	// VPCMPISTRIZrr
    139223373U,	// VPCMPISTRIrm
    139354445U,	// VPCMPISTRIrr
    0U,	// VPCMPISTRM128MEM
    0U,	// VPCMPISTRM128REG
    139223385U,	// VPCMPISTRM128rm
    139354457U,	// VPCMPISTRM128rr
    139354469U,	// VPERM2F128rm
    139354469U,	// VPERM2F128rr
    141058417U,	// VPERMILPDYmi
    139354481U,	// VPERMILPDYri
    139354481U,	// VPERMILPDYrm
    139354481U,	// VPERMILPDYrr
    140403057U,	// VPERMILPDmi
    139354481U,	// VPERMILPDri
    139354481U,	// VPERMILPDrm
    139354481U,	// VPERMILPDrr
    141058428U,	// VPERMILPSYmi
    139354492U,	// VPERMILPSYri
    139354492U,	// VPERMILPSYrm
    139354492U,	// VPERMILPSYrr
    140403068U,	// VPERMILPSmi
    139354492U,	// VPERMILPSri
    139354492U,	// VPERMILPSrm
    139354492U,	// VPERMILPSrr
    809525639U,	// VPEXTRBmr
    139354503U,	// VPEXTRBrr
    139354503U,	// VPEXTRBrr64
    541090192U,	// VPEXTRDmr
    139354512U,	// VPEXTRDrr
    675307929U,	// VPEXTRQmr
    139354521U,	// VPEXTRQrr
    272654754U,	// VPEXTRWmr
    139354530U,	// VPEXTRWri
    139354539U,	// VPHADDDrm128
    139354539U,	// VPHADDDrr128
    139354548U,	// VPHADDSWrm128
    139354548U,	// VPHADDSWrr128
    139354558U,	// VPHADDWrm128
    139354558U,	// VPHADDWrr128
    139207111U,	// VPHMINPOSUWrm128
    139338183U,	// VPHMINPOSUWrr128
    139354580U,	// VPHSUBDrm128
    139354580U,	// VPHSUBDrr128
    139354589U,	// VPHSUBSWrm128
    139354589U,	// VPHSUBSWrr128
    139354599U,	// VPHSUBWrm128
    139354599U,	// VPHSUBWrr128
    139354608U,	// VPINSRBrm
    139354608U,	// VPINSRBrr
    139354617U,	// VPINSRDrm
    139354617U,	// VPINSRDrr
    139354626U,	// VPINSRQrm
    139354626U,	// VPINSRQrr
    139354635U,	// VPINSRWrmi
    139354635U,	// VPINSRWrr64i
    139354635U,	// VPINSRWrri
    139354644U,	// VPMADDUBSWrm128
    139354644U,	// VPMADDUBSWrr128
    139354656U,	// VPMADDWDrm
    139354656U,	// VPMADDWDrr
    139354666U,	// VPMAXSBrm
    139354666U,	// VPMAXSBrr
    139354675U,	// VPMAXSDrm
    139354675U,	// VPMAXSDrr
    139354684U,	// VPMAXSWrm
    139354684U,	// VPMAXSWrr
    139354693U,	// VPMAXUBrm
    139354693U,	// VPMAXUBrr
    139354702U,	// VPMAXUDrm
    139354702U,	// VPMAXUDrr
    139354711U,	// VPMAXUWrm
    139354711U,	// VPMAXUWrr
    139354720U,	// VPMINSBrm
    139354720U,	// VPMINSBrr
    139354729U,	// VPMINSDrm
    139354729U,	// VPMINSDrr
    139354738U,	// VPMINSWrm
    139354738U,	// VPMINSWrr
    139354747U,	// VPMINUBrm
    139354747U,	// VPMINUBrr
    139354756U,	// VPMINUDrm
    139354756U,	// VPMINUDrr
    139354765U,	// VPMINUWrm
    139354765U,	// VPMINUWrr
    139338390U,	// VPMOVMSKBr64r
    139338390U,	// VPMOVMSKBrr
    139600545U,	// VPMOVSXBDrm
    139338401U,	// VPMOVSXBDrr
    139469484U,	// VPMOVSXBQrm
    139338412U,	// VPMOVSXBQrr
    139731639U,	// VPMOVSXBWrm
    139338423U,	// VPMOVSXBWrr
    139731650U,	// VPMOVSXDQrm
    139338434U,	// VPMOVSXDQrr
    139731661U,	// VPMOVSXWDrm
    139338445U,	// VPMOVSXWDrr
    139600600U,	// VPMOVSXWQrm
    139338456U,	// VPMOVSXWQrr
    139600611U,	// VPMOVZXBDrm
    139338467U,	// VPMOVZXBDrr
    139469550U,	// VPMOVZXBQrm
    139338478U,	// VPMOVZXBQrr
    139731705U,	// VPMOVZXBWrm
    139338489U,	// VPMOVZXBWrr
    139731716U,	// VPMOVZXDQrm
    139338500U,	// VPMOVZXDQrr
    139731727U,	// VPMOVZXWDrm
    139338511U,	// VPMOVZXWDrr
    139600666U,	// VPMOVZXWQrm
    139338522U,	// VPMOVZXWQrr
    139354917U,	// VPMULDQrm
    139354917U,	// VPMULDQrr
    139354926U,	// VPMULHRSWrm128
    139354926U,	// VPMULHRSWrr128
    139354937U,	// VPMULHUWrm
    139354937U,	// VPMULHUWrr
    139354947U,	// VPMULHWrm
    139354947U,	// VPMULHWrr
    139354956U,	// VPMULLDrm
    139354956U,	// VPMULLDrr
    139354965U,	// VPMULLWrm
    139354965U,	// VPMULLWrr
    139354974U,	// VPMULUDQrm
    139354974U,	// VPMULUDQrr
    139354984U,	// VPORrm
    139354984U,	// VPORrr
    139354990U,	// VPSADBWrm
    139354990U,	// VPSADBWrr
    139354999U,	// VPSHUFBrm128
    139354999U,	// VPSHUFBrr128
    139223936U,	// VPSHUFDmi
    139355008U,	// VPSHUFDri
    139223945U,	// VPSHUFHWmi
    139355017U,	// VPSHUFHWri
    139223955U,	// VPSHUFLWmi
    139355027U,	// VPSHUFLWri
    139355037U,	// VPSIGNBrm128
    139355037U,	// VPSIGNBrr128
    139355046U,	// VPSIGNDrm128
    139355046U,	// VPSIGNDrr128
    139355055U,	// VPSIGNWrm128
    139355055U,	// VPSIGNWrr128
    139355064U,	// VPSLLDQri
    139355073U,	// VPSLLDri
    139355073U,	// VPSLLDrm
    139355073U,	// VPSLLDrr
    139355081U,	// VPSLLQri
    139355081U,	// VPSLLQrm
    139355081U,	// VPSLLQrr
    139355089U,	// VPSLLWri
    139355089U,	// VPSLLWrm
    139355089U,	// VPSLLWrr
    139355097U,	// VPSRADri
    139355097U,	// VPSRADrm
    139355097U,	// VPSRADrr
    139355105U,	// VPSRAWri
    139355105U,	// VPSRAWrm
    139355105U,	// VPSRAWrr
    139355113U,	// VPSRLDQri
    139355122U,	// VPSRLDri
    139355122U,	// VPSRLDrm
    139355122U,	// VPSRLDrr
    139355130U,	// VPSRLQri
    139355130U,	// VPSRLQrm
    139355130U,	// VPSRLQrr
    139355138U,	// VPSRLWri
    139355138U,	// VPSRLWrm
    139355138U,	// VPSRLWrr
    139355146U,	// VPSUBBrm
    139355146U,	// VPSUBBrr
    139355154U,	// VPSUBDrm
    139355154U,	// VPSUBDrr
    139355162U,	// VPSUBQrm
    139355162U,	// VPSUBQrr
    139355170U,	// VPSUBSBrm
    139355170U,	// VPSUBSBrr
    139355179U,	// VPSUBSWrm
    139355179U,	// VPSUBSWrr
    139355188U,	// VPSUBUSBrm
    139355188U,	// VPSUBUSBrr
    139355198U,	// VPSUBUSWrm
    139355198U,	// VPSUBUSWrr
    139355208U,	// VPSUBWrm
    139355208U,	// VPSUBWrr
    141173840U,	// VPTESTYrm
    139338832U,	// VPTESTYrr
    140387408U,	// VPTESTrm
    139338832U,	// VPTESTrr
    139355224U,	// VPUNPCKHBWrm
    139355224U,	// VPUNPCKHBWrr
    139355236U,	// VPUNPCKHDQrm
    139355236U,	// VPUNPCKHDQrr
    139355248U,	// VPUNPCKHQDQrm
    139355248U,	// VPUNPCKHQDQrr
    139355261U,	// VPUNPCKHWDrm
    139355261U,	// VPUNPCKHWDrr
    139355273U,	// VPUNPCKLBWrm
    139355273U,	// VPUNPCKLBWrr
    139355285U,	// VPUNPCKLDQrm
    139355285U,	// VPUNPCKLDQrr
    139355297U,	// VPUNPCKLQDQrm
    139355297U,	// VPUNPCKLQDQrr
    139355310U,	// VPUNPCKLWDrm
    139355310U,	// VPUNPCKLWDrr
    139355322U,	// VPXORrm
    139355322U,	// VPXORrr
    141042881U,	// VRCPPSYm
    141042881U,	// VRCPPSYm_Int
    139338945U,	// VRCPPSYr
    139338945U,	// VRCPPSYr_Int
    140387521U,	// VRCPPSm
    140387521U,	// VRCPPSm_Int
    139338945U,	// VRCPPSr
    139338945U,	// VRCPPSr_Int
    139355337U,	// VRCPSSm
    141518025U,	// VRCPSSm_Int
    139355337U,	// VRCPSSr
    141534409U,	// VRCPSSr_Int
    141059281U,	// VROUNDPDm
    140403921U,	// VROUNDPDm_AVX
    139355345U,	// VROUNDPDr
    139355345U,	// VROUNDPDr_AVX
    141059291U,	// VROUNDPSm
    140403931U,	// VROUNDPSm_AVX
    139355355U,	// VROUNDPSr
    139355355U,	// VROUNDPSr_AVX
    139355365U,	// VROUNDSDm
    139355365U,	// VROUNDSDm_AVX
    139355365U,	// VROUNDSDr
    139355365U,	// VROUNDSDr_AVX
    139355375U,	// VROUNDSSm
    139355375U,	// VROUNDSSm_AVX
    139355375U,	// VROUNDSSr
    139355375U,	// VROUNDSSr_AVX
    141059281U,	// VROUNDYPDm
    141059281U,	// VROUNDYPDm_AVX
    139355345U,	// VROUNDYPDr
    139355345U,	// VROUNDYPDr_AVX
    141059291U,	// VROUNDYPSm
    141059291U,	// VROUNDYPSm_AVX
    139355355U,	// VROUNDYPSr
    139355355U,	// VROUNDYPSr_AVX
    141042937U,	// VRSQRTPSYm
    141042937U,	// VRSQRTPSYm_Int
    139339001U,	// VRSQRTPSYr
    139339001U,	// VRSQRTPSYr_Int
    140387577U,	// VRSQRTPSm
    140387577U,	// VRSQRTPSm_Int
    139339001U,	// VRSQRTPSr
    139339001U,	// VRSQRTPSr_Int
    139355395U,	// VRSQRTSSm
    141518083U,	// VRSQRTSSm_Int
    139355395U,	// VRSQRTSSr
    141534467U,	// VRSQRTSSr_Int
    138700045U,	// VSHUFPDYrmi
    138568973U,	// VSHUFPDYrri
    138700045U,	// VSHUFPDrmi
    138568973U,	// VSHUFPDrri
    139355414U,	// VSHUFPSYrmi
    139355414U,	// VSHUFPSYrri
    139355414U,	// VSHUFPSrmi
    139355414U,	// VSHUFPSrri
    141042975U,	// VSQRTPDYm
    141042975U,	// VSQRTPDYm_Int
    139339039U,	// VSQRTPDYr
    139339039U,	// VSQRTPDYr_Int
    140387615U,	// VSQRTPDm
    140387615U,	// VSQRTPDm_Int
    139339039U,	// VSQRTPDr
    139339039U,	// VSQRTPDr_Int
    141042984U,	// VSQRTPSYm
    141042984U,	// VSQRTPSYm_Int
    139339048U,	// VSQRTPSYr
    139339048U,	// VSQRTPSYr_Int
    140387624U,	// VSQRTPSm
    140387624U,	// VSQRTPSm_Int
    139339048U,	// VSQRTPSr
    139339048U,	// VSQRTPSr_Int
    139355441U,	// VSQRTSDm
    141550897U,	// VSQRTSDm_Int
    139355441U,	// VSQRTSDr
    141534513U,	// VSQRTSDr_Int
    139355450U,	// VSQRTSSm
    141518138U,	// VSQRTSSm_Int
    139355450U,	// VSQRTSSr
    141534522U,	// VSQRTSSr_Int
    536880451U,	// VSTMXCSR
    139355469U,	// VSUBPDYrm
    139355469U,	// VSUBPDYrr
    139355469U,	// VSUBPDrm
    139355469U,	// VSUBPDrr
    139355477U,	// VSUBPSYrm
    139355477U,	// VSUBPSYrr
    139355477U,	// VSUBPSrm
    139355477U,	// VSUBPSrr
    139355485U,	// VSUBSDrm
    139355485U,	// VSUBSDrm_Int
    139355485U,	// VSUBSDrr
    139355485U,	// VSUBSDrr_Int
    139355493U,	// VSUBSSrm
    139355493U,	// VSUBSSrm_Int
    139355493U,	// VSUBSSrr
    139355493U,	// VSUBSSrr_Int
    141043053U,	// VTESTPDYrm
    139339117U,	// VTESTPDYrr
    140387693U,	// VTESTPDrm
    139339117U,	// VTESTPDrr
    141043062U,	// VTESTPSYrm
    139339126U,	// VTESTPSYrr
    140387702U,	// VTESTPSrm
    139339126U,	// VTESTPSrr
    140512260U,	// VUCOMISDrm
    139332612U,	// VUCOMISDrr
    140643342U,	// VUCOMISSrm
    139332622U,	// VUCOMISSrr
    139355519U,	// VUNPCKHPDYrm
    139355519U,	// VUNPCKHPDYrr
    139355519U,	// VUNPCKHPDrm
    139355519U,	// VUNPCKHPDrr
    139355530U,	// VUNPCKHPSYrm
    139355530U,	// VUNPCKHPSYrr
    139355530U,	// VUNPCKHPSrm
    139355530U,	// VUNPCKHPSrr
    139355541U,	// VUNPCKLPDYrm
    139355541U,	// VUNPCKLPDYrr
    139355541U,	// VUNPCKLPDrm
    139355541U,	// VUNPCKLPDrr
    139355552U,	// VUNPCKLPSYrm
    139355552U,	// VUNPCKLPSYrr
    139355552U,	// VUNPCKLPSrm
    139355552U,	// VUNPCKLPSrr
    139353574U,	// VXORPDYrm
    139353574U,	// VXORPDYrr
    139353574U,	// VXORPDrm
    139353574U,	// VXORPDrr
    139353582U,	// VXORPSYrm
    139353582U,	// VXORPSYrr
    139353582U,	// VXORPSrm
    139353582U,	// VXORPSrr
    9643U,	// VZEROALL
    9652U,	// VZEROUPPER
    0U,	// V_SET0PD
    0U,	// V_SET0PI
    0U,	// V_SET0PS
    0U,	// V_SETALLONES
    1342178421U,	// W64ALLOCA
    9663U,	// WAIT
    9668U,	// WBINVD
    671089781U,	// WINCALL64m
    1342178421U,	// WINCALL64pcrel32
    134218869U,	// WINCALL64r
    9675U,	// WIN_ALLOCA
    9702U,	// WRMSR
    272639468U,	// XADD16rm
    139339244U,	// XADD16rr
    541074924U,	// XADD32rm
    139339244U,	// XADD32rr
    675292652U,	// XADD64rm
    139339244U,	// XADD64rr
    809510380U,	// XADD8rm
    139339244U,	// XADD8rr
    134227442U,	// XCHG16ar
    2281711101U,	// XCHG16rm
    3087017469U,	// XCHG16rr
    134227459U,	// XCHG32ar
    2415928829U,	// XCHG32rm
    3087017469U,	// XCHG32rr
    134227471U,	// XCHG64ar
    3221235197U,	// XCHG64rm
    3087017469U,	// XCHG64rr
    2550146557U,	// XCHG8rm
    3087017469U,	// XCHG8rr
    134227483U,	// XCH_F
    9761U,	// XCRYPTCBC
    9771U,	// XCRYPTCFB
    9781U,	// XCRYPTCTR
    9791U,	// XCRYPTECB
    9801U,	// XCRYPTOFB
    9811U,	// XGETBV
    9818U,	// XLAT
    134227552U,	// XOR16i16
    272639594U,	// XOR16mi
    272639594U,	// XOR16mi8
    272639594U,	// XOR16mr
    411051626U,	// XOR16ri
    411051626U,	// XOR16ri8
    415245930U,	// XOR16rm
    411051626U,	// XOR16rr
    138552938U,	// XOR16rr_REV
    134227567U,	// XOR32i32
    541075050U,	// XOR32mi
    541075050U,	// XOR32mi8
    541075050U,	// XOR32mr
    411051626U,	// XOR32ri
    411051626U,	// XOR32ri8
    419440234U,	// XOR32rm
    411051626U,	// XOR32rr
    138552938U,	// XOR32rr_REV
    134227578U,	// XOR64i32
    675292778U,	// XOR64mi32
    675292778U,	// XOR64mi8
    675292778U,	// XOR64mr
    411051626U,	// XOR64ri32
    411051626U,	// XOR64ri8
    423634538U,	// XOR64rm
    411051626U,	// XOR64rr
    138552938U,	// XOR64rr_REV
    134227589U,	// XOR8i8
    809510506U,	// XOR8mi
    809510506U,	// XOR8mr
    411051626U,	// XOR8ri
    427828842U,	// XOR8rm
    411051626U,	// XOR8rr
    138552938U,	// XOR8rr_REV
    138676775U,	// XORPDrm
    138545703U,	// XORPDrr
    138676782U,	// XORPSrm
    138545710U,	// XORPSrr
    9871U,	// XSETBV
    9878U,	// XSHA1
    9884U,	// XSHA256
    9892U,	// XSTORE
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000aaa\000aad\t\000aam\t\000aas\000fabs\000adc\t%ax, \000adc\t"
    "\000adc\t%eax, \000adc\t%rax, \000adc\t%al, \000add\t%ax, \000add\t\000"
    "add\t%eax, \000add\t%rax, \000add\t%al, \000addpd\t\000addps\t\000addsd"
    "\t\000addss\t\000addsubpd\t\000addsubps\t\000fadd\t\000fiadd\t\000faddp"
    "\t\000#ADJCALLSTACKDOWN\000#ADJCALLSTACKUP\000aesdeclast\t\000aesdec\t\000"
    "aesenclast\t\000aesenc\t\000aesimc\t\000aeskeygenassist\t\000and\t%ax, "
    "\000and\t\000and\t%eax, \000and\t%rax, \000and\t%al, \000andnpd\t\000an"
    "dnps\t\000andpd\t\000andps\t\000arpl\t\000#ATOMADD6432 PSEUDO!\000#ATOM"
    "AND16 PSEUDO!\000#ATOMAND32 PSEUDO!\000#ATOMAND64 PSEUDO!\000#ATOMAND64"
    "32 PSEUDO!\000#ATOMAND8 PSEUDO!\000#ATOMMAX16 PSEUDO!\000#ATOMMAX32 PSE"
    "UDO!\000#ATOMMAX64 PSEUDO!\000#ATOMMIN16 PSEUDO!\000#ATOMMIN32 PSEUDO!\000"
    "#ATOMMIN64 PSEUDO!\000#ATOMNAND16 PSEUDO!\000#ATOMNAND32 PSEUDO!\000#AT"
    "OMNAND64 PSEUDO!\000#ATOMNAND6432 PSEUDO!\000#ATOMNAND8 PSEUDO!\000#ATO"
    "MOR16 PSEUDO!\000#ATOMOR32 PSEUDO!\000#ATOMOR64 PSEUDO!\000#ATOMOR6432 "
    "PSEUDO!\000#ATOMOR8 PSEUDO!\000#ATOMSUB6432 PSEUDO!\000#ATOMSWAP6432 PS"
    "EUDO!\000#ATOMUMAX16 PSEUDO!\000#ATOMUMAX32 PSEUDO!\000#ATOMUMAX64 PSEU"
    "DO!\000#ATOMUMIN16 PSEUDO!\000#ATOMUMIN32 PSEUDO!\000#ATOMUMIN64 PSEUDO"
    "!\000#ATOMXOR16 PSEUDO!\000#ATOMXOR32 PSEUDO!\000#ATOMXOR64 PSEUDO!\000"
    "#ATOMXOR6432 PSEUDO!\000#ATOMXOR8 PSEUDO!\000blendpd\t\000blendps\t\000"
    "blendvpd\t\000blendvps\t\000bound\t\000bsf\t\000bsr\t\000bswap\t\000bt\t"
    "\000btc\t\000btr\t\000bts\t\000call\t\000callw\t\000cbw\000cdq\000cdqe\000"
    "fchs\000clc\000cld\000clflush\t\000cli\000clts\000cmc\000cmova\t\000cmo"
    "vae\t\000cmovb\t\000cmovbe\t\000fcmovbe\t%ST(0), \000fcmovb\t%ST(0), \000"
    "cmove\t\000fcmove\t%ST(0), \000cmovg\t\000cmovge\t\000cmovl\t\000cmovle"
    "\t\000fcmovnbe\t%ST(0), \000fcmovnb\t%ST(0), \000cmovne\t\000fcmovne\t%"
    "ST(0), \000cmovno\t\000cmovnp\t\000fcmovnu\t%ST(0), \000cmovns\t\000cmo"
    "vo\t\000cmovp\t\000fcmovu\t %ST(0), \000cmovs\t\000#CMOV_FR32 PSEUDO!\000"
    "#CMOV_FR64 PSEUDO!\000#CMOV_GR16* PSEUDO!\000#CMOV_GR32* PSEUDO!\000#CM"
    "OV_GR8 PSEUDO!\000#CMOV_RFP32 PSEUDO!\000#CMOV_RFP64 PSEUDO!\000#CMOV_R"
    "FP80 PSEUDO!\000#CMOV_V2F64 PSEUDO!\000#CMOV_V2I64 PSEUDO!\000#CMOV_V4F"
    "32 PSEUDO!\000#CMOV_V4F64 PSEUDO!\000#CMOV_V4I64 PSEUDO!\000#CMOV_V8F32"
    " PSEUDO!\000cmp\t%ax, \000cmp\t\000cmp\t%eax, \000cmp\t%rax, \000cmp\t%"
    "al, \000cmp\000cmppd\t\000cmpps\t\000cmps\000cmpsq\000cmpsd\t\000cmpss\t"
    "\000cmpxchg16b\t\000cmpxchg\t\000cmpxchg8b\t\000comisd\t\000comiss\t\000"
    "fcomp\t\000fcompi\t\000fcomi\t\000fcom\t\000fcos\000cpuid\000cqo\000crc"
    "32 \t\000cs\000cvtdq2pd\t\000cvtdq2ps\t\000cvtpd2dq\t\000cvtpd2ps\t\000"
    "cvtps2dq\t\000cvtps2pd\t\000cvtsd2si\t\000cvtsd2ss\t\000cvtsi2sd\t\000c"
    "vtsi2ss\t\000cvtss2sd\t\000cvtss2si\t\000cvttpd2dq\t\000cvttps2dq\t\000"
    "cvttsd2si\t\000cvttss2si\t\000cwd\000cwde\000daa\000das\000data16\000de"
    "c\t\000div\t\000divpd\t\000divps\t\000fdivr\t\000fidivr\t\000fdivrp\t\000"
    "divsd\t\000divss\t\000fdiv\t\000fidiv\t\000fdivp\t\000dppd\t\000dpps\t\000"
    "ds\000ret\t#eh_return, addr: \000enter\t\000es\000extractps\t\000f2xm1\000"
    "lcall\t\000ljmp\t\000fbld\t\000fbstp\t\000fcompp\000fdecstp\000femms\000"
    "ffree\t\000ficom\t\000ficomp\t\000fincstp\000fldcw\t\000fldenv\t\000fld"
    "l2e\000fldl2t\000fldlg2\000fldln2\000fldpi\000fnclex\000fninit\000fnop\000"
    "fnstcw\t\000fnstsw %ax\000fnstsw\t\000fpatan\000fprem\000fprem1\000fpta"
    "n\000frndint\000frstor\t\000fnsave\t\000fscale\000fsincos\000fnstenv\t\000"
    "fs\000fxam\000fxrstor\t\000fxrstorq\t\000fxsave\t\000fxsaveq\t\000fxtra"
    "ct\000fyl2x\000fyl2xp1\000movapd\t\000movaps\t\000orpd\t\000orps\t\000x"
    "orpd\t\000xorps\t\000gs\000haddpd\t\000haddps\t\000hlt\000hsubpd\t\000h"
    "subps\t\000idiv\t\000fild\t\000imul\t\000ins\000in\t%AX, \000in\t%AX, %"
    "DX\000in\t%EAX, \000in\t%EAX, %DX\000in\t%AL, \000in\t%AL, %DX\000inc\t"
    "\000insertps\t\000int\t\000int3\000into\000invd\000invept\000invlpg\t\000"
    "invvpid\000iretw\000iretd\000iretq\000fisttp\t\000fist\t\000fistp\t\000"
    "#MEMBARRIER\000lock\n\tor\t(%rsp), \000ucomisd\t\000ucomiss\t\000vcmp\000"
    "vcomisd\t\000vcomiss\t\000vcvtdq2pd\t\000vcvtdq2ps\t\000vcvtpd2dq\t\000"
    "vcvtpd2ps\t\000vcvtps2dq\t\000vcvtps2pd\t\000vcvtsd2si\t\000vcvtsd2ss\t"
    "\000vcvtsi2sd\t\000vcvtsi2ss\t\000vcvtss2sd\t\000vcvttpd2dq\t\000vcvttp"
    "s2dq\t\000vcvttsd2si\t\000vcvttss2si\t\000vucomisd\t\000vucomiss\t\000j"
    "ae\t\000ja\t\000jbe\t\000jb\t\000jcxz\t\000jecxz\t\000je\t\000jge\t\000"
    "jg\t\000jle\t\000jl\t\000jmp\t\000jne\t\000jno\t\000jnp\t\000jns\t\000j"
    "o\t\000jp\t\000jrcxz\t\000js\t\000lahf\000lar\t\000lock\n\tcmpxchg\t\000"
    "lock\n\tcmpxchgq\t\000lock\n\tcmpxchg8b\t\000lddqu\t\000ldmxcsr\t\000ld"
    "s\t\000fldz\000fld1\000fld\t\000lea\t\000leave\000les\t\000lfence\000lf"
    "s\t\000lgdtw\t\000lgdt\t\000lgs\t\000lidtw\t\000lidt\t\000lldt\t\000lms"
    "w\t\000lock\n\tadd\t\000lock\n\tand\t\000lock\n\tdec\t\000lock\n\tinc\t"
    "\000lock\n\tor\t\000lock\000lock\n\tsub\t\000lock\n\txor\t\000lodsb\000"
    "lodsd\000lodsq\000lodsw\000loop\t\000loope\t\000loopne\t\000lret\t\000l"
    "retw\t\000lretl\000lretq\000lsl\t\000lss\t\000ltr\t\000lock\n\txadd\t\000"
    "maskmovdqu\t\000maxpd\t\000maxps\t\000maxsd\t\000maxss\t\000mfence\000m"
    "inpd\t\000minps\t\000minsd\t\000minss\t\000cvtpd2pi\t\000cvtpi2pd\t\000"
    "cvtpi2ps\t\000cvtps2pi\t\000cvttpd2pi\t\000cvttps2pi\t\000emms\000maskm"
    "ovq\t\000movd\t\000movdq2q\t\000movntq\t\000movq2dq\t\000movq\t\000pabs"
    "b\t\000pabsd\t\000pabsw\t\000packssdw\t\000packsswb\t\000packuswb\t\000"
    "paddb\t\000paddd\t\000paddq\t\000paddsb\t\000paddsw\t\000paddusb\t\000p"
    "addusw\t\000paddw\t\000palignr\t\000pandn\t\000pand\t\000pavgb\t\000pav"
    "gw\t\000pcmpeqb\t\000pcmpeqd\t\000pcmpeqw\t\000pcmpgtb\t\000pcmpgtd\t\000"
    "pcmpgtw\t\000pextrw\t\000phaddsw\t\000phaddw\t\000phaddd\t\000phsubd\t\000"
    "phsubsw\t\000phsubw\t\000pinsrw\t\000pmaddubsw\t\000pmaddwd\t\000pmaxsw"
    "\t\000pmaxub\t\000pminsw\t\000pminub\t\000pmovmskb\t\000pmulhrsw\t\000p"
    "mulhuw\t\000pmulhw\t\000pmullw\t\000pmuludq\t\000por\t\000psadbw\t\000p"
    "shufb\t\000pshufw\t\000psignb\t\000psignd\t\000psignw\t\000pslld\t\000p"
    "sllq\t\000psllw\t\000psrad\t\000psraw\t\000psrld\t\000psrlq\t\000psrlw\t"
    "\000psubb\t\000psubd\t\000psubq\t\000psubsb\t\000psubsw\t\000psubusb\t\000"
    "psubusw\t\000psubw\t\000punpckhbw\t\000punpckhdq\t\000punpckhwd\t\000pu"
    "npcklbw\t\000punpckldq\t\000punpcklwd\t\000pxor\t\000monitor\000montmul"
    "\000mov\t\000mov\t%ax, \000mov\t%eax, \000movabs\t\000mov\t%al, \000mov"
    "ddup\t\000movdqa\t\000movdqu\t\000movhlps\t\000movhpd\t\000movhps\t\000"
    "movlhps\t\000movlpd\t\000movlps\t\000movmskpd\t\000movmskps\t\000movntd"
    "qa\t\000movntdq\t\000movnti\t\000movntpd\t\000movntps\t\000\000movsd\000"
    "movsd\t\000movshdup\t\000movsldup\t\000movsq\000movss\t\000movsx\t\000m"
    "ovsxd\t\000movupd\t\000movups\t\000movzx\t\000mpsadbw\t\000mul\t\000mul"
    "pd\t\000mulps\t\000mulsd\t\000mulss\t\000fmul\t\000fimul\t\000fmulp\t\000"
    "mwait\000neg\t\000nop\000nop\t\000not\t\000or\t%ax, \000or\t\000or\t%ea"
    "x, \000or\t%rax, \000or\t%al, \000out\t\000out\t%DX, %AX\000out\t%DX, %"
    "EAX\000out\t%DX, %AL\000outsb\000outsd\000outsw\000packusdw\t\000pause\000"
    "pavgusb\t\000pblendvb\t\000pblendw\t\000pclmulqdq\t\000pcmpeqq\t\000pcm"
    "pestri\t\000pcmpestrm\t\000pcmpgtq\t\000pcmpistri\t\000pcmpistrm\t\000p"
    "extrb\t\000pextrd\t\000pextrq\t\000pf2id\t\000pf2iw\t\000pfacc\t\000pfa"
    "dd\t\000pfcmpeq\t\000pfcmpge\t\000pfcmpgt\t\000pfmax\t\000pfmin\t\000pf"
    "mul\t\000pfnacc\t\000pfpnacc\t\000pfrcpit1\t\000pfrcpit2\t\000pfrcp\t\000"
    "pfrsqit1\t\000pfrsqrt\t\000pfsubr\t\000pfsub\t\000phminposuw\t\000pi2fd"
    "\t\000pi2fw\t\000pinsrb\t\000pinsrd\t\000pinsrq\t\000pmaxsb\t\000pmaxsd"
    "\t\000pmaxud\t\000pmaxuw\t\000pminsb\t\000pminsd\t\000pminud\t\000pminu"
    "w\t\000pmovsxbd\t\000pmovsxbq\t\000pmovsxbw\t\000pmovsxdq\t\000pmovsxwd"
    "\t\000pmovsxwq\t\000pmovzxbd\t\000pmovzxbq\t\000pmovzxbw\t\000pmovzxdq\t"
    "\000pmovzxwd\t\000pmovzxwq\t\000pmuldq\t\000pmulhrw\t\000pmulld\t\000po"
    "p\t\000popa\000popcnt\t\000pop\t%ds\000pop\t%es\000popf\000popfd\000pop"
    "fq\000pop\t%fs\000pop\t%gs\000pop\t%ss\000prefetch \000prefetchnta\t\000"
    "prefetcht0\t\000prefetcht1\t\000prefetcht2\t\000prefetchw \000pshufd\t\000"
    "pshufhw\t\000pshuflw\t\000pslldq\t\000psrldq\t\000pswapd\t\000ptest \t\000"
    "punpckhqdq\t\000punpcklqdq\t\000push\t\000pusha\000push\t%cs\000push\t%"
    "ds\000push\t%es\000pushf\000pushfd\000pushfq\000push\t%fs\000push\t%gs\000"
    "push\t%ss\000rcl\t\000rcpps\t\000rcpss\t\000rcr\t\000rdmsr\000rdpmc\000"
    "rdtsc\000rdtscp\000repne\000rep movsb\000rep movsd\000rep movsq\000rep "
    "movsw\000rep\000rep stosb\000rep stosd\000rep stosq\000rep stosw\000ret"
    "\000ret\t\000retw\t\000rex64\000rol\t\000ror\t\000roundpd\t\000roundps\t"
    "\000roundsd\t\000roundss\t\000rsm\000rsqrtps\t\000rsqrtss\t\000sahf\000"
    "sar\t\000sbb\t%ax, \000sbb\t\000sbb\t%eax, \000sbb\t%rax, \000sbb\t%al,"
    " \000scas\000scasq\000setae\t\000seta\t\000setbe\t\000setb\t\000sete\t\000"
    "setge\t\000setg\t\000setle\t\000setl\t\000setne\t\000setno\t\000setnp\t"
    "\000setns\t\000seto\t\000setp\t\000sets\t\000sfence\000sgdtw\t\000sgdt\t"
    "\000shl\t\000shld\t\000shr\t\000shrd\t\000shufpd\t\000shufps\t\000sidtw"
    "\t\000sidt\t\000fsin\000sldt\t\000smsw\t\000sqrtpd\t\000sqrtps\t\000sqr"
    "tsd\t\000sqrtss\t\000fsqrt\000ss\000stc\000std\000sti\000stmxcsr\t\000s"
    "tosd\000stosq\000str\t\000fst\t\000fstp\t\000sub\t%ax, \000sub\t\000sub"
    "\t%eax, \000sub\t%rax, \000sub\t%al, \000subpd\t\000subps\t\000fsubr\t\000"
    "fisubr\t\000fsubrp\t\000subsd\t\000subss\t\000fsub\t\000fisub\t\000fsub"
    "p\t\000swapgs\000syscall\000sysenter\000sysexit\000sysretl\000sysretq\000"
    "test\t%ax, \000test\t\000test\t%eax, \000test\t%rax, \000test\t%al, \000"
    "# TLSCall_32\000# TLSCall_64\000# TLS_addr32\000# TLS_addr64\000ud2\000"
    "ftst\000fucompi\t\000fucomi\t\000fucompp\000fucomp\t\000fucom\t\000ud2b"
    "\000unpckhpd\t\000unpckhps\t\000unpcklpd\t\000unpcklps\t\000#VAARG_64 \000"
    "vaddpd\t\000vaddps\t\000vaddsd\t\000vaddss\t\000vaddsubpd\t\000vaddsubp"
    "s\t\000vaesdeclast\t\000vaesdec\t\000vaesenclast\t\000vaesenc\t\000vaes"
    "imc\t\000vaeskeygenassist\t\000vandnpd\t\000vandnps\t\000vandpd\t\000va"
    "ndps\t\000#VASTART_SAVE_XMM_REGS \000vblendpd\t\000vblendps\t\000vblend"
    "vpd\t\000vblendvps\t\000vbroadcastf128\t\000vbroadcastsd\t\000vbroadcas"
    "tss\t\000vcmppd\t\000vcmpps\t\000vcmpsd\t\000vcmpss\t\000vcvtpd2dqx\t\000"
    "vcvtpd2dqy\t\000vcvtpd2psx\t\000vcvtpd2psy\t\000vcvtss2si\t\000vcvttpd2"
    "dqx\t\000vcvttpd2dqy\t\000vdivpd\t\000vdivps\t\000vdivsd\t\000vdivss\t\000"
    "vdppd\t\000vdpps\t\000verr\t\000verw\t\000vextractf128\t\000vextractps\t"
    "\000vextractps \t\000vfmadd132pd\t\000vfmadd213pd\t\000vfmadd231pd\t\000"
    "vfmadd132ps\t\000vfmadd213ps\t\000vfmadd231ps\t\000vfmaddsub132pd\t\000"
    "vfmaddsub213pd\t\000vfmaddsub231pd\t\000vfmaddsub132ps\t\000vfmaddsub21"
    "3ps\t\000vfmaddsub231ps\t\000vfmsubadd132pd\t\000vfmsubadd213pd\t\000vf"
    "msubadd231pd\t\000vfmsubadd132ps\t\000vfmsubadd213ps\t\000vfmsubadd231p"
    "s\t\000vfmsub132pd\t\000vfmsub213pd\t\000vfmsub231pd\t\000vfmsub132ps\t"
    "\000vfmsub213ps\t\000vfmsub231ps\t\000vfnmadd132pd\t\000vfnmadd213pd\t\000"
    "vfnmadd231pd\t\000vfnmadd132ps\t\000vfnmadd213ps\t\000vfnmadd231ps\t\000"
    "vfnmsub132pd\t\000vfnmsub213pd\t\000vfnmsub231pd\t\000vfnmsub132ps\t\000"
    "vfnmsub213ps\t\000vfnmsub231ps\t\000vorpd\t\000vorps\t\000vxorpd\t\000v"
    "xorps\t\000vhaddpd\t\000vhaddps\t\000vhsubpd\t\000vhsubps\t\000vinsertf"
    "128\t\000vinsertps\t\000vlddqu\t\000vldmxcsr\t\000vmaskmovdqu\t\000vmas"
    "kmovpd\t\000vmaskmovps\t\000vmaxpd\t\000vmaxps\t\000vmaxsd\t\000vmaxss\t"
    "\000vmcall\000vmclear\t\000vminpd\t\000vminps\t\000vminsd\t\000vminss\t"
    "\000vmlaunch\000vmovq\t\000vmovapd\t\000vmovaps\t\000vmovddup\t\000vmov"
    "d\t\000vmovdqa\t\000vmovdqu\t\000vmovhlps\t\000vmovhpd\t\000vmovhps\t\000"
    "vmovlhps\t\000vmovlpd\t\000vmovlps\t\000vmovmskpd\t\000vmovmskps\t\000v"
    "movntdqa\t\000vmovntdq\t\000vmovntpd\t\000vmovntps\t\000vmovsd\t\000vmo"
    "vshdup\t\000vmovsldup\t\000vmovss\t\000vmovupd\t\000vmovups\t\000vmpsad"
    "bw\t\000vmptrld\t\000vmptrst\t\000vmread\t\000vmresume\000vmulpd\t\000v"
    "mulps\t\000vmulsd\t\000vmulss\t\000vmwrite\t\000vmxoff\000vmxon\t\000vp"
    "absb\t\000vpabsd\t\000vpabsw\t\000vpackssdw\t\000vpacksswb\t\000vpackus"
    "dw\t\000vpackuswb\t\000vpaddb\t\000vpaddd\t\000vpaddq\t\000vpaddsb\t\000"
    "vpaddsw\t\000vpaddusb\t\000vpaddusw\t\000vpaddw\t\000vpalignr\t\000vpan"
    "dn\t\000vpand\t\000vpavgb\t\000vpavgw\t\000vpblendvb\t\000vpblendw\t\000"
    "vpclmulqdq\t\000vpcmpeqb\t\000vpcmpeqd\t\000vpcmpeqq\t\000vpcmpeqw\t\000"
    "vpcmpestri\t\000vpcmpestrm\t\000vpcmpgtb\t\000vpcmpgtd\t\000vpcmpgtq\t\000"
    "vpcmpgtw\t\000vpcmpistri\t\000vpcmpistrm\t\000vperm2f128\t\000vpermilpd"
    "\t\000vpermilps\t\000vpextrb\t\000vpextrd\t\000vpextrq\t\000vpextrw\t\000"
    "vphaddd\t\000vphaddsw\t\000vphaddw\t\000vphminposuw\t\000vphsubd\t\000v"
    "phsubsw\t\000vphsubw\t\000vpinsrb\t\000vpinsrd\t\000vpinsrq\t\000vpinsr"
    "w\t\000vpmaddubsw\t\000vpmaddwd\t\000vpmaxsb\t\000vpmaxsd\t\000vpmaxsw\t"
    "\000vpmaxub\t\000vpmaxud\t\000vpmaxuw\t\000vpminsb\t\000vpminsd\t\000vp"
    "minsw\t\000vpminub\t\000vpminud\t\000vpminuw\t\000vpmovmskb\t\000vpmovs"
    "xbd\t\000vpmovsxbq\t\000vpmovsxbw\t\000vpmovsxdq\t\000vpmovsxwd\t\000vp"
    "movsxwq\t\000vpmovzxbd\t\000vpmovzxbq\t\000vpmovzxbw\t\000vpmovzxdq\t\000"
    "vpmovzxwd\t\000vpmovzxwq\t\000vpmuldq\t\000vpmulhrsw\t\000vpmulhuw\t\000"
    "vpmulhw\t\000vpmulld\t\000vpmullw\t\000vpmuludq\t\000vpor\t\000vpsadbw\t"
    "\000vpshufb\t\000vpshufd\t\000vpshufhw\t\000vpshuflw\t\000vpsignb\t\000"
    "vpsignd\t\000vpsignw\t\000vpslldq\t\000vpslld\t\000vpsllq\t\000vpsllw\t"
    "\000vpsrad\t\000vpsraw\t\000vpsrldq\t\000vpsrld\t\000vpsrlq\t\000vpsrlw"
    "\t\000vpsubb\t\000vpsubd\t\000vpsubq\t\000vpsubsb\t\000vpsubsw\t\000vps"
    "ubusb\t\000vpsubusw\t\000vpsubw\t\000vptest\t\000vpunpckhbw\t\000vpunpc"
    "khdq\t\000vpunpckhqdq\t\000vpunpckhwd\t\000vpunpcklbw\t\000vpunpckldq\t"
    "\000vpunpcklqdq\t\000vpunpcklwd\t\000vpxor\t\000vrcpps\t\000vrcpss\t\000"
    "vroundpd\t\000vroundps\t\000vroundsd\t\000vroundss\t\000vrsqrtps\t\000v"
    "rsqrtss\t\000vshufpd\t\000vshufps\t\000vsqrtpd\t\000vsqrtps\t\000vsqrts"
    "d\t\000vsqrtss\t\000vstmxcsr\t\000vsubpd\t\000vsubps\t\000vsubsd\t\000v"
    "subss\t\000vtestpd\t\000vtestps\t\000vunpckhpd\t\000vunpckhps\t\000vunp"
    "cklpd\t\000vunpcklps\t\000vzeroall\000vzeroupper\000wait\000wbinvd\000#"
    " dynamic stack allocation\000wrmsr\000xadd\t\000xchg\t%ax, \000xchg\t\000"
    "xchg\t%eax, \000xchg\t%rax, \000fxch\t\000xcryptcbc\000xcryptcfb\000xcr"
    "yptctr\000xcryptecb\000xcryptofb\000xgetbv\000xlatb\000xor\t%ax, \000xo"
    "r\t\000xor\t%eax, \000xor\t%rax, \000xor\t%al, \000xsetbv\000xsha1\000x"
    "sha256\000xstore\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 25 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, AAA, AAS, ABS_F, ADJCALLSTACKDOWN32, ADJCALLSTACKDOWN64, AD...
    return;
    break;
  case 1:
    // AAD8i8, AAM8i8, ADC16i16, ADC16rr_REV, ADC32i32, ADC32rr_REV, ADC64i32...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADC16mi, ADC16mi8, ADC16mr, ADD16mi, ADD16mi8, ADD16mr, ADD_FI16m, AND...
    printi16mem(MI, 0, O); 
    break;
  case 3:
    // ADC16ri, ADC16ri8, ADC16rm, ADC16rr, ADC32ri, ADC32ri8, ADC32rm, ADC32...
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 4:
    // ADC32mi, ADC32mi8, ADC32mr, ADD32mi, ADD32mi8, ADD32mr, ADD_FI32m, AND...
    printi32mem(MI, 0, O); 
    break;
  case 5:
    // ADC64mi32, ADC64mi8, ADC64mr, ADD64mi32, ADD64mi8, ADD64mr, AND64mi32,...
    printi64mem(MI, 0, O); 
    break;
  case 6:
    // ADC8mi, ADC8mr, ADD8mi, ADD8mr, AND8mi, AND8mr, CLFLUSH, CMP8mi, CMP8m...
    printi8mem(MI, 0, O); 
    break;
  case 7:
    // ADD_F32m, DIVR_F32m, DIV_F32m, EXTRACTPSmr, FBLDm, FBSTPm, FCOM32m, FC...
    printf32mem(MI, 0, O); 
    break;
  case 8:
    // ADD_F64m, DIVR_F64m, DIV_F64m, FCOM64m, FCOMP64m, LD_F64m, MOVHPDmr, M...
    printf64mem(MI, 0, O); 
    break;
  case 9:
    // ARPL16mr
    printi16mem(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 10:
    // CALL64pcrel32, CALLpcrel16, CALLpcrel32, JAE_1, JAE_4, JA_1, JA_4, JBE...
    print_pcrel_imm(MI, 0, O); 
    break;
  case 11:
    // CMPPDrmi, CMPPSrmi, CMPSDrm, CMPSSrm, Int_CMPSDrm, Int_CMPSSrm, Int_VC...
    printSSECC(MI, 7, O); 
    break;
  case 12:
    // CMPPDrri, CMPPSrri, CMPSDrr, CMPSSrr, Int_CMPSDrr, Int_CMPSSrr, Int_VC...
    printSSECC(MI, 3, O); 
    break;
  case 13:
    // CMPXCHG16B, MOVDQAmr, MOVDQUmr, MOVDQUmr_Int, VMOVDQAmr, VMOVDQUmr, VM...
    printi128mem(MI, 0, O); 
    break;
  case 14:
    // FARCALL16m, FARCALL32m, FARCALL64, FARJMP16m, FARJMP32m, FARJMP64, FXR...
    printopaquemem(MI, 0, O); 
    return;
    break;
  case 15:
    // LCMPXCHG64
    printOperand(MI, 5, O); 
    O << ','; 
    printi64mem(MI, 0, O); 
    return;
    break;
  case 16:
    // LD_F80m, ST_FP80m
    printf80mem(MI, 0, O); 
    return;
    break;
  case 17:
    // LXADD16, XCHG16rm
    printi16mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 18:
    // LXADD32, XCHG32rm
    printi32mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 19:
    // LXADD8, XCHG8rm
    printi8mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 20:
    // MOVAPDmr, MOVAPSmr, MOVNTDQ_64mr, MOVNTDQmr, MOVNTPDmr, MOVNTPSmr, MOV...
    printf128mem(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    break;
  case 21:
    // VMASKMOVPDYmr, VMASKMOVPSYmr, VMOVAPDYmr, VMOVAPSYmr, VMOVNTDQY_64mr, ...
    printf256mem(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    break;
  case 22:
    // VMOVDQAYmr, VMOVDQUYmr
    printi256mem(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 23:
    // XCHG16rr, XCHG32rr, XCHG64rr, XCHG8rr
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 24:
    // XCHG64rm
    printi64mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 22) & 31) {
  default:   // unreachable.
  case 0:
    // AAD8i8, AAM8i8, ADC16i16, ADC32i32, ADC64i32, ADC8i8, ADD16i16, ADD32i...
    return;
    break;
  case 1:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    O << ", "; 
    break;
  case 2:
    // ADC16ri, ADC16ri8, ADC16rr, ADC32ri, ADC32ri8, ADC32rr, ADC64ri32, ADC...
    printOperand(MI, 2, O); 
    return;
    break;
  case 3:
    // ADC16rm, ADD16rm, AND16rm, CRC32r32m16, OR16rm, SBB16rm, SUB16rm, XOR1...
    printi16mem(MI, 2, O); 
    return;
    break;
  case 4:
    // ADC32rm, ADD32rm, AND32rm, CRC32r32m32, OR32rm, SBB32rm, SUB32rm, XOR3...
    printi32mem(MI, 2, O); 
    return;
    break;
  case 5:
    // ADC64rm, ADD64rm, AND64rm, CRC32r64m64, LXADD64, OR64rm, SBB64rm, SUB6...
    printi64mem(MI, 2, O); 
    return;
    break;
  case 6:
    // ADC8rm, ADD8rm, AND8rm, CRC32r32m8, CRC32r64m8, OR8rm, SBB8rm, SUB8rm,...
    printi8mem(MI, 2, O); 
    return;
    break;
  case 7:
    // ADD_FrST0, DIVR_FrST0, DIV_FrST0, MUL_FrST0, SUBR_FrST0, SUB_FrST0
    O << ", %ST(0)"; 
    return;
    break;
  case 8:
    // ARPL16rr
    printOperand(MI, 0, O); 
    return;
    break;
  case 9:
    // CMPPDrmi, CMPPDrri, VCMPPDYrmi, VCMPPDYrri, VCMPPDrmi, VCMPPDrri
    O << "pd\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 10:
    // CMPPSrmi, CMPPSrri, VCMPPSYrmi, VCMPPSYrri, VCMPPSrmi, VCMPPSrri
    O << "ps\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 11:
    // CMPSDrm, CMPSDrr, Int_CMPSDrm, Int_CMPSDrr, Int_VCMPSDrm, Int_VCMPSDrr...
    O << "sd\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 12:
    // CMPSSrm, CMPSSrr, Int_CMPSSrm, Int_CMPSSrr, Int_VCMPSSrm, Int_VCMPSSrr...
    O << "ss\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 13:
    // MOV16ao16
    O << ", %ax"; 
    return;
    break;
  case 14:
    // MOV32ao32
    O << ", %eax"; 
    return;
    break;
  case 15:
    // MOV8ao8
    O << ", %al"; 
    return;
    break;
  case 16:
    // OUT16ir
    O << ", %AX"; 
    return;
    break;
  case 17:
    // OUT32ir
    O << ", %EAX"; 
    return;
    break;
  case 18:
    // OUT8ir
    O << ", %AL"; 
    return;
    break;
  case 19:
    // RCL16mCL, RCL16rCL, RCL32mCL, RCL32rCL, RCL64mCL, RCL64rCL, RCL8mCL, R...
    O << ", CL"; 
    return;
    break;
  case 20:
    // ROL64mCL, ROL64rCL, ROR64mCL, ROR64rCL, SAR64mCL, SAR64rCL, SHL64mCL, ...
    O << ", %CL"; 
    return;
    break;
  case 21:
    // TAILJMPd, TAILJMPd64, TAILJMPm, TAILJMPm64, TAILJMPr64
    O << "  # TAILCALL"; 
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 24 unique commands.
  switch ((Bits >> 17) & 31) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC32mi, ADC32mi8, ADC32mr, ADC64mi32, ADC...
    printOperand(MI, 5, O); 
    break;
  case 1:
    // ADC16rr_REV, ADC32rr_REV, ADC64rr_REV, ADC8rr_REV, ADD16rr_REV, ADD32r...
    printOperand(MI, 2, O); 
    break;
  case 2:
    // ADDPDrm, ADDPSrm, ADDSUBPDrm, ADDSUBPSrm, ANDNPDrm, ANDNPSrm, ANDPDrm,...
    printf128mem(MI, 2, O); 
    break;
  case 3:
    // ADDSDrm, ADDSDrm_Int, CMPSDrm, CMPSDrm_alt, DIVSDrm, DIVSDrm_Int, Int_...
    printf64mem(MI, 2, O); 
    break;
  case 4:
    // ADDSSrm, ADDSSrm_Int, CMPSSrm, CMPSSrm_alt, DIVSSrm, DIVSSrm_Int, INSE...
    printf32mem(MI, 2, O); 
    break;
  case 5:
    // AESDECLASTrm, AESDECrm, AESENCLASTrm, AESENCrm, BLENDPDrmi, BLENDPSrmi...
    printi128mem(MI, 2, O); 
    break;
  case 6:
    // AESIMCrm, AESKEYGENASSIST128rm, CVTDQ2PSrm, Int_CVTDQ2PSrm, Int_VCVTDQ...
    printi128mem(MI, 1, O); 
    break;
  case 7:
    // AESIMCrr, AESKEYGENASSIST128rr, BSF16rr, BSF32rr, BSF64rr, BSR16rr, BS...
    printOperand(MI, 1, O); 
    break;
  case 8:
    // BOUNDS16rm, BSF16rm, BSR16rm, CMP16rm, IMUL16rmi, IMUL16rmi8, LAR16rm,...
    printi16mem(MI, 1, O); 
    break;
  case 9:
    // BOUNDS32rm, BSF32rm, BSR32rm, CMP32rm, CVTSI2SDrm, CVTSI2SSrm, IMUL32r...
    printi32mem(MI, 1, O); 
    break;
  case 10:
    // BSF64rm, BSR64rm, CMP64rm, CVTSI2SD64rm, CVTSI2SS64rm, IMUL64rmi32, IM...
    printi64mem(MI, 1, O); 
    break;
  case 11:
    // CMOVA16rm, CMOVAE16rm, CMOVB16rm, CMOVBE16rm, CMOVE16rm, CMOVG16rm, CM...
    printi16mem(MI, 2, O); 
    break;
  case 12:
    // CMOVA32rm, CMOVAE32rm, CMOVB32rm, CMOVBE32rm, CMOVE32rm, CMOVG32rm, CM...
    printi32mem(MI, 2, O); 
    break;
  case 13:
    // CMOVA64rm, CMOVAE64rm, CMOVB64rm, CMOVBE64rm, CMOVE64rm, CMOVG64rm, CM...
    printi64mem(MI, 2, O); 
    break;
  case 14:
    // CMP8rm, MOV8rm, MOV8rm_NOREX, MOVSX16rm8, MOVSX32rm8, MOVSX64rm8, MOVZ...
    printi8mem(MI, 1, O); 
    break;
  case 15:
    // COMISDrm, COMISSrm, CVTDQ2PDrm, CVTPD2DQrm, CVTPD2PSrm, CVTPS2DQrm, CV...
    printf128mem(MI, 1, O); 
    break;
  case 16:
    // CVTPS2PDrm, CVTSD2SSrm, CVTTSD2SI64rm, CVTTSD2SIrm, Int_CVTPS2PDrm, In...
    printf64mem(MI, 1, O); 
    return;
    break;
  case 17:
    // CVTSS2SDrm, CVTSS2SI64rm, CVTSS2SIrm, CVTTSS2SI64rm, CVTTSS2SIrm, Int_...
    printf32mem(MI, 1, O); 
    return;
    break;
  case 18:
    // LDS16rm, LDS32rm, LES16rm, LES32rm, LFS16rm, LFS32rm, LFS64rm, LGS16rm...
    printopaquemem(MI, 1, O); 
    return;
    break;
  case 19:
    // PINSRBrm
    printi8mem(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    return;
    break;
  case 20:
    // ROUNDPDm, ROUNDPSm, VCVTPD2DQYrm, VCVTPD2PSYrm, VCVTPS2DQYrm, VCVTTPD2...
    printf256mem(MI, 1, O); 
    break;
  case 21:
    // VCVTDQ2PSYrm, VLDDQUYrm, VMOVDQAYrm, VMOVDQUYrm, VPTESTYrm
    printi256mem(MI, 1, O); 
    return;
    break;
  case 22:
    // VEXTRACTF128mr, VMASKMOVPDYmr, VMASKMOVPDmr, VMASKMOVPSYmr, VMASKMOVPS...
    printOperand(MI, 6, O); 
    return;
    break;
  case 23:
    // VRCPSSm_Int, VRCPSSr_Int, VRSQRTSSm_Int, VRSQRTSSr_Int, VSQRTSDm_Int, ...
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  }


  // Fragment 3 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 14) & 7) {
  default:   // unreachable.
  case 0:
    // ADC16mi, ADC16mi8, ADC16mr, ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, A...
    return;
    break;
  case 1:
    // AESKEYGENASSIST128rm, AESKEYGENASSIST128rr, BLENDPDrmi, BLENDPDrri, BL...
    O << ", "; 
    break;
  case 2:
    // MOV8mr_NOREX, MOV8rm_NOREX, MOV8rr_NOREX
    O << "  # NOREX"; 
    return;
    break;
  case 3:
    // SHLD16mrCL, SHLD16rrCL, SHLD32mrCL, SHLD32rrCL, SHRD16mrCL, SHRD16rrCL...
    O << ", CL"; 
    return;
    break;
  case 4:
    // SHLD64mrCL, SHLD64rrCL, SHRD64mrCL, SHRD64rrCL
    O << ", %CL"; 
    return;
    break;
  case 5:
    // VRCPSSm_Int, VRSQRTSSm_Int, VSQRTSSm_Int
    printf32mem(MI, 1, O); 
    return;
    break;
  case 6:
    // VRCPSSr_Int, VRSQRTSSr_Int, VSQRTSDr_Int, VSQRTSSr_Int
    printOperand(MI, 1, O); 
    return;
    break;
  case 7:
    // VSQRTSDm_Int
    printf64mem(MI, 1, O); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case X86::AESKEYGENASSIST128rm:
  case X86::AESKEYGENASSIST128rr:
  case X86::BLENDPDrmi:
  case X86::BLENDPDrri:
  case X86::BLENDPSrmi:
  case X86::BLENDPSrri:
  case X86::CMPPDrmi_alt:
  case X86::CMPPDrri_alt:
  case X86::CMPPSrmi_alt:
  case X86::CMPPSrri_alt:
  case X86::CMPSDrm_alt:
  case X86::CMPSDrr_alt:
  case X86::CMPSSrm_alt:
  case X86::CMPSSrr_alt:
  case X86::DPPDrmi:
  case X86::DPPDrri:
  case X86::DPPSrmi:
  case X86::DPPSrri:
  case X86::EXTRACTPSmr:
  case X86::EXTRACTPSrr:
  case X86::IMUL16rmi:
  case X86::IMUL16rmi8:
  case X86::IMUL16rri:
  case X86::IMUL16rri8:
  case X86::IMUL32rmi:
  case X86::IMUL32rmi8:
  case X86::IMUL32rri:
  case X86::IMUL32rri8:
  case X86::IMUL64rmi32:
  case X86::IMUL64rmi8:
  case X86::IMUL64rri32:
  case X86::IMUL64rri8:
  case X86::INSERTPSrm:
  case X86::INSERTPSrr:
  case X86::Int_VCMPSDrm:
  case X86::Int_VCMPSDrr:
  case X86::Int_VCMPSSrm:
  case X86::Int_VCMPSSrr:
  case X86::Int_VCVTSD2SSrm:
  case X86::Int_VCVTSD2SSrr:
  case X86::Int_VCVTSI2SD64rm:
  case X86::Int_VCVTSI2SD64rr:
  case X86::Int_VCVTSI2SDrm:
  case X86::Int_VCVTSI2SDrr:
  case X86::Int_VCVTSI2SS64rm:
  case X86::Int_VCVTSI2SS64rr:
  case X86::Int_VCVTSI2SSrm:
  case X86::Int_VCVTSI2SSrr:
  case X86::Int_VCVTSS2SDrm:
  case X86::Int_VCVTSS2SDrr:
  case X86::MMX_PALIGNR64irm:
  case X86::MMX_PALIGNR64irr:
  case X86::MMX_PEXTRWirri:
  case X86::MMX_PINSRWirmi:
  case X86::MMX_PINSRWirri:
  case X86::MMX_PSHUFWmi:
  case X86::MMX_PSHUFWri:
  case X86::MPSADBWrmi:
  case X86::MPSADBWrri:
  case X86::PALIGNR128rm:
  case X86::PALIGNR128rr:
  case X86::PBLENDWrmi:
  case X86::PBLENDWrri:
  case X86::PCLMULQDQrm:
  case X86::PCLMULQDQrr:
  case X86::PCMPESTRIArm:
  case X86::PCMPESTRIArr:
  case X86::PCMPESTRICrm:
  case X86::PCMPESTRICrr:
  case X86::PCMPESTRIOrm:
  case X86::PCMPESTRIOrr:
  case X86::PCMPESTRISrm:
  case X86::PCMPESTRISrr:
  case X86::PCMPESTRIZrm:
  case X86::PCMPESTRIZrr:
  case X86::PCMPESTRIrm:
  case X86::PCMPESTRIrr:
  case X86::PCMPESTRM128rm:
  case X86::PCMPESTRM128rr:
  case X86::PCMPISTRIArm:
  case X86::PCMPISTRIArr:
  case X86::PCMPISTRICrm:
  case X86::PCMPISTRICrr:
  case X86::PCMPISTRIOrm:
  case X86::PCMPISTRIOrr:
  case X86::PCMPISTRISrm:
  case X86::PCMPISTRISrr:
  case X86::PCMPISTRIZrm:
  case X86::PCMPISTRIZrr:
  case X86::PCMPISTRIrm:
  case X86::PCMPISTRIrr:
  case X86::PCMPISTRM128rm:
  case X86::PCMPISTRM128rr:
  case X86::PEXTRBmr:
  case X86::PEXTRBrr:
  case X86::PEXTRDmr:
  case X86::PEXTRDrr:
  case X86::PEXTRQmr:
  case X86::PEXTRQrr:
  case X86::PEXTRWmr:
  case X86::PEXTRWri:
  case X86::PINSRBrr:
  case X86::PINSRDrm:
  case X86::PINSRDrr:
  case X86::PINSRQrm:
  case X86::PINSRQrr:
  case X86::PINSRWrmi:
  case X86::PINSRWrri:
  case X86::PSHUFDmi:
  case X86::PSHUFDri:
  case X86::PSHUFHWmi:
  case X86::PSHUFHWri:
  case X86::PSHUFLWmi:
  case X86::PSHUFLWri:
  case X86::ROUNDPDm:
  case X86::ROUNDPDr:
  case X86::ROUNDPSm:
  case X86::ROUNDPSr:
  case X86::ROUNDSDm:
  case X86::ROUNDSDr:
  case X86::ROUNDSSm:
  case X86::ROUNDSSr:
  case X86::SHLD16mri8:
  case X86::SHLD16rri8:
  case X86::SHLD32mri8:
  case X86::SHLD32rri8:
  case X86::SHLD64mri8:
  case X86::SHLD64rri8:
  case X86::SHRD16mri8:
  case X86::SHRD16rri8:
  case X86::SHRD32mri8:
  case X86::SHRD32rri8:
  case X86::SHRD64mri8:
  case X86::SHRD64rri8:
  case X86::SHUFPDrmi:
  case X86::SHUFPDrri:
  case X86::SHUFPSrmi:
  case X86::SHUFPSrri:
  case X86::VADDPDYrm:
  case X86::VADDPDYrr:
  case X86::VADDPDrm:
  case X86::VADDPDrr:
  case X86::VADDPSYrm:
  case X86::VADDPSYrr:
  case X86::VADDPSrm:
  case X86::VADDPSrr:
  case X86::VADDSDrm:
  case X86::VADDSDrm_Int:
  case X86::VADDSDrr:
  case X86::VADDSDrr_Int:
  case X86::VADDSSrm:
  case X86::VADDSSrm_Int:
  case X86::VADDSSrr:
  case X86::VADDSSrr_Int:
  case X86::VADDSUBPDYrm:
  case X86::VADDSUBPDYrr:
  case X86::VADDSUBPDrm:
  case X86::VADDSUBPDrr:
  case X86::VADDSUBPSYrm:
  case X86::VADDSUBPSYrr:
  case X86::VADDSUBPSrm:
  case X86::VADDSUBPSrr:
  case X86::VAESDECLASTrm:
  case X86::VAESDECLASTrr:
  case X86::VAESDECrm:
  case X86::VAESDECrr:
  case X86::VAESENCLASTrm:
  case X86::VAESENCLASTrr:
  case X86::VAESENCrm:
  case X86::VAESENCrr:
  case X86::VAESKEYGENASSIST128rm:
  case X86::VAESKEYGENASSIST128rr:
  case X86::VANDNPDYrm:
  case X86::VANDNPDYrr:
  case X86::VANDNPDrm:
  case X86::VANDNPDrr:
  case X86::VANDNPSYrm:
  case X86::VANDNPSYrr:
  case X86::VANDNPSrm:
  case X86::VANDNPSrr:
  case X86::VANDPDYrm:
  case X86::VANDPDYrr:
  case X86::VANDPDrm:
  case X86::VANDPDrr:
  case X86::VANDPSYrm:
  case X86::VANDPSYrr:
  case X86::VANDPSrm:
  case X86::VANDPSrr:
  case X86::VASTART_SAVE_XMM_REGS:
  case X86::VCMPPDYrmi:
  case X86::VCMPPDYrri:
  case X86::VCMPPDrmi:
  case X86::VCMPPDrri:
  case X86::VCMPPSYrmi:
  case X86::VCMPPSYrri:
  case X86::VCMPPSrmi:
  case X86::VCMPPSrri:
  case X86::VCMPSDrm:
  case X86::VCMPSDrr:
  case X86::VCMPSSrm:
  case X86::VCMPSSrr:
  case X86::VCVTSD2SSrm:
  case X86::VCVTSD2SSrr:
  case X86::VCVTSI2SD64rm:
  case X86::VCVTSI2SD64rr:
  case X86::VCVTSI2SDLrm:
  case X86::VCVTSI2SDLrr:
  case X86::VCVTSI2SDrm:
  case X86::VCVTSI2SDrr:
  case X86::VCVTSI2SS64rm:
  case X86::VCVTSI2SS64rr:
  case X86::VCVTSI2SSrm:
  case X86::VCVTSI2SSrr:
  case X86::VCVTSS2SDrm:
  case X86::VCVTSS2SDrr:
  case X86::VDIVPDYrm:
  case X86::VDIVPDYrr:
  case X86::VDIVPDrm:
  case X86::VDIVPDrr:
  case X86::VDIVPSYrm:
  case X86::VDIVPSYrr:
  case X86::VDIVPSrm:
  case X86::VDIVPSrr:
  case X86::VDIVSDrm:
  case X86::VDIVSDrm_Int:
  case X86::VDIVSDrr:
  case X86::VDIVSDrr_Int:
  case X86::VDIVSSrm:
  case X86::VDIVSSrm_Int:
  case X86::VDIVSSrr:
  case X86::VDIVSSrr_Int:
  case X86::VEXTRACTF128rr:
  case X86::VEXTRACTPSmr:
  case X86::VEXTRACTPSrr:
  case X86::VEXTRACTPSrr64:
  case X86::VFMADDPDr132m:
  case X86::VFMADDPDr132mY:
  case X86::VFMADDPDr132r:
  case X86::VFMADDPDr132rY:
  case X86::VFMADDPDr213m:
  case X86::VFMADDPDr213mY:
  case X86::VFMADDPDr213r:
  case X86::VFMADDPDr213rY:
  case X86::VFMADDPDr231m:
  case X86::VFMADDPDr231mY:
  case X86::VFMADDPDr231r:
  case X86::VFMADDPDr231rY:
  case X86::VFMADDPSr132m:
  case X86::VFMADDPSr132mY:
  case X86::VFMADDPSr132r:
  case X86::VFMADDPSr132rY:
  case X86::VFMADDPSr213m:
  case X86::VFMADDPSr213mY:
  case X86::VFMADDPSr213r:
  case X86::VFMADDPSr213rY:
  case X86::VFMADDPSr231m:
  case X86::VFMADDPSr231mY:
  case X86::VFMADDPSr231r:
  case X86::VFMADDPSr231rY:
  case X86::VFMADDSUBPDr132m:
  case X86::VFMADDSUBPDr132mY:
  case X86::VFMADDSUBPDr132r:
  case X86::VFMADDSUBPDr132rY:
  case X86::VFMADDSUBPDr213m:
  case X86::VFMADDSUBPDr213mY:
  case X86::VFMADDSUBPDr213r:
  case X86::VFMADDSUBPDr213rY:
  case X86::VFMADDSUBPDr231m:
  case X86::VFMADDSUBPDr231mY:
  case X86::VFMADDSUBPDr231r:
  case X86::VFMADDSUBPDr231rY:
  case X86::VFMADDSUBPSr132m:
  case X86::VFMADDSUBPSr132mY:
  case X86::VFMADDSUBPSr132r:
  case X86::VFMADDSUBPSr132rY:
  case X86::VFMADDSUBPSr213m:
  case X86::VFMADDSUBPSr213mY:
  case X86::VFMADDSUBPSr213r:
  case X86::VFMADDSUBPSr213rY:
  case X86::VFMADDSUBPSr231m:
  case X86::VFMADDSUBPSr231mY:
  case X86::VFMADDSUBPSr231r:
  case X86::VFMADDSUBPSr231rY:
  case X86::VFMSUBADDPDr132m:
  case X86::VFMSUBADDPDr132mY:
  case X86::VFMSUBADDPDr132r:
  case X86::VFMSUBADDPDr132rY:
  case X86::VFMSUBADDPDr213m:
  case X86::VFMSUBADDPDr213mY:
  case X86::VFMSUBADDPDr213r:
  case X86::VFMSUBADDPDr213rY:
  case X86::VFMSUBADDPDr231m:
  case X86::VFMSUBADDPDr231mY:
  case X86::VFMSUBADDPDr231r:
  case X86::VFMSUBADDPDr231rY:
  case X86::VFMSUBADDPSr132m:
  case X86::VFMSUBADDPSr132mY:
  case X86::VFMSUBADDPSr132r:
  case X86::VFMSUBADDPSr132rY:
  case X86::VFMSUBADDPSr213m:
  case X86::VFMSUBADDPSr213mY:
  case X86::VFMSUBADDPSr213r:
  case X86::VFMSUBADDPSr213rY:
  case X86::VFMSUBADDPSr231m:
  case X86::VFMSUBADDPSr231mY:
  case X86::VFMSUBADDPSr231r:
  case X86::VFMSUBADDPSr231rY:
  case X86::VFMSUBPDr132m:
  case X86::VFMSUBPDr132mY:
  case X86::VFMSUBPDr132r:
  case X86::VFMSUBPDr132rY:
  case X86::VFMSUBPDr213m:
  case X86::VFMSUBPDr213mY:
  case X86::VFMSUBPDr213r:
  case X86::VFMSUBPDr213rY:
  case X86::VFMSUBPDr231m:
  case X86::VFMSUBPDr231mY:
  case X86::VFMSUBPDr231r:
  case X86::VFMSUBPDr231rY:
  case X86::VFMSUBPSr132m:
  case X86::VFMSUBPSr132mY:
  case X86::VFMSUBPSr132r:
  case X86::VFMSUBPSr132rY:
  case X86::VFMSUBPSr213m:
  case X86::VFMSUBPSr213mY:
  case X86::VFMSUBPSr213r:
  case X86::VFMSUBPSr213rY:
  case X86::VFMSUBPSr231m:
  case X86::VFMSUBPSr231mY:
  case X86::VFMSUBPSr231r:
  case X86::VFMSUBPSr231rY:
  case X86::VFNMADDPDr132m:
  case X86::VFNMADDPDr132mY:
  case X86::VFNMADDPDr132r:
  case X86::VFNMADDPDr132rY:
  case X86::VFNMADDPDr213m:
  case X86::VFNMADDPDr213mY:
  case X86::VFNMADDPDr213r:
  case X86::VFNMADDPDr213rY:
  case X86::VFNMADDPDr231m:
  case X86::VFNMADDPDr231mY:
  case X86::VFNMADDPDr231r:
  case X86::VFNMADDPDr231rY:
  case X86::VFNMADDPSr132m:
  case X86::VFNMADDPSr132mY:
  case X86::VFNMADDPSr132r:
  case X86::VFNMADDPSr132rY:
  case X86::VFNMADDPSr213m:
  case X86::VFNMADDPSr213mY:
  case X86::VFNMADDPSr213r:
  case X86::VFNMADDPSr213rY:
  case X86::VFNMADDPSr231m:
  case X86::VFNMADDPSr231mY:
  case X86::VFNMADDPSr231r:
  case X86::VFNMADDPSr231rY:
  case X86::VFNMSUBPDr132m:
  case X86::VFNMSUBPDr132mY:
  case X86::VFNMSUBPDr132r:
  case X86::VFNMSUBPDr132rY:
  case X86::VFNMSUBPDr213m:
  case X86::VFNMSUBPDr213mY:
  case X86::VFNMSUBPDr213r:
  case X86::VFNMSUBPDr213rY:
  case X86::VFNMSUBPDr231m:
  case X86::VFNMSUBPDr231mY:
  case X86::VFNMSUBPDr231r:
  case X86::VFNMSUBPDr231rY:
  case X86::VFNMSUBPSr132m:
  case X86::VFNMSUBPSr132mY:
  case X86::VFNMSUBPSr132r:
  case X86::VFNMSUBPSr132rY:
  case X86::VFNMSUBPSr213m:
  case X86::VFNMSUBPSr213mY:
  case X86::VFNMSUBPSr213r:
  case X86::VFNMSUBPSr213rY:
  case X86::VFNMSUBPSr231m:
  case X86::VFNMSUBPSr231mY:
  case X86::VFNMSUBPSr231r:
  case X86::VFNMSUBPSr231rY:
  case X86::VFsANDNPDrm:
  case X86::VFsANDNPDrr:
  case X86::VFsANDNPSrm:
  case X86::VFsANDNPSrr:
  case X86::VFsANDPDrm:
  case X86::VFsANDPDrr:
  case X86::VFsANDPSrm:
  case X86::VFsANDPSrr:
  case X86::VFsORPDrm:
  case X86::VFsORPDrr:
  case X86::VFsORPSrm:
  case X86::VFsORPSrr:
  case X86::VFsXORPDrm:
  case X86::VFsXORPDrr:
  case X86::VFsXORPSrm:
  case X86::VFsXORPSrr:
  case X86::VHADDPDYrm:
  case X86::VHADDPDYrr:
  case X86::VHADDPDrm:
  case X86::VHADDPDrr:
  case X86::VHADDPSYrm:
  case X86::VHADDPSYrr:
  case X86::VHADDPSrm:
  case X86::VHADDPSrr:
  case X86::VHSUBPDYrm:
  case X86::VHSUBPDYrr:
  case X86::VHSUBPDrm:
  case X86::VHSUBPDrr:
  case X86::VHSUBPSYrm:
  case X86::VHSUBPSYrr:
  case X86::VHSUBPSrm:
  case X86::VHSUBPSrr:
  case X86::VMASKMOVPDYrm:
  case X86::VMASKMOVPDrm:
  case X86::VMASKMOVPSYrm:
  case X86::VMASKMOVPSrm:
  case X86::VMAXPDYrm:
  case X86::VMAXPDYrm_Int:
  case X86::VMAXPDYrr:
  case X86::VMAXPDYrr_Int:
  case X86::VMAXPDrm:
  case X86::VMAXPDrm_Int:
  case X86::VMAXPDrr:
  case X86::VMAXPDrr_Int:
  case X86::VMAXPSYrm:
  case X86::VMAXPSYrm_Int:
  case X86::VMAXPSYrr:
  case X86::VMAXPSYrr_Int:
  case X86::VMAXPSrm:
  case X86::VMAXPSrm_Int:
  case X86::VMAXPSrr:
  case X86::VMAXPSrr_Int:
  case X86::VMAXSDrm:
  case X86::VMAXSDrm_Int:
  case X86::VMAXSDrr:
  case X86::VMAXSDrr_Int:
  case X86::VMAXSSrm:
  case X86::VMAXSSrm_Int:
  case X86::VMAXSSrr:
  case X86::VMAXSSrr_Int:
  case X86::VMINPDYrm:
  case X86::VMINPDYrm_Int:
  case X86::VMINPDYrr:
  case X86::VMINPDYrr_Int:
  case X86::VMINPDrm:
  case X86::VMINPDrm_Int:
  case X86::VMINPDrr:
  case X86::VMINPDrr_Int:
  case X86::VMINPSYrm:
  case X86::VMINPSYrm_Int:
  case X86::VMINPSYrr:
  case X86::VMINPSYrr_Int:
  case X86::VMINPSrm:
  case X86::VMINPSrm_Int:
  case X86::VMINPSrr:
  case X86::VMINPSrr_Int:
  case X86::VMINSDrm:
  case X86::VMINSDrm_Int:
  case X86::VMINSDrr:
  case X86::VMINSDrr_Int:
  case X86::VMINSSrm:
  case X86::VMINSSrm_Int:
  case X86::VMINSSrr:
  case X86::VMINSSrr_Int:
  case X86::VMOVHLPSrr:
  case X86::VMOVHPDrm:
  case X86::VMOVHPSrm:
  case X86::VMOVLHPSrr:
  case X86::VMOVLPDrm:
  case X86::VMOVLPSrm:
  case X86::VMOVSDrr:
  case X86::VMOVSSrr:
  case X86::VMULPDYrm:
  case X86::VMULPDYrr:
  case X86::VMULPDrm:
  case X86::VMULPDrr:
  case X86::VMULPSYrm:
  case X86::VMULPSYrr:
  case X86::VMULPSrm:
  case X86::VMULPSrr:
  case X86::VMULSDrm:
  case X86::VMULSDrm_Int:
  case X86::VMULSDrr:
  case X86::VMULSDrr_Int:
  case X86::VMULSSrm:
  case X86::VMULSSrm_Int:
  case X86::VMULSSrr:
  case X86::VMULSSrr_Int:
  case X86::VORPDYrm:
  case X86::VORPDYrr:
  case X86::VORPDrm:
  case X86::VORPDrr:
  case X86::VORPSYrm:
  case X86::VORPSYrr:
  case X86::VORPSrm:
  case X86::VORPSrr:
  case X86::VPACKSSDWrm:
  case X86::VPACKSSDWrr:
  case X86::VPACKSSWBrm:
  case X86::VPACKSSWBrr:
  case X86::VPACKUSDWrm:
  case X86::VPACKUSDWrr:
  case X86::VPACKUSWBrm:
  case X86::VPACKUSWBrr:
  case X86::VPADDBrm:
  case X86::VPADDBrr:
  case X86::VPADDDrm:
  case X86::VPADDDrr:
  case X86::VPADDQrm:
  case X86::VPADDQrr:
  case X86::VPADDSBrm:
  case X86::VPADDSBrr:
  case X86::VPADDSWrm:
  case X86::VPADDSWrr:
  case X86::VPADDUSBrm:
  case X86::VPADDUSBrr:
  case X86::VPADDUSWrm:
  case X86::VPADDUSWrr:
  case X86::VPADDWrm:
  case X86::VPADDWrr:
  case X86::VPANDNrm:
  case X86::VPANDNrr:
  case X86::VPANDrm:
  case X86::VPANDrr:
  case X86::VPAVGBrm:
  case X86::VPAVGBrr:
  case X86::VPAVGWrm:
  case X86::VPAVGWrr:
  case X86::VPCMPEQBrm:
  case X86::VPCMPEQBrr:
  case X86::VPCMPEQDrm:
  case X86::VPCMPEQDrr:
  case X86::VPCMPEQQrm:
  case X86::VPCMPEQQrr:
  case X86::VPCMPEQWrm:
  case X86::VPCMPEQWrr:
  case X86::VPCMPESTRIArm:
  case X86::VPCMPESTRIArr:
  case X86::VPCMPESTRICrm:
  case X86::VPCMPESTRICrr:
  case X86::VPCMPESTRIOrm:
  case X86::VPCMPESTRIOrr:
  case X86::VPCMPESTRISrm:
  case X86::VPCMPESTRISrr:
  case X86::VPCMPESTRIZrm:
  case X86::VPCMPESTRIZrr:
  case X86::VPCMPESTRIrm:
  case X86::VPCMPESTRIrr:
  case X86::VPCMPESTRM128rm:
  case X86::VPCMPESTRM128rr:
  case X86::VPCMPGTBrm:
  case X86::VPCMPGTBrr:
  case X86::VPCMPGTDrm:
  case X86::VPCMPGTDrr:
  case X86::VPCMPGTQrm:
  case X86::VPCMPGTQrr:
  case X86::VPCMPGTWrm:
  case X86::VPCMPGTWrr:
  case X86::VPCMPISTRIArm:
  case X86::VPCMPISTRIArr:
  case X86::VPCMPISTRICrm:
  case X86::VPCMPISTRICrr:
  case X86::VPCMPISTRIOrm:
  case X86::VPCMPISTRIOrr:
  case X86::VPCMPISTRISrm:
  case X86::VPCMPISTRISrr:
  case X86::VPCMPISTRIZrm:
  case X86::VPCMPISTRIZrr:
  case X86::VPCMPISTRIrm:
  case X86::VPCMPISTRIrr:
  case X86::VPCMPISTRM128rm:
  case X86::VPCMPISTRM128rr:
  case X86::VPERMILPDYmi:
  case X86::VPERMILPDYri:
  case X86::VPERMILPDYrm:
  case X86::VPERMILPDYrr:
  case X86::VPERMILPDmi:
  case X86::VPERMILPDri:
  case X86::VPERMILPDrm:
  case X86::VPERMILPDrr:
  case X86::VPERMILPSYmi:
  case X86::VPERMILPSYri:
  case X86::VPERMILPSYrm:
  case X86::VPERMILPSYrr:
  case X86::VPERMILPSmi:
  case X86::VPERMILPSri:
  case X86::VPERMILPSrm:
  case X86::VPERMILPSrr:
  case X86::VPEXTRBmr:
  case X86::VPEXTRBrr:
  case X86::VPEXTRBrr64:
  case X86::VPEXTRDmr:
  case X86::VPEXTRDrr:
  case X86::VPEXTRQmr:
  case X86::VPEXTRQrr:
  case X86::VPEXTRWmr:
  case X86::VPEXTRWri:
  case X86::VPHADDDrm128:
  case X86::VPHADDDrr128:
  case X86::VPHADDSWrm128:
  case X86::VPHADDSWrr128:
  case X86::VPHADDWrm128:
  case X86::VPHADDWrr128:
  case X86::VPHSUBDrm128:
  case X86::VPHSUBDrr128:
  case X86::VPHSUBSWrm128:
  case X86::VPHSUBSWrr128:
  case X86::VPHSUBWrm128:
  case X86::VPHSUBWrr128:
  case X86::VPMADDUBSWrm128:
  case X86::VPMADDUBSWrr128:
  case X86::VPMADDWDrm:
  case X86::VPMADDWDrr:
  case X86::VPMAXSBrm:
  case X86::VPMAXSBrr:
  case X86::VPMAXSDrm:
  case X86::VPMAXSDrr:
  case X86::VPMAXSWrm:
  case X86::VPMAXSWrr:
  case X86::VPMAXUBrm:
  case X86::VPMAXUBrr:
  case X86::VPMAXUDrm:
  case X86::VPMAXUDrr:
  case X86::VPMAXUWrm:
  case X86::VPMAXUWrr:
  case X86::VPMINSBrm:
  case X86::VPMINSBrr:
  case X86::VPMINSDrm:
  case X86::VPMINSDrr:
  case X86::VPMINSWrm:
  case X86::VPMINSWrr:
  case X86::VPMINUBrm:
  case X86::VPMINUBrr:
  case X86::VPMINUDrm:
  case X86::VPMINUDrr:
  case X86::VPMINUWrm:
  case X86::VPMINUWrr:
  case X86::VPMULDQrm:
  case X86::VPMULDQrr:
  case X86::VPMULHRSWrm128:
  case X86::VPMULHRSWrr128:
  case X86::VPMULHUWrm:
  case X86::VPMULHUWrr:
  case X86::VPMULHWrm:
  case X86::VPMULHWrr:
  case X86::VPMULLDrm:
  case X86::VPMULLDrr:
  case X86::VPMULLWrm:
  case X86::VPMULLWrr:
  case X86::VPMULUDQrm:
  case X86::VPMULUDQrr:
  case X86::VPORrm:
  case X86::VPORrr:
  case X86::VPSADBWrm:
  case X86::VPSADBWrr:
  case X86::VPSHUFBrm128:
  case X86::VPSHUFBrr128:
  case X86::VPSHUFDmi:
  case X86::VPSHUFDri:
  case X86::VPSHUFHWmi:
  case X86::VPSHUFHWri:
  case X86::VPSHUFLWmi:
  case X86::VPSHUFLWri:
  case X86::VPSIGNBrm128:
  case X86::VPSIGNBrr128:
  case X86::VPSIGNDrm128:
  case X86::VPSIGNDrr128:
  case X86::VPSIGNWrm128:
  case X86::VPSIGNWrr128:
  case X86::VPSLLDQri:
  case X86::VPSLLDri:
  case X86::VPSLLDrm:
  case X86::VPSLLDrr:
  case X86::VPSLLQri:
  case X86::VPSLLQrm:
  case X86::VPSLLQrr:
  case X86::VPSLLWri:
  case X86::VPSLLWrm:
  case X86::VPSLLWrr:
  case X86::VPSRADri:
  case X86::VPSRADrm:
  case X86::VPSRADrr:
  case X86::VPSRAWri:
  case X86::VPSRAWrm:
  case X86::VPSRAWrr:
  case X86::VPSRLDQri:
  case X86::VPSRLDri:
  case X86::VPSRLDrm:
  case X86::VPSRLDrr:
  case X86::VPSRLQri:
  case X86::VPSRLQrm:
  case X86::VPSRLQrr:
  case X86::VPSRLWri:
  case X86::VPSRLWrm:
  case X86::VPSRLWrr:
  case X86::VPSUBBrm:
  case X86::VPSUBBrr:
  case X86::VPSUBDrm:
  case X86::VPSUBDrr:
  case X86::VPSUBQrm:
  case X86::VPSUBQrr:
  case X86::VPSUBSBrm:
  case X86::VPSUBSBrr:
  case X86::VPSUBSWrm:
  case X86::VPSUBSWrr:
  case X86::VPSUBUSBrm:
  case X86::VPSUBUSBrr:
  case X86::VPSUBUSWrm:
  case X86::VPSUBUSWrr:
  case X86::VPSUBWrm:
  case X86::VPSUBWrr:
  case X86::VPUNPCKHBWrm:
  case X86::VPUNPCKHBWrr:
  case X86::VPUNPCKHDQrm:
  case X86::VPUNPCKHDQrr:
  case X86::VPUNPCKHQDQrm:
  case X86::VPUNPCKHQDQrr:
  case X86::VPUNPCKHWDrm:
  case X86::VPUNPCKHWDrr:
  case X86::VPUNPCKLBWrm:
  case X86::VPUNPCKLBWrr:
  case X86::VPUNPCKLDQrm:
  case X86::VPUNPCKLDQrr:
  case X86::VPUNPCKLQDQrm:
  case X86::VPUNPCKLQDQrr:
  case X86::VPUNPCKLWDrm:
  case X86::VPUNPCKLWDrr:
  case X86::VPXORrm:
  case X86::VPXORrr:
  case X86::VRCPSSm:
  case X86::VRCPSSr:
  case X86::VROUNDPDm:
  case X86::VROUNDPDm_AVX:
  case X86::VROUNDPDr:
  case X86::VROUNDPDr_AVX:
  case X86::VROUNDPSm:
  case X86::VROUNDPSm_AVX:
  case X86::VROUNDPSr:
  case X86::VROUNDPSr_AVX:
  case X86::VROUNDYPDm:
  case X86::VROUNDYPDm_AVX:
  case X86::VROUNDYPDr:
  case X86::VROUNDYPDr_AVX:
  case X86::VROUNDYPSm:
  case X86::VROUNDYPSm_AVX:
  case X86::VROUNDYPSr:
  case X86::VROUNDYPSr_AVX:
  case X86::VRSQRTSSm:
  case X86::VRSQRTSSr:
  case X86::VSQRTSDm:
  case X86::VSQRTSDr:
  case X86::VSQRTSSm:
  case X86::VSQRTSSr:
  case X86::VSUBPDYrm:
  case X86::VSUBPDYrr:
  case X86::VSUBPDrm:
  case X86::VSUBPDrr:
  case X86::VSUBPSYrm:
  case X86::VSUBPSYrr:
  case X86::VSUBPSrm:
  case X86::VSUBPSrr:
  case X86::VSUBSDrm:
  case X86::VSUBSDrm_Int:
  case X86::VSUBSDrr:
  case X86::VSUBSDrr_Int:
  case X86::VSUBSSrm:
  case X86::VSUBSSrm_Int:
  case X86::VSUBSSrr:
  case X86::VSUBSSrr_Int:
  case X86::VUNPCKHPDYrm:
  case X86::VUNPCKHPDYrr:
  case X86::VUNPCKHPDrm:
  case X86::VUNPCKHPDrr:
  case X86::VUNPCKHPSYrm:
  case X86::VUNPCKHPSYrr:
  case X86::VUNPCKHPSrm:
  case X86::VUNPCKHPSrr:
  case X86::VUNPCKLPDYrm:
  case X86::VUNPCKLPDYrr:
  case X86::VUNPCKLPDrm:
  case X86::VUNPCKLPDrr:
  case X86::VUNPCKLPSYrm:
  case X86::VUNPCKLPSYrr:
  case X86::VUNPCKLPSrm:
  case X86::VUNPCKLPSrr:
  case X86::VXORPDYrm:
  case X86::VXORPDYrr:
  case X86::VXORPDrm:
  case X86::VXORPDrr:
  case X86::VXORPSYrm:
  case X86::VXORPSYrr:
  case X86::VXORPSrm:
  case X86::VXORPSrr:
    switch (MI->getOpcode()) {
    case X86::AESKEYGENASSIST128rm: 
    case X86::EXTRACTPSmr: 
    case X86::IMUL16rmi: 
    case X86::IMUL16rmi8: 
    case X86::IMUL32rmi: 
    case X86::IMUL32rmi8: 
    case X86::IMUL64rmi32: 
    case X86::IMUL64rmi8: 
    case X86::MMX_PSHUFWmi: 
    case X86::PCMPESTRIArm: 
    case X86::PCMPESTRICrm: 
    case X86::PCMPESTRIOrm: 
    case X86::PCMPESTRISrm: 
    case X86::PCMPESTRIZrm: 
    case X86::PCMPESTRIrm: 
    case X86::PCMPESTRM128rm: 
    case X86::PCMPISTRIArm: 
    case X86::PCMPISTRICrm: 
    case X86::PCMPISTRIOrm: 
    case X86::PCMPISTRISrm: 
    case X86::PCMPISTRIZrm: 
    case X86::PCMPISTRIrm: 
    case X86::PCMPISTRM128rm: 
    case X86::PEXTRBmr: 
    case X86::PEXTRDmr: 
    case X86::PEXTRQmr: 
    case X86::PEXTRWmr: 
    case X86::PSHUFDmi: 
    case X86::PSHUFHWmi: 
    case X86::PSHUFLWmi: 
    case X86::ROUNDPDm: 
    case X86::ROUNDPSm: 
    case X86::SHLD16mri8: 
    case X86::SHLD32mri8: 
    case X86::SHLD64mri8: 
    case X86::SHRD16mri8: 
    case X86::SHRD32mri8: 
    case X86::SHRD64mri8: 
    case X86::VAESKEYGENASSIST128rm: 
    case X86::VEXTRACTPSmr: 
    case X86::VPCMPESTRIArm: 
    case X86::VPCMPESTRICrm: 
    case X86::VPCMPESTRIOrm: 
    case X86::VPCMPESTRISrm: 
    case X86::VPCMPESTRIZrm: 
    case X86::VPCMPESTRIrm: 
    case X86::VPCMPESTRM128rm: 
    case X86::VPCMPISTRIArm: 
    case X86::VPCMPISTRICrm: 
    case X86::VPCMPISTRIOrm: 
    case X86::VPCMPISTRISrm: 
    case X86::VPCMPISTRIZrm: 
    case X86::VPCMPISTRIrm: 
    case X86::VPCMPISTRM128rm: 
    case X86::VPERMILPDYmi: 
    case X86::VPERMILPDmi: 
    case X86::VPERMILPSYmi: 
    case X86::VPERMILPSmi: 
    case X86::VPEXTRBmr: 
    case X86::VPEXTRDmr: 
    case X86::VPEXTRQmr: 
    case X86::VPEXTRWmr: 
    case X86::VPSHUFDmi: 
    case X86::VPSHUFHWmi: 
    case X86::VPSHUFLWmi: 
    case X86::VROUNDPDm: 
    case X86::VROUNDPDm_AVX: 
    case X86::VROUNDPSm: 
    case X86::VROUNDPSm_AVX: 
    case X86::VROUNDYPDm: 
    case X86::VROUNDYPDm_AVX: 
    case X86::VROUNDYPSm: 
    case X86::VROUNDYPSm_AVX: printOperand(MI, 6, O); break;
    case X86::AESKEYGENASSIST128rr: 
    case X86::EXTRACTPSrr: 
    case X86::IMUL16rri: 
    case X86::IMUL16rri8: 
    case X86::IMUL32rri: 
    case X86::IMUL32rri8: 
    case X86::IMUL64rri32: 
    case X86::IMUL64rri8: 
    case X86::Int_VCMPSDrr: 
    case X86::Int_VCMPSSrr: 
    case X86::Int_VCVTSD2SSrr: 
    case X86::Int_VCVTSI2SD64rr: 
    case X86::Int_VCVTSI2SDrr: 
    case X86::Int_VCVTSI2SS64rr: 
    case X86::Int_VCVTSI2SSrr: 
    case X86::Int_VCVTSS2SDrr: 
    case X86::MMX_PEXTRWirri: 
    case X86::MMX_PSHUFWri: 
    case X86::PCMPESTRIArr: 
    case X86::PCMPESTRICrr: 
    case X86::PCMPESTRIOrr: 
    case X86::PCMPESTRISrr: 
    case X86::PCMPESTRIZrr: 
    case X86::PCMPESTRIrr: 
    case X86::PCMPESTRM128rr: 
    case X86::PCMPISTRIArr: 
    case X86::PCMPISTRICrr: 
    case X86::PCMPISTRIOrr: 
    case X86::PCMPISTRISrr: 
    case X86::PCMPISTRIZrr: 
    case X86::PCMPISTRIrr: 
    case X86::PCMPISTRM128rr: 
    case X86::PEXTRBrr: 
    case X86::PEXTRDrr: 
    case X86::PEXTRQrr: 
    case X86::PEXTRWri: 
    case X86::PSHUFDri: 
    case X86::PSHUFHWri: 
    case X86::PSHUFLWri: 
    case X86::ROUNDPDr: 
    case X86::ROUNDPSr: 
    case X86::VADDPDYrr: 
    case X86::VADDPDrr: 
    case X86::VADDPSYrr: 
    case X86::VADDPSrr: 
    case X86::VADDSDrr: 
    case X86::VADDSDrr_Int: 
    case X86::VADDSSrr: 
    case X86::VADDSSrr_Int: 
    case X86::VADDSUBPDYrr: 
    case X86::VADDSUBPDrr: 
    case X86::VADDSUBPSYrr: 
    case X86::VADDSUBPSrr: 
    case X86::VAESDECLASTrr: 
    case X86::VAESDECrr: 
    case X86::VAESENCLASTrr: 
    case X86::VAESENCrr: 
    case X86::VAESKEYGENASSIST128rr: 
    case X86::VANDNPDYrr: 
    case X86::VANDNPDrr: 
    case X86::VANDNPSYrr: 
    case X86::VANDNPSrr: 
    case X86::VANDPDYrr: 
    case X86::VANDPDrr: 
    case X86::VANDPSYrr: 
    case X86::VANDPSrr: 
    case X86::VASTART_SAVE_XMM_REGS: 
    case X86::VCMPPDYrri: 
    case X86::VCMPPDrri: 
    case X86::VCMPPSYrri: 
    case X86::VCMPPSrri: 
    case X86::VCMPSDrr: 
    case X86::VCMPSSrr: 
    case X86::VCVTSD2SSrr: 
    case X86::VCVTSI2SD64rr: 
    case X86::VCVTSI2SDLrr: 
    case X86::VCVTSI2SDrr: 
    case X86::VCVTSI2SS64rr: 
    case X86::VCVTSI2SSrr: 
    case X86::VCVTSS2SDrr: 
    case X86::VDIVPDYrr: 
    case X86::VDIVPDrr: 
    case X86::VDIVPSYrr: 
    case X86::VDIVPSrr: 
    case X86::VDIVSDrr: 
    case X86::VDIVSDrr_Int: 
    case X86::VDIVSSrr: 
    case X86::VDIVSSrr_Int: 
    case X86::VEXTRACTF128rr: 
    case X86::VEXTRACTPSrr: 
    case X86::VEXTRACTPSrr64: 
    case X86::VFMADDPDr132r: 
    case X86::VFMADDPDr132rY: 
    case X86::VFMADDPDr213r: 
    case X86::VFMADDPDr213rY: 
    case X86::VFMADDPDr231r: 
    case X86::VFMADDPDr231rY: 
    case X86::VFMADDPSr132r: 
    case X86::VFMADDPSr132rY: 
    case X86::VFMADDPSr213r: 
    case X86::VFMADDPSr213rY: 
    case X86::VFMADDPSr231r: 
    case X86::VFMADDPSr231rY: 
    case X86::VFMADDSUBPDr132r: 
    case X86::VFMADDSUBPDr132rY: 
    case X86::VFMADDSUBPDr213r: 
    case X86::VFMADDSUBPDr213rY: 
    case X86::VFMADDSUBPDr231r: 
    case X86::VFMADDSUBPDr231rY: 
    case X86::VFMADDSUBPSr132r: 
    case X86::VFMADDSUBPSr132rY: 
    case X86::VFMADDSUBPSr213r: 
    case X86::VFMADDSUBPSr213rY: 
    case X86::VFMADDSUBPSr231r: 
    case X86::VFMADDSUBPSr231rY: 
    case X86::VFMSUBADDPDr132r: 
    case X86::VFMSUBADDPDr132rY: 
    case X86::VFMSUBADDPDr213r: 
    case X86::VFMSUBADDPDr213rY: 
    case X86::VFMSUBADDPDr231r: 
    case X86::VFMSUBADDPDr231rY: 
    case X86::VFMSUBADDPSr132r: 
    case X86::VFMSUBADDPSr132rY: 
    case X86::VFMSUBADDPSr213r: 
    case X86::VFMSUBADDPSr213rY: 
    case X86::VFMSUBADDPSr231r: 
    case X86::VFMSUBADDPSr231rY: 
    case X86::VFMSUBPDr132r: 
    case X86::VFMSUBPDr132rY: 
    case X86::VFMSUBPDr213r: 
    case X86::VFMSUBPDr213rY: 
    case X86::VFMSUBPDr231r: 
    case X86::VFMSUBPDr231rY: 
    case X86::VFMSUBPSr132r: 
    case X86::VFMSUBPSr132rY: 
    case X86::VFMSUBPSr213r: 
    case X86::VFMSUBPSr213rY: 
    case X86::VFMSUBPSr231r: 
    case X86::VFMSUBPSr231rY: 
    case X86::VFNMADDPDr132r: 
    case X86::VFNMADDPDr132rY: 
    case X86::VFNMADDPDr213r: 
    case X86::VFNMADDPDr213rY: 
    case X86::VFNMADDPDr231r: 
    case X86::VFNMADDPDr231rY: 
    case X86::VFNMADDPSr132r: 
    case X86::VFNMADDPSr132rY: 
    case X86::VFNMADDPSr213r: 
    case X86::VFNMADDPSr213rY: 
    case X86::VFNMADDPSr231r: 
    case X86::VFNMADDPSr231rY: 
    case X86::VFNMSUBPDr132r: 
    case X86::VFNMSUBPDr132rY: 
    case X86::VFNMSUBPDr213r: 
    case X86::VFNMSUBPDr213rY: 
    case X86::VFNMSUBPDr231r: 
    case X86::VFNMSUBPDr231rY: 
    case X86::VFNMSUBPSr132r: 
    case X86::VFNMSUBPSr132rY: 
    case X86::VFNMSUBPSr213r: 
    case X86::VFNMSUBPSr213rY: 
    case X86::VFNMSUBPSr231r: 
    case X86::VFNMSUBPSr231rY: 
    case X86::VFsANDNPDrr: 
    case X86::VFsANDNPSrr: 
    case X86::VFsANDPDrr: 
    case X86::VFsANDPSrr: 
    case X86::VFsORPDrr: 
    case X86::VFsORPSrr: 
    case X86::VFsXORPDrr: 
    case X86::VFsXORPSrr: 
    case X86::VHADDPDYrr: 
    case X86::VHADDPDrr: 
    case X86::VHADDPSYrr: 
    case X86::VHADDPSrr: 
    case X86::VHSUBPDYrr: 
    case X86::VHSUBPDrr: 
    case X86::VHSUBPSYrr: 
    case X86::VHSUBPSrr: 
    case X86::VMAXPDYrr: 
    case X86::VMAXPDYrr_Int: 
    case X86::VMAXPDrr: 
    case X86::VMAXPDrr_Int: 
    case X86::VMAXPSYrr: 
    case X86::VMAXPSYrr_Int: 
    case X86::VMAXPSrr: 
    case X86::VMAXPSrr_Int: 
    case X86::VMAXSDrr: 
    case X86::VMAXSDrr_Int: 
    case X86::VMAXSSrr: 
    case X86::VMAXSSrr_Int: 
    case X86::VMINPDYrr: 
    case X86::VMINPDYrr_Int: 
    case X86::VMINPDrr: 
    case X86::VMINPDrr_Int: 
    case X86::VMINPSYrr: 
    case X86::VMINPSYrr_Int: 
    case X86::VMINPSrr: 
    case X86::VMINPSrr_Int: 
    case X86::VMINSDrr: 
    case X86::VMINSDrr_Int: 
    case X86::VMINSSrr: 
    case X86::VMINSSrr_Int: 
    case X86::VMOVHLPSrr: 
    case X86::VMOVLHPSrr: 
    case X86::VMOVSDrr: 
    case X86::VMOVSSrr: 
    case X86::VMULPDYrr: 
    case X86::VMULPDrr: 
    case X86::VMULPSYrr: 
    case X86::VMULPSrr: 
    case X86::VMULSDrr: 
    case X86::VMULSDrr_Int: 
    case X86::VMULSSrr: 
    case X86::VMULSSrr_Int: 
    case X86::VORPDYrr: 
    case X86::VORPDrr: 
    case X86::VORPSYrr: 
    case X86::VORPSrr: 
    case X86::VPACKSSDWrr: 
    case X86::VPACKSSWBrr: 
    case X86::VPACKUSDWrr: 
    case X86::VPACKUSWBrr: 
    case X86::VPADDBrr: 
    case X86::VPADDDrr: 
    case X86::VPADDQrr: 
    case X86::VPADDSBrr: 
    case X86::VPADDSWrr: 
    case X86::VPADDUSBrr: 
    case X86::VPADDUSWrr: 
    case X86::VPADDWrr: 
    case X86::VPANDNrr: 
    case X86::VPANDrr: 
    case X86::VPAVGBrr: 
    case X86::VPAVGWrr: 
    case X86::VPCMPEQBrr: 
    case X86::VPCMPEQDrr: 
    case X86::VPCMPEQQrr: 
    case X86::VPCMPEQWrr: 
    case X86::VPCMPESTRIArr: 
    case X86::VPCMPESTRICrr: 
    case X86::VPCMPESTRIOrr: 
    case X86::VPCMPESTRISrr: 
    case X86::VPCMPESTRIZrr: 
    case X86::VPCMPESTRIrr: 
    case X86::VPCMPESTRM128rr: 
    case X86::VPCMPGTBrr: 
    case X86::VPCMPGTDrr: 
    case X86::VPCMPGTQrr: 
    case X86::VPCMPGTWrr: 
    case X86::VPCMPISTRIArr: 
    case X86::VPCMPISTRICrr: 
    case X86::VPCMPISTRIOrr: 
    case X86::VPCMPISTRISrr: 
    case X86::VPCMPISTRIZrr: 
    case X86::VPCMPISTRIrr: 
    case X86::VPCMPISTRM128rr: 
    case X86::VPERMILPDYri: 
    case X86::VPERMILPDYrr: 
    case X86::VPERMILPDri: 
    case X86::VPERMILPDrr: 
    case X86::VPERMILPSYri: 
    case X86::VPERMILPSYrr: 
    case X86::VPERMILPSri: 
    case X86::VPERMILPSrr: 
    case X86::VPEXTRBrr: 
    case X86::VPEXTRBrr64: 
    case X86::VPEXTRDrr: 
    case X86::VPEXTRQrr: 
    case X86::VPEXTRWri: 
    case X86::VPHADDDrr128: 
    case X86::VPHADDSWrr128: 
    case X86::VPHADDWrr128: 
    case X86::VPHSUBDrr128: 
    case X86::VPHSUBSWrr128: 
    case X86::VPHSUBWrr128: 
    case X86::VPMADDUBSWrr128: 
    case X86::VPMADDWDrr: 
    case X86::VPMAXSBrr: 
    case X86::VPMAXSDrr: 
    case X86::VPMAXSWrr: 
    case X86::VPMAXUBrr: 
    case X86::VPMAXUDrr: 
    case X86::VPMAXUWrr: 
    case X86::VPMINSBrr: 
    case X86::VPMINSDrr: 
    case X86::VPMINSWrr: 
    case X86::VPMINUBrr: 
    case X86::VPMINUDrr: 
    case X86::VPMINUWrr: 
    case X86::VPMULDQrr: 
    case X86::VPMULHRSWrr128: 
    case X86::VPMULHUWrr: 
    case X86::VPMULHWrr: 
    case X86::VPMULLDrr: 
    case X86::VPMULLWrr: 
    case X86::VPMULUDQrr: 
    case X86::VPORrr: 
    case X86::VPSADBWrr: 
    case X86::VPSHUFBrr128: 
    case X86::VPSHUFDri: 
    case X86::VPSHUFHWri: 
    case X86::VPSHUFLWri: 
    case X86::VPSIGNBrr128: 
    case X86::VPSIGNDrr128: 
    case X86::VPSIGNWrr128: 
    case X86::VPSLLDQri: 
    case X86::VPSLLDri: 
    case X86::VPSLLDrr: 
    case X86::VPSLLQri: 
    case X86::VPSLLQrr: 
    case X86::VPSLLWri: 
    case X86::VPSLLWrr: 
    case X86::VPSRADri: 
    case X86::VPSRADrr: 
    case X86::VPSRAWri: 
    case X86::VPSRAWrr: 
    case X86::VPSRLDQri: 
    case X86::VPSRLDri: 
    case X86::VPSRLDrr: 
    case X86::VPSRLQri: 
    case X86::VPSRLQrr: 
    case X86::VPSRLWri: 
    case X86::VPSRLWrr: 
    case X86::VPSUBBrr: 
    case X86::VPSUBDrr: 
    case X86::VPSUBQrr: 
    case X86::VPSUBSBrr: 
    case X86::VPSUBSWrr: 
    case X86::VPSUBUSBrr: 
    case X86::VPSUBUSWrr: 
    case X86::VPSUBWrr: 
    case X86::VPUNPCKHBWrr: 
    case X86::VPUNPCKHDQrr: 
    case X86::VPUNPCKHQDQrr: 
    case X86::VPUNPCKHWDrr: 
    case X86::VPUNPCKLBWrr: 
    case X86::VPUNPCKLDQrr: 
    case X86::VPUNPCKLQDQrr: 
    case X86::VPUNPCKLWDrr: 
    case X86::VPXORrr: 
    case X86::VRCPSSr: 
    case X86::VROUNDPDr: 
    case X86::VROUNDPDr_AVX: 
    case X86::VROUNDPSr: 
    case X86::VROUNDPSr_AVX: 
    case X86::VROUNDYPDr: 
    case X86::VROUNDYPDr_AVX: 
    case X86::VROUNDYPSr: 
    case X86::VROUNDYPSr_AVX: 
    case X86::VRSQRTSSr: 
    case X86::VSQRTSDr: 
    case X86::VSQRTSSr: 
    case X86::VSUBPDYrr: 
    case X86::VSUBPDrr: 
    case X86::VSUBPSYrr: 
    case X86::VSUBPSrr: 
    case X86::VSUBSDrr: 
    case X86::VSUBSDrr_Int: 
    case X86::VSUBSSrr: 
    case X86::VSUBSSrr_Int: 
    case X86::VUNPCKHPDYrr: 
    case X86::VUNPCKHPDrr: 
    case X86::VUNPCKHPSYrr: 
    case X86::VUNPCKHPSrr: 
    case X86::VUNPCKLPDYrr: 
    case X86::VUNPCKLPDrr: 
    case X86::VUNPCKLPSYrr: 
    case X86::VUNPCKLPSrr: 
    case X86::VXORPDYrr: 
    case X86::VXORPDrr: 
    case X86::VXORPSYrr: 
    case X86::VXORPSrr: printOperand(MI, 2, O); break;
    case X86::BLENDPDrmi: 
    case X86::BLENDPSrmi: 
    case X86::CMPPDrmi_alt: 
    case X86::CMPPSrmi_alt: 
    case X86::CMPSDrm_alt: 
    case X86::CMPSSrm_alt: 
    case X86::DPPDrmi: 
    case X86::DPPSrmi: 
    case X86::INSERTPSrm: 
    case X86::MMX_PALIGNR64irm: 
    case X86::MMX_PINSRWirmi: 
    case X86::MPSADBWrmi: 
    case X86::PALIGNR128rm: 
    case X86::PBLENDWrmi: 
    case X86::PCLMULQDQrm: 
    case X86::PINSRDrm: 
    case X86::PINSRQrm: 
    case X86::PINSRWrmi: 
    case X86::ROUNDSDm: 
    case X86::ROUNDSSm: 
    case X86::SHUFPDrmi: 
    case X86::SHUFPSrmi: printOperand(MI, 7, O); break;
    case X86::BLENDPDrri: 
    case X86::BLENDPSrri: 
    case X86::CMPPDrri_alt: 
    case X86::CMPPSrri_alt: 
    case X86::CMPSDrr_alt: 
    case X86::CMPSSrr_alt: 
    case X86::DPPDrri: 
    case X86::DPPSrri: 
    case X86::INSERTPSrr: 
    case X86::MMX_PALIGNR64irr: 
    case X86::MMX_PINSRWirri: 
    case X86::MPSADBWrri: 
    case X86::PALIGNR128rr: 
    case X86::PBLENDWrri: 
    case X86::PCLMULQDQrr: 
    case X86::PINSRBrr: 
    case X86::PINSRDrr: 
    case X86::PINSRQrr: 
    case X86::PINSRWrri: 
    case X86::ROUNDSDr: 
    case X86::ROUNDSSr: 
    case X86::SHLD16rri8: 
    case X86::SHLD32rri8: 
    case X86::SHLD64rri8: 
    case X86::SHRD16rri8: 
    case X86::SHRD32rri8: 
    case X86::SHRD64rri8: 
    case X86::SHUFPDrri: 
    case X86::SHUFPSrri: printOperand(MI, 3, O); break;
    case X86::Int_VCMPSDrm: 
    case X86::Int_VCMPSSrm: 
    case X86::Int_VCVTSS2SDrm: 
    case X86::VADDSSrm: 
    case X86::VADDSSrm_Int: 
    case X86::VCMPSSrm: 
    case X86::VCVTSS2SDrm: 
    case X86::VDIVSSrm: 
    case X86::VDIVSSrm_Int: 
    case X86::VMAXSSrm: 
    case X86::VMAXSSrm_Int: 
    case X86::VMINSSrm: 
    case X86::VMINSSrm_Int: 
    case X86::VMULSSrm: 
    case X86::VMULSSrm_Int: 
    case X86::VRCPSSm: 
    case X86::VRSQRTSSm: 
    case X86::VSQRTSSm: 
    case X86::VSUBSSrm: 
    case X86::VSUBSSrm_Int: printf32mem(MI, 2, O); break;
    case X86::Int_VCVTSD2SSrm: 
    case X86::VADDSDrm: 
    case X86::VADDSDrm_Int: 
    case X86::VCMPSDrm: 
    case X86::VCVTSD2SSrm: 
    case X86::VDIVSDrm: 
    case X86::VDIVSDrm_Int: 
    case X86::VMAXSDrm: 
    case X86::VMAXSDrm_Int: 
    case X86::VMINSDrm: 
    case X86::VMINSDrm_Int: 
    case X86::VMOVHPDrm: 
    case X86::VMOVHPSrm: 
    case X86::VMOVLPDrm: 
    case X86::VMOVLPSrm: 
    case X86::VMULSDrm: 
    case X86::VMULSDrm_Int: 
    case X86::VSQRTSDm: 
    case X86::VSUBSDrm: 
    case X86::VSUBSDrm_Int: printf64mem(MI, 2, O); break;
    case X86::Int_VCVTSI2SD64rm: 
    case X86::Int_VCVTSI2SS64rm: 
    case X86::VCVTSI2SD64rm: 
    case X86::VCVTSI2SS64rm: printi64mem(MI, 2, O); break;
    case X86::Int_VCVTSI2SDrm: 
    case X86::Int_VCVTSI2SSrm: 
    case X86::VCVTSI2SDLrm: 
    case X86::VCVTSI2SDrm: 
    case X86::VCVTSI2SSrm: printi32mem(MI, 2, O); break;
    case X86::VADDPDYrm: 
    case X86::VADDPSYrm: 
    case X86::VADDSUBPDYrm: 
    case X86::VADDSUBPSYrm: 
    case X86::VANDNPDYrm: 
    case X86::VANDNPSYrm: 
    case X86::VANDPDYrm: 
    case X86::VANDPSYrm: 
    case X86::VDIVPDYrm: 
    case X86::VDIVPSYrm: 
    case X86::VFMADDPDr132mY: 
    case X86::VFMADDPDr213mY: 
    case X86::VFMADDPDr231mY: 
    case X86::VFMADDPSr132mY: 
    case X86::VFMADDPSr213mY: 
    case X86::VFMADDPSr231mY: 
    case X86::VFMADDSUBPDr132mY: 
    case X86::VFMADDSUBPDr213mY: 
    case X86::VFMADDSUBPDr231mY: 
    case X86::VFMADDSUBPSr132mY: 
    case X86::VFMADDSUBPSr213mY: 
    case X86::VFMADDSUBPSr231mY: 
    case X86::VFMSUBADDPDr132mY: 
    case X86::VFMSUBADDPDr213mY: 
    case X86::VFMSUBADDPDr231mY: 
    case X86::VFMSUBADDPSr132mY: 
    case X86::VFMSUBADDPSr213mY: 
    case X86::VFMSUBADDPSr231mY: 
    case X86::VFMSUBPDr132mY: 
    case X86::VFMSUBPDr213mY: 
    case X86::VFMSUBPDr231mY: 
    case X86::VFMSUBPSr132mY: 
    case X86::VFMSUBPSr213mY: 
    case X86::VFMSUBPSr231mY: 
    case X86::VFNMADDPDr132mY: 
    case X86::VFNMADDPDr213mY: 
    case X86::VFNMADDPDr231mY: 
    case X86::VFNMADDPSr132mY: 
    case X86::VFNMADDPSr213mY: 
    case X86::VFNMADDPSr231mY: 
    case X86::VFNMSUBPDr132mY: 
    case X86::VFNMSUBPDr213mY: 
    case X86::VFNMSUBPDr231mY: 
    case X86::VFNMSUBPSr132mY: 
    case X86::VFNMSUBPSr213mY: 
    case X86::VFNMSUBPSr231mY: 
    case X86::VHADDPDYrm: 
    case X86::VHADDPSYrm: 
    case X86::VHSUBPDYrm: 
    case X86::VHSUBPSYrm: 
    case X86::VMASKMOVPDYrm: 
    case X86::VMASKMOVPSYrm: 
    case X86::VMAXPDYrm: 
    case X86::VMAXPDYrm_Int: 
    case X86::VMAXPSYrm: 
    case X86::VMAXPSYrm_Int: 
    case X86::VMINPDYrm: 
    case X86::VMINPDYrm_Int: 
    case X86::VMINPSYrm: 
    case X86::VMINPSYrm_Int: 
    case X86::VMULPDYrm: 
    case X86::VMULPSYrm: 
    case X86::VORPDYrm: 
    case X86::VORPSYrm: 
    case X86::VSUBPDYrm: 
    case X86::VSUBPSYrm: 
    case X86::VUNPCKHPDYrm: 
    case X86::VUNPCKHPSYrm: 
    case X86::VUNPCKLPDYrm: 
    case X86::VUNPCKLPSYrm: 
    case X86::VXORPDYrm: 
    case X86::VXORPSYrm: printf256mem(MI, 2, O); break;
    case X86::VADDPDrm: 
    case X86::VADDPSrm: 
    case X86::VADDSUBPDrm: 
    case X86::VADDSUBPSrm: 
    case X86::VANDNPDrm: 
    case X86::VANDNPSrm: 
    case X86::VANDPDrm: 
    case X86::VANDPSrm: 
    case X86::VCMPPDYrmi: 
    case X86::VCMPPDrmi: 
    case X86::VCMPPSYrmi: 
    case X86::VCMPPSrmi: 
    case X86::VDIVPDrm: 
    case X86::VDIVPSrm: 
    case X86::VFMADDPDr132m: 
    case X86::VFMADDPDr213m: 
    case X86::VFMADDPDr231m: 
    case X86::VFMADDPSr132m: 
    case X86::VFMADDPSr213m: 
    case X86::VFMADDPSr231m: 
    case X86::VFMADDSUBPDr132m: 
    case X86::VFMADDSUBPDr213m: 
    case X86::VFMADDSUBPDr231m: 
    case X86::VFMADDSUBPSr132m: 
    case X86::VFMADDSUBPSr213m: 
    case X86::VFMADDSUBPSr231m: 
    case X86::VFMSUBADDPDr132m: 
    case X86::VFMSUBADDPDr213m: 
    case X86::VFMSUBADDPDr231m: 
    case X86::VFMSUBADDPSr132m: 
    case X86::VFMSUBADDPSr213m: 
    case X86::VFMSUBADDPSr231m: 
    case X86::VFMSUBPDr132m: 
    case X86::VFMSUBPDr213m: 
    case X86::VFMSUBPDr231m: 
    case X86::VFMSUBPSr132m: 
    case X86::VFMSUBPSr213m: 
    case X86::VFMSUBPSr231m: 
    case X86::VFNMADDPDr132m: 
    case X86::VFNMADDPDr213m: 
    case X86::VFNMADDPDr231m: 
    case X86::VFNMADDPSr132m: 
    case X86::VFNMADDPSr213m: 
    case X86::VFNMADDPSr231m: 
    case X86::VFNMSUBPDr132m: 
    case X86::VFNMSUBPDr213m: 
    case X86::VFNMSUBPDr231m: 
    case X86::VFNMSUBPSr132m: 
    case X86::VFNMSUBPSr213m: 
    case X86::VFNMSUBPSr231m: 
    case X86::VFsANDNPDrm: 
    case X86::VFsANDNPSrm: 
    case X86::VFsANDPDrm: 
    case X86::VFsANDPSrm: 
    case X86::VFsORPDrm: 
    case X86::VFsORPSrm: 
    case X86::VFsXORPDrm: 
    case X86::VFsXORPSrm: 
    case X86::VHADDPDrm: 
    case X86::VHADDPSrm: 
    case X86::VHSUBPDrm: 
    case X86::VHSUBPSrm: 
    case X86::VMASKMOVPDrm: 
    case X86::VMASKMOVPSrm: 
    case X86::VMAXPDrm: 
    case X86::VMAXPDrm_Int: 
    case X86::VMAXPSrm: 
    case X86::VMAXPSrm_Int: 
    case X86::VMINPDrm: 
    case X86::VMINPDrm_Int: 
    case X86::VMINPSrm: 
    case X86::VMINPSrm_Int: 
    case X86::VMULPDrm: 
    case X86::VMULPSrm: 
    case X86::VORPDrm: 
    case X86::VORPSrm: 
    case X86::VSUBPDrm: 
    case X86::VSUBPSrm: 
    case X86::VUNPCKHPDrm: 
    case X86::VUNPCKHPSrm: 
    case X86::VUNPCKLPDrm: 
    case X86::VUNPCKLPSrm: 
    case X86::VXORPDrm: 
    case X86::VXORPSrm: printf128mem(MI, 2, O); break;
    case X86::VAESDECLASTrm: 
    case X86::VAESDECrm: 
    case X86::VAESENCLASTrm: 
    case X86::VAESENCrm: 
    case X86::VPACKSSDWrm: 
    case X86::VPACKSSWBrm: 
    case X86::VPACKUSDWrm: 
    case X86::VPACKUSWBrm: 
    case X86::VPADDBrm: 
    case X86::VPADDDrm: 
    case X86::VPADDQrm: 
    case X86::VPADDSBrm: 
    case X86::VPADDSWrm: 
    case X86::VPADDUSBrm: 
    case X86::VPADDUSWrm: 
    case X86::VPADDWrm: 
    case X86::VPANDNrm: 
    case X86::VPANDrm: 
    case X86::VPAVGBrm: 
    case X86::VPAVGWrm: 
    case X86::VPCMPEQBrm: 
    case X86::VPCMPEQDrm: 
    case X86::VPCMPEQQrm: 
    case X86::VPCMPEQWrm: 
    case X86::VPCMPGTBrm: 
    case X86::VPCMPGTDrm: 
    case X86::VPCMPGTQrm: 
    case X86::VPCMPGTWrm: 
    case X86::VPERMILPDrm: 
    case X86::VPERMILPSrm: 
    case X86::VPHADDDrm128: 
    case X86::VPHADDSWrm128: 
    case X86::VPHADDWrm128: 
    case X86::VPHSUBDrm128: 
    case X86::VPHSUBSWrm128: 
    case X86::VPHSUBWrm128: 
    case X86::VPMADDUBSWrm128: 
    case X86::VPMADDWDrm: 
    case X86::VPMAXSBrm: 
    case X86::VPMAXSDrm: 
    case X86::VPMAXSWrm: 
    case X86::VPMAXUBrm: 
    case X86::VPMAXUDrm: 
    case X86::VPMAXUWrm: 
    case X86::VPMINSBrm: 
    case X86::VPMINSDrm: 
    case X86::VPMINSWrm: 
    case X86::VPMINUBrm: 
    case X86::VPMINUDrm: 
    case X86::VPMINUWrm: 
    case X86::VPMULDQrm: 
    case X86::VPMULHRSWrm128: 
    case X86::VPMULHUWrm: 
    case X86::VPMULHWrm: 
    case X86::VPMULLDrm: 
    case X86::VPMULLWrm: 
    case X86::VPMULUDQrm: 
    case X86::VPORrm: 
    case X86::VPSADBWrm: 
    case X86::VPSHUFBrm128: 
    case X86::VPSIGNBrm128: 
    case X86::VPSIGNDrm128: 
    case X86::VPSIGNWrm128: 
    case X86::VPSLLDrm: 
    case X86::VPSLLQrm: 
    case X86::VPSLLWrm: 
    case X86::VPSRADrm: 
    case X86::VPSRAWrm: 
    case X86::VPSRLDrm: 
    case X86::VPSRLQrm: 
    case X86::VPSRLWrm: 
    case X86::VPSUBBrm: 
    case X86::VPSUBDrm: 
    case X86::VPSUBQrm: 
    case X86::VPSUBSBrm: 
    case X86::VPSUBSWrm: 
    case X86::VPSUBUSBrm: 
    case X86::VPSUBUSWrm: 
    case X86::VPSUBWrm: 
    case X86::VPUNPCKHBWrm: 
    case X86::VPUNPCKHDQrm: 
    case X86::VPUNPCKHQDQrm: 
    case X86::VPUNPCKHWDrm: 
    case X86::VPUNPCKLBWrm: 
    case X86::VPUNPCKLDQrm: 
    case X86::VPUNPCKLQDQrm: 
    case X86::VPUNPCKLWDrm: 
    case X86::VPXORrm: printi128mem(MI, 2, O); break;
    case X86::VPERMILPDYrm: 
    case X86::VPERMILPSYrm: printi256mem(MI, 2, O); break;
    }
    return;
    break;
  case X86::VAARG_64:
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << ", "; 
    printOperand(MI, 8, O); 
    return;
    break;
  case X86::VBLENDPDYrmi:
  case X86::VBLENDPDrmi:
  case X86::VBLENDPSYrmi:
  case X86::VBLENDPSrmi:
  case X86::VBLENDVPDYrm:
  case X86::VBLENDVPDrm:
  case X86::VBLENDVPSYrm:
  case X86::VBLENDVPSrm:
  case X86::VCMPPDYrmi_alt:
  case X86::VCMPPDrmi_alt:
  case X86::VCMPPSYrmi_alt:
  case X86::VCMPPSrmi_alt:
  case X86::VCMPSDrm_alt:
  case X86::VCMPSSrm_alt:
  case X86::VDPPDrmi:
  case X86::VDPPSYrmi:
  case X86::VDPPSrmi:
  case X86::VINSERTF128rm:
  case X86::VINSERTPSrm:
  case X86::VMPSADBWrmi:
  case X86::VPALIGNR128rm:
  case X86::VPBLENDVBrm:
  case X86::VPBLENDWrmi:
  case X86::VPCLMULQDQrm:
  case X86::VPERM2F128rm:
  case X86::VPINSRBrm:
  case X86::VPINSRDrm:
  case X86::VPINSRQrm:
  case X86::VPINSRWrmi:
  case X86::VROUNDSDm:
  case X86::VROUNDSDm_AVX:
  case X86::VROUNDSSm:
  case X86::VROUNDSSm_AVX:
  case X86::VSHUFPDYrmi:
  case X86::VSHUFPDrmi:
  case X86::VSHUFPSYrmi:
  case X86::VSHUFPSrmi:
    switch (MI->getOpcode()) {
    case X86::VBLENDPDYrmi: 
    case X86::VBLENDPSYrmi: 
    case X86::VBLENDVPDYrm: 
    case X86::VBLENDVPSYrm: 
    case X86::VDPPSYrmi: printi256mem(MI, 2, O); break;
    case X86::VBLENDPDrmi: 
    case X86::VBLENDPSrmi: 
    case X86::VBLENDVPDrm: 
    case X86::VBLENDVPSrm: 
    case X86::VDPPDrmi: 
    case X86::VDPPSrmi: 
    case X86::VMPSADBWrmi: 
    case X86::VPALIGNR128rm: 
    case X86::VPBLENDVBrm: 
    case X86::VPBLENDWrmi: 
    case X86::VPCLMULQDQrm: printi128mem(MI, 2, O); break;
    case X86::VCMPPDYrmi_alt: 
    case X86::VCMPPDrmi_alt: 
    case X86::VCMPPSYrmi_alt: 
    case X86::VCMPPSrmi_alt: 
    case X86::VINSERTF128rm: 
    case X86::VSHUFPDYrmi: 
    case X86::VSHUFPDrmi: 
    case X86::VSHUFPSYrmi: 
    case X86::VSHUFPSrmi: printf128mem(MI, 2, O); break;
    case X86::VCMPSDrm_alt: 
    case X86::VROUNDSDm: 
    case X86::VROUNDSDm_AVX: printf64mem(MI, 2, O); break;
    case X86::VCMPSSrm_alt: 
    case X86::VINSERTPSrm: 
    case X86::VROUNDSSm: 
    case X86::VROUNDSSm_AVX: printf32mem(MI, 2, O); break;
    case X86::VPERM2F128rm: printf256mem(MI, 2, O); break;
    case X86::VPINSRBrm: printi8mem(MI, 2, O); break;
    case X86::VPINSRDrm: printi32mem(MI, 2, O); break;
    case X86::VPINSRQrm: printi64mem(MI, 2, O); break;
    case X86::VPINSRWrmi: printi16mem(MI, 2, O); break;
    }
    O << ", "; 
    printOperand(MI, 7, O); 
    return;
    break;
  case X86::VBLENDPDYrri:
  case X86::VBLENDPDrri:
  case X86::VBLENDPSYrri:
  case X86::VBLENDPSrri:
  case X86::VBLENDVPDYrr:
  case X86::VBLENDVPDrr:
  case X86::VBLENDVPSYrr:
  case X86::VBLENDVPSrr:
  case X86::VCMPPDYrri_alt:
  case X86::VCMPPDrri_alt:
  case X86::VCMPPSYrri_alt:
  case X86::VCMPPSrri_alt:
  case X86::VCMPSDrr_alt:
  case X86::VCMPSSrr_alt:
  case X86::VDPPDrri:
  case X86::VDPPSYrri:
  case X86::VDPPSrri:
  case X86::VINSERTF128rr:
  case X86::VINSERTPSrr:
  case X86::VMPSADBWrri:
  case X86::VPALIGNR128rr:
  case X86::VPBLENDVBrr:
  case X86::VPBLENDWrri:
  case X86::VPCLMULQDQrr:
  case X86::VPERM2F128rr:
  case X86::VPINSRBrr:
  case X86::VPINSRDrr:
  case X86::VPINSRQrr:
  case X86::VPINSRWrr64i:
  case X86::VPINSRWrri:
  case X86::VROUNDSDr:
  case X86::VROUNDSDr_AVX:
  case X86::VROUNDSSr:
  case X86::VROUNDSSr_AVX:
  case X86::VSHUFPDYrri:
  case X86::VSHUFPDrri:
  case X86::VSHUFPSYrri:
  case X86::VSHUFPSrri:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *X86IntelInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 160 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 6, 9, 12, 15, 18, 22, 25, 28, 31, 35, 39, 43,
    47, 51, 55, 59, 63, 67, 71, 76, 81, 86, 91, 96, 101, 104,
    107, 110, 113, 117, 120, 124, 128, 132, 136, 140, 144, 148, 152, 155,
    158, 162, 166, 170, 174, 178, 182, 188, 192, 196, 199, 203, 207, 211,
    215, 219, 223, 227, 231, 235, 238, 241, 244, 248, 252, 256, 260, 264,
    268, 272, 276, 279, 283, 287, 291, 294, 298, 302, 306, 310, 315, 320,
    325, 329, 334, 339, 344, 348, 353, 358, 363, 367, 372, 377, 382, 386,
    391, 396, 401, 405, 410, 415, 420, 424, 428, 432, 436, 440, 444, 448,
    452, 456, 460, 463, 467, 470, 474, 477, 483, 489, 495, 501, 507, 513,
    519, 525, 530, 535, 540, 545, 550, 555, 560, 565, 570, 575, 581, 587,
    593, 599, 605, 611, 616, 621, 626, 631, 636, 641, 646, 651, 656, 661,
    667, 673, 679, 685, 691, 0
  };

  const char *AsmStrs =
    "ah\000al\000ax\000bh\000bl\000bp\000bpl\000bx\000ch\000cl\000cr0\000cr1"
    "\000cr2\000cr3\000cr4\000cr5\000cr6\000cr7\000cr8\000cr9\000cr10\000cr1"
    "1\000cr12\000cr13\000cr14\000cr15\000cs\000cx\000dh\000di\000dil\000dl\000"
    "dr0\000dr1\000dr2\000dr3\000dr4\000dr5\000dr6\000dr7\000ds\000dx\000eax"
    "\000ebp\000ebx\000ecx\000edi\000edx\000flags\000eip\000eiz\000es\000esi"
    "\000esp\000fp0\000fp1\000fp2\000fp3\000fp4\000fp5\000fp6\000fs\000gs\000"
    "ip\000mm0\000mm1\000mm2\000mm3\000mm4\000mm5\000mm6\000mm7\000r8\000r8b"
    "\000r8d\000r8w\000r9\000r9b\000r9d\000r9w\000r10\000r10b\000r10d\000r10"
    "w\000r11\000r11b\000r11d\000r11w\000r12\000r12b\000r12d\000r12w\000r13\000"
    "r13b\000r13d\000r13w\000r14\000r14b\000r14d\000r14w\000r15\000r15b\000r"
    "15d\000r15w\000rax\000rbp\000rbx\000rcx\000rdi\000rdx\000rip\000riz\000"
    "rsi\000rsp\000si\000sil\000sp\000spl\000ss\000st(0)\000st(1)\000st(2)\000"
    "st(3)\000st(4)\000st(5)\000st(6)\000st(7)\000xmm0\000xmm1\000xmm2\000xm"
    "m3\000xmm4\000xmm5\000xmm6\000xmm7\000xmm8\000xmm9\000xmm10\000xmm11\000"
    "xmm12\000xmm13\000xmm14\000xmm15\000ymm0\000ymm1\000ymm2\000ymm3\000ymm"
    "4\000ymm5\000ymm6\000ymm7\000ymm8\000ymm9\000ymm10\000ymm11\000ymm12\000"
    "ymm13\000ymm14\000ymm15\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *X86IntelInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 3735 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 155, 162, 169, 173, 179, 188, 197, 206, 215, 223, 232, 240, 248, 
    257, 265, 273, 285, 294, 302, 311, 319, 327, 336, 344, 352, 364, 373, 
    383, 392, 400, 410, 419, 427, 435, 447, 454, 461, 468, 475, 482, 489, 
    500, 509, 517, 526, 534, 542, 551, 563, 574, 582, 590, 601, 613, 622, 
    630, 639, 647, 655, 664, 676, 687, 695, 703, 714, 726, 735, 745, 754, 
    762, 772, 785, 794, 806, 814, 822, 833, 845, 852, 859, 866, 873, 880, 
    887, 898, 906, 914, 922, 930, 938, 950, 958, 970, 978, 990, 998, 1010, 
    1021, 1032, 1043, 1054, 1063, 1072, 1082, 1092, 1103, 1113, 1122, 1132, 1141, 1151, 
    1163, 1172, 1184, 1196, 1209, 1222, 1235, 1248, 1261, 1274, 1284, 1303, 1322, 1339, 
    1356, 1369, 1382, 1391, 1400, 1413, 1426, 1435, 1444, 1453, 1462, 1483, 1504, 1513, 
    1521, 1530, 1538, 1546, 1555, 1563, 1571, 1583, 1592, 1600, 1609, 1617, 1625, 1634, 
    1642, 1650, 1662, 1671, 1681, 1690, 1698, 1708, 1717, 1725, 1733, 1745, 1752, 1759, 
    1766, 1773, 1780, 1787, 1798, 1807, 1816, 1825, 1834, 1842, 1850, 1858, 1866, 1875, 
    1884, 1896, 1906, 1916, 1926, 1938, 1947, 1957, 1967, 1977, 1987, 1997, 2007, 2018, 
    2029, 2040, 2053, 2063, 2072, 2081, 2090, 2101, 2109, 2121, 2134, 2145, 2156, 2167, 
    2178, 2189, 2200, 2210, 2220, 2230, 2242, 2251, 2262, 2274, 2285, 2296, 2308, 2323, 
    2334, 2345, 2356, 2367, 2379, 2391, 2403, 2415, 2426, 2437, 2445, 2453, 2461, 2469, 
    2477, 2485, 2493, 2501, 2509, 2517, 2525, 2533, 2542, 2551, 2559, 2566, 2574, 2581, 
    2589, 2596, 2604, 2611, 2619, 2626, 2634, 2641, 2650, 2658, 2667, 2675, 2684, 2692, 
    2701, 2709, 2718, 2726, 2735, 2743, 2752, 2760, 2769, 2777, 2786, 2794, 2803, 2811, 
    2820, 2828, 2837, 2845, 2854, 2862, 2871, 2879, 2888, 2896, 2905, 2913, 2922, 2930, 
    2939, 2947, 2955, 2963, 2971, 2985, 2993, 3005, 3017, 3021, 3025, 3030, 3036, 3045, 
    3054, 3063, 3067, 3071, 3079, 3083, 3088, 3092, 3102, 3112, 3122, 3132, 3142, 3152, 
    3163, 3174, 3185, 3196, 3207, 3218, 3228, 3238, 3248, 3258, 3268, 3278, 3289, 3300, 
    3311, 3322, 3333, 3344, 3353, 3365, 3377, 3389, 3397, 3408, 3419, 3430, 3440, 3450, 
    3460, 3470, 3480, 3490, 3498, 3509, 3520, 3531, 3541, 3551, 3561, 3571, 3581, 3591, 
    3602, 3613, 3624, 3635, 3646, 3657, 3667, 3677, 3687, 3697, 3707, 3717, 3728, 3739, 
    3750, 3761, 3772, 3783, 3793, 3806, 3819, 3832, 3841, 3853, 3865, 3877, 3888, 3899, 
    3910, 3921, 3932, 3943, 3952, 3964, 3976, 3988, 3999, 4010, 4021, 4032, 4043, 4054, 
    4065, 4076, 4087, 4098, 4109, 4120, 4129, 4141, 4153, 4165, 4176, 4187, 4198, 4209, 
    4220, 4231, 4241, 4251, 4261, 4271, 4281, 4291, 4301, 4311, 4321, 4331, 4341, 4351, 
    4359, 4370, 4381, 4392, 4402, 4412, 4422, 4432, 4442, 4452, 4462, 4472, 4482, 4492, 
    4501, 4512, 4523, 4534, 4545, 4556, 4567, 4578, 4589, 4600, 4609, 4617, 4626, 4634, 
    4642, 4651, 4659, 4667, 4679, 4688, 4696, 4705, 4713, 4721, 4730, 4738, 4746, 4758, 
    4767, 4777, 4786, 4794, 4804, 4813, 4821, 4829, 4841, 4848, 4855, 4862, 4869, 4876, 
    4883, 4894, 4903, 4916, 4925, 4938, 4947, 4960, 4969, 4982, 4989, 4996, 5003, 5009, 
    5017, 5029, 5037, 5049, 5057, 5069, 5077, 5089, 5100, 5112, 5124, 5136, 5148, 5160, 
    5172, 5182, 5193, 5204, 5213, 5222, 5231, 5240, 5251, 5260, 5268, 5278, 5284, 5293, 
    5302, 5311, 5317, 5321, 5333, 5345, 5356, 5368, 5380, 5391, 5403, 5414, 5426, 5437, 
    5447, 5458, 5469, 5480, 5491, 5502, 5513, 5524, 5535, 5546, 5557, 5568, 5579, 5592, 
    5605, 5616, 5627, 5638, 5649, 5662, 5675, 5686, 5697, 5710, 5723, 5734, 5745, 5756, 
    5767, 5780, 5793, 5804, 5815, 5827, 5839, 5851, 5863, 5877, 5891, 5903, 5915, 5929, 
    5943, 5955, 5967, 5971, 5976, 5980, 5984, 5998, 6005, 6012, 6019, 6026, 6036, 6046, 
    6056, 6066, 6073, 6080, 6086, 6092, 6099, 6106, 6113, 6120, 6127, 6134, 6140, 6146, 
    6154, 6162, 6170, 6178, 6188, 6198, 6209, 6220, 6232, 6243, 6254, 6265, 6278, 6291, 
    6304, 6318, 6332, 6346, 6360, 6374, 6388, 6399, 6407, 6419, 6427, 6439, 6447, 6459, 
    6467, 6479, 6488, 6497, 6507, 6517, 6528, 6538, 6547, 6557, 6566, 6576, 6588, 6597, 
    6609, 6621, 6634, 6647, 6660, 6673, 6686, 6699, 6709, 6717, 6725, 6733, 6741, 6751, 
    6761, 6773, 6779, 6789, 6801, 6813, 6819, 6830, 6841, 6852, 6863, 6873, 6883, 6893, 
    6903, 6913, 6922, 6928, 6935, 6943, 6951, 6960, 6969, 6976, 6984, 6990, 6996, 7005, 
    7014, 7024, 7034, 7042, 7051, 7059, 7066, 7073, 7080, 7087, 7093, 7100, 7107, 7112, 
    7122, 7131, 7139, 7160, 7181, 7202, 7223, 7244, 7265, 7286, 7307, 7328, 7335, 7341, 
    7348, 7354, 7362, 7370, 7377, 7384, 7392, 7400, 7410, 7415, 7423, 7433, 7440, 7449, 
    7457, 7463, 7471, 7484, 7495, 7506, 7517, 7528, 7538, 7548, 7558, 7568, 7577, 7586, 
    7597, 7608, 7619, 7630, 7639, 7648, 7657, 7666, 7676, 7686, 7696, 7706, 7716, 7725, 
    7734, 7743, 7752, 7756, 7765, 7774, 7783, 7792, 7800, 7808, 7816, 7824, 7832, 7840, 
    7847, 7854, 7863, 7872, 7881, 7893, 7905, 7917, 7929, 7941, 7953, 7965, 7977, 7989, 
    7997, 8005, 8014, 8024, 8035, 8044, 8054, 8065, 8073, 8081, 8090, 8100, 8111, 8120, 
    8130, 8141, 8149, 8157, 8166, 8178, 8189, 8198, 8210, 8221, 8228, 8235, 8240, 8247, 
    8254, 8259, 8266, 8273, 8277, 8283, 8289, 8296, 8303, 8310, 8317, 8327, 8337, 8347, 
    8357, 8364, 8371, 8377, 8383, 8394, 8405, 8409, 8414, 8419, 8424, 8431, 8438, 8446, 
    8453, 8460, 8467, 8478, 8489, 8500, 8513, 8526, 8539, 8552, 8565, 8578, 8591, 8604, 
    8617, 8626, 8635, 8645, 8655, 8665, 8677, 8689, 8701, 8713, 8725, 8737, 8749, 8761, 
    8773, 8785, 8797, 8809, 8821, 8834, 8847, 8860, 8873, 8888, 8903, 8918, 8933, 8948, 
    8963, 8978, 8993, 9008, 9023, 9038, 9053, 9068, 9083, 9100, 9117, 9132, 9147, 9164, 
    9181, 9196, 9211, 9226, 9241, 9259, 9277, 9293, 9309, 9327, 9345, 9361, 9377, 9392, 
    9414, 9428, 9442, 9456, 9470, 9483, 9496, 9509, 9522, 9536, 9550, 9564, 9578, 9594, 
    9610, 9626, 9642, 9658, 9674, 9690, 9706, 9722, 9738, 9754, 9770, 9788, 9806, 9822, 
    9838, 9854, 9870, 9888, 9906, 9922, 9938, 9956, 9974, 9990, 10006, 10022, 10038, 10055, 
    10072, 10089, 10106, 10125, 10144, 10161, 10178, 10197, 10216, 10233, 10250, 10265, 10280, 10295, 
    10310, 10316, 10322, 10327, 10332, 10338, 10344, 10349, 10354, 10359, 10368, 10377, 10382, 10387, 
    10393, 10399, 10404, 10409, 10415, 10421, 10426, 10431, 10438, 10445, 10452, 10465, 10472, 10478, 
    10484, 10490, 10496, 10502, 10508, 10514, 10520, 10526, 10532, 10537, 10542, 10547, 10552, 10558, 
    10563, 10568, 10573, 10581, 10589, 10597, 10605, 10613, 10621, 10632, 10643, 10654, 10664, 10675, 
    10683, 10691, 10699, 10707, 10713, 10719, 10727, 10735, 10743, 10752, 10761, 10770, 10779, 10788, 
    10797, 10806, 10817, 10828, 10837, 10848, 10857, 10864, 10871, 10878, 10888, 10895, 10901, 10909, 
    10917, 10925, 10932, 10940, 10948, 10956, 10964, 10970, 10978, 10986, 10994, 11002, 11008, 11016, 
    11024, 11032, 11040, 11053, 11067, 11080, 11093, 11107, 11120, 11135, 11149, 11162, 11174, 11186, 
    11199, 11213, 11226, 11239, 11253, 11266, 11281, 11295, 11308, 11320, 11332, 11344, 11356, 11368, 
    11379, 11391, 11403, 11415, 11426, 11438, 11451, 11463, 11475, 11488, 11500, 11514, 11527, 11539, 
    11550, 11561, 11573, 11586, 11600, 11613, 11626, 11640, 11653, 11668, 11682, 11695, 11707, 11719, 
    11732, 11746, 11759, 11772, 11786, 11799, 11814, 11828, 11841, 11853, 11865, 11871, 11877, 11883, 
    11889, 11894, 11900, 11907, 11913, 11920, 11926, 11932, 11940, 11948, 11956, 11964, 11972, 11980, 
    11988, 11996, 12004, 12009, 12014, 12022, 12030, 12038, 12045, 12056, 12069, 12077, 12089, 12097, 
    12109, 12117, 12129, 12137, 12149, 12157, 12169, 12177, 12189, 12197, 12209, 12217, 12229, 12236, 
    12244, 12256, 12264, 12276, 12284, 12296, 12304, 12316, 12324, 12336, 12344, 12356, 12364, 12376, 
    12384, 12396, 12412, 12428, 12444, 12460, 12476, 12492, 12508, 12524, 12541, 12558, 12575, 12592, 
    12601, 12614, 12629, 12648, 12662, 12675, 12688, 12701, 12718, 12735, 12749, 12765, 12778, 12792, 
    12808, 12821, 12834, 12847, 12864, 12881, 12895, 12909, 12923, 12937, 12951, 12965, 12981, 12997, 
    13013, 13029, 13045, 13061, 13074, 13087, 13100, 13113, 13126, 13139, 13153, 13167, 13181, 13195, 
    13210, 13225, 13240, 13255, 13268, 13281, 13298, 13315, 13328, 13341, 13353, 13365, 13378, 13391, 
    13404, 13417, 13432, 13447, 13462, 13477, 13492, 13507, 13522, 13537, 13552, 13567, 13582, 13597, 
    13612, 13628, 13644, 13659, 13674, 13688, 13702, 13717, 13732, 13748, 13764, 13779, 13794, 13809, 
    13824, 13842, 13860, 13875, 13890, 13904, 13918, 13932, 13946, 13960, 13974, 13988, 14002, 14017, 
    14034, 14051, 14066, 14081, 14095, 14109, 14123, 14137, 14152, 14167, 14178, 14189, 14203, 14217, 
    14232, 14247, 14260, 14273, 14288, 14303, 14318, 14333, 14348, 14363, 14375, 14387, 14399, 14411, 
    14423, 14435, 14447, 14459, 14471, 14483, 14495, 14507, 14519, 14531, 14543, 14555, 14567, 14579, 
    14591, 14603, 14615, 14627, 14639, 14651, 14664, 14677, 14690, 14703, 14716, 14729, 14743, 14757, 
    14771, 14785, 14800, 14815, 14830, 14845, 14858, 14871, 14888, 14905, 14922, 14939, 14956, 14973, 
    14990, 15007, 15024, 15041, 15058, 15075, 15087, 15099, 15107, 15118, 15126, 15136, 15144, 15152, 
    15160, 15170, 15178, 15186, 15194, 15202, 15214, 15222, 15230, 15238, 15248, 15256, 15264, 15272, 
    15280, 15288, 15298, 15306, 15314, 15322, 15330, 15338, 15346, 15358, 15366, 15374, 15382, 15390, 
    15398, 15408, 15416, 15424, 15432, 15440, 15448, 15456, 15466, 15479, 15487, 15495, 15507, 15515, 
    15523, 15531, 15544, 15556, 15568, 15576, 15583, 15590, 15603, 15611, 15618, 15625, 15632, 15645, 
    15652, 15665, 15676, 15685, 15694, 15703, 15712, 15721, 15730, 15740, 15750, 15762, 15774, 15785, 
    15796, 15805, 15814, 15823, 15832, 15845, 15854, 15863, 15873, 15882, 15891, 15900, 15909, 15919, 
    15928, 15937, 15946, 15955, 15966, 15979, 15996, 16009, 16026, 16039, 16056, 16069, 16086, 16097, 
    16110, 16120, 16132, 16141, 16151, 16161, 16170, 16182, 16194, 16206, 16219, 16231, 16240, 16246, 
    16252, 16260, 16268, 16276, 16288, 16300, 16311, 16322, 16333, 16344, 16350, 16361, 16372, 16380, 
    16388, 16396, 16402, 16413, 16424, 16436, 16447, 16459, 16470, 16482, 16494, 16505, 16517, 16529, 
    16540, 16549, 16562, 16571, 16580, 16589, 16602, 16611, 16620, 16633, 16646, 16662, 16678, 16691, 
    16704, 16715, 16726, 16743, 16760, 16772, 16783, 16795, 16806, 16818, 16832, 16844, 16855, 16868, 
    16880, 16894, 16906, 16917, 16930, 16941, 16952, 16959, 16966, 16973, 16980, 16987, 16994, 17000, 
    17006, 17014, 17022, 17030, 17038, 17046, 17058, 17066, 17078, 17086, 17098, 17106, 17118, 17127, 
    17136, 17146, 17156, 17167, 17177, 17186, 17196, 17205, 17215, 17227, 17236, 17248, 17260, 17273, 
    17286, 17299, 17312, 17325, 17338, 17348, 17354, 17362, 17369, 17376, 17383, 17390, 17397, 17404, 
    17410, 17416, 17421, 17427, 17433, 17440, 17447, 17454, 17461, 17468, 17475, 17481, 17487, 17495, 
    17502, 17510, 17517, 17524, 17532, 17539, 17546, 17557, 17565, 17572, 17580, 17587, 17600, 17607, 
    17615, 17622, 17629, 17640, 17648, 17657, 17665, 17672, 17681, 17689, 17696, 17703, 17714, 17720, 
    17726, 17732, 17738, 17744, 17750, 17760, 17767, 17774, 17781, 17788, 17796, 17804, 17812, 17820, 
    17827, 17834, 17840, 17846, 17852, 17863, 17874, 17885, 17896, 17907, 17918, 17929, 17940, 17951, 
    17962, 17973, 17984, 17995, 18006, 18014, 18022, 18030, 18038, 18046, 18054, 18063, 18072, 18081, 
    18090, 18100, 18110, 18120, 18130, 18138, 18146, 18159, 18172, 18180, 18188, 18195, 18202, 18208, 
    18216, 18224, 18234, 18244, 18252, 18260, 18272, 18284, 18295, 18306, 18318, 18330, 18340, 18350, 
    18360, 18370, 18380, 18390, 18400, 18410, 18423, 18436, 18449, 18462, 18475, 18488, 18501, 18514, 
    18527, 18540, 18552, 18564, 18580, 18596, 18611, 18626, 18636, 18646, 18656, 18666, 18676, 18686, 
    18696, 18706, 18719, 18732, 18745, 18758, 18771, 18784, 18797, 18810, 18823, 18836, 18848, 18860, 
    18876, 18892, 18907, 18922, 18931, 18940, 18949, 18958, 18967, 18976, 18985, 18994, 19002, 19010, 
    19018, 19026, 19034, 19042, 19050, 19058, 19068, 19078, 19088, 19098, 19108, 19118, 19126, 19134, 
    19142, 19150, 19158, 19166, 19175, 19184, 19194, 19204, 19215, 19226, 19237, 19248, 19256, 19264, 
    19275, 19286, 19296, 19306, 19315, 19324, 19332, 19340, 19352, 19364, 19377, 19390, 19402, 19414, 
    19430, 19446, 19458, 19470, 19483, 19496, 19508, 19520, 19528, 19536, 19544, 19552, 19561, 19570, 
    19579, 19588, 19597, 19606, 19616, 19626, 19641, 19656, 19666, 19676, 19685, 19694, 19703, 19712, 
    19721, 19730, 19739, 19748, 19757, 19766, 19775, 19784, 19793, 19802, 19811, 19820, 19829, 19838, 
    19847, 19856, 19865, 19874, 19883, 19892, 19903, 19914, 19925, 19936, 19947, 19958, 19969, 19980, 
    19991, 20002, 20013, 20024, 20035, 20046, 20057, 20068, 20079, 20090, 20101, 20112, 20123, 20134, 
    20145, 20156, 20167, 20176, 20185, 20199, 20213, 20223, 20233, 20243, 20253, 20262, 20271, 20280, 
    20289, 20298, 20307, 20317, 20327, 20334, 20343, 20352, 20359, 20368, 20377, 20384, 20393, 20402, 
    20409, 20420, 20431, 20442, 20453, 20464, 20475, 20483, 20491, 20499, 20507, 20514, 20521, 20528, 
    20536, 20544, 20552, 20560, 20568, 20576, 20584, 20592, 20598, 20604, 20613, 20625, 20636, 20647, 
    20658, 20668, 20677, 20686, 20698, 20710, 20719, 20728, 20738, 20748, 20758, 20768, 20780, 20792, 
    20804, 20816, 20828, 20840, 20849, 20857, 20865, 20873, 20881, 20889, 20897, 20905, 20913, 20921, 
    20929, 20937, 20945, 20953, 20961, 20969, 20978, 20986, 20994, 21002, 21010, 21018, 21026, 21034, 
    21042, 21050, 21058, 21066, 21074, 21082, 21090, 21098, 21107, 21116, 21125, 21134, 21144, 21154, 
    21164, 21174, 21182, 21190, 21199, 21208, 21216, 21224, 21236, 21248, 21260, 21272, 21285, 21298, 
    21310, 21322, 21334, 21346, 21358, 21370, 21383, 21396, 21408, 21420, 21428, 21438, 21448, 21456, 
    21466, 21476, 21486, 21496, 21505, 21513, 21523, 21533, 21541, 21550, 21559, 21568, 21577, 21586, 
    21595, 21603, 21611, 21619, 21628, 21637, 21646, 21655, 21664, 21673, 21682, 21691, 21699, 21707, 
    21714, 21721, 21728, 21736, 21745, 21753, 21761, 21770, 21778, 21786, 21795, 21803, 21811, 21820, 
    21828, 21836, 21845, 21853, 21861, 21870, 21878, 21885, 21893, 21900, 21907, 21915, 21922, 21929, 
    21940, 21947, 21958, 21965, 21976, 21983, 21994, 22002, 22011, 22019, 22027, 22036, 22044, 22052, 
    22061, 22069, 22077, 22086, 22094, 22102, 22111, 22119, 22127, 22136, 22144, 22151, 22159, 22166, 
    22173, 22181, 22188, 22194, 22200, 22206, 22213, 22226, 22236, 22246, 22256, 22266, 22277, 22287, 
    22297, 22307, 22317, 22321, 22326, 22332, 22345, 22353, 22362, 22370, 22378, 22387, 22395, 22403, 
    22412, 22420, 22428, 22437, 22445, 22453, 22462, 22470, 22478, 22487, 22495, 22502, 22510, 22517, 
    22524, 22532, 22539, 22547, 22556, 22564, 22572, 22581, 22589, 22597, 22606, 22614, 22622, 22631, 
    22639, 22647, 22656, 22664, 22672, 22681, 22689, 22696, 22704, 22711, 22718, 22726, 22733, 22742, 
    22751, 22760, 22769, 22778, 22787, 22796, 22805, 22809, 22818, 22831, 22840, 22853, 22862, 22875, 
    22884, 22897, 22902, 22910, 22919, 22927, 22935, 22944, 22952, 22960, 22969, 22977, 22985, 22994, 
    23002, 23010, 23019, 23027, 23035, 23044, 23052, 23059, 23067, 23074, 23081, 23089, 23096, 23105, 
    23113, 23122, 23130, 23138, 23147, 23155, 23163, 23175, 23184, 23192, 23201, 23209, 23217, 23226, 
    23234, 23242, 23254, 23263, 23273, 23282, 23290, 23300, 23309, 23317, 23325, 23337, 23344, 23351, 
    23358, 23365, 23372, 23379, 23390, 23397, 23404, 23411, 23417, 23424, 23431, 23437, 23443, 23450, 
    23457, 23467, 23477, 23487, 23496, 23502, 23508, 23514, 23520, 23527, 23534, 23540, 23546, 23553, 
    23560, 23566, 23572, 23579, 23586, 23593, 23600, 23607, 23614, 23621, 23628, 23634, 23640, 23646, 
    23652, 23658, 23664, 23671, 23679, 23685, 23693, 23702, 23710, 23718, 23727, 23735, 23743, 23752, 
    23760, 23768, 23777, 23785, 23793, 23802, 23810, 23818, 23827, 23835, 23842, 23850, 23857, 23864, 
    23872, 23879, 23890, 23901, 23912, 23923, 23934, 23945, 23956, 23967, 23978, 23989, 24000, 24011, 
    24019, 24028, 24036, 24044, 24053, 24061, 24069, 24078, 24086, 24094, 24103, 24111, 24119, 24128, 
    24136, 24144, 24153, 24161, 24168, 24176, 24183, 24190, 24198, 24205, 24216, 24227, 24238, 24249, 
    24260, 24271, 24282, 24293, 24304, 24315, 24326, 24337, 24347, 24357, 24367, 24377, 24385, 24391, 
    24397, 24406, 24415, 24424, 24432, 24440, 24448, 24456, 24464, 24472, 24480, 24488, 24496, 24504, 
    24516, 24524, 24536, 24544, 24556, 24564, 24576, 24584, 24596, 24604, 24616, 24624, 24636, 24644, 
    24656, 24663, 24673, 24683, 24693, 24703, 24707, 24711, 24715, 24723, 24729, 24735, 24741, 24747, 
    24754, 24761, 24768, 24773, 24781, 24789, 24798, 24807, 24816, 24824, 24833, 24842, 24853, 24864, 
    24875, 24885, 24895, 24907, 24917, 24929, 24941, 24948, 24957, 24965, 24974, 24982, 24990, 24999, 
    25007, 25015, 25027, 25036, 25044, 25053, 25061, 25069, 25078, 25086, 25094, 25106, 25115, 25125, 
    25134, 25142, 25152, 25161, 25169, 25177, 25189, 25196, 25203, 25210, 25217, 25224, 25231, 25242, 
    25250, 25258, 25266, 25274, 25284, 25294, 25305, 25316, 25328, 25339, 25350, 25361, 25374, 25387, 
    25400, 25414, 25428, 25442, 25456, 25470, 25484, 25495, 25503, 25515, 25523, 25535, 25543, 25555, 
    25563, 25575, 25584, 25593, 25603, 25613, 25624, 25634, 25643, 25653, 25662, 25672, 25684, 25693, 
    25705, 25717, 25730, 25743, 25756, 25769, 25782, 25795, 25805, 25812, 25820, 25829, 25837, 25847, 
    25855, 25863, 25872, 25883, 25892, 25903, 25912, 25923, 25934, 25947, 25958, 25971, 25982, 25995, 
    26005, 26014, 26023, 26032, 26041, 26051, 26060, 26069, 26078, 26087, 26097, 26108, 26119, 26128, 
    26137, 26145, 26153, 26161, 26169, 26177, 26188, 26199, 26210, 26221, 26226, 26232, 26241, 26250, 
    26259, 26269, 26279, 26289, 26299, 26309, 26318, 26328, 26337, 26349, 26361, 26373, 26384, 26395, 
    26406, 26414, 26419, 26430, 26441, 26452, 26463, 26474, 26485, 26496, 26507, 26516, 26526, 26536, 
    26545, 26554, 26564, 26574, 26583, 26592, 26601, 26614, 26623, 26636, 26645, 26658, 26667, 26680, 
    26693, 26706, 26718, 26730, 26743, 26756, 26768, 26780, 26794, 26808, 26818, 26828, 26842, 26856, 
    26866, 26876, 26886, 26896, 26918, 26940, 26951, 26962, 26972, 26982, 26993, 27004, 27014, 27024, 
    27034, 27044, 27053, 27062, 27072, 27082, 27091, 27100, 27122, 27135, 27148, 27160, 27172, 27185, 
    27198, 27210, 27222, 27235, 27248, 27260, 27272, 27285, 27298, 27310, 27322, 27337, 27350, 27363, 
    27377, 27388, 27403, 27414, 27429, 27439, 27453, 27463, 27477, 27488, 27503, 27514, 27529, 27539, 
    27553, 27563, 27577, 27586, 27599, 27608, 27621, 27630, 27643, 27652, 27665, 27675, 27685, 27695, 
    27705, 27718, 27731, 27743, 27755, 27768, 27781, 27793, 27805, 27819, 27832, 27845, 27858, 27871, 
    27883, 27897, 27910, 27923, 27936, 27949, 27961, 27974, 27987, 27999, 28011, 28024, 28037, 28049, 
    28061, 28075, 28089, 28105, 28121, 28133, 28145, 28159, 28173, 28186, 28199, 28211, 28223, 28237, 
    28251, 28263, 28275, 28287, 28299, 28313, 28327, 28339, 28351, 28366, 28380, 28394, 28408, 28422, 
    28435, 28449, 28463, 28476, 28489, 28504, 28519, 28532, 28545, 28560, 28575, 28588, 28601, 28611, 
    28621, 28630, 28639, 28649, 28659, 28668, 28677, 28686, 28699, 28708, 28721, 28730, 28743, 28752, 
    28765, 28774, 28783, 28793, 28803, 28812, 28821, 28827, 28833, 28839, 28845, 28860, 28875, 28888, 
    28901, 28916, 28930, 28945, 28959, 28974, 28988, 29003, 29017, 29032, 29046, 29061, 29075, 29090, 
    29104, 29119, 29133, 29148, 29162, 29177, 29191, 29206, 29220, 29235, 29249, 29264, 29281, 29299, 
    29316, 29334, 29351, 29369, 29386, 29404, 29421, 29439, 29456, 29474, 29491, 29509, 29526, 29544, 
    29561, 29579, 29596, 29614, 29631, 29649, 29666, 29684, 29701, 29719, 29736, 29754, 29771, 29789, 
    29806, 29824, 29841, 29859, 29876, 29894, 29911, 29929, 29946, 29964, 29981, 29999, 30016, 30034, 
    30051, 30069, 30086, 30104, 30118, 30133, 30147, 30162, 30176, 30191, 30205, 30220, 30234, 30249, 
    30263, 30278, 30292, 30307, 30321, 30336, 30350, 30365, 30379, 30394, 30408, 30423, 30437, 30452, 
    30467, 30483, 30498, 30514, 30529, 30545, 30560, 30576, 30591, 30607, 30622, 30638, 30653, 30669, 
    30684, 30700, 30715, 30731, 30746, 30762, 30777, 30793, 30808, 30824, 30839, 30855, 30870, 30886, 
    30901, 30917, 30932, 30948, 30963, 30979, 30994, 31010, 31025, 31041, 31056, 31072, 31087, 31103, 
    31118, 31134, 31149, 31165, 31180, 31196, 31208, 31220, 31232, 31244, 31255, 31266, 31277, 31288, 
    31298, 31308, 31318, 31328, 31338, 31348, 31359, 31370, 31381, 31392, 31403, 31414, 31424, 31434, 
    31445, 31456, 31466, 31476, 31487, 31498, 31508, 31518, 31529, 31540, 31550, 31560, 31574, 31588, 
    31600, 31612, 31622, 31631, 31640, 31652, 31666, 31680, 31694, 31707, 31720, 31734, 31748, 31761, 
    31774, 31784, 31798, 31808, 31822, 31831, 31844, 31853, 31866, 31876, 31890, 31900, 31914, 31923, 
    31936, 31945, 31958, 31967, 31980, 31989, 32002, 32011, 32024, 32033, 32046, 32053, 32062, 32072, 
    32086, 32096, 32110, 32119, 32132, 32141, 32154, 32164, 32178, 32188, 32202, 32211, 32224, 32233, 
    32246, 32255, 32268, 32277, 32290, 32299, 32312, 32321, 32334, 32343, 32357, 32370, 32381, 32392, 
    32403, 32413, 32423, 32433, 32444, 32455, 32466, 32476, 32486, 32496, 32508, 32520, 32531, 32542, 
    32555, 32568, 32580, 32592, 32603, 32614, 32625, 32635, 32645, 32655, 32666, 32677, 32688, 32698, 
    32712, 32722, 32732, 32743, 32753, 32763, 32773, 32783, 32794, 32804, 32814, 32824, 32834, 32846, 
    32861, 32876, 32891, 32905, 32919, 32933, 32948, 32963, 32978, 32992, 33006, 33020, 33032, 33047, 
    33059, 33073, 33084, 33096, 33107, 33119, 33130, 33143, 33156, 33169, 33182, 33193, 33208, 33219, 
    33229, 33238, 33247, 33256, 33269, 33282, 33294, 33306, 33319, 33332, 33344, 33356, 33368, 33380, 
    33389, 33398, 33407, 33418, 33429, 33440, 33450, 33464, 33474, 33484, 33495, 33506, 33517, 33527, 
    33541, 33551, 33561, 33575, 33589, 33606, 33623, 33637, 33651, 33663, 33675, 33684, 33693, 33704, 
    33715, 33726, 33737, 33746, 33756, 33766, 33775, 33784, 33794, 33804, 33813, 33822, 33831, 33844, 
    33853, 33866, 33875, 33888, 33897, 33910, 33922, 33934, 33946, 33958, 33965, 33971, 33980, 33989, 
    33997, 34005, 34014, 34023, 34031, 34039, 34051, 34063, 34075, 34087, 34099, 34111, 34123, 34135, 
    34147, 34159, 34171, 34183, 34195, 34207, 34216, 34225, 34234, 34243, 34252, 34261, 34271, 34281, 
    34291, 34301, 34312, 34323, 34334, 34345, 34354, 34363, 34377, 34391, 34400, 34409, 34417, 34425, 
    34434, 34443, 34452, 34461, 34473, 34485, 34497, 34509, 34522, 34535, 34546, 34557, 34568, 34579, 
    34590, 34601, 34612, 34623, 34637, 34651, 34665, 34679, 34693, 34707, 34721, 34735, 34749, 34763, 
    34776, 34789, 34806, 34823, 34839, 34855, 34866, 34877, 34888, 34899, 34910, 34921, 34932, 34943, 
    34957, 34971, 34985, 34999, 35013, 35027, 35041, 35055, 35069, 35083, 35096, 35109, 35126, 35143, 
    35159, 35175, 35188, 35201, 35214, 35227, 35240, 35253, 35265, 35277, 35289, 35301, 35314, 35327, 
    35340, 35353, 35365, 35377, 35389, 35401, 35411, 35421, 35433, 35443, 35453, 35463, 35473, 35483, 
    35493, 35506, 35519, 35533, 35547, 35560, 35573, 35590, 35607, 35620, 35633, 35647, 35661, 35674, 
    35687, 35697, 35707, 35717, 35727, 35737, 35747, 35758, 35771, 35782, 35798, 35814, 35825, 35836, 
    35846, 35856, 35866, 35876, 35886, 35896, 35906, 35916, 35926, 35936, 35946, 35956, 35966, 35976, 
    35986, 35996, 36006, 36016, 36026, 36036, 36046, 36056, 36066, 36076, 36090, 36102, 36114, 36126, 
    36138, 36150, 36162, 36174, 36186, 36198, 36210, 36222, 36234, 36246, 36258, 36270, 36282, 36294, 
    36306, 36318, 36330, 36342, 36354, 36366, 36378, 36390, 36400, 36410, 36425, 36440, 36451, 36462, 
    36472, 36482, 36492, 36502, 36512, 36522, 36533, 36544, 36551, 36558, 36568, 36578, 36591, 36604, 
    36614, 36624, 36635, 36646, 36657, 36668, 36681, 36694, 36707, 36720, 36733, 36746, 36756, 36765, 
    36774, 36783, 36792, 36801, 36810, 36819, 36828, 36837, 36846, 36855, 36864, 36873, 36882, 36891, 
    36901, 36910, 36919, 36928, 36937, 36946, 36955, 36964, 36973, 36982, 36991, 37000, 37009, 37018, 
    37027, 37036, 37046, 37056, 37066, 37076, 37087, 37098, 37109, 37120, 37129, 37138, 37148, 37158, 
    37167, 37176, 37189, 37202, 37215, 37228, 37242, 37256, 37269, 37282, 37295, 37308, 37321, 37334, 
    37348, 37362, 37375, 37388, 37396, 37404, 37413, 37426, 37435, 37448, 37456, 37468, 37476, 37488, 
    37496, 37508, 37516, 37528, 37538, 37552, 37562, 37576, 37586, 37600, 37610, 37624, 37634, 37648, 
    37658, 37672, 37682, 37696, 37706, 37720, 37731, 37746, 37757, 37772, 37783, 37798, 37809, 37824, 
    37835, 37850, 37861, 37876, 37886, 37900, 37910, 37924, 37934, 37948, 37958, 37972, 37984, 37996, 
    38007, 38018, 38030, 38042, 38053, 38064, 38074, 38088, 38098, 38112, 38121, 38134, 38143, 38156, 
    38166, 38180, 38190, 38204, 38213, 38226, 38235, 38248, 38257, 38270, 38279, 38292, 38301, 38314, 
    38323, 38336, 38345, 38355, 38365, 38374, 38383, 38393, 38403, 38412, 38421, 38430, 38443, 38452, 
    38465, 38474, 38487, 38496, 38509, 38520, 38531, 38541, 38551, 38562, 38573, 38583, 38593, 38604, 
    38615, 38626, 38637, 38650, 38663, 38675, 38687, 38700, 38713, 38725, 38737, 38750, 38763, 38775, 
    38787, 38800, 38813, 38825, 38837, 38847, 38857, 38866, 38875, 38885, 38895, 38904, 38913, 38922, 
    38933, 38942, 38951, 38960, 38973, 38983, 38988, 38995, 39006, 39023, 39034, 39045, 39051, 39060, 
    39069, 39078, 39087, 39096, 39105, 39113, 39121, 39130, 39139, 39148, 39157, 39166, 39175, 39184, 
    39193, 39202, 39210, 39218, 39224, 39234, 39244, 39254, 39264, 39274, 39281, 39286, 39295, 39303, 
    39312, 39320, 39328, 39337, 39345, 39353, 39365, 39374, 39382, 39391, 39399, 39407, 39416, 39424, 
    39432, 39444, 39453, 39463, 39472, 39480, 39490, 39499, 39507, 39515, 39527, 39534, 39541, 39548, 
    39555, 39562, 39569, 39580, 39588, 39596, 39604, 39612, 39619, 39625, 39633, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000AAA\000AAD8i8\000AAM"
    "8i8\000AAS\000ABS_F\000ABS_Fp32\000ABS_Fp64\000ABS_Fp80\000ADC16i16\000"
    "ADC16mi\000ADC16mi8\000ADC16mr\000ADC16ri\000ADC16ri8\000ADC16rm\000ADC"
    "16rr\000ADC16rr_REV\000ADC32i32\000ADC32mi\000ADC32mi8\000ADC32mr\000AD"
    "C32ri\000ADC32ri8\000ADC32rm\000ADC32rr\000ADC32rr_REV\000ADC64i32\000A"
    "DC64mi32\000ADC64mi8\000ADC64mr\000ADC64ri32\000ADC64ri8\000ADC64rm\000"
    "ADC64rr\000ADC64rr_REV\000ADC8i8\000ADC8mi\000ADC8mr\000ADC8ri\000ADC8r"
    "m\000ADC8rr\000ADC8rr_REV\000ADD16i16\000ADD16mi\000ADD16mi8\000ADD16mr"
    "\000ADD16ri\000ADD16ri8\000ADD16ri8_DB\000ADD16ri_DB\000ADD16rm\000ADD1"
    "6rr\000ADD16rr_DB\000ADD16rr_REV\000ADD32i32\000ADD32mi\000ADD32mi8\000"
    "ADD32mr\000ADD32ri\000ADD32ri8\000ADD32ri8_DB\000ADD32ri_DB\000ADD32rm\000"
    "ADD32rr\000ADD32rr_DB\000ADD32rr_REV\000ADD64i32\000ADD64mi32\000ADD64m"
    "i8\000ADD64mr\000ADD64ri32\000ADD64ri32_DB\000ADD64ri8\000ADD64ri8_DB\000"
    "ADD64rm\000ADD64rr\000ADD64rr_DB\000ADD64rr_REV\000ADD8i8\000ADD8mi\000"
    "ADD8mr\000ADD8ri\000ADD8rm\000ADD8rr\000ADD8rr_REV\000ADDPDrm\000ADDPDr"
    "r\000ADDPSrm\000ADDPSrr\000ADDSDrm\000ADDSDrm_Int\000ADDSDrr\000ADDSDrr"
    "_Int\000ADDSSrm\000ADDSSrm_Int\000ADDSSrr\000ADDSSrr_Int\000ADDSUBPDrm\000"
    "ADDSUBPDrr\000ADDSUBPSrm\000ADDSUBPSrr\000ADD_F32m\000ADD_F64m\000ADD_F"
    "I16m\000ADD_FI32m\000ADD_FPrST0\000ADD_FST0r\000ADD_Fp32\000ADD_Fp32m\000"
    "ADD_Fp64\000ADD_Fp64m\000ADD_Fp64m32\000ADD_Fp80\000ADD_Fp80m32\000ADD_"
    "Fp80m64\000ADD_FpI16m32\000ADD_FpI16m64\000ADD_FpI16m80\000ADD_FpI32m32"
    "\000ADD_FpI32m64\000ADD_FpI32m80\000ADD_FrST0\000ADJCALLSTACKDOWN32\000"
    "ADJCALLSTACKDOWN64\000ADJCALLSTACKUP32\000ADJCALLSTACKUP64\000AESDECLAS"
    "Trm\000AESDECLASTrr\000AESDECrm\000AESDECrr\000AESENCLASTrm\000AESENCLA"
    "STrr\000AESENCrm\000AESENCrr\000AESIMCrm\000AESIMCrr\000AESKEYGENASSIST"
    "128rm\000AESKEYGENASSIST128rr\000AND16i16\000AND16mi\000AND16mi8\000AND"
    "16mr\000AND16ri\000AND16ri8\000AND16rm\000AND16rr\000AND16rr_REV\000AND"
    "32i32\000AND32mi\000AND32mi8\000AND32mr\000AND32ri\000AND32ri8\000AND32"
    "rm\000AND32rr\000AND32rr_REV\000AND64i32\000AND64mi32\000AND64mi8\000AN"
    "D64mr\000AND64ri32\000AND64ri8\000AND64rm\000AND64rr\000AND64rr_REV\000"
    "AND8i8\000AND8mi\000AND8mr\000AND8ri\000AND8rm\000AND8rr\000AND8rr_REV\000"
    "ANDNPDrm\000ANDNPDrr\000ANDNPSrm\000ANDNPSrr\000ANDPDrm\000ANDPDrr\000A"
    "NDPSrm\000ANDPSrr\000ARPL16mr\000ARPL16rr\000ATOMADD6432\000ATOMAND16\000"
    "ATOMAND32\000ATOMAND64\000ATOMAND6432\000ATOMAND8\000ATOMMAX16\000ATOMM"
    "AX32\000ATOMMAX64\000ATOMMIN16\000ATOMMIN32\000ATOMMIN64\000ATOMNAND16\000"
    "ATOMNAND32\000ATOMNAND64\000ATOMNAND6432\000ATOMNAND8\000ATOMOR16\000AT"
    "OMOR32\000ATOMOR64\000ATOMOR6432\000ATOMOR8\000ATOMSUB6432\000ATOMSWAP6"
    "432\000ATOMUMAX16\000ATOMUMAX32\000ATOMUMAX64\000ATOMUMIN16\000ATOMUMIN"
    "32\000ATOMUMIN64\000ATOMXOR16\000ATOMXOR32\000ATOMXOR64\000ATOMXOR6432\000"
    "ATOMXOR8\000AVX_SET0PD\000AVX_SET0PDY\000AVX_SET0PI\000AVX_SET0PS\000AV"
    "X_SET0PSY\000AVX_SETALLONES\000BLENDPDrmi\000BLENDPDrri\000BLENDPSrmi\000"
    "BLENDPSrri\000BLENDVPDrm0\000BLENDVPDrr0\000BLENDVPSrm0\000BLENDVPSrr0\000"
    "BOUNDS16rm\000BOUNDS32rm\000BSF16rm\000BSF16rr\000BSF32rm\000BSF32rr\000"
    "BSF64rm\000BSF64rr\000BSR16rm\000BSR16rr\000BSR32rm\000BSR32rr\000BSR64"
    "rm\000BSR64rr\000BSWAP32r\000BSWAP64r\000BT16mi8\000BT16mr\000BT16ri8\000"
    "BT16rr\000BT32mi8\000BT32mr\000BT32ri8\000BT32rr\000BT64mi8\000BT64mr\000"
    "BT64ri8\000BT64rr\000BTC16mi8\000BTC16mr\000BTC16ri8\000BTC16rr\000BTC3"
    "2mi8\000BTC32mr\000BTC32ri8\000BTC32rr\000BTC64mi8\000BTC64mr\000BTC64r"
    "i8\000BTC64rr\000BTR16mi8\000BTR16mr\000BTR16ri8\000BTR16rr\000BTR32mi8"
    "\000BTR32mr\000BTR32ri8\000BTR32rr\000BTR64mi8\000BTR64mr\000BTR64ri8\000"
    "BTR64rr\000BTS16mi8\000BTS16mr\000BTS16ri8\000BTS16rr\000BTS32mi8\000BT"
    "S32mr\000BTS32ri8\000BTS32rr\000BTS64mi8\000BTS64mr\000BTS64ri8\000BTS6"
    "4rr\000CALL32m\000CALL32r\000CALL64m\000CALL64pcrel32\000CALL64r\000CAL"
    "Lpcrel16\000CALLpcrel32\000CBW\000CDQ\000CDQE\000CHS_F\000CHS_Fp32\000C"
    "HS_Fp64\000CHS_Fp80\000CLC\000CLD\000CLFLUSH\000CLI\000CLTS\000CMC\000C"
    "MOVA16rm\000CMOVA16rr\000CMOVA32rm\000CMOVA32rr\000CMOVA64rm\000CMOVA64"
    "rr\000CMOVAE16rm\000CMOVAE16rr\000CMOVAE32rm\000CMOVAE32rr\000CMOVAE64r"
    "m\000CMOVAE64rr\000CMOVB16rm\000CMOVB16rr\000CMOVB32rm\000CMOVB32rr\000"
    "CMOVB64rm\000CMOVB64rr\000CMOVBE16rm\000CMOVBE16rr\000CMOVBE32rm\000CMO"
    "VBE32rr\000CMOVBE64rm\000CMOVBE64rr\000CMOVBE_F\000CMOVBE_Fp32\000CMOVB"
    "E_Fp64\000CMOVBE_Fp80\000CMOVB_F\000CMOVB_Fp32\000CMOVB_Fp64\000CMOVB_F"
    "p80\000CMOVE16rm\000CMOVE16rr\000CMOVE32rm\000CMOVE32rr\000CMOVE64rm\000"
    "CMOVE64rr\000CMOVE_F\000CMOVE_Fp32\000CMOVE_Fp64\000CMOVE_Fp80\000CMOVG"
    "16rm\000CMOVG16rr\000CMOVG32rm\000CMOVG32rr\000CMOVG64rm\000CMOVG64rr\000"
    "CMOVGE16rm\000CMOVGE16rr\000CMOVGE32rm\000CMOVGE32rr\000CMOVGE64rm\000C"
    "MOVGE64rr\000CMOVL16rm\000CMOVL16rr\000CMOVL32rm\000CMOVL32rr\000CMOVL6"
    "4rm\000CMOVL64rr\000CMOVLE16rm\000CMOVLE16rr\000CMOVLE32rm\000CMOVLE32r"
    "r\000CMOVLE64rm\000CMOVLE64rr\000CMOVNBE_F\000CMOVNBE_Fp32\000CMOVNBE_F"
    "p64\000CMOVNBE_Fp80\000CMOVNB_F\000CMOVNB_Fp32\000CMOVNB_Fp64\000CMOVNB"
    "_Fp80\000CMOVNE16rm\000CMOVNE16rr\000CMOVNE32rm\000CMOVNE32rr\000CMOVNE"
    "64rm\000CMOVNE64rr\000CMOVNE_F\000CMOVNE_Fp32\000CMOVNE_Fp64\000CMOVNE_"
    "Fp80\000CMOVNO16rm\000CMOVNO16rr\000CMOVNO32rm\000CMOVNO32rr\000CMOVNO6"
    "4rm\000CMOVNO64rr\000CMOVNP16rm\000CMOVNP16rr\000CMOVNP32rm\000CMOVNP32"
    "rr\000CMOVNP64rm\000CMOVNP64rr\000CMOVNP_F\000CMOVNP_Fp32\000CMOVNP_Fp6"
    "4\000CMOVNP_Fp80\000CMOVNS16rm\000CMOVNS16rr\000CMOVNS32rm\000CMOVNS32r"
    "r\000CMOVNS64rm\000CMOVNS64rr\000CMOVO16rm\000CMOVO16rr\000CMOVO32rm\000"
    "CMOVO32rr\000CMOVO64rm\000CMOVO64rr\000CMOVP16rm\000CMOVP16rr\000CMOVP3"
    "2rm\000CMOVP32rr\000CMOVP64rm\000CMOVP64rr\000CMOVP_F\000CMOVP_Fp32\000"
    "CMOVP_Fp64\000CMOVP_Fp80\000CMOVS16rm\000CMOVS16rr\000CMOVS32rm\000CMOV"
    "S32rr\000CMOVS64rm\000CMOVS64rr\000CMOV_FR32\000CMOV_FR64\000CMOV_GR16\000"
    "CMOV_GR32\000CMOV_GR8\000CMOV_RFP32\000CMOV_RFP64\000CMOV_RFP80\000CMOV"
    "_V2F64\000CMOV_V2I64\000CMOV_V4F32\000CMOV_V4F64\000CMOV_V4I64\000CMOV_"
    "V8F32\000CMP16i16\000CMP16mi\000CMP16mi8\000CMP16mr\000CMP16ri\000CMP16"
    "ri8\000CMP16rm\000CMP16rr\000CMP16rr_REV\000CMP32i32\000CMP32mi\000CMP3"
    "2mi8\000CMP32mr\000CMP32ri\000CMP32ri8\000CMP32rm\000CMP32rr\000CMP32rr"
    "_REV\000CMP64i32\000CMP64mi32\000CMP64mi8\000CMP64mr\000CMP64ri32\000CM"
    "P64ri8\000CMP64rm\000CMP64rr\000CMP64rr_REV\000CMP8i8\000CMP8mi\000CMP8"
    "mr\000CMP8ri\000CMP8rm\000CMP8rr\000CMP8rr_REV\000CMPPDrmi\000CMPPDrmi_"
    "alt\000CMPPDrri\000CMPPDrri_alt\000CMPPSrmi\000CMPPSrmi_alt\000CMPPSrri"
    "\000CMPPSrri_alt\000CMPS16\000CMPS32\000CMPS64\000CMPS8\000CMPSDrm\000C"
    "MPSDrm_alt\000CMPSDrr\000CMPSDrr_alt\000CMPSSrm\000CMPSSrm_alt\000CMPSS"
    "rr\000CMPSSrr_alt\000CMPXCHG16B\000CMPXCHG16rm\000CMPXCHG16rr\000CMPXCH"
    "G32rm\000CMPXCHG32rr\000CMPXCHG64rm\000CMPXCHG64rr\000CMPXCHG8B\000CMPX"
    "CHG8rm\000CMPXCHG8rr\000COMISDrm\000COMISDrr\000COMISSrm\000COMISSrr\000"
    "COMP_FST0r\000COM_FIPr\000COM_FIr\000COM_FST0r\000COS_F\000COS_Fp32\000"
    "COS_Fp64\000COS_Fp80\000CPUID\000CQO\000CRC32r32m16\000CRC32r32m32\000C"
    "RC32r32m8\000CRC32r32r16\000CRC32r32r32\000CRC32r32r8\000CRC32r64m64\000"
    "CRC32r64m8\000CRC32r64r64\000CRC32r64r8\000CS_PREFIX\000CVTDQ2PDrm\000C"
    "VTDQ2PDrr\000CVTDQ2PSrm\000CVTDQ2PSrr\000CVTPD2DQrm\000CVTPD2DQrr\000CV"
    "TPD2PSrm\000CVTPD2PSrr\000CVTPS2DQrm\000CVTPS2DQrr\000CVTPS2PDrm\000CVT"
    "PS2PDrr\000CVTSD2SI64rm\000CVTSD2SI64rr\000CVTSD2SIrm\000CVTSD2SIrr\000"
    "CVTSD2SSrm\000CVTSD2SSrr\000CVTSI2SD64rm\000CVTSI2SD64rr\000CVTSI2SDrm\000"
    "CVTSI2SDrr\000CVTSI2SS64rm\000CVTSI2SS64rr\000CVTSI2SSrm\000CVTSI2SSrr\000"
    "CVTSS2SDrm\000CVTSS2SDrr\000CVTSS2SI64rm\000CVTSS2SI64rr\000CVTSS2SIrm\000"
    "CVTSS2SIrr\000CVTTPD2DQrm\000CVTTPD2DQrr\000CVTTPS2DQrm\000CVTTPS2DQrr\000"
    "CVTTSD2SI64rm\000CVTTSD2SI64rr\000CVTTSD2SIrm\000CVTTSD2SIrr\000CVTTSS2"
    "SI64rm\000CVTTSS2SI64rr\000CVTTSS2SIrm\000CVTTSS2SIrr\000CWD\000CWDE\000"
    "DAA\000DAS\000DATA16_PREFIX\000DEC16m\000DEC16r\000DEC32m\000DEC32r\000"
    "DEC64_16m\000DEC64_16r\000DEC64_32m\000DEC64_32r\000DEC64m\000DEC64r\000"
    "DEC8m\000DEC8r\000DIV16m\000DIV16r\000DIV32m\000DIV32r\000DIV64m\000DIV"
    "64r\000DIV8m\000DIV8r\000DIVPDrm\000DIVPDrr\000DIVPSrm\000DIVPSrr\000DI"
    "VR_F32m\000DIVR_F64m\000DIVR_FI16m\000DIVR_FI32m\000DIVR_FPrST0\000DIVR"
    "_FST0r\000DIVR_Fp32m\000DIVR_Fp64m\000DIVR_Fp64m32\000DIVR_Fp80m32\000D"
    "IVR_Fp80m64\000DIVR_FpI16m32\000DIVR_FpI16m64\000DIVR_FpI16m80\000DIVR_"
    "FpI32m32\000DIVR_FpI32m64\000DIVR_FpI32m80\000DIVR_FrST0\000DIVSDrm\000"
    "DIVSDrm_Int\000DIVSDrr\000DIVSDrr_Int\000DIVSSrm\000DIVSSrm_Int\000DIVS"
    "Srr\000DIVSSrr_Int\000DIV_F32m\000DIV_F64m\000DIV_FI16m\000DIV_FI32m\000"
    "DIV_FPrST0\000DIV_FST0r\000DIV_Fp32\000DIV_Fp32m\000DIV_Fp64\000DIV_Fp6"
    "4m\000DIV_Fp64m32\000DIV_Fp80\000DIV_Fp80m32\000DIV_Fp80m64\000DIV_FpI1"
    "6m32\000DIV_FpI16m64\000DIV_FpI16m80\000DIV_FpI32m32\000DIV_FpI32m64\000"
    "DIV_FpI32m80\000DIV_FrST0\000DPPDrmi\000DPPDrri\000DPPSrmi\000DPPSrri\000"
    "DS_PREFIX\000EH_RETURN\000EH_RETURN64\000ENTER\000ES_PREFIX\000EXTRACTP"
    "Smr\000EXTRACTPSrr\000F2XM1\000FARCALL16i\000FARCALL16m\000FARCALL32i\000"
    "FARCALL32m\000FARCALL64\000FARJMP16i\000FARJMP16m\000FARJMP32i\000FARJM"
    "P32m\000FARJMP64\000FBLDm\000FBSTPm\000FCOM32m\000FCOM64m\000FCOMP32m\000"
    "FCOMP64m\000FCOMPP\000FDECSTP\000FEMMS\000FFREE\000FICOM16m\000FICOM32m"
    "\000FICOMP16m\000FICOMP32m\000FINCSTP\000FLDCW16m\000FLDENVm\000FLDL2E\000"
    "FLDL2T\000FLDLG2\000FLDLN2\000FLDPI\000FNCLEX\000FNINIT\000FNOP\000FNST"
    "CW16m\000FNSTSW8r\000FNSTSWm\000FP32_TO_INT16_IN_MEM\000FP32_TO_INT32_I"
    "N_MEM\000FP32_TO_INT64_IN_MEM\000FP64_TO_INT16_IN_MEM\000FP64_TO_INT32_"
    "IN_MEM\000FP64_TO_INT64_IN_MEM\000FP80_TO_INT16_IN_MEM\000FP80_TO_INT32"
    "_IN_MEM\000FP80_TO_INT64_IN_MEM\000FPATAN\000FPREM\000FPREM1\000FPTAN\000"
    "FRNDINT\000FRSTORm\000FSAVEm\000FSCALE\000FSINCOS\000FSTENVm\000FS_PREF"
    "IX\000FXAM\000FXRSTOR\000FXRSTOR64\000FXSAVE\000FXSAVE64\000FXTRACT\000"
    "FYL2X\000FYL2XP1\000FpPOP_RETVAL\000FsANDNPDrm\000FsANDNPDrr\000FsANDNP"
    "Srm\000FsANDNPSrr\000FsANDPDrm\000FsANDPDrr\000FsANDPSrm\000FsANDPSrr\000"
    "FsFLD0SD\000FsFLD0SS\000FsMOVAPDrm\000FsMOVAPDrr\000FsMOVAPSrm\000FsMOV"
    "APSrr\000FsORPDrm\000FsORPDrr\000FsORPSrm\000FsORPSrr\000FsXORPDrm\000F"
    "sXORPDrr\000FsXORPSrm\000FsXORPSrr\000GS_PREFIX\000HADDPDrm\000HADDPDrr"
    "\000HADDPSrm\000HADDPSrr\000HLT\000HSUBPDrm\000HSUBPDrr\000HSUBPSrm\000"
    "HSUBPSrr\000IDIV16m\000IDIV16r\000IDIV32m\000IDIV32r\000IDIV64m\000IDIV"
    "64r\000IDIV8m\000IDIV8r\000ILD_F16m\000ILD_F32m\000ILD_F64m\000ILD_Fp16"
    "m32\000ILD_Fp16m64\000ILD_Fp16m80\000ILD_Fp32m32\000ILD_Fp32m64\000ILD_"
    "Fp32m80\000ILD_Fp64m32\000ILD_Fp64m64\000ILD_Fp64m80\000IMUL16m\000IMUL"
    "16r\000IMUL16rm\000IMUL16rmi\000IMUL16rmi8\000IMUL16rr\000IMUL16rri\000"
    "IMUL16rri8\000IMUL32m\000IMUL32r\000IMUL32rm\000IMUL32rmi\000IMUL32rmi8"
    "\000IMUL32rr\000IMUL32rri\000IMUL32rri8\000IMUL64m\000IMUL64r\000IMUL64"
    "rm\000IMUL64rmi32\000IMUL64rmi8\000IMUL64rr\000IMUL64rri32\000IMUL64rri"
    "8\000IMUL8m\000IMUL8r\000IN16\000IN16ri\000IN16rr\000IN32\000IN32ri\000"
    "IN32rr\000IN8\000IN8ri\000IN8rr\000INC16m\000INC16r\000INC32m\000INC32r"
    "\000INC64_16m\000INC64_16r\000INC64_32m\000INC64_32r\000INC64m\000INC64"
    "r\000INC8m\000INC8r\000INSERTPSrm\000INSERTPSrr\000INT\000INT3\000INTO\000"
    "INVD\000INVEPT\000INVLPG\000INVVPID\000IRET16\000IRET32\000IRET64\000IS"
    "TT_FP16m\000ISTT_FP32m\000ISTT_FP64m\000ISTT_Fp16m32\000ISTT_Fp16m64\000"
    "ISTT_Fp16m80\000ISTT_Fp32m32\000ISTT_Fp32m64\000ISTT_Fp32m80\000ISTT_Fp"
    "64m32\000ISTT_Fp64m64\000ISTT_Fp64m80\000IST_F16m\000IST_F32m\000IST_FP"
    "16m\000IST_FP32m\000IST_FP64m\000IST_Fp16m32\000IST_Fp16m64\000IST_Fp16"
    "m80\000IST_Fp32m32\000IST_Fp32m64\000IST_Fp32m80\000IST_Fp64m32\000IST_"
    "Fp64m64\000IST_Fp64m80\000Int_CMPSDrm\000Int_CMPSDrr\000Int_CMPSSrm\000"
    "Int_CMPSSrr\000Int_COMISDrm\000Int_COMISDrr\000Int_COMISSrm\000Int_COMI"
    "SSrr\000Int_CVTDQ2PDrm\000Int_CVTDQ2PDrr\000Int_CVTDQ2PSrm\000Int_CVTDQ"
    "2PSrr\000Int_CVTPD2DQrm\000Int_CVTPD2DQrr\000Int_CVTPD2PSrm\000Int_CVTP"
    "D2PSrr\000Int_CVTPS2DQrm\000Int_CVTPS2DQrr\000Int_CVTPS2PDrm\000Int_CVT"
    "PS2PDrr\000Int_CVTSD2SSrm\000Int_CVTSD2SSrr\000Int_CVTSI2SD64rm\000Int_"
    "CVTSI2SD64rr\000Int_CVTSI2SDrm\000Int_CVTSI2SDrr\000Int_CVTSI2SS64rm\000"
    "Int_CVTSI2SS64rr\000Int_CVTSI2SSrm\000Int_CVTSI2SSrr\000Int_CVTSS2SDrm\000"
    "Int_CVTSS2SDrr\000Int_CVTTSD2SI64rm\000Int_CVTTSD2SI64rr\000Int_CVTTSD2"
    "SIrm\000Int_CVTTSD2SIrr\000Int_CVTTSS2SI64rm\000Int_CVTTSS2SI64rr\000In"
    "t_CVTTSS2SIrm\000Int_CVTTSS2SIrr\000Int_MemBarrier\000Int_MemBarrierNoS"
    "SE64\000Int_UCOMISDrm\000Int_UCOMISDrr\000Int_UCOMISSrm\000Int_UCOMISSr"
    "r\000Int_VCMPSDrm\000Int_VCMPSDrr\000Int_VCMPSSrm\000Int_VCMPSSrr\000In"
    "t_VCOMISDrm\000Int_VCOMISDrr\000Int_VCOMISSrm\000Int_VCOMISSrr\000Int_V"
    "CVTDQ2PDrm\000Int_VCVTDQ2PDrr\000Int_VCVTDQ2PSrm\000Int_VCVTDQ2PSrr\000"
    "Int_VCVTPD2DQrm\000Int_VCVTPD2DQrr\000Int_VCVTPD2PSrm\000Int_VCVTPD2PSr"
    "r\000Int_VCVTPS2DQrm\000Int_VCVTPS2DQrr\000Int_VCVTPS2PDrm\000Int_VCVTP"
    "S2PDrr\000Int_VCVTSD2SI64rm\000Int_VCVTSD2SI64rr\000Int_VCVTSD2SIrm\000"
    "Int_VCVTSD2SIrr\000Int_VCVTSD2SSrm\000Int_VCVTSD2SSrr\000Int_VCVTSI2SD6"
    "4rm\000Int_VCVTSI2SD64rr\000Int_VCVTSI2SDrm\000Int_VCVTSI2SDrr\000Int_V"
    "CVTSI2SS64rm\000Int_VCVTSI2SS64rr\000Int_VCVTSI2SSrm\000Int_VCVTSI2SSrr"
    "\000Int_VCVTSS2SDrm\000Int_VCVTSS2SDrr\000Int_VCVTTPD2DQrm\000Int_VCVTT"
    "PD2DQrr\000Int_VCVTTPS2DQrm\000Int_VCVTTPS2DQrr\000Int_VCVTTSD2SI64rm\000"
    "Int_VCVTTSD2SI64rr\000Int_VCVTTSD2SIrm\000Int_VCVTTSD2SIrr\000Int_VCVTT"
    "SS2SI64rm\000Int_VCVTTSS2SI64rr\000Int_VCVTTSS2SIrm\000Int_VCVTTSS2SIrr"
    "\000Int_VUCOMISDrm\000Int_VUCOMISDrr\000Int_VUCOMISSrm\000Int_VUCOMISSr"
    "r\000JAE_1\000JAE_4\000JA_1\000JA_4\000JBE_1\000JBE_4\000JB_1\000JB_4\000"
    "JCXZ\000JECXZ_32\000JECXZ_64\000JE_1\000JE_4\000JGE_1\000JGE_4\000JG_1\000"
    "JG_4\000JLE_1\000JLE_4\000JL_1\000JL_4\000JMP32m\000JMP32r\000JMP64m\000"
    "JMP64pcrel32\000JMP64r\000JMP_1\000JMP_4\000JNE_1\000JNE_4\000JNO_1\000"
    "JNO_4\000JNP_1\000JNP_4\000JNS_1\000JNS_4\000JO_1\000JO_4\000JP_1\000JP"
    "_4\000JRCXZ\000JS_1\000JS_4\000LAHF\000LAR16rm\000LAR16rr\000LAR32rm\000"
    "LAR32rr\000LAR64rm\000LAR64rr\000LCMPXCHG16\000LCMPXCHG32\000LCMPXCHG64"
    "\000LCMPXCHG8\000LCMPXCHG8B\000LDDQUrm\000LDMXCSR\000LDS16rm\000LDS32rm"
    "\000LD_F0\000LD_F1\000LD_F32m\000LD_F64m\000LD_F80m\000LD_Fp032\000LD_F"
    "p064\000LD_Fp080\000LD_Fp132\000LD_Fp164\000LD_Fp180\000LD_Fp32m\000LD_"
    "Fp32m64\000LD_Fp32m80\000LD_Fp64m\000LD_Fp64m80\000LD_Fp80m\000LD_Frr\000"
    "LEA16r\000LEA32r\000LEA64_32r\000LEA64r\000LEAVE\000LEAVE64\000LES16rm\000"
    "LES32rm\000LFENCE\000LFS16rm\000LFS32rm\000LFS64rm\000LGDT16m\000LGDTm\000"
    "LGS16rm\000LGS32rm\000LGS64rm\000LIDT16m\000LIDTm\000LLDT16m\000LLDT16r"
    "\000LMSW16m\000LMSW16r\000LOCK_ADD16mi\000LOCK_ADD16mi8\000LOCK_ADD16mr"
    "\000LOCK_ADD32mi\000LOCK_ADD32mi8\000LOCK_ADD32mr\000LOCK_ADD64mi32\000"
    "LOCK_ADD64mi8\000LOCK_ADD64mr\000LOCK_ADD8mi\000LOCK_ADD8mr\000LOCK_AND"
    "16mi\000LOCK_AND16mi8\000LOCK_AND16mr\000LOCK_AND32mi\000LOCK_AND32mi8\000"
    "LOCK_AND32mr\000LOCK_AND64mi32\000LOCK_AND64mi8\000LOCK_AND64mr\000LOCK"
    "_AND8mi\000LOCK_AND8mr\000LOCK_DEC16m\000LOCK_DEC32m\000LOCK_DEC64m\000"
    "LOCK_DEC8m\000LOCK_INC16m\000LOCK_INC32m\000LOCK_INC64m\000LOCK_INC8m\000"
    "LOCK_OR16mi\000LOCK_OR16mi8\000LOCK_OR16mr\000LOCK_OR32mi\000LOCK_OR32m"
    "i8\000LOCK_OR32mr\000LOCK_OR64mi32\000LOCK_OR64mi8\000LOCK_OR64mr\000LO"
    "CK_OR8mi\000LOCK_OR8mr\000LOCK_PREFIX\000LOCK_SUB16mi\000LOCK_SUB16mi8\000"
    "LOCK_SUB16mr\000LOCK_SUB32mi\000LOCK_SUB32mi8\000LOCK_SUB32mr\000LOCK_S"
    "UB64mi32\000LOCK_SUB64mi8\000LOCK_SUB64mr\000LOCK_SUB8mi\000LOCK_SUB8mr"
    "\000LOCK_XOR16mi\000LOCK_XOR16mi8\000LOCK_XOR16mr\000LOCK_XOR32mi\000LO"
    "CK_XOR32mi8\000LOCK_XOR32mr\000LOCK_XOR64mi32\000LOCK_XOR64mi8\000LOCK_"
    "XOR64mr\000LOCK_XOR8mi\000LOCK_XOR8mr\000LODSB\000LODSD\000LODSQ\000LOD"
    "SW\000LOOP\000LOOPE\000LOOPNE\000LRETI\000LRETIW\000LRETL\000LRETQ\000L"
    "SL16rm\000LSL16rr\000LSL32rm\000LSL32rr\000LSL64rm\000LSL64rr\000LSS16r"
    "m\000LSS32rm\000LSS64rm\000LTRm\000LTRr\000LXADD16\000LXADD32\000LXADD6"
    "4\000LXADD8\000MASKMOVDQU\000MASKMOVDQU64\000MAXPDrm\000MAXPDrm_Int\000"
    "MAXPDrr\000MAXPDrr_Int\000MAXPSrm\000MAXPSrm_Int\000MAXPSrr\000MAXPSrr_"
    "Int\000MAXSDrm\000MAXSDrm_Int\000MAXSDrr\000MAXSDrr_Int\000MAXSSrm\000M"
    "AXSSrm_Int\000MAXSSrr\000MAXSSrr_Int\000MFENCE\000MINPDrm\000MINPDrm_In"
    "t\000MINPDrr\000MINPDrr_Int\000MINPSrm\000MINPSrm_Int\000MINPSrr\000MIN"
    "PSrr_Int\000MINSDrm\000MINSDrm_Int\000MINSDrr\000MINSDrr_Int\000MINSSrm"
    "\000MINSSrm_Int\000MINSSrr\000MINSSrr_Int\000MMX_CVTPD2PIirm\000MMX_CVT"
    "PD2PIirr\000MMX_CVTPI2PDirm\000MMX_CVTPI2PDirr\000MMX_CVTPI2PSirm\000MM"
    "X_CVTPI2PSirr\000MMX_CVTPS2PIirm\000MMX_CVTPS2PIirr\000MMX_CVTTPD2PIirm"
    "\000MMX_CVTTPD2PIirr\000MMX_CVTTPS2PIirm\000MMX_CVTTPS2PIirr\000MMX_EMM"
    "S\000MMX_MASKMOVQ\000MMX_MASKMOVQ64\000MMX_MOVD64from64rr\000MMX_MOVD64"
    "grr\000MMX_MOVD64mr\000MMX_MOVD64rm\000MMX_MOVD64rr\000MMX_MOVD64rrv164"
    "\000MMX_MOVD64to64rr\000MMX_MOVDQ2Qrr\000MMX_MOVFR642Qrr\000MMX_MOVNTQm"
    "r\000MMX_MOVQ2DQrr\000MMX_MOVQ2FR64rr\000MMX_MOVQ64mr\000MMX_MOVQ64rm\000"
    "MMX_MOVQ64rr\000MMX_MOVZDI2PDIrm\000MMX_MOVZDI2PDIrr\000MMX_PABSBrm64\000"
    "MMX_PABSBrr64\000MMX_PABSDrm64\000MMX_PABSDrr64\000MMX_PABSWrm64\000MMX"
    "_PABSWrr64\000MMX_PACKSSDWirm\000MMX_PACKSSDWirr\000MMX_PACKSSWBirm\000"
    "MMX_PACKSSWBirr\000MMX_PACKUSWBirm\000MMX_PACKUSWBirr\000MMX_PADDBirm\000"
    "MMX_PADDBirr\000MMX_PADDDirm\000MMX_PADDDirr\000MMX_PADDQirm\000MMX_PAD"
    "DQirr\000MMX_PADDSBirm\000MMX_PADDSBirr\000MMX_PADDSWirm\000MMX_PADDSWi"
    "rr\000MMX_PADDUSBirm\000MMX_PADDUSBirr\000MMX_PADDUSWirm\000MMX_PADDUSW"
    "irr\000MMX_PADDWirm\000MMX_PADDWirr\000MMX_PALIGNR64irm\000MMX_PALIGNR6"
    "4irr\000MMX_PANDNirm\000MMX_PANDNirr\000MMX_PANDirm\000MMX_PANDirr\000M"
    "MX_PAVGBirm\000MMX_PAVGBirr\000MMX_PAVGWirm\000MMX_PAVGWirr\000MMX_PCMP"
    "EQBirm\000MMX_PCMPEQBirr\000MMX_PCMPEQDirm\000MMX_PCMPEQDirr\000MMX_PCM"
    "PEQWirm\000MMX_PCMPEQWirr\000MMX_PCMPGTBirm\000MMX_PCMPGTBirr\000MMX_PC"
    "MPGTDirm\000MMX_PCMPGTDirr\000MMX_PCMPGTWirm\000MMX_PCMPGTWirr\000MMX_P"
    "EXTRWirri\000MMX_PHADDSWrm64\000MMX_PHADDSWrr64\000MMX_PHADDWrm64\000MM"
    "X_PHADDWrr64\000MMX_PHADDrm64\000MMX_PHADDrr64\000MMX_PHSUBDrm64\000MMX"
    "_PHSUBDrr64\000MMX_PHSUBSWrm64\000MMX_PHSUBSWrr64\000MMX_PHSUBWrm64\000"
    "MMX_PHSUBWrr64\000MMX_PINSRWirmi\000MMX_PINSRWirri\000MMX_PMADDUBSWrm64"
    "\000MMX_PMADDUBSWrr64\000MMX_PMADDWDirm\000MMX_PMADDWDirr\000MMX_PMAXSW"
    "irm\000MMX_PMAXSWirr\000MMX_PMAXUBirm\000MMX_PMAXUBirr\000MMX_PMINSWirm"
    "\000MMX_PMINSWirr\000MMX_PMINUBirm\000MMX_PMINUBirr\000MMX_PMOVMSKBrr\000"
    "MMX_PMULHRSWrm64\000MMX_PMULHRSWrr64\000MMX_PMULHUWirm\000MMX_PMULHUWir"
    "r\000MMX_PMULHWirm\000MMX_PMULHWirr\000MMX_PMULLWirm\000MMX_PMULLWirr\000"
    "MMX_PMULUDQirm\000MMX_PMULUDQirr\000MMX_PORirm\000MMX_PORirr\000MMX_PSA"
    "DBWirm\000MMX_PSADBWirr\000MMX_PSHUFBrm64\000MMX_PSHUFBrr64\000MMX_PSHU"
    "FWmi\000MMX_PSHUFWri\000MMX_PSIGNBrm64\000MMX_PSIGNBrr64\000MMX_PSIGNDr"
    "m64\000MMX_PSIGNDrr64\000MMX_PSIGNWrm64\000MMX_PSIGNWrr64\000MMX_PSLLDr"
    "i\000MMX_PSLLDrm\000MMX_PSLLDrr\000MMX_PSLLQri\000MMX_PSLLQrm\000MMX_PS"
    "LLQrr\000MMX_PSLLWri\000MMX_PSLLWrm\000MMX_PSLLWrr\000MMX_PSRADri\000MM"
    "X_PSRADrm\000MMX_PSRADrr\000MMX_PSRAWri\000MMX_PSRAWrm\000MMX_PSRAWrr\000"
    "MMX_PSRLDri\000MMX_PSRLDrm\000MMX_PSRLDrr\000MMX_PSRLQri\000MMX_PSRLQrm"
    "\000MMX_PSRLQrr\000MMX_PSRLWri\000MMX_PSRLWrm\000MMX_PSRLWrr\000MMX_PSU"
    "BBirm\000MMX_PSUBBirr\000MMX_PSUBDirm\000MMX_PSUBDirr\000MMX_PSUBQirm\000"
    "MMX_PSUBQirr\000MMX_PSUBSBirm\000MMX_PSUBSBirr\000MMX_PSUBSWirm\000MMX_"
    "PSUBSWirr\000MMX_PSUBUSBirm\000MMX_PSUBUSBirr\000MMX_PSUBUSWirm\000MMX_"
    "PSUBUSWirr\000MMX_PSUBWirm\000MMX_PSUBWirr\000MMX_PUNPCKHBWirm\000MMX_P"
    "UNPCKHBWirr\000MMX_PUNPCKHDQirm\000MMX_PUNPCKHDQirr\000MMX_PUNPCKHWDirm"
    "\000MMX_PUNPCKHWDirr\000MMX_PUNPCKLBWirm\000MMX_PUNPCKLBWirr\000MMX_PUN"
    "PCKLDQirm\000MMX_PUNPCKLDQirr\000MMX_PUNPCKLWDirm\000MMX_PUNPCKLWDirr\000"
    "MMX_PXORirm\000MMX_PXORirr\000MONITOR\000MONITORrrr\000MONTMUL\000MOV16"
    "ao16\000MOV16mi\000MOV16mr\000MOV16ms\000MOV16o16a\000MOV16r0\000MOV16r"
    "i\000MOV16rm\000MOV16rr\000MOV16rr_REV\000MOV16rs\000MOV16sm\000MOV16sr"
    "\000MOV32ao32\000MOV32cr\000MOV32dr\000MOV32mi\000MOV32mr\000MOV32ms\000"
    "MOV32o32a\000MOV32r0\000MOV32rc\000MOV32rd\000MOV32ri\000MOV32rm\000MOV"
    "32rr\000MOV32rr_REV\000MOV32rs\000MOV32sm\000MOV32sr\000MOV64cr\000MOV6"
    "4dr\000MOV64mi32\000MOV64mr\000MOV64ms\000MOV64r0\000MOV64rc\000MOV64rd"
    "\000MOV64ri\000MOV64ri32\000MOV64ri64i32\000MOV64rm\000MOV64rr\000MOV64"
    "rr_REV\000MOV64rs\000MOV64sm\000MOV64sr\000MOV64toPQIrr\000MOV64toSDrm\000"
    "MOV64toSDrr\000MOV8ao8\000MOV8mi\000MOV8mr\000MOV8mr_NOREX\000MOV8o8a\000"
    "MOV8r0\000MOV8ri\000MOV8rm\000MOV8rm_NOREX\000MOV8rr\000MOV8rr_NOREX\000"
    "MOV8rr_REV\000MOVAPDmr\000MOVAPDrm\000MOVAPDrr\000MOVAPSmr\000MOVAPSrm\000"
    "MOVAPSrr\000MOVDDUPrm\000MOVDDUPrr\000MOVDI2PDIrm\000MOVDI2PDIrr\000MOV"
    "DI2SSrm\000MOVDI2SSrr\000MOVDQAmr\000MOVDQArm\000MOVDQArr\000MOVDQUmr\000"
    "MOVDQUmr_Int\000MOVDQUrm\000MOVDQUrr\000MOVHLPSrr\000MOVHPDmr\000MOVHPD"
    "rm\000MOVHPSmr\000MOVHPSrm\000MOVLHPSrr\000MOVLPDmr\000MOVLPDrm\000MOVL"
    "PSmr\000MOVLPSrm\000MOVLQ128mr\000MOVMSKPDrr32\000MOVMSKPDrr32_alt\000M"
    "OVMSKPDrr64\000MOVMSKPDrr64_alt\000MOVMSKPSrr32\000MOVMSKPSrr32_alt\000"
    "MOVMSKPSrr64\000MOVMSKPSrr64_alt\000MOVNTDQArm\000MOVNTDQ_64mr\000MOVNT"
    "DQmr\000MOVNTI_64mr\000MOVNTImr\000MOVNTPDmr\000MOVNTPSmr\000MOVPC32r\000"
    "MOVPDI2DImr\000MOVPDI2DIrr\000MOVPQI2QImr\000MOVPQIto64rr\000MOVQI2PQIr"
    "m\000MOVQxrxr\000MOVSB\000MOVSD\000MOVSDmr\000MOVSDrm\000MOVSDrr\000MOV"
    "SDto64mr\000MOVSDto64rr\000MOVSHDUPrm\000MOVSHDUPrr\000MOVSLDUPrm\000MO"
    "VSLDUPrr\000MOVSQ\000MOVSS2DImr\000MOVSS2DIrr\000MOVSSmr\000MOVSSrm\000"
    "MOVSSrr\000MOVSW\000MOVSX16rm8\000MOVSX16rr8\000MOVSX32rm16\000MOVSX32r"
    "m8\000MOVSX32rr16\000MOVSX32rr8\000MOVSX64rm16\000MOVSX64rm32\000MOVSX6"
    "4rm8\000MOVSX64rr16\000MOVSX64rr32\000MOVSX64rr8\000MOVUPDmr\000MOVUPDm"
    "r_Int\000MOVUPDrm\000MOVUPDrr\000MOVUPSmr\000MOVUPSmr_Int\000MOVUPSrm\000"
    "MOVUPSrr\000MOVZDI2PDIrm\000MOVZDI2PDIrr\000MOVZPQILo2PQIrm\000MOVZPQIL"
    "o2PQIrr\000MOVZQI2PQIrm\000MOVZQI2PQIrr\000MOVZX16rm8\000MOVZX16rr8\000"
    "MOVZX32_NOREXrm8\000MOVZX32_NOREXrr8\000MOVZX32rm16\000MOVZX32rm8\000MO"
    "VZX32rr16\000MOVZX32rr8\000MOVZX64rm16\000MOVZX64rm16_Q\000MOVZX64rm32\000"
    "MOVZX64rm8\000MOVZX64rm8_Q\000MOVZX64rr16\000MOVZX64rr16_Q\000MOVZX64rr"
    "32\000MOVZX64rr8\000MOVZX64rr8_Q\000MPSADBWrmi\000MPSADBWrri\000MUL16m\000"
    "MUL16r\000MUL32m\000MUL32r\000MUL64m\000MUL64r\000MUL8m\000MUL8r\000MUL"
    "PDrm\000MULPDrr\000MULPSrm\000MULPSrr\000MULSDrm\000MULSDrm_Int\000MULS"
    "Drr\000MULSDrr_Int\000MULSSrm\000MULSSrm_Int\000MULSSrr\000MULSSrr_Int\000"
    "MUL_F32m\000MUL_F64m\000MUL_FI16m\000MUL_FI32m\000MUL_FPrST0\000MUL_FST"
    "0r\000MUL_Fp32\000MUL_Fp32m\000MUL_Fp64\000MUL_Fp64m\000MUL_Fp64m32\000"
    "MUL_Fp80\000MUL_Fp80m32\000MUL_Fp80m64\000MUL_FpI16m32\000MUL_FpI16m64\000"
    "MUL_FpI16m80\000MUL_FpI32m32\000MUL_FpI32m64\000MUL_FpI32m80\000MUL_FrS"
    "T0\000MWAIT\000MWAITrr\000NEG16m\000NEG16r\000NEG32m\000NEG32r\000NEG64"
    "m\000NEG64r\000NEG8m\000NEG8r\000NOOP\000NOOPL\000NOOPW\000NOT16m\000NO"
    "T16r\000NOT32m\000NOT32r\000NOT64m\000NOT64r\000NOT8m\000NOT8r\000OR16i"
    "16\000OR16mi\000OR16mi8\000OR16mr\000OR16ri\000OR16ri8\000OR16rm\000OR1"
    "6rr\000OR16rr_REV\000OR32i32\000OR32mi\000OR32mi8\000OR32mr\000OR32mrLo"
    "cked\000OR32ri\000OR32ri8\000OR32rm\000OR32rr\000OR32rr_REV\000OR64i32\000"
    "OR64mi32\000OR64mi8\000OR64mr\000OR64ri32\000OR64ri8\000OR64rm\000OR64r"
    "r\000OR64rr_REV\000OR8i8\000OR8mi\000OR8mr\000OR8ri\000OR8rm\000OR8rr\000"
    "OR8rr_REV\000ORPDrm\000ORPDrr\000ORPSrm\000ORPSrr\000OUT16ir\000OUT16rr"
    "\000OUT32ir\000OUT32rr\000OUT8ir\000OUT8rr\000OUTSB\000OUTSD\000OUTSW\000"
    "PABSBrm128\000PABSBrr128\000PABSDrm128\000PABSDrr128\000PABSWrm128\000P"
    "ABSWrr128\000PACKSSDWrm\000PACKSSDWrr\000PACKSSWBrm\000PACKSSWBrr\000PA"
    "CKUSDWrm\000PACKUSDWrr\000PACKUSWBrm\000PACKUSWBrr\000PADDBrm\000PADDBr"
    "r\000PADDDrm\000PADDDrr\000PADDQrm\000PADDQrr\000PADDSBrm\000PADDSBrr\000"
    "PADDSWrm\000PADDSWrr\000PADDUSBrm\000PADDUSBrr\000PADDUSWrm\000PADDUSWr"
    "r\000PADDWrm\000PADDWrr\000PALIGNR128rm\000PALIGNR128rr\000PANDNrm\000P"
    "ANDNrr\000PANDrm\000PANDrr\000PAUSE\000PAVGBrm\000PAVGBrr\000PAVGUSBrm\000"
    "PAVGUSBrr\000PAVGWrm\000PAVGWrr\000PBLENDVBrm0\000PBLENDVBrr0\000PBLEND"
    "Wrmi\000PBLENDWrri\000PCLMULQDQrm\000PCLMULQDQrr\000PCMPEQBrm\000PCMPEQ"
    "Brr\000PCMPEQDrm\000PCMPEQDrr\000PCMPEQQrm\000PCMPEQQrr\000PCMPEQWrm\000"
    "PCMPEQWrr\000PCMPESTRIArm\000PCMPESTRIArr\000PCMPESTRICrm\000PCMPESTRIC"
    "rr\000PCMPESTRIOrm\000PCMPESTRIOrr\000PCMPESTRISrm\000PCMPESTRISrr\000P"
    "CMPESTRIZrm\000PCMPESTRIZrr\000PCMPESTRIrm\000PCMPESTRIrr\000PCMPESTRM1"
    "28MEM\000PCMPESTRM128REG\000PCMPESTRM128rm\000PCMPESTRM128rr\000PCMPGTB"
    "rm\000PCMPGTBrr\000PCMPGTDrm\000PCMPGTDrr\000PCMPGTQrm\000PCMPGTQrr\000"
    "PCMPGTWrm\000PCMPGTWrr\000PCMPISTRIArm\000PCMPISTRIArr\000PCMPISTRICrm\000"
    "PCMPISTRICrr\000PCMPISTRIOrm\000PCMPISTRIOrr\000PCMPISTRISrm\000PCMPIST"
    "RISrr\000PCMPISTRIZrm\000PCMPISTRIZrr\000PCMPISTRIrm\000PCMPISTRIrr\000"
    "PCMPISTRM128MEM\000PCMPISTRM128REG\000PCMPISTRM128rm\000PCMPISTRM128rr\000"
    "PEXTRBmr\000PEXTRBrr\000PEXTRDmr\000PEXTRDrr\000PEXTRQmr\000PEXTRQrr\000"
    "PEXTRWmr\000PEXTRWri\000PF2IDrm\000PF2IDrr\000PF2IWrm\000PF2IWrr\000PFA"
    "CCrm\000PFACCrr\000PFADDrm\000PFADDrr\000PFCMPEQrm\000PFCMPEQrr\000PFCM"
    "PGErm\000PFCMPGErr\000PFCMPGTrm\000PFCMPGTrr\000PFMAXrm\000PFMAXrr\000P"
    "FMINrm\000PFMINrr\000PFMULrm\000PFMULrr\000PFNACCrm\000PFNACCrr\000PFPN"
    "ACCrm\000PFPNACCrr\000PFRCPIT1rm\000PFRCPIT1rr\000PFRCPIT2rm\000PFRCPIT"
    "2rr\000PFRCPrm\000PFRCPrr\000PFRSQIT1rm\000PFRSQIT1rr\000PFRSQRTrm\000P"
    "FRSQRTrr\000PFSUBRrm\000PFSUBRrr\000PFSUBrm\000PFSUBrr\000PHADDDrm128\000"
    "PHADDDrr128\000PHADDSWrm128\000PHADDSWrr128\000PHADDWrm128\000PHADDWrr1"
    "28\000PHMINPOSUWrm128\000PHMINPOSUWrr128\000PHSUBDrm128\000PHSUBDrr128\000"
    "PHSUBSWrm128\000PHSUBSWrr128\000PHSUBWrm128\000PHSUBWrr128\000PI2FDrm\000"
    "PI2FDrr\000PI2FWrm\000PI2FWrr\000PINSRBrm\000PINSRBrr\000PINSRDrm\000PI"
    "NSRDrr\000PINSRQrm\000PINSRQrr\000PINSRWrmi\000PINSRWrri\000PMADDUBSWrm"
    "128\000PMADDUBSWrr128\000PMADDWDrm\000PMADDWDrr\000PMAXSBrm\000PMAXSBrr"
    "\000PMAXSDrm\000PMAXSDrr\000PMAXSWrm\000PMAXSWrr\000PMAXUBrm\000PMAXUBr"
    "r\000PMAXUDrm\000PMAXUDrr\000PMAXUWrm\000PMAXUWrr\000PMINSBrm\000PMINSB"
    "rr\000PMINSDrm\000PMINSDrr\000PMINSWrm\000PMINSWrr\000PMINUBrm\000PMINU"
    "Brr\000PMINUDrm\000PMINUDrr\000PMINUWrm\000PMINUWrr\000PMOVMSKBrr\000PM"
    "OVSXBDrm\000PMOVSXBDrr\000PMOVSXBQrm\000PMOVSXBQrr\000PMOVSXBWrm\000PMO"
    "VSXBWrr\000PMOVSXDQrm\000PMOVSXDQrr\000PMOVSXWDrm\000PMOVSXWDrr\000PMOV"
    "SXWQrm\000PMOVSXWQrr\000PMOVZXBDrm\000PMOVZXBDrr\000PMOVZXBQrm\000PMOVZ"
    "XBQrr\000PMOVZXBWrm\000PMOVZXBWrr\000PMOVZXDQrm\000PMOVZXDQrr\000PMOVZX"
    "WDrm\000PMOVZXWDrr\000PMOVZXWQrm\000PMOVZXWQrr\000PMULDQrm\000PMULDQrr\000"
    "PMULHRSWrm128\000PMULHRSWrr128\000PMULHRWrm\000PMULHRWrr\000PMULHUWrm\000"
    "PMULHUWrr\000PMULHWrm\000PMULHWrr\000PMULLDrm\000PMULLDrr\000PMULLWrm\000"
    "PMULLWrr\000PMULUDQrm\000PMULUDQrr\000POP16r\000POP16rmm\000POP16rmr\000"
    "POP32r\000POP32rmm\000POP32rmr\000POP64r\000POP64rmm\000POP64rmr\000POP"
    "A32\000POPCNT16rm\000POPCNT16rr\000POPCNT32rm\000POPCNT32rr\000POPCNT64"
    "rm\000POPCNT64rr\000POPDS16\000POPDS32\000POPES16\000POPES32\000POPF16\000"
    "POPF32\000POPF64\000POPFS16\000POPFS32\000POPFS64\000POPGS16\000POPGS32"
    "\000POPGS64\000POPSS16\000POPSS32\000PORrm\000PORrr\000PREFETCH\000PREF"
    "ETCHNTA\000PREFETCHT0\000PREFETCHT1\000PREFETCHT2\000PREFETCHW\000PSADB"
    "Wrm\000PSADBWrr\000PSHUFBrm128\000PSHUFBrr128\000PSHUFDmi\000PSHUFDri\000"
    "PSHUFHWmi\000PSHUFHWri\000PSHUFLWmi\000PSHUFLWri\000PSIGNBrm128\000PSIG"
    "NBrr128\000PSIGNDrm128\000PSIGNDrr128\000PSIGNWrm128\000PSIGNWrr128\000"
    "PSLLDQri\000PSLLDri\000PSLLDrm\000PSLLDrr\000PSLLQri\000PSLLQrm\000PSLL"
    "Qrr\000PSLLWri\000PSLLWrm\000PSLLWrr\000PSRADri\000PSRADrm\000PSRADrr\000"
    "PSRAWri\000PSRAWrm\000PSRAWrr\000PSRLDQri\000PSRLDri\000PSRLDrm\000PSRL"
    "Drr\000PSRLQri\000PSRLQrm\000PSRLQrr\000PSRLWri\000PSRLWrm\000PSRLWrr\000"
    "PSUBBrm\000PSUBBrr\000PSUBDrm\000PSUBDrr\000PSUBQrm\000PSUBQrr\000PSUBS"
    "Brm\000PSUBSBrr\000PSUBSWrm\000PSUBSWrr\000PSUBUSBrm\000PSUBUSBrr\000PS"
    "UBUSWrm\000PSUBUSWrr\000PSUBWrm\000PSUBWrr\000PSWAPDrm\000PSWAPDrr\000P"
    "TESTrm\000PTESTrr\000PUNPCKHBWrm\000PUNPCKHBWrr\000PUNPCKHDQrm\000PUNPC"
    "KHDQrr\000PUNPCKHQDQrm\000PUNPCKHQDQrr\000PUNPCKHWDrm\000PUNPCKHWDrr\000"
    "PUNPCKLBWrm\000PUNPCKLBWrr\000PUNPCKLDQrm\000PUNPCKLDQrr\000PUNPCKLQDQr"
    "m\000PUNPCKLQDQrr\000PUNPCKLWDrm\000PUNPCKLWDrr\000PUSH16r\000PUSH16rmm"
    "\000PUSH16rmr\000PUSH32r\000PUSH32rmm\000PUSH32rmr\000PUSH64i16\000PUSH"
    "64i32\000PUSH64i8\000PUSH64r\000PUSH64rmm\000PUSH64rmr\000PUSHA32\000PU"
    "SHCS16\000PUSHCS32\000PUSHDS16\000PUSHDS32\000PUSHES16\000PUSHES32\000P"
    "USHF16\000PUSHF32\000PUSHF64\000PUSHFS16\000PUSHFS32\000PUSHFS64\000PUS"
    "HGS16\000PUSHGS32\000PUSHGS64\000PUSHSS16\000PUSHSS32\000PUSHi16\000PUS"
    "Hi32\000PUSHi8\000PXORrm\000PXORrr\000RCL16m1\000RCL16mCL\000RCL16mi\000"
    "RCL16r1\000RCL16rCL\000RCL16ri\000RCL32m1\000RCL32mCL\000RCL32mi\000RCL"
    "32r1\000RCL32rCL\000RCL32ri\000RCL64m1\000RCL64mCL\000RCL64mi\000RCL64r"
    "1\000RCL64rCL\000RCL64ri\000RCL8m1\000RCL8mCL\000RCL8mi\000RCL8r1\000RC"
    "L8rCL\000RCL8ri\000RCPPSm\000RCPPSm_Int\000RCPPSr\000RCPPSr_Int\000RCPS"
    "Sm\000RCPSSm_Int\000RCPSSr\000RCPSSr_Int\000RCR16m1\000RCR16mCL\000RCR1"
    "6mi\000RCR16r1\000RCR16rCL\000RCR16ri\000RCR32m1\000RCR32mCL\000RCR32mi"
    "\000RCR32r1\000RCR32rCL\000RCR32ri\000RCR64m1\000RCR64mCL\000RCR64mi\000"
    "RCR64r1\000RCR64rCL\000RCR64ri\000RCR8m1\000RCR8mCL\000RCR8mi\000RCR8r1"
    "\000RCR8rCL\000RCR8ri\000RDMSR\000RDPMC\000RDTSC\000RDTSCP\000REPNE_PRE"
    "FIX\000REP_MOVSB\000REP_MOVSD\000REP_MOVSQ\000REP_MOVSW\000REP_PREFIX\000"
    "REP_STOSB\000REP_STOSD\000REP_STOSQ\000REP_STOSW\000RET\000RETI\000RETI"
    "W\000REX64_PREFIX\000ROL16m1\000ROL16mCL\000ROL16mi\000ROL16r1\000ROL16"
    "rCL\000ROL16ri\000ROL32m1\000ROL32mCL\000ROL32mi\000ROL32r1\000ROL32rCL"
    "\000ROL32ri\000ROL64m1\000ROL64mCL\000ROL64mi\000ROL64r1\000ROL64rCL\000"
    "ROL64ri\000ROL8m1\000ROL8mCL\000ROL8mi\000ROL8r1\000ROL8rCL\000ROL8ri\000"
    "ROR16m1\000ROR16mCL\000ROR16mi\000ROR16r1\000ROR16rCL\000ROR16ri\000ROR"
    "32m1\000ROR32mCL\000ROR32mi\000ROR32r1\000ROR32rCL\000ROR32ri\000ROR64m"
    "1\000ROR64mCL\000ROR64mi\000ROR64r1\000ROR64rCL\000ROR64ri\000ROR8m1\000"
    "ROR8mCL\000ROR8mi\000ROR8r1\000ROR8rCL\000ROR8ri\000ROUNDPDm\000ROUNDPD"
    "r\000ROUNDPSm\000ROUNDPSr\000ROUNDSDm\000ROUNDSDr\000ROUNDSSm\000ROUNDS"
    "Sr\000RSM\000RSQRTPSm\000RSQRTPSm_Int\000RSQRTPSr\000RSQRTPSr_Int\000RS"
    "QRTSSm\000RSQRTSSm_Int\000RSQRTSSr\000RSQRTSSr_Int\000SAHF\000SAR16m1\000"
    "SAR16mCL\000SAR16mi\000SAR16r1\000SAR16rCL\000SAR16ri\000SAR32m1\000SAR"
    "32mCL\000SAR32mi\000SAR32r1\000SAR32rCL\000SAR32ri\000SAR64m1\000SAR64m"
    "CL\000SAR64mi\000SAR64r1\000SAR64rCL\000SAR64ri\000SAR8m1\000SAR8mCL\000"
    "SAR8mi\000SAR8r1\000SAR8rCL\000SAR8ri\000SBB16i16\000SBB16mi\000SBB16mi"
    "8\000SBB16mr\000SBB16ri\000SBB16ri8\000SBB16rm\000SBB16rr\000SBB16rr_RE"
    "V\000SBB32i32\000SBB32mi\000SBB32mi8\000SBB32mr\000SBB32ri\000SBB32ri8\000"
    "SBB32rm\000SBB32rr\000SBB32rr_REV\000SBB64i32\000SBB64mi32\000SBB64mi8\000"
    "SBB64mr\000SBB64ri32\000SBB64ri8\000SBB64rm\000SBB64rr\000SBB64rr_REV\000"
    "SBB8i8\000SBB8mi\000SBB8mr\000SBB8ri\000SBB8rm\000SBB8rr\000SBB8rr_REV\000"
    "SCAS16\000SCAS32\000SCAS64\000SCAS8\000SETAEm\000SETAEr\000SETAm\000SET"
    "Ar\000SETBEm\000SETBEr\000SETB_C16r\000SETB_C32r\000SETB_C64r\000SETB_C"
    "8r\000SETBm\000SETBr\000SETEm\000SETEr\000SETGEm\000SETGEr\000SETGm\000"
    "SETGr\000SETLEm\000SETLEr\000SETLm\000SETLr\000SETNEm\000SETNEr\000SETN"
    "Om\000SETNOr\000SETNPm\000SETNPr\000SETNSm\000SETNSr\000SETOm\000SETOr\000"
    "SETPm\000SETPr\000SETSm\000SETSr\000SFENCE\000SGDT16m\000SGDTm\000SHL16"
    "m1\000SHL16mCL\000SHL16mi\000SHL16r1\000SHL16rCL\000SHL16ri\000SHL32m1\000"
    "SHL32mCL\000SHL32mi\000SHL32r1\000SHL32rCL\000SHL32ri\000SHL64m1\000SHL"
    "64mCL\000SHL64mi\000SHL64r1\000SHL64rCL\000SHL64ri\000SHL8m1\000SHL8mCL"
    "\000SHL8mi\000SHL8r1\000SHL8rCL\000SHL8ri\000SHLD16mrCL\000SHLD16mri8\000"
    "SHLD16rrCL\000SHLD16rri8\000SHLD32mrCL\000SHLD32mri8\000SHLD32rrCL\000S"
    "HLD32rri8\000SHLD64mrCL\000SHLD64mri8\000SHLD64rrCL\000SHLD64rri8\000SH"
    "R16m1\000SHR16mCL\000SHR16mi\000SHR16r1\000SHR16rCL\000SHR16ri\000SHR32"
    "m1\000SHR32mCL\000SHR32mi\000SHR32r1\000SHR32rCL\000SHR32ri\000SHR64m1\000"
    "SHR64mCL\000SHR64mi\000SHR64r1\000SHR64rCL\000SHR64ri\000SHR8m1\000SHR8"
    "mCL\000SHR8mi\000SHR8r1\000SHR8rCL\000SHR8ri\000SHRD16mrCL\000SHRD16mri"
    "8\000SHRD16rrCL\000SHRD16rri8\000SHRD32mrCL\000SHRD32mri8\000SHRD32rrCL"
    "\000SHRD32rri8\000SHRD64mrCL\000SHRD64mri8\000SHRD64rrCL\000SHRD64rri8\000"
    "SHUFPDrmi\000SHUFPDrri\000SHUFPSrmi\000SHUFPSrri\000SIDT16m\000SIDTm\000"
    "SIN_F\000SIN_Fp32\000SIN_Fp64\000SIN_Fp80\000SLDT16m\000SLDT16r\000SLDT"
    "32r\000SLDT64m\000SLDT64r\000SMSW16m\000SMSW16r\000SMSW32r\000SMSW64r\000"
    "SQRTPDm\000SQRTPDm_Int\000SQRTPDr\000SQRTPDr_Int\000SQRTPSm\000SQRTPSm_"
    "Int\000SQRTPSr\000SQRTPSr_Int\000SQRTSDm\000SQRTSDm_Int\000SQRTSDr\000S"
    "QRTSDr_Int\000SQRTSSm\000SQRTSSm_Int\000SQRTSSr\000SQRTSSr_Int\000SQRT_"
    "F\000SQRT_Fp32\000SQRT_Fp64\000SQRT_Fp80\000SS_PREFIX\000STC\000STD\000"
    "STI\000STMXCSR\000STOSB\000STOSD\000STOSQ\000STOSW\000STR16r\000STR32r\000"
    "STR64r\000STRm\000ST_F32m\000ST_F64m\000ST_FP32m\000ST_FP64m\000ST_FP80"
    "m\000ST_FPrr\000ST_Fp32m\000ST_Fp64m\000ST_Fp64m32\000ST_Fp80m32\000ST_"
    "Fp80m64\000ST_FpP32m\000ST_FpP64m\000ST_FpP64m32\000ST_FpP80m\000ST_FpP"
    "80m32\000ST_FpP80m64\000ST_Frr\000SUB16i16\000SUB16mi\000SUB16mi8\000SU"
    "B16mr\000SUB16ri\000SUB16ri8\000SUB16rm\000SUB16rr\000SUB16rr_REV\000SU"
    "B32i32\000SUB32mi\000SUB32mi8\000SUB32mr\000SUB32ri\000SUB32ri8\000SUB3"
    "2rm\000SUB32rr\000SUB32rr_REV\000SUB64i32\000SUB64mi32\000SUB64mi8\000S"
    "UB64mr\000SUB64ri32\000SUB64ri8\000SUB64rm\000SUB64rr\000SUB64rr_REV\000"
    "SUB8i8\000SUB8mi\000SUB8mr\000SUB8ri\000SUB8rm\000SUB8rr\000SUB8rr_REV\000"
    "SUBPDrm\000SUBPDrr\000SUBPSrm\000SUBPSrr\000SUBR_F32m\000SUBR_F64m\000S"
    "UBR_FI16m\000SUBR_FI32m\000SUBR_FPrST0\000SUBR_FST0r\000SUBR_Fp32m\000S"
    "UBR_Fp64m\000SUBR_Fp64m32\000SUBR_Fp80m32\000SUBR_Fp80m64\000SUBR_FpI16"
    "m32\000SUBR_FpI16m64\000SUBR_FpI16m80\000SUBR_FpI32m32\000SUBR_FpI32m64"
    "\000SUBR_FpI32m80\000SUBR_FrST0\000SUBSDrm\000SUBSDrm_Int\000SUBSDrr\000"
    "SUBSDrr_Int\000SUBSSrm\000SUBSSrm_Int\000SUBSSrr\000SUBSSrr_Int\000SUB_"
    "F32m\000SUB_F64m\000SUB_FI16m\000SUB_FI32m\000SUB_FPrST0\000SUB_FST0r\000"
    "SUB_Fp32\000SUB_Fp32m\000SUB_Fp64\000SUB_Fp64m\000SUB_Fp64m32\000SUB_Fp"
    "80\000SUB_Fp80m32\000SUB_Fp80m64\000SUB_FpI16m32\000SUB_FpI16m64\000SUB"
    "_FpI16m80\000SUB_FpI32m32\000SUB_FpI32m64\000SUB_FpI32m80\000SUB_FrST0\000"
    "SWAPGS\000SYSCALL\000SYSENTER\000SYSEXIT\000SYSEXIT64\000SYSRETL\000SYS"
    "RETQ\000TAILJMPd\000TAILJMPd64\000TAILJMPm\000TAILJMPm64\000TAILJMPr\000"
    "TAILJMPr64\000TCRETURNdi\000TCRETURNdi64\000TCRETURNmi\000TCRETURNmi64\000"
    "TCRETURNri\000TCRETURNri64\000TEST16i16\000TEST16mi\000TEST16ri\000TEST"
    "16rm\000TEST16rr\000TEST32i32\000TEST32mi\000TEST32ri\000TEST32rm\000TE"
    "ST32rr\000TEST64i32\000TEST64mi32\000TEST64ri32\000TEST64rm\000TEST64rr"
    "\000TEST8i8\000TEST8mi\000TEST8ri\000TEST8rm\000TEST8rr\000TLSCall_32\000"
    "TLSCall_64\000TLS_addr32\000TLS_addr64\000TRAP\000TST_F\000TST_Fp32\000"
    "TST_Fp64\000TST_Fp80\000UCOMISDrm\000UCOMISDrr\000UCOMISSrm\000UCOMISSr"
    "r\000UCOM_FIPr\000UCOM_FIr\000UCOM_FPPr\000UCOM_FPr\000UCOM_FpIr32\000U"
    "COM_FpIr64\000UCOM_FpIr80\000UCOM_Fpr32\000UCOM_Fpr64\000UCOM_Fpr80\000"
    "UCOM_Fr\000UD2B\000UNPCKHPDrm\000UNPCKHPDrr\000UNPCKHPSrm\000UNPCKHPSrr"
    "\000UNPCKLPDrm\000UNPCKLPDrr\000UNPCKLPSrm\000UNPCKLPSrr\000VAARG_64\000"
    "VADDPDYrm\000VADDPDYrr\000VADDPDrm\000VADDPDrr\000VADDPSYrm\000VADDPSYr"
    "r\000VADDPSrm\000VADDPSrr\000VADDSDrm\000VADDSDrm_Int\000VADDSDrr\000VA"
    "DDSDrr_Int\000VADDSSrm\000VADDSSrm_Int\000VADDSSrr\000VADDSSrr_Int\000V"
    "ADDSUBPDYrm\000VADDSUBPDYrr\000VADDSUBPDrm\000VADDSUBPDrr\000VADDSUBPSY"
    "rm\000VADDSUBPSYrr\000VADDSUBPSrm\000VADDSUBPSrr\000VAESDECLASTrm\000VA"
    "ESDECLASTrr\000VAESDECrm\000VAESDECrr\000VAESENCLASTrm\000VAESENCLASTrr"
    "\000VAESENCrm\000VAESENCrr\000VAESIMCrm\000VAESIMCrr\000VAESKEYGENASSIS"
    "T128rm\000VAESKEYGENASSIST128rr\000VANDNPDYrm\000VANDNPDYrr\000VANDNPDr"
    "m\000VANDNPDrr\000VANDNPSYrm\000VANDNPSYrr\000VANDNPSrm\000VANDNPSrr\000"
    "VANDPDYrm\000VANDPDYrr\000VANDPDrm\000VANDPDrr\000VANDPSYrm\000VANDPSYr"
    "r\000VANDPSrm\000VANDPSrr\000VASTART_SAVE_XMM_REGS\000VBLENDPDYrmi\000V"
    "BLENDPDYrri\000VBLENDPDrmi\000VBLENDPDrri\000VBLENDPSYrmi\000VBLENDPSYr"
    "ri\000VBLENDPSrmi\000VBLENDPSrri\000VBLENDVPDYrm\000VBLENDVPDYrr\000VBL"
    "ENDVPDrm\000VBLENDVPDrr\000VBLENDVPSYrm\000VBLENDVPSYrr\000VBLENDVPSrm\000"
    "VBLENDVPSrr\000VBROADCASTF128\000VBROADCASTSD\000VBROADCASTSS\000VBROAD"
    "CASTSSY\000VCMPPDYrmi\000VCMPPDYrmi_alt\000VCMPPDYrri\000VCMPPDYrri_alt"
    "\000VCMPPDrmi\000VCMPPDrmi_alt\000VCMPPDrri\000VCMPPDrri_alt\000VCMPPSY"
    "rmi\000VCMPPSYrmi_alt\000VCMPPSYrri\000VCMPPSYrri_alt\000VCMPPSrmi\000V"
    "CMPPSrmi_alt\000VCMPPSrri\000VCMPPSrri_alt\000VCMPSDrm\000VCMPSDrm_alt\000"
    "VCMPSDrr\000VCMPSDrr_alt\000VCMPSSrm\000VCMPSSrm_alt\000VCMPSSrr\000VCM"
    "PSSrr_alt\000VCOMISDrm\000VCOMISDrr\000VCOMISSrm\000VCOMISSrr\000VCVTDQ"
    "2PDYrm\000VCVTDQ2PDYrr\000VCVTDQ2PDrm\000VCVTDQ2PDrr\000VCVTDQ2PSYrm\000"
    "VCVTDQ2PSYrr\000VCVTDQ2PSrm\000VCVTDQ2PSrr\000VCVTPD2DQXrYr\000VCVTPD2D"
    "QXrm\000VCVTPD2DQXrr\000VCVTPD2DQYrm\000VCVTPD2DQYrr\000VCVTPD2DQrr\000"
    "VCVTPD2PSXrYr\000VCVTPD2PSXrm\000VCVTPD2PSXrr\000VCVTPD2PSYrm\000VCVTPD"
    "2PSYrr\000VCVTPD2PSrr\000VCVTPS2DQYrm\000VCVTPS2DQYrr\000VCVTPS2DQrm\000"
    "VCVTPS2DQrr\000VCVTPS2PDYrm\000VCVTPS2PDYrr\000VCVTPS2PDrm\000VCVTPS2PD"
    "rr\000VCVTSD2SI64rm\000VCVTSD2SI64rr\000VCVTSD2SI_altrm\000VCVTSD2SI_al"
    "trr\000VCVTSD2SSrm\000VCVTSD2SSrr\000VCVTSI2SD64rm\000VCVTSI2SD64rr\000"
    "VCVTSI2SDLrm\000VCVTSI2SDLrr\000VCVTSI2SDrm\000VCVTSI2SDrr\000VCVTSI2SS"
    "64rm\000VCVTSI2SS64rr\000VCVTSI2SSrm\000VCVTSI2SSrr\000VCVTSS2SDrm\000V"
    "CVTSS2SDrr\000VCVTSS2SI64rm\000VCVTSS2SI64rr\000VCVTSS2SIrm\000VCVTSS2S"
    "Irr\000VCVTTPD2DQXrYr\000VCVTTPD2DQXrm\000VCVTTPD2DQXrr\000VCVTTPD2DQYr"
    "m\000VCVTTPD2DQYrr\000VCVTTPD2DQrr\000VCVTTPS2DQYrm\000VCVTTPS2DQYrr\000"
    "VCVTTPS2DQrm\000VCVTTPS2DQrr\000VCVTTSD2SI64rm\000VCVTTSD2SI64rr\000VCV"
    "TTSD2SIrm\000VCVTTSD2SIrr\000VCVTTSS2SI64rm\000VCVTTSS2SI64rr\000VCVTTS"
    "S2SIrm\000VCVTTSS2SIrr\000VDIVPDYrm\000VDIVPDYrr\000VDIVPDrm\000VDIVPDr"
    "r\000VDIVPSYrm\000VDIVPSYrr\000VDIVPSrm\000VDIVPSrr\000VDIVSDrm\000VDIV"
    "SDrm_Int\000VDIVSDrr\000VDIVSDrr_Int\000VDIVSSrm\000VDIVSSrm_Int\000VDI"
    "VSSrr\000VDIVSSrr_Int\000VDPPDrmi\000VDPPDrri\000VDPPSYrmi\000VDPPSYrri"
    "\000VDPPSrmi\000VDPPSrri\000VERRm\000VERRr\000VERWm\000VERWr\000VEXTRAC"
    "TF128mr\000VEXTRACTF128rr\000VEXTRACTPSmr\000VEXTRACTPSrr\000VEXTRACTPS"
    "rr64\000VFMADDPDr132m\000VFMADDPDr132mY\000VFMADDPDr132r\000VFMADDPDr13"
    "2rY\000VFMADDPDr213m\000VFMADDPDr213mY\000VFMADDPDr213r\000VFMADDPDr213"
    "rY\000VFMADDPDr231m\000VFMADDPDr231mY\000VFMADDPDr231r\000VFMADDPDr231r"
    "Y\000VFMADDPSr132m\000VFMADDPSr132mY\000VFMADDPSr132r\000VFMADDPSr132rY"
    "\000VFMADDPSr213m\000VFMADDPSr213mY\000VFMADDPSr213r\000VFMADDPSr213rY\000"
    "VFMADDPSr231m\000VFMADDPSr231mY\000VFMADDPSr231r\000VFMADDPSr231rY\000V"
    "FMADDSUBPDr132m\000VFMADDSUBPDr132mY\000VFMADDSUBPDr132r\000VFMADDSUBPD"
    "r132rY\000VFMADDSUBPDr213m\000VFMADDSUBPDr213mY\000VFMADDSUBPDr213r\000"
    "VFMADDSUBPDr213rY\000VFMADDSUBPDr231m\000VFMADDSUBPDr231mY\000VFMADDSUB"
    "PDr231r\000VFMADDSUBPDr231rY\000VFMADDSUBPSr132m\000VFMADDSUBPSr132mY\000"
    "VFMADDSUBPSr132r\000VFMADDSUBPSr132rY\000VFMADDSUBPSr213m\000VFMADDSUBP"
    "Sr213mY\000VFMADDSUBPSr213r\000VFMADDSUBPSr213rY\000VFMADDSUBPSr231m\000"
    "VFMADDSUBPSr231mY\000VFMADDSUBPSr231r\000VFMADDSUBPSr231rY\000VFMSUBADD"
    "PDr132m\000VFMSUBADDPDr132mY\000VFMSUBADDPDr132r\000VFMSUBADDPDr132rY\000"
    "VFMSUBADDPDr213m\000VFMSUBADDPDr213mY\000VFMSUBADDPDr213r\000VFMSUBADDP"
    "Dr213rY\000VFMSUBADDPDr231m\000VFMSUBADDPDr231mY\000VFMSUBADDPDr231r\000"
    "VFMSUBADDPDr231rY\000VFMSUBADDPSr132m\000VFMSUBADDPSr132mY\000VFMSUBADD"
    "PSr132r\000VFMSUBADDPSr132rY\000VFMSUBADDPSr213m\000VFMSUBADDPSr213mY\000"
    "VFMSUBADDPSr213r\000VFMSUBADDPSr213rY\000VFMSUBADDPSr231m\000VFMSUBADDP"
    "Sr231mY\000VFMSUBADDPSr231r\000VFMSUBADDPSr231rY\000VFMSUBPDr132m\000VF"
    "MSUBPDr132mY\000VFMSUBPDr132r\000VFMSUBPDr132rY\000VFMSUBPDr213m\000VFM"
    "SUBPDr213mY\000VFMSUBPDr213r\000VFMSUBPDr213rY\000VFMSUBPDr231m\000VFMS"
    "UBPDr231mY\000VFMSUBPDr231r\000VFMSUBPDr231rY\000VFMSUBPSr132m\000VFMSU"
    "BPSr132mY\000VFMSUBPSr132r\000VFMSUBPSr132rY\000VFMSUBPSr213m\000VFMSUB"
    "PSr213mY\000VFMSUBPSr213r\000VFMSUBPSr213rY\000VFMSUBPSr231m\000VFMSUBP"
    "Sr231mY\000VFMSUBPSr231r\000VFMSUBPSr231rY\000VFNMADDPDr132m\000VFNMADD"
    "PDr132mY\000VFNMADDPDr132r\000VFNMADDPDr132rY\000VFNMADDPDr213m\000VFNM"
    "ADDPDr213mY\000VFNMADDPDr213r\000VFNMADDPDr213rY\000VFNMADDPDr231m\000V"
    "FNMADDPDr231mY\000VFNMADDPDr231r\000VFNMADDPDr231rY\000VFNMADDPSr132m\000"
    "VFNMADDPSr132mY\000VFNMADDPSr132r\000VFNMADDPSr132rY\000VFNMADDPSr213m\000"
    "VFNMADDPSr213mY\000VFNMADDPSr213r\000VFNMADDPSr213rY\000VFNMADDPSr231m\000"
    "VFNMADDPSr231mY\000VFNMADDPSr231r\000VFNMADDPSr231rY\000VFNMSUBPDr132m\000"
    "VFNMSUBPDr132mY\000VFNMSUBPDr132r\000VFNMSUBPDr132rY\000VFNMSUBPDr213m\000"
    "VFNMSUBPDr213mY\000VFNMSUBPDr213r\000VFNMSUBPDr213rY\000VFNMSUBPDr231m\000"
    "VFNMSUBPDr231mY\000VFNMSUBPDr231r\000VFNMSUBPDr231rY\000VFNMSUBPSr132m\000"
    "VFNMSUBPSr132mY\000VFNMSUBPSr132r\000VFNMSUBPSr132rY\000VFNMSUBPSr213m\000"
    "VFNMSUBPSr213mY\000VFNMSUBPSr213r\000VFNMSUBPSr213rY\000VFNMSUBPSr231m\000"
    "VFNMSUBPSr231mY\000VFNMSUBPSr231r\000VFNMSUBPSr231rY\000VFsANDNPDrm\000"
    "VFsANDNPDrr\000VFsANDNPSrm\000VFsANDNPSrr\000VFsANDPDrm\000VFsANDPDrr\000"
    "VFsANDPSrm\000VFsANDPSrr\000VFsFLD0SD\000VFsFLD0SS\000VFsORPDrm\000VFsO"
    "RPDrr\000VFsORPSrm\000VFsORPSrr\000VFsXORPDrm\000VFsXORPDrr\000VFsXORPS"
    "rm\000VFsXORPSrr\000VHADDPDYrm\000VHADDPDYrr\000VHADDPDrm\000VHADDPDrr\000"
    "VHADDPSYrm\000VHADDPSYrr\000VHADDPSrm\000VHADDPSrr\000VHSUBPDYrm\000VHS"
    "UBPDYrr\000VHSUBPDrm\000VHSUBPDrr\000VHSUBPSYrm\000VHSUBPSYrr\000VHSUBP"
    "Srm\000VHSUBPSrr\000VINSERTF128rm\000VINSERTF128rr\000VINSERTPSrm\000VI"
    "NSERTPSrr\000VLDDQUYrm\000VLDDQUrm\000VLDMXCSR\000VMASKMOVDQU\000VMASKM"
    "OVDQU64\000VMASKMOVPDYmr\000VMASKMOVPDYrm\000VMASKMOVPDmr\000VMASKMOVPD"
    "rm\000VMASKMOVPSYmr\000VMASKMOVPSYrm\000VMASKMOVPSmr\000VMASKMOVPSrm\000"
    "VMAXPDYrm\000VMAXPDYrm_Int\000VMAXPDYrr\000VMAXPDYrr_Int\000VMAXPDrm\000"
    "VMAXPDrm_Int\000VMAXPDrr\000VMAXPDrr_Int\000VMAXPSYrm\000VMAXPSYrm_Int\000"
    "VMAXPSYrr\000VMAXPSYrr_Int\000VMAXPSrm\000VMAXPSrm_Int\000VMAXPSrr\000V"
    "MAXPSrr_Int\000VMAXSDrm\000VMAXSDrm_Int\000VMAXSDrr\000VMAXSDrr_Int\000"
    "VMAXSSrm\000VMAXSSrm_Int\000VMAXSSrr\000VMAXSSrr_Int\000VMCALL\000VMCLE"
    "ARm\000VMINPDYrm\000VMINPDYrm_Int\000VMINPDYrr\000VMINPDYrr_Int\000VMIN"
    "PDrm\000VMINPDrm_Int\000VMINPDrr\000VMINPDrr_Int\000VMINPSYrm\000VMINPS"
    "Yrm_Int\000VMINPSYrr\000VMINPSYrr_Int\000VMINPSrm\000VMINPSrm_Int\000VM"
    "INPSrr\000VMINPSrr_Int\000VMINSDrm\000VMINSDrm_Int\000VMINSDrr\000VMINS"
    "Drr_Int\000VMINSSrm\000VMINSSrm_Int\000VMINSSrr\000VMINSSrr_Int\000VMLA"
    "UNCH\000VMOV64toPQIrr\000VMOV64toSDrr\000VMOVAPDYmr\000VMOVAPDYrm\000VM"
    "OVAPDYrr\000VMOVAPDmr\000VMOVAPDrm\000VMOVAPDrr\000VMOVAPSYmr\000VMOVAP"
    "SYrm\000VMOVAPSYrr\000VMOVAPSmr\000VMOVAPSrm\000VMOVAPSrr\000VMOVDDUPYr"
    "m\000VMOVDDUPYrr\000VMOVDDUPrm\000VMOVDDUPrr\000VMOVDI2PDIrm\000VMOVDI2"
    "PDIrr\000VMOVDI2SSrm\000VMOVDI2SSrr\000VMOVDQAYmr\000VMOVDQAYrm\000VMOV"
    "DQAYrr\000VMOVDQAmr\000VMOVDQArm\000VMOVDQArr\000VMOVDQUYmr\000VMOVDQUY"
    "rm\000VMOVDQUYrr\000VMOVDQUmr\000VMOVDQUmr_Int\000VMOVDQUrm\000VMOVDQUr"
    "r\000VMOVHLPSrr\000VMOVHPDmr\000VMOVHPDrm\000VMOVHPSmr\000VMOVHPSrm\000"
    "VMOVLHPSrr\000VMOVLPDmr\000VMOVLPDrm\000VMOVLPSmr\000VMOVLPSrm\000VMOVL"
    "Q128mr\000VMOVMSKPDYr64r\000VMOVMSKPDYrr32\000VMOVMSKPDYrr64\000VMOVMSK"
    "PDr64r\000VMOVMSKPDrr32\000VMOVMSKPDrr64\000VMOVMSKPSYr64r\000VMOVMSKPS"
    "Yrr32\000VMOVMSKPSYrr64\000VMOVMSKPSr64r\000VMOVMSKPSrr32\000VMOVMSKPSr"
    "r64\000VMOVNTDQArm\000VMOVNTDQY_64mr\000VMOVNTDQYmr\000VMOVNTDQ_64mr\000"
    "VMOVNTDQmr\000VMOVNTPDYmr\000VMOVNTPDmr\000VMOVNTPSYmr\000VMOVNTPSmr\000"
    "VMOVPDI2DImr\000VMOVPDI2DIrr\000VMOVPQI2QImr\000VMOVQI2PQIrm\000VMOVQd6"
    "4rr\000VMOVQd64rr_alt\000VMOVQs64rr\000VMOVQxrxr\000VMOVSDmr\000VMOVSDr"
    "m\000VMOVSDrr\000VMOVSHDUPYrm\000VMOVSHDUPYrr\000VMOVSHDUPrm\000VMOVSHD"
    "UPrr\000VMOVSLDUPYrm\000VMOVSLDUPYrr\000VMOVSLDUPrm\000VMOVSLDUPrr\000V"
    "MOVSS2DImr\000VMOVSS2DIrr\000VMOVSSmr\000VMOVSSrm\000VMOVSSrr\000VMOVUP"
    "DYmr\000VMOVUPDYrm\000VMOVUPDYrr\000VMOVUPDmr\000VMOVUPDmr_Int\000VMOVU"
    "PDrm\000VMOVUPDrr\000VMOVUPSYmr\000VMOVUPSYrm\000VMOVUPSYrr\000VMOVUPSm"
    "r\000VMOVUPSmr_Int\000VMOVUPSrm\000VMOVUPSrr\000VMOVZDI2PDIrm\000VMOVZD"
    "I2PDIrr\000VMOVZPQILo2PQIrm\000VMOVZPQILo2PQIrr\000VMOVZQI2PQIrm\000VMO"
    "VZQI2PQIrr\000VMPSADBWrmi\000VMPSADBWrri\000VMPTRLDm\000VMPTRSTm\000VMR"
    "EAD32rm\000VMREAD32rr\000VMREAD64rm\000VMREAD64rr\000VMRESUME\000VMULPD"
    "Yrm\000VMULPDYrr\000VMULPDrm\000VMULPDrr\000VMULPSYrm\000VMULPSYrr\000V"
    "MULPSrm\000VMULPSrr\000VMULSDrm\000VMULSDrm_Int\000VMULSDrr\000VMULSDrr"
    "_Int\000VMULSSrm\000VMULSSrm_Int\000VMULSSrr\000VMULSSrr_Int\000VMWRITE"
    "32rm\000VMWRITE32rr\000VMWRITE64rm\000VMWRITE64rr\000VMXOFF\000VMXON\000"
    "VORPDYrm\000VORPDYrr\000VORPDrm\000VORPDrr\000VORPSYrm\000VORPSYrr\000V"
    "ORPSrm\000VORPSrr\000VPABSBrm128\000VPABSBrr128\000VPABSDrm128\000VPABS"
    "Drr128\000VPABSWrm128\000VPABSWrr128\000VPACKSSDWrm\000VPACKSSDWrr\000V"
    "PACKSSWBrm\000VPACKSSWBrr\000VPACKUSDWrm\000VPACKUSDWrr\000VPACKUSWBrm\000"
    "VPACKUSWBrr\000VPADDBrm\000VPADDBrr\000VPADDDrm\000VPADDDrr\000VPADDQrm"
    "\000VPADDQrr\000VPADDSBrm\000VPADDSBrr\000VPADDSWrm\000VPADDSWrr\000VPA"
    "DDUSBrm\000VPADDUSBrr\000VPADDUSWrm\000VPADDUSWrr\000VPADDWrm\000VPADDW"
    "rr\000VPALIGNR128rm\000VPALIGNR128rr\000VPANDNrm\000VPANDNrr\000VPANDrm"
    "\000VPANDrr\000VPAVGBrm\000VPAVGBrr\000VPAVGWrm\000VPAVGWrr\000VPBLENDV"
    "Brm\000VPBLENDVBrr\000VPBLENDWrmi\000VPBLENDWrri\000VPCLMULQDQrm\000VPC"
    "LMULQDQrr\000VPCMPEQBrm\000VPCMPEQBrr\000VPCMPEQDrm\000VPCMPEQDrr\000VP"
    "CMPEQQrm\000VPCMPEQQrr\000VPCMPEQWrm\000VPCMPEQWrr\000VPCMPESTRIArm\000"
    "VPCMPESTRIArr\000VPCMPESTRICrm\000VPCMPESTRICrr\000VPCMPESTRIOrm\000VPC"
    "MPESTRIOrr\000VPCMPESTRISrm\000VPCMPESTRISrr\000VPCMPESTRIZrm\000VPCMPE"
    "STRIZrr\000VPCMPESTRIrm\000VPCMPESTRIrr\000VPCMPESTRM128MEM\000VPCMPEST"
    "RM128REG\000VPCMPESTRM128rm\000VPCMPESTRM128rr\000VPCMPGTBrm\000VPCMPGT"
    "Brr\000VPCMPGTDrm\000VPCMPGTDrr\000VPCMPGTQrm\000VPCMPGTQrr\000VPCMPGTW"
    "rm\000VPCMPGTWrr\000VPCMPISTRIArm\000VPCMPISTRIArr\000VPCMPISTRICrm\000"
    "VPCMPISTRICrr\000VPCMPISTRIOrm\000VPCMPISTRIOrr\000VPCMPISTRISrm\000VPC"
    "MPISTRISrr\000VPCMPISTRIZrm\000VPCMPISTRIZrr\000VPCMPISTRIrm\000VPCMPIS"
    "TRIrr\000VPCMPISTRM128MEM\000VPCMPISTRM128REG\000VPCMPISTRM128rm\000VPC"
    "MPISTRM128rr\000VPERM2F128rm\000VPERM2F128rr\000VPERMILPDYmi\000VPERMIL"
    "PDYri\000VPERMILPDYrm\000VPERMILPDYrr\000VPERMILPDmi\000VPERMILPDri\000"
    "VPERMILPDrm\000VPERMILPDrr\000VPERMILPSYmi\000VPERMILPSYri\000VPERMILPS"
    "Yrm\000VPERMILPSYrr\000VPERMILPSmi\000VPERMILPSri\000VPERMILPSrm\000VPE"
    "RMILPSrr\000VPEXTRBmr\000VPEXTRBrr\000VPEXTRBrr64\000VPEXTRDmr\000VPEXT"
    "RDrr\000VPEXTRQmr\000VPEXTRQrr\000VPEXTRWmr\000VPEXTRWri\000VPHADDDrm12"
    "8\000VPHADDDrr128\000VPHADDSWrm128\000VPHADDSWrr128\000VPHADDWrm128\000"
    "VPHADDWrr128\000VPHMINPOSUWrm128\000VPHMINPOSUWrr128\000VPHSUBDrm128\000"
    "VPHSUBDrr128\000VPHSUBSWrm128\000VPHSUBSWrr128\000VPHSUBWrm128\000VPHSU"
    "BWrr128\000VPINSRBrm\000VPINSRBrr\000VPINSRDrm\000VPINSRDrr\000VPINSRQr"
    "m\000VPINSRQrr\000VPINSRWrmi\000VPINSRWrr64i\000VPINSRWrri\000VPMADDUBS"
    "Wrm128\000VPMADDUBSWrr128\000VPMADDWDrm\000VPMADDWDrr\000VPMAXSBrm\000V"
    "PMAXSBrr\000VPMAXSDrm\000VPMAXSDrr\000VPMAXSWrm\000VPMAXSWrr\000VPMAXUB"
    "rm\000VPMAXUBrr\000VPMAXUDrm\000VPMAXUDrr\000VPMAXUWrm\000VPMAXUWrr\000"
    "VPMINSBrm\000VPMINSBrr\000VPMINSDrm\000VPMINSDrr\000VPMINSWrm\000VPMINS"
    "Wrr\000VPMINUBrm\000VPMINUBrr\000VPMINUDrm\000VPMINUDrr\000VPMINUWrm\000"
    "VPMINUWrr\000VPMOVMSKBr64r\000VPMOVMSKBrr\000VPMOVSXBDrm\000VPMOVSXBDrr"
    "\000VPMOVSXBQrm\000VPMOVSXBQrr\000VPMOVSXBWrm\000VPMOVSXBWrr\000VPMOVSX"
    "DQrm\000VPMOVSXDQrr\000VPMOVSXWDrm\000VPMOVSXWDrr\000VPMOVSXWQrm\000VPM"
    "OVSXWQrr\000VPMOVZXBDrm\000VPMOVZXBDrr\000VPMOVZXBQrm\000VPMOVZXBQrr\000"
    "VPMOVZXBWrm\000VPMOVZXBWrr\000VPMOVZXDQrm\000VPMOVZXDQrr\000VPMOVZXWDrm"
    "\000VPMOVZXWDrr\000VPMOVZXWQrm\000VPMOVZXWQrr\000VPMULDQrm\000VPMULDQrr"
    "\000VPMULHRSWrm128\000VPMULHRSWrr128\000VPMULHUWrm\000VPMULHUWrr\000VPM"
    "ULHWrm\000VPMULHWrr\000VPMULLDrm\000VPMULLDrr\000VPMULLWrm\000VPMULLWrr"
    "\000VPMULUDQrm\000VPMULUDQrr\000VPORrm\000VPORrr\000VPSADBWrm\000VPSADB"
    "Wrr\000VPSHUFBrm128\000VPSHUFBrr128\000VPSHUFDmi\000VPSHUFDri\000VPSHUF"
    "HWmi\000VPSHUFHWri\000VPSHUFLWmi\000VPSHUFLWri\000VPSIGNBrm128\000VPSIG"
    "NBrr128\000VPSIGNDrm128\000VPSIGNDrr128\000VPSIGNWrm128\000VPSIGNWrr128"
    "\000VPSLLDQri\000VPSLLDri\000VPSLLDrm\000VPSLLDrr\000VPSLLQri\000VPSLLQ"
    "rm\000VPSLLQrr\000VPSLLWri\000VPSLLWrm\000VPSLLWrr\000VPSRADri\000VPSRA"
    "Drm\000VPSRADrr\000VPSRAWri\000VPSRAWrm\000VPSRAWrr\000VPSRLDQri\000VPS"
    "RLDri\000VPSRLDrm\000VPSRLDrr\000VPSRLQri\000VPSRLQrm\000VPSRLQrr\000VP"
    "SRLWri\000VPSRLWrm\000VPSRLWrr\000VPSUBBrm\000VPSUBBrr\000VPSUBDrm\000V"
    "PSUBDrr\000VPSUBQrm\000VPSUBQrr\000VPSUBSBrm\000VPSUBSBrr\000VPSUBSWrm\000"
    "VPSUBSWrr\000VPSUBUSBrm\000VPSUBUSBrr\000VPSUBUSWrm\000VPSUBUSWrr\000VP"
    "SUBWrm\000VPSUBWrr\000VPTESTYrm\000VPTESTYrr\000VPTESTrm\000VPTESTrr\000"
    "VPUNPCKHBWrm\000VPUNPCKHBWrr\000VPUNPCKHDQrm\000VPUNPCKHDQrr\000VPUNPCK"
    "HQDQrm\000VPUNPCKHQDQrr\000VPUNPCKHWDrm\000VPUNPCKHWDrr\000VPUNPCKLBWrm"
    "\000VPUNPCKLBWrr\000VPUNPCKLDQrm\000VPUNPCKLDQrr\000VPUNPCKLQDQrm\000VP"
    "UNPCKLQDQrr\000VPUNPCKLWDrm\000VPUNPCKLWDrr\000VPXORrm\000VPXORrr\000VR"
    "CPPSYm\000VRCPPSYm_Int\000VRCPPSYr\000VRCPPSYr_Int\000VRCPPSm\000VRCPPS"
    "m_Int\000VRCPPSr\000VRCPPSr_Int\000VRCPSSm\000VRCPSSm_Int\000VRCPSSr\000"
    "VRCPSSr_Int\000VROUNDPDm\000VROUNDPDm_AVX\000VROUNDPDr\000VROUNDPDr_AVX"
    "\000VROUNDPSm\000VROUNDPSm_AVX\000VROUNDPSr\000VROUNDPSr_AVX\000VROUNDS"
    "Dm\000VROUNDSDm_AVX\000VROUNDSDr\000VROUNDSDr_AVX\000VROUNDSSm\000VROUN"
    "DSSm_AVX\000VROUNDSSr\000VROUNDSSr_AVX\000VROUNDYPDm\000VROUNDYPDm_AVX\000"
    "VROUNDYPDr\000VROUNDYPDr_AVX\000VROUNDYPSm\000VROUNDYPSm_AVX\000VROUNDY"
    "PSr\000VROUNDYPSr_AVX\000VRSQRTPSYm\000VRSQRTPSYm_Int\000VRSQRTPSYr\000"
    "VRSQRTPSYr_Int\000VRSQRTPSm\000VRSQRTPSm_Int\000VRSQRTPSr\000VRSQRTPSr_"
    "Int\000VRSQRTSSm\000VRSQRTSSm_Int\000VRSQRTSSr\000VRSQRTSSr_Int\000VSHU"
    "FPDYrmi\000VSHUFPDYrri\000VSHUFPDrmi\000VSHUFPDrri\000VSHUFPSYrmi\000VS"
    "HUFPSYrri\000VSHUFPSrmi\000VSHUFPSrri\000VSQRTPDYm\000VSQRTPDYm_Int\000"
    "VSQRTPDYr\000VSQRTPDYr_Int\000VSQRTPDm\000VSQRTPDm_Int\000VSQRTPDr\000V"
    "SQRTPDr_Int\000VSQRTPSYm\000VSQRTPSYm_Int\000VSQRTPSYr\000VSQRTPSYr_Int"
    "\000VSQRTPSm\000VSQRTPSm_Int\000VSQRTPSr\000VSQRTPSr_Int\000VSQRTSDm\000"
    "VSQRTSDm_Int\000VSQRTSDr\000VSQRTSDr_Int\000VSQRTSSm\000VSQRTSSm_Int\000"
    "VSQRTSSr\000VSQRTSSr_Int\000VSTMXCSR\000VSUBPDYrm\000VSUBPDYrr\000VSUBP"
    "Drm\000VSUBPDrr\000VSUBPSYrm\000VSUBPSYrr\000VSUBPSrm\000VSUBPSrr\000VS"
    "UBSDrm\000VSUBSDrm_Int\000VSUBSDrr\000VSUBSDrr_Int\000VSUBSSrm\000VSUBS"
    "Srm_Int\000VSUBSSrr\000VSUBSSrr_Int\000VTESTPDYrm\000VTESTPDYrr\000VTES"
    "TPDrm\000VTESTPDrr\000VTESTPSYrm\000VTESTPSYrr\000VTESTPSrm\000VTESTPSr"
    "r\000VUCOMISDrm\000VUCOMISDrr\000VUCOMISSrm\000VUCOMISSrr\000VUNPCKHPDY"
    "rm\000VUNPCKHPDYrr\000VUNPCKHPDrm\000VUNPCKHPDrr\000VUNPCKHPSYrm\000VUN"
    "PCKHPSYrr\000VUNPCKHPSrm\000VUNPCKHPSrr\000VUNPCKLPDYrm\000VUNPCKLPDYrr"
    "\000VUNPCKLPDrm\000VUNPCKLPDrr\000VUNPCKLPSYrm\000VUNPCKLPSYrr\000VUNPC"
    "KLPSrm\000VUNPCKLPSrr\000VXORPDYrm\000VXORPDYrr\000VXORPDrm\000VXORPDrr"
    "\000VXORPSYrm\000VXORPSYrr\000VXORPSrm\000VXORPSrr\000VZEROALL\000VZERO"
    "UPPER\000V_SET0PD\000V_SET0PI\000V_SET0PS\000V_SETALLONES\000W64ALLOCA\000"
    "WAIT\000WBINVD\000WINCALL64m\000WINCALL64pcrel32\000WINCALL64r\000WIN_A"
    "LLOCA\000WRMSR\000XADD16rm\000XADD16rr\000XADD32rm\000XADD32rr\000XADD6"
    "4rm\000XADD64rr\000XADD8rm\000XADD8rr\000XCHG16ar\000XCHG16rm\000XCHG16"
    "rr\000XCHG32ar\000XCHG32rm\000XCHG32rr\000XCHG64ar\000XCHG64rm\000XCHG6"
    "4rr\000XCHG8rm\000XCHG8rr\000XCH_F\000XCRYPTCBC\000XCRYPTCFB\000XCRYPTC"
    "TR\000XCRYPTECB\000XCRYPTOFB\000XGETBV\000XLAT\000XOR16i16\000XOR16mi\000"
    "XOR16mi8\000XOR16mr\000XOR16ri\000XOR16ri8\000XOR16rm\000XOR16rr\000XOR"
    "16rr_REV\000XOR32i32\000XOR32mi\000XOR32mi8\000XOR32mr\000XOR32ri\000XO"
    "R32ri8\000XOR32rm\000XOR32rr\000XOR32rr_REV\000XOR64i32\000XOR64mi32\000"
    "XOR64mi8\000XOR64mr\000XOR64ri32\000XOR64ri8\000XOR64rm\000XOR64rr\000X"
    "OR64rr_REV\000XOR8i8\000XOR8mi\000XOR8mr\000XOR8ri\000XOR8rm\000XOR8rr\000"
    "XOR8rr_REV\000XORPDrm\000XORPDrr\000XORPSrm\000XORPSrr\000XSETBV\000XSH"
    "A1\000XSHA256\000XSTORE\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_CCR,
    RC_CONTROL_REG,
    RC_DEBUG_REG,
    RC_FR32,
    RC_FR64,
    RC_GR16,
    RC_GR16_ABCD,
    RC_GR16_NOREX,
    RC_GR32,
    RC_GR32_ABCD,
    RC_GR32_AD,
    RC_GR32_NOREX,
    RC_GR32_NOREX_NOSP,
    RC_GR32_NOSP,
    RC_GR32_TC,
    RC_GR64,
    RC_GR64_ABCD,
    RC_GR64_NOREX,
    RC_GR64_NOREX_NOSP,
    RC_GR64_NOSP,
    RC_GR64_TC,
    RC_GR64_TCW64,
    RC_GR8,
    RC_GR8_ABCD_H,
    RC_GR8_ABCD_L,
    RC_GR8_NOREX,
    RC_RFP32,
    RC_RFP64,
    RC_RFP80,
    RC_RST,
    RC_SEGMENT_REG,
    RC_VR128,
    RC_VR256,
    RC_VR64
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_CCR:
    if (Reg == X86::EFLAGS)
      return true;
    break;
  case RC_CONTROL_REG:
    switch (Reg) {
    default: break;
    case X86::CR0:
    case X86::CR1:
    case X86::CR2:
    case X86::CR3:
    case X86::CR4:
    case X86::CR5:
    case X86::CR6:
    case X86::CR7:
    case X86::CR8:
    case X86::CR9:
    case X86::CR10:
    case X86::CR11:
    case X86::CR12:
    case X86::CR13:
    case X86::CR14:
    case X86::CR15:
      return true;
    }
    break;
  case RC_DEBUG_REG:
    switch (Reg) {
    default: break;
    case X86::DR0:
    case X86::DR1:
    case X86::DR2:
    case X86::DR3:
    case X86::DR4:
    case X86::DR5:
    case X86::DR6:
    case X86::DR7:
      return true;
    }
    break;
  case RC_FR32:
    switch (Reg) {
    default: break;
    case X86::XMM0:
    case X86::XMM1:
    case X86::XMM2:
    case X86::XMM3:
    case X86::XMM4:
    case X86::XMM5:
    case X86::XMM6:
    case X86::XMM7:
    case X86::XMM8:
    case X86::XMM9:
    case X86::XMM10:
    case X86::XMM11:
    case X86::XMM12:
    case X86::XMM13:
    case X86::XMM14:
    case X86::XMM15:
      return true;
    }
    break;
  case RC_FR64:
    switch (Reg) {
    default: break;
    case X86::XMM0:
    case X86::XMM1:
    case X86::XMM2:
    case X86::XMM3:
    case X86::XMM4:
    case X86::XMM5:
    case X86::XMM6:
    case X86::XMM7:
    case X86::XMM8:
    case X86::XMM9:
    case X86::XMM10:
    case X86::XMM11:
    case X86::XMM12:
    case X86::XMM13:
    case X86::XMM14:
    case X86::XMM15:
      return true;
    }
    break;
  case RC_GR16:
    switch (Reg) {
    default: break;
    case X86::AX:
    case X86::CX:
    case X86::DX:
    case X86::SI:
    case X86::DI:
    case X86::BX:
    case X86::BP:
    case X86::SP:
    case X86::R8W:
    case X86::R9W:
    case X86::R10W:
    case X86::R11W:
    case X86::R14W:
    case X86::R15W:
    case X86::R12W:
    case X86::R13W:
      return true;
    }
    break;
  case RC_GR16_ABCD:
    switch (Reg) {
    default: break;
    case X86::AX:
    case X86::CX:
    case X86::DX:
    case X86::BX:
      return true;
    }
    break;
  case RC_GR16_NOREX:
    switch (Reg) {
    default: break;
    case X86::AX:
    case X86::CX:
    case X86::DX:
    case X86::SI:
    case X86::DI:
    case X86::BX:
    case X86::BP:
    case X86::SP:
      return true;
    }
    break;
  case RC_GR32:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
    case X86::ESP:
    case X86::R8D:
    case X86::R9D:
    case X86::R10D:
    case X86::R11D:
    case X86::R14D:
    case X86::R15D:
    case X86::R12D:
    case X86::R13D:
      return true;
    }
    break;
  case RC_GR32_ABCD:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::EBX:
      return true;
    }
    break;
  case RC_GR32_AD:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::EDX:
      return true;
    }
    break;
  case RC_GR32_NOREX:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
    case X86::ESP:
      return true;
    }
    break;
  case RC_GR32_NOREX_NOSP:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
      return true;
    }
    break;
  case RC_GR32_NOSP:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
    case X86::ESI:
    case X86::EDI:
    case X86::EBX:
    case X86::EBP:
    case X86::R8D:
    case X86::R9D:
    case X86::R10D:
    case X86::R11D:
    case X86::R14D:
    case X86::R15D:
    case X86::R12D:
    case X86::R13D:
      return true;
    }
    break;
  case RC_GR32_TC:
    switch (Reg) {
    default: break;
    case X86::EAX:
    case X86::ECX:
    case X86::EDX:
      return true;
    }
    break;
  case RC_GR64:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::R8:
    case X86::R9:
    case X86::R10:
    case X86::R11:
    case X86::RBX:
    case X86::R14:
    case X86::R15:
    case X86::R12:
    case X86::R13:
    case X86::RBP:
    case X86::RSP:
    case X86::RIP:
      return true;
    }
    break;
  case RC_GR64_ABCD:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RBX:
      return true;
    }
    break;
  case RC_GR64_NOREX:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::RBX:
    case X86::RBP:
    case X86::RSP:
    case X86::RIP:
      return true;
    }
    break;
  case RC_GR64_NOREX_NOSP:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::RBX:
    case X86::RBP:
      return true;
    }
    break;
  case RC_GR64_NOSP:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::R8:
    case X86::R9:
    case X86::R10:
    case X86::R11:
    case X86::RBX:
    case X86::R14:
    case X86::R15:
    case X86::R12:
    case X86::R13:
    case X86::RBP:
      return true;
    }
    break;
  case RC_GR64_TC:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::RSI:
    case X86::RDI:
    case X86::R8:
    case X86::R9:
    case X86::R11:
    case X86::RIP:
      return true;
    }
    break;
  case RC_GR64_TCW64:
    switch (Reg) {
    default: break;
    case X86::RAX:
    case X86::RCX:
    case X86::RDX:
    case X86::R8:
    case X86::R9:
    case X86::R11:
      return true;
    }
    break;
  case RC_GR8:
    switch (Reg) {
    default: break;
    case X86::AL:
    case X86::CL:
    case X86::DL:
    case X86::AH:
    case X86::CH:
    case X86::DH:
    case X86::BL:
    case X86::BH:
    case X86::SIL:
    case X86::DIL:
    case X86::BPL:
    case X86::SPL:
    case X86::R8B:
    case X86::R9B:
    case X86::R10B:
    case X86::R11B:
    case X86::R14B:
    case X86::R15B:
    case X86::R12B:
    case X86::R13B:
      return true;
    }
    break;
  case RC_GR8_ABCD_H:
    switch (Reg) {
    default: break;
    case X86::AH:
    case X86::CH:
    case X86::DH:
    case X86::BH:
      return true;
    }
    break;
  case RC_GR8_ABCD_L:
    switch (Reg) {
    default: break;
    case X86::AL:
    case X86::CL:
    case X86::DL:
    case X86::BL:
      return true;
    }
    break;
  case RC_GR8_NOREX:
    switch (Reg) {
    default: break;
    case X86::AL:
    case X86::CL:
    case X86::DL:
    case X86::AH:
    case X86::CH:
    case X86::DH:
    case X86::BL:
    case X86::BH:
      return true;
    }
    break;
  case RC_RFP32:
    switch (Reg) {
    default: break;
    case X86::FP0:
    case X86::FP1:
    case X86::FP2:
    case X86::FP3:
    case X86::FP4:
    case X86::FP5:
    case X86::FP6:
      return true;
    }
    break;
  case RC_RFP64:
    switch (Reg) {
    default: break;
    case X86::FP0:
    case X86::FP1:
    case X86::FP2:
    case X86::FP3:
    case X86::FP4:
    case X86::FP5:
    case X86::FP6:
      return true;
    }
    break;
  case RC_RFP80:
    switch (Reg) {
    default: break;
    case X86::FP0:
    case X86::FP1:
    case X86::FP2:
    case X86::FP3:
    case X86::FP4:
    case X86::FP5:
    case X86::FP6:
      return true;
    }
    break;
  case RC_RST:
    switch (Reg) {
    default: break;
    case X86::ST0:
    case X86::ST1:
    case X86::ST2:
    case X86::ST3:
    case X86::ST4:
    case X86::ST5:
    case X86::ST6:
    case X86::ST7:
      return true;
    }
    break;
  case RC_SEGMENT_REG:
    switch (Reg) {
    default: break;
    case X86::CS:
    case X86::DS:
    case X86::SS:
    case X86::ES:
    case X86::FS:
    case X86::GS:
      return true;
    }
    break;
  case RC_VR128:
    switch (Reg) {
    default: break;
    case X86::XMM0:
    case X86::XMM1:
    case X86::XMM2:
    case X86::XMM3:
    case X86::XMM4:
    case X86::XMM5:
    case X86::XMM6:
    case X86::XMM7:
    case X86::XMM8:
    case X86::XMM9:
    case X86::XMM10:
    case X86::XMM11:
    case X86::XMM12:
    case X86::XMM13:
    case X86::XMM14:
    case X86::XMM15:
      return true;
    }
    break;
  case RC_VR256:
    switch (Reg) {
    default: break;
    case X86::YMM0:
    case X86::YMM1:
    case X86::YMM2:
    case X86::YMM3:
    case X86::YMM4:
    case X86::YMM5:
    case X86::YMM6:
    case X86::YMM7:
    case X86::YMM8:
    case X86::YMM9:
    case X86::YMM10:
    case X86::YMM11:
    case X86::YMM12:
    case X86::YMM13:
    case X86::YMM14:
    case X86::YMM15:
      return true;
    }
    break;
  case RC_VR64:
    switch (Reg) {
    default: break;
    case X86::MM0:
    case X86::MM1:
    case X86::MM2:
    case X86::MM3:
    case X86::MM4:
    case X86::MM5:
    case X86::MM6:
    case X86::MM7:
      return true;
    }
    break;
  }

  return false;
}

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  assert(false && "Operand not in map!");
  return 0;
}

bool X86IntelInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case X86::AAD8i8:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 10) {
      // (AAD8i8 10)
      AsmString = "aad";
      break;
    }
    return false;
  case X86::AAM8i8:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 10) {
      // (AAM8i8 10)
      AsmString = "aam";
      break;
    }
    return false;
  case X86::COM_FIPr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (COM_FIPr ST1)
      AsmString = "fcompi";
      break;
    }
    return false;
  case X86::COM_FIr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (COM_FIr ST1)
      AsmString = "fcomi";
      break;
    }
    return false;
  case X86::DIVR_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (DIVR_FPrST0 ST1)
      AsmString = "fdivp";
      break;
    }
    return false;
  case X86::DIV_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (DIV_FPrST0 ST1)
      AsmString = "fdivrp";
      break;
    }
    return false;
  case X86::FNSTSW8r:
    if (MI->getNumOperands() == 0) {
      // (FNSTSW8r)
      AsmString = "fnstsw";
      break;
    }
    return false;
  case X86::IN16rr:
    if (MI->getNumOperands() == 0) {
      // (IN16rr)
      AsmString = "inw %dx";
      break;
    }
    return false;
  case X86::IN32rr:
    if (MI->getNumOperands() == 0) {
      // (IN32rr)
      AsmString = "inl %dx";
      break;
    }
    return false;
  case X86::IN8rr:
    if (MI->getNumOperands() == 0) {
      // (IN8rr)
      AsmString = "inb %dx";
      break;
    }
    return false;
  case X86::MOVSD:
    if (MI->getNumOperands() == 0) {
      // (MOVSD)
      AsmString = "movsd";
      break;
    }
    return false;
  case X86::MUL_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (MUL_FPrST0 ST1)
      AsmString = "fmulp";
      break;
    }
    return false;
  case X86::OUT16rr:
    if (MI->getNumOperands() == 0) {
      // (OUT16rr)
      AsmString = "outw %dx";
      break;
    }
    return false;
  case X86::OUT32rr:
    if (MI->getNumOperands() == 0) {
      // (OUT32rr)
      AsmString = "outl %dx";
      break;
    }
    return false;
  case X86::OUT8rr:
    if (MI->getNumOperands() == 0) {
      // (OUT8rr)
      AsmString = "outb %dx";
      break;
    }
    return false;
  case X86::SHLD16rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHLD16rri8 GR16:$r1, GR16:$r2, 1)
      AsmString = "shldw $r1, $r2";
      OpMap.push_back(std::make_pair("r1", 0));
      OpMap.push_back(std::make_pair("r2", 1));
      break;
    }
    return false;
  case X86::SHLD32rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHLD32rri8 GR32:$r1, GR32:$r2, 1)
      AsmString = "shldl $r1, $r2";
      OpMap.push_back(std::make_pair("r1", 0));
      OpMap.push_back(std::make_pair("r2", 1));
      break;
    }
    return false;
  case X86::SHLD64rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHLD64rri8 GR64:$r1, GR64:$r2, 1)
      AsmString = "shldq $r1, $r2";
      OpMap.push_back(std::make_pair("r1", 0));
      OpMap.push_back(std::make_pair("r2", 1));
      break;
    }
    return false;
  case X86::SHRD16rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHRD16rri8 GR16:$r1, GR16:$r2, 1)
      AsmString = "shrdw $r1, $r2";
      OpMap.push_back(std::make_pair("r1", 0));
      OpMap.push_back(std::make_pair("r2", 1));
      break;
    }
    return false;
  case X86::SHRD32rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHRD32rri8 GR32:$r1, GR32:$r2, 1)
      AsmString = "shrdl $r1, $r2";
      OpMap.push_back(std::make_pair("r1", 0));
      OpMap.push_back(std::make_pair("r2", 1));
      break;
    }
    return false;
  case X86::SHRD64rri8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(1).getReg()) &&
        MI->getOperand(2).getImm() == 1) {
      // (SHRD64rri8 GR64:$r1, GR64:$r2, 1)
      AsmString = "shrdq $r1, $r2";
      OpMap.push_back(std::make_pair("r1", 0));
      OpMap.push_back(std::make_pair("r2", 1));
      break;
    }
    return false;
  case X86::SUBR_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (SUBR_FPrST0 ST1)
      AsmString = "fsubp";
      break;
    }
    return false;
  case X86::SUB_FPrST0:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (SUB_FPrST0 ST1)
      AsmString = "fsubrp";
      break;
    }
    return false;
  case X86::UCOM_FIPr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_FIPr ST1)
      AsmString = "fucompi";
      break;
    }
    return false;
  case X86::UCOM_FIr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_FIr ST1)
      AsmString = "fucomi";
      break;
    }
    return false;
  case X86::UCOM_FPr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_FPr ST1)
      AsmString = "fucomp";
      break;
    }
    return false;
  case X86::UCOM_Fr:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (UCOM_Fr ST1)
      AsmString = "fucom";
      break;
    }
    return false;
  case X86::XCH_F:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getReg() == X86::ST1) {
      // (XCH_F ST1)
      AsmString = "fxch";
      break;
    }
    return false;
  case X86::XOR16rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR16, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR16rr GR16:$reg, GR16:$reg)
      AsmString = "clrw $reg";
      OpMap.push_back(std::make_pair("reg", 0));
      break;
    }
    return false;
  case X86::XOR32rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR32, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR32rr GR32:$reg, GR32:$reg)
      AsmString = "clrl $reg";
      OpMap.push_back(std::make_pair("reg", 0));
      break;
    }
    return false;
  case X86::XOR64rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR64, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR64rr GR64:$reg, GR64:$reg)
      AsmString = "clrq $reg";
      OpMap.push_back(std::make_pair("reg", 0));
      break;
    }
    return false;
  case X86::XOR8rr:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        regIsInRegisterClass(RC_GR8, MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg()) {
      // (XOR8rr GR8:$reg, GR8:$reg)
      AsmString = "clrb $reg";
      OpMap.push_back(std::make_pair("reg", 0));
      break;
    }
    return false;
  case X86::XSTORE:
    if (MI->getNumOperands() == 0) {
      // (XSTORE)
      AsmString = "xstorerng";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
