//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void XCoreAsmPrinter::printInstruction(const MachineInstr *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    536870923U,	// ADD_2rus
    536870923U,	// ADD_3r
    1090519056U,	// ADJCALLSTACKDOWN
    1107296272U,	// ADJCALLSTACKUP
    542113809U,	// ANDNOT_2r
    536870937U,	// AND_3r
    536870942U,	// ASHR_l2rus
    536870942U,	// ASHR_l3r
    587202596U,	// BAU_1r
    537919529U,	// BITREV_l2r
    587202609U,	// BLA_1r
    587202614U,	// BL_lu10
    587202614U,	// BL_u10
    537919546U,	// BRBF_lru6
    537919546U,	// BRBF_ru6
    537919550U,	// BRBT_lru6
    537919550U,	// BRBT_ru6
    587202626U,	// BRBU_lu6
    587202626U,	// BRBU_u6
    537919546U,	// BRFF_lru6
    537919546U,	// BRFF_ru6
    537919550U,	// BRFT_lru6
    537919550U,	// BRFT_ru6
    587202626U,	// BRFU_lu6
    587202626U,	// BRFU_u6
    1686110278U,	// BR_JT
    1690304582U,	// BR_JT32
    537919563U,	// BYTEREV_l2r
    621805652U,	// CHKCT_2r
    621805652U,	// CHKCT_rus
    95U,	// CLRE_0R
    587202660U,	// CLRSR_branch_lu6
    587202660U,	// CLRSR_branch_u6
    587202660U,	// CLRSR_lu6
    587202660U,	// CLRSR_u6
    537919595U,	// CLZ_l2r
    537264240U,	// CRC8_l4r
    541327478U,	// CRC_l3r
    536871037U,	// DIVS_l3r
    536871043U,	// DIVU_l3r
    587202697U,	// ECALLF_1r
    587202705U,	// ECALLT_1r
    637534361U,	// EEU_1r
    654311586U,	// ENDIN_l2r
    587202729U,	// ENTSP_lu6
    587202729U,	// ENTSP_u6
    536871088U,	// EQ_2rus
    536871088U,	// EQ_3r
    587202740U,	// EXTSP_lu6
    587202740U,	// EXTSP_u6
    637534395U,	// FREER_1r
    198U,	// GETID_0R
    671088850U,	// GETPS_l2r
    537919703U,	// GETR_rus
    654311645U,	// GETST_2r
    654311652U,	// GETTS_2r
    654311659U,	// INCT_2r
    687866097U,	// INITCP_2r
    704643313U,	// INITDP_2r
    721420529U,	// INITLR_l2r
    738197745U,	// INITPC_2r
    754974961U,	// INITSP_2r
    654311673U,	// INSHR_2r
    654311680U,	// INT_2r
    654311685U,	// IN_2r
    537067785U,	// LADD_l5r
    538968335U,	// LD16S_3r
    538968342U,	// LD8U_3r
    540016924U,	// LDA16B_l3r
    538968348U,	// LDA16F_l3r
    587202851U,	// LDAP_lu10
    587202851U,	// LDAP_lu10_ba
    587202851U,	// LDAP_u10
    540016942U,	// LDAWB_l2rus
    540016942U,	// LDAWB_l3r
    2147483956U,	// LDAWCP_lu6
    2147483956U,	// LDAWCP_u6
    771752238U,	// LDAWDP_lru6
    771752238U,	// LDAWDP_ru6
    1325400080U,	// LDAWFI
    538968366U,	// LDAWF_l2rus
    538968366U,	// LDAWF_l3r
    805306670U,	// LDAWSP_lru6
    805306670U,	// LDAWSP_lru6_RRegs
    805306670U,	// LDAWSP_ru6
    805306670U,	// LDAWSP_ru6_RRegs
    537919810U,	// LDC_lru6
    537919810U,	// LDC_ru6
    537067847U,	// LDIV_l5r
    822083917U,	// LDWCP_lru6
    822083917U,	// LDWCP_ru6
    771752269U,	// LDWDP_lru6
    771752269U,	// LDWDP_ru6
    1375731728U,	// LDWFI
    805306701U,	// LDWSP_lru6
    805306701U,	// LDWSP_ru6
    538968397U,	// LDW_2rus
    538968397U,	// LDW_3r
    537100626U,	// LMUL_l6r
    536871256U,	// LSS_3r
    537067869U,	// LSUB_l5r
    536871267U,	// LSU_3r
    537395560U,	// MACCS_l4r
    537395567U,	// MACCU_l4r
    637534582U,	// MJOIN_1r
    537919873U,	// MKMSK_2r
    537919873U,	// MKMSK_rus
    637534600U,	// MSYNC_1r
    536871315U,	// MUL_l3r
    537919896U,	// NEG
    537919901U,	// NOT
    536871330U,	// OR_3r
    621805990U,	// OUTCT_2r
    621805990U,	// OUTCT_rus
    1699742129U,	// OUTSHR_2r
    621806013U,	// OUTT_2r
    621806023U,	// OUT_2r
    654311888U,	// PEEK_l2r
    536871382U,	// REMS_l3r
    536871388U,	// REMU_l3r
    587203042U,	// RETSP_lu6
    587203042U,	// RETSP_u6
    1392508944U,	// SELECT_CC
    621806057U,	// SETCLK_l2r
    621806069U,	// SETC_l2r
    621806069U,	// SETC_lru6
    621806069U,	// SETC_ru6
    621806079U,	// SETD_2r
    621806089U,	// SETPSC_l2r
    621806101U,	// SETPS_l2r
    621806109U,	// SETPT_2r
    621806120U,	// SETRDY_l2r
    587203124U,	// SETSP_1r
    587203133U,	// SETSR_branch_lu6
    587203133U,	// SETSR_branch_u6
    587203133U,	// SETSR_lu6
    587203133U,	// SETSR_u6
    621806148U,	// SETTW_l2r
    872415823U,	// SETV_1r
    542114393U,	// SEXT_2r
    542114393U,	// SEXT_rus
    536871519U,	// SHL_2rus
    536871519U,	// SHL_3r
    536871524U,	// SHR_2rus
    536871524U,	// SHR_3r
    617U,	// SSYNC_0r
    538968687U,	// ST16_l3r
    538968693U,	// ST8_l3r
    771752570U,	// STWDP_lru6
    771752570U,	// STWDP_ru6
    1426063376U,	// STWFI
    805307002U,	// STWSP_lru6
    805307002U,	// STWSP_ru6
    538968698U,	// STW_2rus
    538968698U,	// STW_3r
    536871551U,	// SUB_2rus
    536871551U,	// SUB_3r
    637534852U,	// SYNCR_1r
    654312079U,	// TESTCT_2r
    654312087U,	// TESTWCT_2r
    672U,	// WAITEU_0R
    536871591U,	// XOR_l3r
    542114476U,	// ZEXT_2r
    542114476U,	// ZEXT_rus
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000add \000\000andnot \000and \000ashr \000bau \000bitrev \000"
    "bla \000bl \000bf \000bt \000bu \000bru \000byterev \000chkct res[\000c"
    "lre\000clrsr \000clz \000crc8 \000crc32 \000divs \000divu \000ecallf \000"
    "ecallt \000eeu res[\000endin \000entsp \000eq \000extsp \000freer res[\000"
    "get r11, id\000get \000getr \000getst \000getts \000inct \000init t[\000"
    "inshr \000int \000in \000ladd \000ld16s \000ld8u \000lda16 \000ldap r11"
    ", \000ldaw \000ldaw r11, cp[\000ldc \000ldiv \000ldw \000lmul \000lss \000"
    "lsub \000lsu \000maccs \000maccu \000mjoin res[\000mkmsk \000msync res["
    "\000mul \000neg \000not \000or \000outct res[\000outshr res[\000outt re"
    "s[\000out res[\000peek \000rems \000remu \000retsp \000setclk res[\000s"
    "etc res[\000setd res[\000setpsc res[\000set ps[\000setpt res[\000setrdy"
    " res[\000set sp, \000setsr \000settw res[\000setv res[\000sext \000shl "
    "\000shr \000ssync\000st16 \000st8 \000stw \000sub \000syncr res[\000tes"
    "tct \000testwct \000waiteu\000xor \000zext \000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 1023)-1;


  // Fragment 0 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 29) & 7) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, CLRE_0R, GETID_0R, SSYNC_0r, WAITEU_0R
    return;
    break;
  case 1:
    // ADD_2rus, ADD_3r, ANDNOT_2r, AND_3r, ASHR_l2rus, ASHR_l3r, BAU_1r, BIT...
    printOperand(MI, 0, O); 
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP, LDAWFI, LDWFI, SELECT_CC, STWFI
    PrintSpecial(MI, O, "comment"); 
    break;
  case 3:
    // BR_JT, BR_JT32, OUTSHR_2r
    printOperand(MI, 1, O); 
    break;
  case 4:
    // LDAWCP_lu6, LDAWCP_u6
    printMemOperand(MI, 0, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 24) & 31) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, ANDNOT_2r, AND_3r, ASHR_l2rus, ASHR_l3r, BITREV_l2r,...
    O << ", "; 
    break;
  case 1:
    // ADJCALLSTACKDOWN
    O << " ADJCALLSTACKDOWN "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 2:
    // ADJCALLSTACKUP
    O << " ADJCALLSTACKUP "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 3:
    // BAU_1r, BLA_1r, BL_lu10, BL_u10, BRBU_lu6, BRBU_u6, BRFU_lu6, BRFU_u6,...
    return;
    break;
  case 4:
    // BR_JT, BR_JT32
    O << "\n"; 
    break;
  case 5:
    // CHKCT_2r, CHKCT_rus, OUTCT_2r, OUTCT_rus, OUTSHR_2r, OUTT_2r, OUT_2r, ...
    O << "], "; 
    break;
  case 6:
    // EEU_1r, FREER_1r, MJOIN_1r, MSYNC_1r, SYNCR_1r
    O << ']'; 
    return;
    break;
  case 7:
    // ENDIN_l2r, GETST_2r, GETTS_2r, INCT_2r, INSHR_2r, INT_2r, IN_2r, PEEK_...
    O << ", res["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 8:
    // GETPS_l2r
    O << ", ps["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 9:
    // INITCP_2r
    O << "]:cp, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 10:
    // INITDP_2r
    O << "]:dp, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 11:
    // INITLR_l2r
    O << "]:lr, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // INITPC_2r
    O << "]:pc, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 13:
    // INITSP_2r
    O << "]:sp, "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // LDAWDP_lru6, LDAWDP_ru6, LDWDP_lru6, LDWDP_ru6, STWDP_lru6, STWDP_ru6
    O << ", dp["; 
    printMemOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 15:
    // LDAWFI
    O << " LDAWFI "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 16:
    // LDAWSP_lru6, LDAWSP_lru6_RRegs, LDAWSP_ru6, LDAWSP_ru6_RRegs, LDWSP_lr...
    O << ", sp["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 17:
    // LDWCP_lru6, LDWCP_ru6
    O << ", cp["; 
    printOperand(MI, 1, O); 
    O << ']'; 
    return;
    break;
  case 18:
    // LDWFI
    O << " LDWFI "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 1, O); 
    return;
    break;
  case 19:
    // SELECT_CC
    O << " SELECT_CC PSEUDO!"; 
    return;
    break;
  case 20:
    // SETV_1r
    O << "], r11"; 
    return;
    break;
  case 21:
    // STWFI
    O << " STWFI "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printMemOperand(MI, 1, O); 
    return;
    break;
  }


  // Fragment 2 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 22) & 3) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, BITREV_l2r, BRBF_lru6,...
    printOperand(MI, 1, O); 
    break;
  case 1:
    // ANDNOT_2r, CRC_l3r, OUTSHR_2r, SEXT_2r, SEXT_rus, ZEXT_2r, ZEXT_rus
    printOperand(MI, 2, O); 
    break;
  case 2:
    // BR_JT
    printInlineJT(MI, 0, O); 
    return;
    break;
  case 3:
    // BR_JT32
    printInlineJT32(MI, 0, O); 
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 20) & 3) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, CRC8_l4r, CRC_l3r, DIV...
    O << ", "; 
    break;
  case 1:
    // ANDNOT_2r, BITREV_l2r, BRBF_lru6, BRBF_ru6, BRBT_lru6, BRBT_ru6, BRFF_...
    return;
    break;
  case 2:
    // LD16S_3r, LD8U_3r, LDA16F_l3r, LDAWF_l2rus, LDAWF_l3r, LDW_2rus, LDW_3...
    O << '['; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case 3:
    // LDA16B_l3r, LDAWB_l2rus, LDAWB_l3r
    O << "[-"; 
    printOperand(MI, 2, O); 
    O << ']'; 
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 18) & 3) {
  default:   // unreachable.
  case 0:
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, DIVS_l3r, DIVU_l3r, EQ...
    printOperand(MI, 2, O); 
    break;
  case 1:
    // CRC8_l4r, CRC_l3r
    printOperand(MI, 3, O); 
    break;
  case 2:
    // MACCS_l4r, MACCU_l4r
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 17) & 1) {
    // CRC8_l4r, LADD_l5r, LDIV_l5r, LMUL_l6r, LSUB_l5r
    O << ", "; 
  } else {
    // ADD_2rus, ADD_3r, AND_3r, ASHR_l2rus, ASHR_l3r, CRC_l3r, DIVS_l3r, DIV...
    return;
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 16) & 1) {
    // LADD_l5r, LDIV_l5r, LMUL_l6r, LSUB_l5r
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
  } else {
    // CRC8_l4r
    printOperand(MI, 4, O); 
    return;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 15) & 1) {
    // LMUL_l6r
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
  } else {
    // LADD_l5r, LDIV_l5r, LSUB_l5r
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *XCoreAsmPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 17 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39,
    43, 47, 0
  };

  const char *AsmStrs =
    "cp\000dp\000lr\000r0\000r1\000r2\000r3\000r4\000r5\000r6\000r7\000r8\000"
    "r9\000r10\000r11\000sp\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *XCoreAsmPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 178 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 160, 167, 184, 199, 209, 216, 227, 236, 243, 254, 261, 269, 276, 
    286, 295, 305, 314, 323, 331, 341, 350, 360, 369, 378, 386, 392, 400, 
    412, 421, 431, 439, 456, 472, 482, 491, 499, 508, 516, 525, 534, 544, 
    554, 561, 571, 581, 590, 598, 604, 614, 623, 632, 641, 651, 660, 669, 
    678, 686, 696, 706, 717, 727, 737, 746, 753, 759, 768, 777, 785, 796, 
    807, 817, 830, 839, 851, 861, 872, 882, 894, 905, 912, 924, 934, 946, 
    964, 975, 992, 1001, 1009, 1018, 1029, 1039, 1050, 1060, 1066, 1077, 1087, 1096, 
    1103, 1112, 1119, 1128, 1135, 1145, 1155, 1164, 1173, 1183, 1192, 1200, 1204, 1208, 
    1214, 1223, 1233, 1243, 1251, 1258, 1267, 1276, 1285, 1295, 1304, 1314, 1325, 1334, 
    1344, 1353, 1361, 1372, 1382, 1391, 1402, 1411, 1428, 1444, 1454, 1463, 1473, 1481, 
    1489, 1498, 1507, 1514, 1523, 1530, 1539, 1548, 1556, 1567, 1577, 1583, 1594, 1604, 
    1613, 1620, 1629, 1636, 1645, 1655, 1666, 1676, 1684, 1692, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADD_2rus\000ADD_3r\000"
    "ADJCALLSTACKDOWN\000ADJCALLSTACKUP\000ANDNOT_2r\000AND_3r\000ASHR_l2rus"
    "\000ASHR_l3r\000BAU_1r\000BITREV_l2r\000BLA_1r\000BL_lu10\000BL_u10\000"
    "BRBF_lru6\000BRBF_ru6\000BRBT_lru6\000BRBT_ru6\000BRBU_lu6\000BRBU_u6\000"
    "BRFF_lru6\000BRFF_ru6\000BRFT_lru6\000BRFT_ru6\000BRFU_lu6\000BRFU_u6\000"
    "BR_JT\000BR_JT32\000BYTEREV_l2r\000CHKCT_2r\000CHKCT_rus\000CLRE_0R\000"
    "CLRSR_branch_lu6\000CLRSR_branch_u6\000CLRSR_lu6\000CLRSR_u6\000CLZ_l2r"
    "\000CRC8_l4r\000CRC_l3r\000DIVS_l3r\000DIVU_l3r\000ECALLF_1r\000ECALLT_"
    "1r\000EEU_1r\000ENDIN_l2r\000ENTSP_lu6\000ENTSP_u6\000EQ_2rus\000EQ_3r\000"
    "EXTSP_lu6\000EXTSP_u6\000FREER_1r\000GETID_0R\000GETPS_l2r\000GETR_rus\000"
    "GETST_2r\000GETTS_2r\000INCT_2r\000INITCP_2r\000INITDP_2r\000INITLR_l2r"
    "\000INITPC_2r\000INITSP_2r\000INSHR_2r\000INT_2r\000IN_2r\000LADD_l5r\000"
    "LD16S_3r\000LD8U_3r\000LDA16B_l3r\000LDA16F_l3r\000LDAP_lu10\000LDAP_lu"
    "10_ba\000LDAP_u10\000LDAWB_l2rus\000LDAWB_l3r\000LDAWCP_lu6\000LDAWCP_u"
    "6\000LDAWDP_lru6\000LDAWDP_ru6\000LDAWFI\000LDAWF_l2rus\000LDAWF_l3r\000"
    "LDAWSP_lru6\000LDAWSP_lru6_RRegs\000LDAWSP_ru6\000LDAWSP_ru6_RRegs\000L"
    "DC_lru6\000LDC_ru6\000LDIV_l5r\000LDWCP_lru6\000LDWCP_ru6\000LDWDP_lru6"
    "\000LDWDP_ru6\000LDWFI\000LDWSP_lru6\000LDWSP_ru6\000LDW_2rus\000LDW_3r"
    "\000LMUL_l6r\000LSS_3r\000LSUB_l5r\000LSU_3r\000MACCS_l4r\000MACCU_l4r\000"
    "MJOIN_1r\000MKMSK_2r\000MKMSK_rus\000MSYNC_1r\000MUL_l3r\000NEG\000NOT\000"
    "OR_3r\000OUTCT_2r\000OUTCT_rus\000OUTSHR_2r\000OUTT_2r\000OUT_2r\000PEE"
    "K_l2r\000REMS_l3r\000REMU_l3r\000RETSP_lu6\000RETSP_u6\000SELECT_CC\000"
    "SETCLK_l2r\000SETC_l2r\000SETC_lru6\000SETC_ru6\000SETD_2r\000SETPSC_l2"
    "r\000SETPS_l2r\000SETPT_2r\000SETRDY_l2r\000SETSP_1r\000SETSR_branch_lu"
    "6\000SETSR_branch_u6\000SETSR_lu6\000SETSR_u6\000SETTW_l2r\000SETV_1r\000"
    "SEXT_2r\000SEXT_rus\000SHL_2rus\000SHL_3r\000SHR_2rus\000SHR_3r\000SSYN"
    "C_0r\000ST16_l3r\000ST8_l3r\000STWDP_lru6\000STWDP_ru6\000STWFI\000STWS"
    "P_lru6\000STWSP_ru6\000STW_2rus\000STW_3r\000SUB_2rus\000SUB_3r\000SYNC"
    "R_1r\000TESTCT_2r\000TESTWCT_2r\000WAITEU_0R\000XOR_l3r\000ZEXT_2r\000Z"
    "EXT_rus\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif
