//===- TableGen'erated file -------------------------------------*- C++ -*-===//
//
// Assembly Writer Source Fragment
//
// Automatically generated file, do not edit!
//
//===----------------------------------------------------------------------===//

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void ARMInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const unsigned OpInfo[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// PROLOG_LABEL
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// ADCSri
    0U,	// ADCSrr
    0U,	// ADCSrsi
    0U,	// ADCSrsr
    134217739U,	// ADCri
    134217739U,	// ADCrr
    268435467U,	// ADCrsi
    402653195U,	// ADCrsr
    536870927U,	// ADDSri
    536870927U,	// ADDSrr
    671088655U,	// ADDSrsi
    805306383U,	// ADDSrsr
    134217748U,	// ADDri
    134217748U,	// ADDrr
    268435476U,	// ADDrsi
    402653204U,	// ADDrsr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    939524120U,	// ADR
    134217756U,	// ANDri
    134217756U,	// ANDrr
    268435484U,	// ANDrsi
    402653212U,	// ANDrsr
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I8
    0U,	// B
    0U,	// BCCZi64
    0U,	// BCCi64
    536870944U,	// BFC
    671088676U,	// BFI
    805306404U,	// BFI4p
    134217768U,	// BICri
    134217768U,	// BICrr
    268435496U,	// BICrsi
    402653224U,	// BICrsr
    1073741868U,	// BKPT
    1209008177U,	// BL
    1209008181U,	// BLX
    1073741882U,	// BLX_pred
    1209008181U,	// BLXi
    0U,	// BLXr9
    0U,	// BLXr9_pred
    1073741886U,	// BL_pred
    0U,	// BLr9
    0U,	// BLr9_pred
    0U,	// BMOVPCRX_CALL
    0U,	// BMOVPCRXr9_CALL
    0U,	// BR_JTadd
    0U,	// BR_JTm
    0U,	// BR_JTr
    1209008193U,	// BX
    1073741893U,	// BXJ
    0U,	// BX_CALL
    1344274505U,	// BX_RET
    1073741897U,	// BX_pred
    0U,	// BXr9_CALL
    1073741900U,	// Bcc
    1476427854U,	// CDP
    1613758546U,	// CDP2
    88U,	// CLREX
    939524190U,	// CLZ
    939524194U,	// CMNzri
    939524194U,	// CMNzrr
    536871010U,	// CMNzrsi
    671088738U,	// CMNzrsr
    939524198U,	// CMPri
    939524198U,	// CMPrr
    536871014U,	// CMPrsi
    671088742U,	// CMPrsr
    0U,	// CONSTPOOL_ENTRY
    1209008234U,	// CPS1p
    1744896111U,	// CPS2p
    1744896111U,	// CPS3p
    1073741939U,	// DBG
    1879048311U,	// DMB
    1879048316U,	// DSB
    134217857U,	// EORri
    134217857U,	// EORrr
    268435585U,	// EORrsi
    402653313U,	// EORrsr
    943816837U,	// FCONSTD
    944865413U,	// FCONSTS
    1348468874U,	// FMSTAT
    1879048335U,	// ISB
    0U,	// Int_eh_sjlj_dispatchsetup
    0U,	// Int_eh_sjlj_longjmp
    0U,	// Int_eh_sjlj_setjmp
    0U,	// Int_eh_sjlj_setjmp_nofp
    2020737172U,	// LDC2L_OFFSET
    2021654676U,	// LDC2L_OPTION
    2020769940U,	// LDC2L_POST
    2020737172U,	// LDC2L_PRE
    2020737180U,	// LDC2_OFFSET
    2021654684U,	// LDC2_OPTION
    2020737180U,	// LDC2_POST
    2020737180U,	// LDC2_PRE
    814842019U,	// LDCL_OFFSET
    680722595U,	// LDCL_OPTION
    680624291U,	// LDCL_POST
    814842019U,	// LDCL_PRE
    814842024U,	// LDC_OFFSET
    680722600U,	// LDC_OPTION
    814842024U,	// LDC_POST
    814842024U,	// LDC_PRE
    1073741996U,	// LDMDA
    939753644U,	// LDMDA_UPD
    1073742002U,	// LDMDB
    939753650U,	// LDMDB_UPD
    1073742008U,	// LDMIA
    0U,	// LDMIA_RET
    939753656U,	// LDMIA_UPD
    1073742012U,	// LDMIB
    939753660U,	// LDMIB_UPD
    805306562U,	// LDRBT_POST_IMM
    805306562U,	// LDRBT_POST_REG
    805306568U,	// LDRB_POST_IMM
    805306568U,	// LDRB_POST_REG
    805306568U,	// LDRB_PRE
    536871112U,	// LDRBi12
    671088840U,	// LDRBrs
    805306573U,	// LDRD
    1476395213U,	// LDRD_POST
    1476395213U,	// LDRD_PRE
    939524306U,	// LDREX
    939524312U,	// LDREXB
    536871135U,	// LDREXD
    939524326U,	// LDREXH
    671088877U,	// LDRH
    671088882U,	// LDRHTi
    805306610U,	// LDRHTr
    805306605U,	// LDRH_POST
    805306605U,	// LDRH_PRE
    671088888U,	// LDRSB
    671088894U,	// LDRSBTi
    805306622U,	// LDRSBTr
    805306616U,	// LDRSB_POST
    805306616U,	// LDRSB_PRE
    671088901U,	// LDRSH
    671088907U,	// LDRSHTi
    805306635U,	// LDRSHTr
    805306629U,	// LDRSH_POST
    805306629U,	// LDRSH_PRE
    805306642U,	// LDRT_POST_IMM
    805306642U,	// LDRT_POST_REG
    805306647U,	// LDR_POST_IMM
    805306647U,	// LDR_POST_REG
    805306647U,	// LDR_PRE
    536871191U,	// LDRcp
    536871191U,	// LDRi12
    671088919U,	// LDRrs
    0U,	// LEApcrel
    0U,	// LEApcrelJT
    1476428059U,	// MCR
    1621360927U,	// MCR2
    805339429U,	// MCRR
    1621393706U,	// MCRR2
    268435761U,	// MLA
    0U,	// MLAv5
    671088949U,	// MLS
    0U,	// MOVCCi
    0U,	// MOVCCi16
    0U,	// MOVCCi32imm
    0U,	// MOVCCr
    0U,	// MOVCCsi
    0U,	// MOVCCsr
    1353711929U,	// MOVPCLR
    0U,	// MOVPCRX
    536871229U,	// MOVTi16
    0U,	// MOVTi16_ga_pcrel
    0U,	// MOV_ga_dyn
    0U,	// MOV_ga_pcrel
    0U,	// MOV_ga_pcrel_ldr
    2147483961U,	// MOVi
    939524418U,	// MOVi16
    0U,	// MOVi16_ga_pcrel
    0U,	// MOVi32imm
    2147483961U,	// MOVr
    2147483961U,	// MOVr_TC
    134218041U,	// MOVsi
    268435769U,	// MOVsr
    0U,	// MOVsra_flag
    0U,	// MOVsrl_flag
    1476723015U,	// MRC
    2281701707U,	// MRC2
    805339473U,	// MRRC
    1621393750U,	// MRRC2
    1073742173U,	// MRS
    1073742173U,	// MRSsys
    939884897U,	// MSR
    939884897U,	// MSRi
    134218085U,	// MUL
    0U,	// MULv5
    0U,	// MVNCCi
    2147484009U,	// MVNi
    2147484009U,	// MVNr
    134218089U,	// MVNsi
    268435817U,	// MVNsr
    1343226221U,	// NOP
    134218097U,	// ORRri
    134218097U,	// ORRrr
    268435825U,	// ORRrsi
    402653553U,	// ORRrsr
    0U,	// PICADD
    0U,	// PICLDR
    0U,	// PICLDRB
    0U,	// PICLDRH
    0U,	// PICLDRSB
    0U,	// PICLDRSH
    0U,	// PICSTR
    0U,	// PICSTRB
    0U,	// PICSTRH
    671089013U,	// PKHBT
    671089019U,	// PKHTB
    2415919489U,	// PLDWi12
    2550137217U,	// PLDWrs
    2415919495U,	// PLDi12
    2550137223U,	// PLDrs
    2415919500U,	// PLIi12
    2550137228U,	// PLIrs
    536871313U,	// QADD
    536871318U,	// QADD16
    536871325U,	// QADD8
    536871331U,	// QASX
    536871336U,	// QDADD
    536871342U,	// QDSUB
    536871348U,	// QSAX
    536871353U,	// QSUB
    536871358U,	// QSUB16
    536871365U,	// QSUB8
    939524555U,	// RBIT
    939524560U,	// REV
    939524564U,	// REV16
    939524570U,	// REVSH
    1209008608U,	// RFEDA
    1220542944U,	// RFEDA_UPD
    1209008615U,	// RFEDB
    1220542951U,	// RFEDB_UPD
    1209008622U,	// RFEIA
    1220542958U,	// RFEIA_UPD
    1209008629U,	// RFEIB
    1220542965U,	// RFEIB_UPD
    0U,	// RRX
    0U,	// RSBSri
    0U,	// RSBSrr
    0U,	// RSBSrsi
    0U,	// RSBSrsr
    134218236U,	// RSBri
    134218236U,	// RSBrr
    268435964U,	// RSBrsi
    402653692U,	// RSBrsr
    0U,	// RSCSri
    0U,	// RSCSrsi
    0U,	// RSCSrsr
    134218240U,	// RSCri
    134218240U,	// RSCrr
    268435968U,	// RSCrsi
    402653696U,	// RSCrsr
    536871428U,	// SADD16
    536871435U,	// SADD8
    536871441U,	// SASX
    0U,	// SBCSri
    0U,	// SBCSrr
    0U,	// SBCSrsi
    0U,	// SBCSrsr
    134218262U,	// SBCri
    134218262U,	// SBCrr
    268435990U,	// SBCrsi
    402653718U,	// SBCrsr
    671089178U,	// SBFX
    536871455U,	// SEL
    2684355107U,	// SETEND
    1343226411U,	// SEV
    536871471U,	// SHADD16
    536871479U,	// SHADD8
    536871486U,	// SHASX
    536871492U,	// SHSAX
    536871498U,	// SHSUB16
    536871506U,	// SHSUB8
    1073742425U,	// SMC
    671089245U,	// SMLABB
    671089252U,	// SMLABT
    671089259U,	// SMLAD
    671089265U,	// SMLADX
    268436088U,	// SMLAL
    671089278U,	// SMLALBB
    671089286U,	// SMLALBT
    671089294U,	// SMLALD
    671089301U,	// SMLALDX
    671089309U,	// SMLALTB
    671089317U,	// SMLALTT
    0U,	// SMLALv5
    671089325U,	// SMLATB
    671089332U,	// SMLATT
    671089339U,	// SMLAWB
    671089346U,	// SMLAWT
    671089353U,	// SMLSD
    671089359U,	// SMLSDX
    671089366U,	// SMLSLD
    671089373U,	// SMLSLDX
    671089381U,	// SMMLA
    671089387U,	// SMMLAR
    671089394U,	// SMMLS
    671089400U,	// SMMLSR
    536871679U,	// SMMUL
    536871685U,	// SMMULR
    536871692U,	// SMUAD
    536871698U,	// SMUADX
    536871705U,	// SMULBB
    536871712U,	// SMULBT
    268436263U,	// SMULL
    0U,	// SMULLv5
    536871725U,	// SMULTB
    536871732U,	// SMULTT
    536871739U,	// SMULWB
    536871746U,	// SMULWT
    536871753U,	// SMUSD
    536871759U,	// SMUSDX
    1209008982U,	// SRSDA
    1209008993U,	// SRSDA_UPD
    1209009005U,	// SRSDB
    1209009016U,	// SRSDB_UPD
    1209009028U,	// SRSIA
    1209009039U,	// SRSIA_UPD
    1209009051U,	// SRSIB
    1209009062U,	// SRSIB_UPD
    671089586U,	// SSAT
    536871863U,	// SSAT16
    536871870U,	// SSAX
    536871875U,	// SSUB16
    536871882U,	// SSUB8
    2020738000U,	// STC2L_OFFSET
    2021655504U,	// STC2L_OPTION
    2020770768U,	// STC2L_POST
    2020738000U,	// STC2L_PRE
    2020738008U,	// STC2_OFFSET
    2021655512U,	// STC2_OPTION
    2020738008U,	// STC2_POST
    2020738008U,	// STC2_PRE
    814842847U,	// STCL_OFFSET
    680723423U,	// STCL_OPTION
    680625119U,	// STCL_POST
    814842847U,	// STCL_PRE
    814842852U,	// STC_OFFSET
    680723428U,	// STC_OPTION
    814842852U,	// STC_POST
    814842852U,	// STC_PRE
    1073742824U,	// STMDA
    939754472U,	// STMDA_UPD
    1073742830U,	// STMDB
    939754478U,	// STMDB_UPD
    1073742836U,	// STMIA
    939754484U,	// STMIA_UPD
    1073742840U,	// STMIB
    939754488U,	// STMIB_UPD
    805536766U,	// STRBT_POST_IMM
    805536766U,	// STRBT_POST_REG
    805536772U,	// STRB_POST_IMM
    805536772U,	// STRB_POST_REG
    671319044U,	// STRB_PRE_IMM
    805536772U,	// STRB_PRE_REG
    536871940U,	// STRBi12
    0U,	// STRBi_preidx
    0U,	// STRBr_preidx
    671089668U,	// STRBrs
    805307401U,	// STRD
    1476625417U,	// STRD_POST
    1476625417U,	// STRD_PRE
    536871950U,	// STREX
    536871956U,	// STREXB
    671089691U,	// STREXD
    536871970U,	// STREXH
    671089705U,	// STRH
    671319086U,	// STRHTi
    805536814U,	// STRHTr
    805536809U,	// STRH_POST
    805536809U,	// STRH_PRE
    0U,	// STRH_preidx
    805536820U,	// STRT_POST_IMM
    805536820U,	// STRT_POST_REG
    805536825U,	// STR_POST_IMM
    805536825U,	// STR_POST_REG
    671319097U,	// STR_PRE_IMM
    805536825U,	// STR_PRE_REG
    536871993U,	// STRi12
    0U,	// STRi_preidx
    0U,	// STRr_preidx
    671089721U,	// STRrs
    536871997U,	// SUBSri
    536871997U,	// SUBSrr
    671089725U,	// SUBSrsi
    805307453U,	// SUBSrsr
    134218818U,	// SUBri
    134218818U,	// SUBrr
    268436546U,	// SUBrsi
    402654274U,	// SUBrsr
    1073742918U,	// SVC
    536872010U,	// SWP
    536872014U,	// SWPB
    671089747U,	// SXTAB
    671089753U,	// SXTAB16
    671089761U,	// SXTAH
    536872039U,	// SXTB
    536872044U,	// SXTB16
    536872051U,	// SXTH
    0U,	// TAILJMPd
    0U,	// TAILJMPdND
    0U,	// TAILJMPr
    0U,	// TAILJMPrND
    0U,	// TCRETURNdi
    0U,	// TCRETURNdiND
    0U,	// TCRETURNri
    0U,	// TCRETURNriND
    939525240U,	// TEQri
    939525240U,	// TEQrr
    536872056U,	// TEQrsi
    671089784U,	// TEQrsr
    0U,	// TPsoft
    1148U,	// TRAP
    939525249U,	// TSTri
    939525249U,	// TSTrr
    536872065U,	// TSTrsi
    671089793U,	// TSTrsr
    536872069U,	// UADD16
    536872076U,	// UADD8
    536872082U,	// UASX
    671089815U,	// UBFX
    536872092U,	// UHADD16
    536872100U,	// UHADD8
    536872107U,	// UHASX
    536872113U,	// UHSAX
    536872119U,	// UHSUB16
    536872127U,	// UHSUB8
    671089862U,	// UMAAL
    0U,	// UMAALv5
    268436684U,	// UMLAL
    0U,	// UMLALv5
    268436690U,	// UMULL
    0U,	// UMULLv5
    536872152U,	// UQADD16
    536872160U,	// UQADD8
    536872167U,	// UQASX
    536872173U,	// UQSAX
    536872179U,	// UQSUB16
    536872187U,	// UQSUB8
    536872194U,	// USAD8
    671089928U,	// USADA8
    671089935U,	// USAT
    536872212U,	// USAT16
    536872219U,	// USAX
    536872224U,	// USUB16
    536872231U,	// USUB8
    671089965U,	// UXTAB
    671089971U,	// UXTAB16
    671089979U,	// UXTAH
    536872257U,	// UXTB
    536872262U,	// UXTB16
    536872269U,	// UXTH
    685114706U,	// VABALsv2i64
    686163282U,	// VABALsv4i32
    687211858U,	// VABALsv8i16
    688260434U,	// VABALuv2i64
    689309010U,	// VABALuv4i32
    690357586U,	// VABALuv8i16
    687211864U,	// VABAsv16i8
    685114712U,	// VABAsv2i32
    686163288U,	// VABAsv4i16
    685114712U,	// VABAsv4i32
    686163288U,	// VABAsv8i16
    687211864U,	// VABAsv8i8
    690357592U,	// VABAuv16i8
    688260440U,	// VABAuv2i32
    689309016U,	// VABAuv4i16
    688260440U,	// VABAuv4i32
    689309016U,	// VABAuv8i16
    690357592U,	// VABAuv8i8
    550733149U,	// VABDLsv2i64
    551781725U,	// VABDLsv4i32
    552830301U,	// VABDLsv8i16
    553878877U,	// VABDLuv2i64
    554927453U,	// VABDLuv4i32
    555976029U,	// VABDLuv8i16
    542213475U,	// VABDfd
    542213475U,	// VABDfq
    552830307U,	// VABDsv16i8
    550733155U,	// VABDsv2i32
    551781731U,	// VABDsv4i16
    550733155U,	// VABDsv4i32
    551781731U,	// VABDsv8i16
    552830307U,	// VABDsv8i8
    555976035U,	// VABDuv16i8
    553878883U,	// VABDuv2i32
    554927459U,	// VABDuv4i16
    553878883U,	// VABDuv4i32
    554927459U,	// VABDuv8i16
    555976035U,	// VABDuv8i8
    943818088U,	// VABSD
    944866664U,	// VABSS
    944866664U,	// VABSfd
    944866664U,	// VABSfq
    955483496U,	// VABSv16i8
    953386344U,	// VABSv2i32
    954434920U,	// VABSv4i16
    953386344U,	// VABSv4i32
    954434920U,	// VABSv8i16
    955483496U,	// VABSv8i8
    542213485U,	// VACGEd
    542213485U,	// VACGEq
    542213491U,	// VACGTd
    542213491U,	// VACGTq
    541164921U,	// VADDD
    557024638U,	// VADDHNv2i32
    558073214U,	// VADDHNv4i16
    559121790U,	// VADDHNv8i8
    550733189U,	// VADDLsv2i64
    551781765U,	// VADDLsv4i32
    552830341U,	// VADDLsv8i16
    553878917U,	// VADDLuv2i64
    554927493U,	// VADDLuv4i32
    555976069U,	// VADDLuv8i16
    542213497U,	// VADDS
    550733195U,	// VADDWsv2i64
    551781771U,	// VADDWsv4i32
    552830347U,	// VADDWsv8i16
    553878923U,	// VADDWuv2i64
    554927499U,	// VADDWuv4i32
    555976075U,	// VADDWuv8i16
    542213497U,	// VADDfd
    542213497U,	// VADDfq
    560170361U,	// VADDv16i8
    557024633U,	// VADDv1i64
    558073209U,	// VADDv2i32
    557024633U,	// VADDv2i64
    559121785U,	// VADDv4i16
    558073209U,	// VADDv4i32
    559121785U,	// VADDv8i16
    560170361U,	// VADDv8i8
    536872337U,	// VANDd
    536872337U,	// VANDq
    536872342U,	// VBICd
    558269846U,	// VBICiv2i32
    559318422U,	// VBICiv4i16
    558269846U,	// VBICiv4i32
    559318422U,	// VBICiv8i16
    536872342U,	// VBICq
    671090075U,	// VBIFd
    671090075U,	// VBIFq
    671090080U,	// VBITd
    671090080U,	// VBITq
    671090085U,	// VBSLd
    671090085U,	// VBSLq
    542213546U,	// VCEQfd
    542213546U,	// VCEQfq
    560170410U,	// VCEQv16i8
    558073258U,	// VCEQv2i32
    559121834U,	// VCEQv4i16
    558073258U,	// VCEQv4i32
    559121834U,	// VCEQv8i16
    560170410U,	// VCEQv8i8
    962823594U,	// VCEQzv16i8
    944866730U,	// VCEQzv2f32
    960726442U,	// VCEQzv2i32
    944866730U,	// VCEQzv4f32
    961775018U,	// VCEQzv4i16
    960726442U,	// VCEQzv4i32
    961775018U,	// VCEQzv8i16
    962823594U,	// VCEQzv8i8
    542213551U,	// VCGEfd
    542213551U,	// VCGEfq
    552830383U,	// VCGEsv16i8
    550733231U,	// VCGEsv2i32
    551781807U,	// VCGEsv4i16
    550733231U,	// VCGEsv4i32
    551781807U,	// VCGEsv8i16
    552830383U,	// VCGEsv8i8
    555976111U,	// VCGEuv16i8
    553878959U,	// VCGEuv2i32
    554927535U,	// VCGEuv4i16
    553878959U,	// VCGEuv4i32
    554927535U,	// VCGEuv8i16
    555976111U,	// VCGEuv8i8
    955483567U,	// VCGEzv16i8
    944866735U,	// VCGEzv2f32
    953386415U,	// VCGEzv2i32
    944866735U,	// VCGEzv4f32
    954434991U,	// VCGEzv4i16
    953386415U,	// VCGEzv4i32
    954434991U,	// VCGEzv8i16
    955483567U,	// VCGEzv8i8
    542213556U,	// VCGTfd
    542213556U,	// VCGTfq
    552830388U,	// VCGTsv16i8
    550733236U,	// VCGTsv2i32
    551781812U,	// VCGTsv4i16
    550733236U,	// VCGTsv4i32
    551781812U,	// VCGTsv8i16
    552830388U,	// VCGTsv8i8
    555976116U,	// VCGTuv16i8
    553878964U,	// VCGTuv2i32
    554927540U,	// VCGTuv4i16
    553878964U,	// VCGTuv4i32
    554927540U,	// VCGTuv8i16
    555976116U,	// VCGTuv8i8
    955483572U,	// VCGTzv16i8
    944866740U,	// VCGTzv2f32
    953386420U,	// VCGTzv2i32
    944866740U,	// VCGTzv4f32
    954434996U,	// VCGTzv4i16
    953386420U,	// VCGTzv4i32
    954434996U,	// VCGTzv8i16
    955483572U,	// VCGTzv8i8
    955483577U,	// VCLEzv16i8
    944866745U,	// VCLEzv2f32
    953386425U,	// VCLEzv2i32
    944866745U,	// VCLEzv4f32
    954435001U,	// VCLEzv4i16
    953386425U,	// VCLEzv4i32
    954435001U,	// VCLEzv8i16
    955483577U,	// VCLEzv8i8
    955483582U,	// VCLSv16i8
    953386430U,	// VCLSv2i32
    954435006U,	// VCLSv4i16
    953386430U,	// VCLSv4i32
    954435006U,	// VCLSv8i16
    955483582U,	// VCLSv8i8
    955483587U,	// VCLTzv16i8
    944866755U,	// VCLTzv2f32
    953386435U,	// VCLTzv2i32
    944866755U,	// VCLTzv4f32
    954435011U,	// VCLTzv4i16
    953386435U,	// VCLTzv4i32
    954435011U,	// VCLTzv8i16
    955483587U,	// VCLTzv8i8
    962823624U,	// VCLZv16i8
    960726472U,	// VCLZv2i32
    961775048U,	// VCLZv4i16
    960726472U,	// VCLZv4i32
    961775048U,	// VCLZv8i16
    962823624U,	// VCLZv8i8
    943818189U,	// VCMPD
    943818194U,	// VCMPED
    944866770U,	// VCMPES
    1078396370U,	// VCMPEZD
    1079444946U,	// VCMPEZS
    944866765U,	// VCMPS
    1078396365U,	// VCMPZD
    1079444941U,	// VCMPZS
    963741144U,	// VCNTd
    963741144U,	// VCNTq
    964691421U,	// VCVTBHS
    965739997U,	// VCVTBSH
    966788579U,	// VCVTDS
    967837155U,	// VCVTSD
    964691432U,	// VCVTTHS
    965740008U,	// VCVTTSH
    964691427U,	// VCVTf2h
    969377251U,	// VCVTf2sd
    969377251U,	// VCVTf2sq
    970425827U,	// VCVTf2ud
    970425827U,	// VCVTf2uq
    566330851U,	// VCVTf2xsd
    566330851U,	// VCVTf2xsq
    567379427U,	// VCVTf2xud
    567379427U,	// VCVTf2xuq
    965740003U,	// VCVTh2f
    971474403U,	// VCVTs2fd
    971474403U,	// VCVTs2fq
    972522979U,	// VCVTu2fd
    972522979U,	// VCVTu2fq
    568428003U,	// VCVTxs2fd
    568428003U,	// VCVTxs2fq
    569476579U,	// VCVTxu2fd
    569476579U,	// VCVTxu2fq
    541165038U,	// VDIVD
    542213614U,	// VDIVS
    973178355U,	// VDUP16d
    973178355U,	// VDUP16q
    974226931U,	// VDUP32d
    974226931U,	// VDUP32q
    963741171U,	// VDUP8d
    963741171U,	// VDUP8q
    570525171U,	// VDUPLN16d
    570525171U,	// VDUPLN16q
    571573747U,	// VDUPLN32d
    571573747U,	// VDUPLN32q
    561087987U,	// VDUPLN8d
    561087987U,	// VDUPLN8q
    0U,	// VDUPfdf
    0U,	// VDUPfqf
    536872440U,	// VEORd
    536872440U,	// VEORq
    704742909U,	// VEXTd16
    705791485U,	// VEXTd32
    695305725U,	// VEXTd8
    704742909U,	// VEXTq16
    705791485U,	// VEXTq32
    695305725U,	// VEXTq8
    571572357U,	// VGETLNi32
    551780485U,	// VGETLNs16
    552829061U,	// VGETLNs8
    554926213U,	// VGETLNu16
    555974789U,	// VGETLNu8
    552830466U,	// VHADDsv16i8
    550733314U,	// VHADDsv2i32
    551781890U,	// VHADDsv4i16
    550733314U,	// VHADDsv4i32
    551781890U,	// VHADDsv8i16
    552830466U,	// VHADDsv8i8
    555976194U,	// VHADDuv16i8
    553879042U,	// VHADDuv2i32
    554927618U,	// VHADDuv4i16
    553879042U,	// VHADDuv4i32
    554927618U,	// VHADDuv8i16
    555976194U,	// VHADDuv8i8
    552830472U,	// VHSUBsv16i8
    550733320U,	// VHSUBsv2i32
    551781896U,	// VHSUBsv4i16
    550733320U,	// VHSUBsv4i32
    551781896U,	// VHSUBsv8i16
    552830472U,	// VHSUBsv8i8
    555976200U,	// VHSUBuv16i8
    553879048U,	// VHSUBuv2i32
    554927624U,	// VHSUBuv4i16
    553879048U,	// VHSUBuv4i32
    554927624U,	// VHSUBuv8i16
    555976200U,	// VHSUBuv8i8
    572524046U,	// VLD1DUPd16
    840959502U,	// VLD1DUPd16_UPD
    573572622U,	// VLD1DUPd32
    842008078U,	// VLD1DUPd32_UPD
    574621198U,	// VLD1DUPd8
    843056654U,	// VLD1DUPd8_UPD
    706741774U,	// VLD1DUPq16
    0U,	// VLD1DUPq16Pseudo
    0U,	// VLD1DUPq16Pseudo_UPD
    1512048142U,	// VLD1DUPq16_UPD
    707790350U,	// VLD1DUPq32
    0U,	// VLD1DUPq32Pseudo
    0U,	// VLD1DUPq32Pseudo_UPD
    1513096718U,	// VLD1DUPq32_UPD
    708838926U,	// VLD1DUPq8
    0U,	// VLD1DUPq8Pseudo
    0U,	// VLD1DUPq8Pseudo_UPD
    1514145294U,	// VLD1DUPq8_UPD
    840959502U,	// VLD1LNd16
    2854225422U,	// VLD1LNd16_UPD
    842008078U,	// VLD1LNd32
    2855273998U,	// VLD1LNd32_UPD
    843056654U,	// VLD1LNd8
    2856322574U,	// VLD1LNd8_UPD
    0U,	// VLD1LNq16Pseudo
    0U,	// VLD1LNq16Pseudo_UPD
    0U,	// VLD1LNq32Pseudo
    0U,	// VLD1LNq32Pseudo_UPD
    0U,	// VLD1LNq8Pseudo
    0U,	// VLD1LNq8Pseudo_UPD
    572524046U,	// VLD1d16
    1512048142U,	// VLD1d16Q
    2988443150U,	// VLD1d16Q_UPD
    840959502U,	// VLD1d16T
    2854225422U,	// VLD1d16T_UPD
    840959502U,	// VLD1d16_UPD
    573572622U,	// VLD1d32
    1513096718U,	// VLD1d32Q
    2989491726U,	// VLD1d32Q_UPD
    842008078U,	// VLD1d32T
    2855273998U,	// VLD1d32T_UPD
    842008078U,	// VLD1d32_UPD
    575669774U,	// VLD1d64
    1515193870U,	// VLD1d64Q
    0U,	// VLD1d64QPseudo
    0U,	// VLD1d64QPseudo_UPD
    2991588878U,	// VLD1d64Q_UPD
    844105230U,	// VLD1d64T
    0U,	// VLD1d64TPseudo
    0U,	// VLD1d64TPseudo_UPD
    2857371150U,	// VLD1d64T_UPD
    844105230U,	// VLD1d64_UPD
    574621198U,	// VLD1d8
    1514145294U,	// VLD1d8Q
    2990540302U,	// VLD1d8Q_UPD
    843056654U,	// VLD1d8T
    2856322574U,	// VLD1d8T_UPD
    843056654U,	// VLD1d8_UPD
    706741774U,	// VLD1q16
    0U,	// VLD1q16Pseudo
    0U,	// VLD1q16Pseudo_UPD
    1512048142U,	// VLD1q16_UPD
    707790350U,	// VLD1q32
    0U,	// VLD1q32Pseudo
    0U,	// VLD1q32Pseudo_UPD
    1513096718U,	// VLD1q32_UPD
    709887502U,	// VLD1q64
    0U,	// VLD1q64Pseudo
    0U,	// VLD1q64Pseudo_UPD
    1515193870U,	// VLD1q64_UPD
    708838926U,	// VLD1q8
    0U,	// VLD1q8Pseudo
    0U,	// VLD1q8Pseudo_UPD
    1514145294U,	// VLD1q8_UPD
    706741779U,	// VLD2DUPd16
    0U,	// VLD2DUPd16Pseudo
    0U,	// VLD2DUPd16Pseudo_UPD
    1512048147U,	// VLD2DUPd16_UPD
    706741779U,	// VLD2DUPd16x2
    1512048147U,	// VLD2DUPd16x2_UPD
    707790355U,	// VLD2DUPd32
    0U,	// VLD2DUPd32Pseudo
    0U,	// VLD2DUPd32Pseudo_UPD
    1513096723U,	// VLD2DUPd32_UPD
    707790355U,	// VLD2DUPd32x2
    1513096723U,	// VLD2DUPd32x2_UPD
    708838931U,	// VLD2DUPd8
    0U,	// VLD2DUPd8Pseudo
    0U,	// VLD2DUPd8Pseudo_UPD
    1514145299U,	// VLD2DUPd8_UPD
    708838931U,	// VLD2DUPd8x2
    1514145299U,	// VLD2DUPd8x2_UPD
    2854225427U,	// VLD2LNd16
    0U,	// VLD2LNd16Pseudo
    0U,	// VLD2LNd16Pseudo_UPD
    3122660883U,	// VLD2LNd16_UPD
    2855274003U,	// VLD2LNd32
    0U,	// VLD2LNd32Pseudo
    0U,	// VLD2LNd32Pseudo_UPD
    3123709459U,	// VLD2LNd32_UPD
    2856322579U,	// VLD2LNd8
    0U,	// VLD2LNd8Pseudo
    0U,	// VLD2LNd8Pseudo_UPD
    3124758035U,	// VLD2LNd8_UPD
    2854225427U,	// VLD2LNq16
    0U,	// VLD2LNq16Pseudo
    0U,	// VLD2LNq16Pseudo_UPD
    3122660883U,	// VLD2LNq16_UPD
    2855274003U,	// VLD2LNq32
    0U,	// VLD2LNq32Pseudo
    0U,	// VLD2LNq32Pseudo_UPD
    3123709459U,	// VLD2LNq32_UPD
    706741779U,	// VLD2b16
    1512048147U,	// VLD2b16_UPD
    707790355U,	// VLD2b32
    1513096723U,	// VLD2b32_UPD
    708838931U,	// VLD2b8
    1514145299U,	// VLD2b8_UPD
    706741779U,	// VLD2d16
    0U,	// VLD2d16Pseudo
    0U,	// VLD2d16Pseudo_UPD
    1512048147U,	// VLD2d16_UPD
    707790355U,	// VLD2d32
    0U,	// VLD2d32Pseudo
    0U,	// VLD2d32Pseudo_UPD
    1513096723U,	// VLD2d32_UPD
    708838931U,	// VLD2d8
    0U,	// VLD2d8Pseudo
    0U,	// VLD2d8Pseudo_UPD
    1514145299U,	// VLD2d8_UPD
    1512048147U,	// VLD2q16
    0U,	// VLD2q16Pseudo
    0U,	// VLD2q16Pseudo_UPD
    2988443155U,	// VLD2q16_UPD
    1513096723U,	// VLD2q32
    0U,	// VLD2q32Pseudo
    0U,	// VLD2q32Pseudo_UPD
    2989491731U,	// VLD2q32_UPD
    1514145299U,	// VLD2q8
    0U,	// VLD2q8Pseudo
    0U,	// VLD2q8Pseudo_UPD
    2990540307U,	// VLD2q8_UPD
    840959512U,	// VLD3DUPd16
    0U,	// VLD3DUPd16Pseudo
    0U,	// VLD3DUPd16Pseudo_UPD
    2854225432U,	// VLD3DUPd16_UPD
    840959512U,	// VLD3DUPd16x2
    2854225432U,	// VLD3DUPd16x2_UPD
    842008088U,	// VLD3DUPd32
    0U,	// VLD3DUPd32Pseudo
    0U,	// VLD3DUPd32Pseudo_UPD
    2855274008U,	// VLD3DUPd32_UPD
    842008088U,	// VLD3DUPd32x2
    2855274008U,	// VLD3DUPd32x2_UPD
    843056664U,	// VLD3DUPd8
    0U,	// VLD3DUPd8Pseudo
    0U,	// VLD3DUPd8Pseudo_UPD
    2856322584U,	// VLD3DUPd8_UPD
    843056664U,	// VLD3DUPd8x2
    2856322584U,	// VLD3DUPd8x2_UPD
    3122660888U,	// VLD3LNd16
    0U,	// VLD3LNd16Pseudo
    0U,	// VLD3LNd16Pseudo_UPD
    3256878616U,	// VLD3LNd16_UPD
    3123709464U,	// VLD3LNd32
    0U,	// VLD3LNd32Pseudo
    0U,	// VLD3LNd32Pseudo_UPD
    3257927192U,	// VLD3LNd32_UPD
    3124758040U,	// VLD3LNd8
    0U,	// VLD3LNd8Pseudo
    0U,	// VLD3LNd8Pseudo_UPD
    3258975768U,	// VLD3LNd8_UPD
    3122660888U,	// VLD3LNq16
    0U,	// VLD3LNq16Pseudo
    0U,	// VLD3LNq16Pseudo_UPD
    3256878616U,	// VLD3LNq16_UPD
    3123709464U,	// VLD3LNq32
    0U,	// VLD3LNq32Pseudo
    0U,	// VLD3LNq32Pseudo_UPD
    3257927192U,	// VLD3LNq32_UPD
    840959512U,	// VLD3d16
    0U,	// VLD3d16Pseudo
    0U,	// VLD3d16Pseudo_UPD
    2854225432U,	// VLD3d16_UPD
    842008088U,	// VLD3d32
    0U,	// VLD3d32Pseudo
    0U,	// VLD3d32Pseudo_UPD
    2855274008U,	// VLD3d32_UPD
    843056664U,	// VLD3d8
    0U,	// VLD3d8Pseudo
    0U,	// VLD3d8Pseudo_UPD
    2856322584U,	// VLD3d8_UPD
    840959512U,	// VLD3q16
    0U,	// VLD3q16Pseudo_UPD
    2854225432U,	// VLD3q16_UPD
    0U,	// VLD3q16oddPseudo
    0U,	// VLD3q16oddPseudo_UPD
    842008088U,	// VLD3q32
    0U,	// VLD3q32Pseudo_UPD
    2855274008U,	// VLD3q32_UPD
    0U,	// VLD3q32oddPseudo
    0U,	// VLD3q32oddPseudo_UPD
    843056664U,	// VLD3q8
    0U,	// VLD3q8Pseudo_UPD
    2856322584U,	// VLD3q8_UPD
    0U,	// VLD3q8oddPseudo
    0U,	// VLD3q8oddPseudo_UPD
    1512048157U,	// VLD4DUPd16
    0U,	// VLD4DUPd16Pseudo
    0U,	// VLD4DUPd16Pseudo_UPD
    2988443165U,	// VLD4DUPd16_UPD
    1512048157U,	// VLD4DUPd16x2
    2988443165U,	// VLD4DUPd16x2_UPD
    1513096733U,	// VLD4DUPd32
    0U,	// VLD4DUPd32Pseudo
    0U,	// VLD4DUPd32Pseudo_UPD
    2989491741U,	// VLD4DUPd32_UPD
    1513096733U,	// VLD4DUPd32x2
    2989491741U,	// VLD4DUPd32x2_UPD
    1514145309U,	// VLD4DUPd8
    0U,	// VLD4DUPd8Pseudo
    0U,	// VLD4DUPd8Pseudo_UPD
    2990540317U,	// VLD4DUPd8_UPD
    1514145309U,	// VLD4DUPd8x2
    2990540317U,	// VLD4DUPd8x2_UPD
    3256878621U,	// VLD4LNd16
    0U,	// VLD4LNd16Pseudo
    0U,	// VLD4LNd16Pseudo_UPD
    3391096349U,	// VLD4LNd16_UPD
    3257927197U,	// VLD4LNd32
    0U,	// VLD4LNd32Pseudo
    0U,	// VLD4LNd32Pseudo_UPD
    3392144925U,	// VLD4LNd32_UPD
    3258975773U,	// VLD4LNd8
    0U,	// VLD4LNd8Pseudo
    0U,	// VLD4LNd8Pseudo_UPD
    3393193501U,	// VLD4LNd8_UPD
    3256878621U,	// VLD4LNq16
    0U,	// VLD4LNq16Pseudo
    0U,	// VLD4LNq16Pseudo_UPD
    3391096349U,	// VLD4LNq16_UPD
    3257927197U,	// VLD4LNq32
    0U,	// VLD4LNq32Pseudo
    0U,	// VLD4LNq32Pseudo_UPD
    3392144925U,	// VLD4LNq32_UPD
    1512048157U,	// VLD4d16
    0U,	// VLD4d16Pseudo
    0U,	// VLD4d16Pseudo_UPD
    2988443165U,	// VLD4d16_UPD
    1513096733U,	// VLD4d32
    0U,	// VLD4d32Pseudo
    0U,	// VLD4d32Pseudo_UPD
    2989491741U,	// VLD4d32_UPD
    1514145309U,	// VLD4d8
    0U,	// VLD4d8Pseudo
    0U,	// VLD4d8Pseudo_UPD
    2990540317U,	// VLD4d8_UPD
    1512048157U,	// VLD4q16
    0U,	// VLD4q16Pseudo_UPD
    2988443165U,	// VLD4q16_UPD
    0U,	// VLD4q16oddPseudo
    0U,	// VLD4q16oddPseudo_UPD
    1513096733U,	// VLD4q32
    0U,	// VLD4q32Pseudo_UPD
    2989491741U,	// VLD4q32_UPD
    0U,	// VLD4q32oddPseudo
    0U,	// VLD4q32oddPseudo_UPD
    1514145309U,	// VLD4q8
    0U,	// VLD4q8Pseudo_UPD
    2990540317U,	// VLD4q8_UPD
    0U,	// VLD4q8oddPseudo
    0U,	// VLD4q8oddPseudo_UPD
    939755042U,	// VLDMDDB_UPD
    1073743401U,	// VLDMDIA
    939755049U,	// VLDMDIA_UPD
    0U,	// VLDMQIA
    939755042U,	// VLDMSDB_UPD
    1073743401U,	// VLDMSIA
    939755049U,	// VLDMSIA_UPD
    577242672U,	// VLDRD
    571573808U,	// VLDRS
    542213685U,	// VMAXfd
    542213685U,	// VMAXfq
    552830517U,	// VMAXsv16i8
    550733365U,	// VMAXsv2i32
    551781941U,	// VMAXsv4i16
    550733365U,	// VMAXsv4i32
    551781941U,	// VMAXsv8i16
    552830517U,	// VMAXsv8i8
    555976245U,	// VMAXuv16i8
    553879093U,	// VMAXuv2i32
    554927669U,	// VMAXuv4i16
    553879093U,	// VMAXuv4i32
    554927669U,	// VMAXuv8i16
    555976245U,	// VMAXuv8i8
    542213690U,	// VMINfd
    542213690U,	// VMINfq
    552830522U,	// VMINsv16i8
    550733370U,	// VMINsv2i32
    551781946U,	// VMINsv4i16
    550733370U,	// VMINsv4i32
    551781946U,	// VMINsv8i16
    552830522U,	// VMINsv8i8
    555976250U,	// VMINuv16i8
    553879098U,	// VMINuv2i32
    554927674U,	// VMINuv4i16
    553879098U,	// VMINuv4i32
    554927674U,	// VMINuv8i16
    555976250U,	// VMINuv8i8
    675382847U,	// VMLAD
    819332676U,	// VMLALslsv2i32
    820381252U,	// VMLALslsv4i16
    822478404U,	// VMLALsluv2i32
    823526980U,	// VMLALsluv4i16
    685114948U,	// VMLALsv2i64
    686163524U,	// VMLALsv4i32
    687212100U,	// VMLALsv8i16
    688260676U,	// VMLALuv2i64
    689309252U,	// VMLALuv4i32
    690357828U,	// VMLALuv8i16
    676431423U,	// VMLAS
    676431423U,	// VMLAfd
    676431423U,	// VMLAfq
    810649151U,	// VMLAslfd
    810649151U,	// VMLAslfq
    826672703U,	// VMLAslv2i32
    827721279U,	// VMLAslv4i16
    826672703U,	// VMLAslv4i32
    827721279U,	// VMLAslv8i16
    694552127U,	// VMLAv16i8
    692454975U,	// VMLAv2i32
    693503551U,	// VMLAv4i16
    692454975U,	// VMLAv4i32
    693503551U,	// VMLAv8i16
    694552127U,	// VMLAv8i8
    675382858U,	// VMLSD
    819332687U,	// VMLSLslsv2i32
    820381263U,	// VMLSLslsv4i16
    822478415U,	// VMLSLsluv2i32
    823526991U,	// VMLSLsluv4i16
    685114959U,	// VMLSLsv2i64
    686163535U,	// VMLSLsv4i32
    687212111U,	// VMLSLsv8i16
    688260687U,	// VMLSLuv2i64
    689309263U,	// VMLSLuv4i32
    690357839U,	// VMLSLuv8i16
    676431434U,	// VMLSS
    676431434U,	// VMLSfd
    676431434U,	// VMLSfq
    810649162U,	// VMLSslfd
    810649162U,	// VMLSslfq
    826672714U,	// VMLSslv2i32
    827721290U,	// VMLSslv4i16
    826672714U,	// VMLSslv4i32
    827721290U,	// VMLSslv8i16
    694552138U,	// VMLSv16i8
    692454986U,	// VMLSv2i32
    693503562U,	// VMLSv4i16
    692454986U,	// VMLSv4i32
    693503562U,	// VMLSv8i16
    694552138U,	// VMLSv8i8
    943816837U,	// VMOVD
    536871045U,	// VMOVDRR
    0U,	// VMOVDcc
    953386581U,	// VMOVLsv2i64
    954435157U,	// VMOVLsv4i32
    955483733U,	// VMOVLsv8i16
    956532309U,	// VMOVLuv2i64
    957580885U,	// VMOVLuv4i32
    958629461U,	// VMOVLuv8i16
    959678043U,	// VMOVNv2i32
    960726619U,	// VMOVNv4i16
    961775195U,	// VMOVNv8i8
    0U,	// VMOVQQ
    0U,	// VMOVQQQQ
    536871045U,	// VMOVRRD
    671088773U,	// VMOVRRS
    939524229U,	// VMOVRS
    944865413U,	// VMOVS
    939524229U,	// VMOVSR
    671088773U,	// VMOVSRR
    0U,	// VMOVScc
    963018885U,	// VMOVv16i8
    959873157U,	// VMOVv1i64
    960921733U,	// VMOVv2i32
    959873157U,	// VMOVv2i64
    961970309U,	// VMOVv4i16
    960921733U,	// VMOVv4i32
    961970309U,	// VMOVv8i16
    963018885U,	// VMOVv8i8
    1073741962U,	// VMRS
    1073741962U,	// VMRS_FPEXC
    1073741962U,	// VMRS_FPSID
    1114637921U,	// VMSR
    1115686497U,	// VMSR_FPEXC
    1116735073U,	// VMSR_FPSID
    541165158U,	// VMULD
    580912747U,	// VMULLp
    684951147U,	// VMULLslsv2i32
    685999723U,	// VMULLslsv4i16
    688096875U,	// VMULLsluv2i32
    689145451U,	// VMULLsluv4i16
    550733419U,	// VMULLsv2i64
    551781995U,	// VMULLsv4i32
    552830571U,	// VMULLsv8i16
    553879147U,	// VMULLuv2i64
    554927723U,	// VMULLuv4i32
    555976299U,	// VMULLuv8i16
    542213734U,	// VMULS
    542213734U,	// VMULfd
    542213734U,	// VMULfq
    580912742U,	// VMULpd
    580912742U,	// VMULpq
    676431462U,	// VMULslfd
    676431462U,	// VMULslfq
    692291174U,	// VMULslv2i32
    693339750U,	// VMULslv4i16
    692291174U,	// VMULslv4i32
    693339750U,	// VMULslv8i16
    560170598U,	// VMULv16i8
    558073446U,	// VMULv2i32
    559122022U,	// VMULv4i16
    558073446U,	// VMULv4i32
    559122022U,	// VMULv8i16
    560170598U,	// VMULv8i8
    939525745U,	// VMVNd
    939525745U,	// VMVNq
    960923249U,	// VMVNv2i32
    961971825U,	// VMVNv4i16
    960923249U,	// VMVNv4i32
    961971825U,	// VMVNv8i16
    943818358U,	// VNEGD
    944866934U,	// VNEGS
    944866934U,	// VNEGf32q
    944866934U,	// VNEGfd
    954435190U,	// VNEGs16d
    954435190U,	// VNEGs16q
    953386614U,	// VNEGs32d
    953386614U,	// VNEGs32q
    955483766U,	// VNEGs8d
    955483766U,	// VNEGs8q
    675382907U,	// VNMLAD
    676431483U,	// VNMLAS
    675382913U,	// VNMLSD
    676431489U,	// VNMLSS
    541165191U,	// VNMULD
    542213767U,	// VNMULS
    536872589U,	// VORNd
    536872589U,	// VORNq
    536872594U,	// VORRd
    558270098U,	// VORRiv2i32
    559318674U,	// VORRiv4i16
    558270098U,	// VORRiv4i32
    559318674U,	// VORRiv8i16
    536872594U,	// VORRq
    552994455U,	// VPADALsv16i8
    550897303U,	// VPADALsv2i32
    551945879U,	// VPADALsv4i16
    550897303U,	// VPADALsv4i32
    551945879U,	// VPADALsv8i16
    552994455U,	// VPADALsv8i8
    556140183U,	// VPADALuv16i8
    554043031U,	// VPADALuv2i32
    555091607U,	// VPADALuv4i16
    554043031U,	// VPADALuv4i32
    555091607U,	// VPADALuv8i16
    556140183U,	// VPADALuv8i8
    955483806U,	// VPADDLsv16i8
    953386654U,	// VPADDLsv2i32
    954435230U,	// VPADDLsv4i16
    953386654U,	// VPADDLsv4i32
    954435230U,	// VPADDLsv8i16
    955483806U,	// VPADDLsv8i8
    958629534U,	// VPADDLuv16i8
    956532382U,	// VPADDLuv2i32
    957580958U,	// VPADDLuv4i16
    956532382U,	// VPADDLuv4i32
    957580958U,	// VPADDLuv8i16
    958629534U,	// VPADDLuv8i8
    542213797U,	// VPADDf
    559122085U,	// VPADDi16
    558073509U,	// VPADDi32
    560170661U,	// VPADDi8
    542213803U,	// VPMAXf
    551782059U,	// VPMAXs16
    550733483U,	// VPMAXs32
    552830635U,	// VPMAXs8
    554927787U,	// VPMAXu16
    553879211U,	// VPMAXu32
    555976363U,	// VPMAXu8
    542213809U,	// VPMINf
    551782065U,	// VPMINs16
    550733489U,	// VPMINs32
    552830641U,	// VPMINs8
    554927793U,	// VPMINu16
    553879217U,	// VPMINu32
    555976369U,	// VPMINu8
    955483831U,	// VQABSv16i8
    953386679U,	// VQABSv2i32
    954435255U,	// VQABSv4i16
    953386679U,	// VQABSv4i32
    954435255U,	// VQABSv8i16
    955483831U,	// VQABSv8i8
    552830653U,	// VQADDsv16i8
    582190781U,	// VQADDsv1i64
    550733501U,	// VQADDsv2i32
    582190781U,	// VQADDsv2i64
    551782077U,	// VQADDsv4i16
    550733501U,	// VQADDsv4i32
    551782077U,	// VQADDsv8i16
    552830653U,	// VQADDsv8i8
    555976381U,	// VQADDuv16i8
    583239357U,	// VQADDuv1i64
    553879229U,	// VQADDuv2i32
    583239357U,	// VQADDuv2i64
    554927805U,	// VQADDuv4i16
    553879229U,	// VQADDuv4i32
    554927805U,	// VQADDuv8i16
    555976381U,	// VQADDuv8i8
    819332803U,	// VQDMLALslv2i32
    820381379U,	// VQDMLALslv4i16
    685115075U,	// VQDMLALv2i64
    686163651U,	// VQDMLALv4i32
    819332811U,	// VQDMLSLslv2i32
    820381387U,	// VQDMLSLslv4i16
    685115083U,	// VQDMLSLv2i64
    686163659U,	// VQDMLSLv4i32
    684951251U,	// VQDMULHslv2i32
    685999827U,	// VQDMULHslv4i16
    684951251U,	// VQDMULHslv4i32
    685999827U,	// VQDMULHslv8i16
    550733523U,	// VQDMULHv2i32
    551782099U,	// VQDMULHv4i16
    550733523U,	// VQDMULHv4i32
    551782099U,	// VQDMULHv8i16
    684951259U,	// VQDMULLslv2i32
    685999835U,	// VQDMULLslv4i16
    550733531U,	// VQDMULLv2i64
    551782107U,	// VQDMULLv4i32
    984844003U,	// VQMOVNsuv2i32
    953386723U,	// VQMOVNsuv4i16
    954435299U,	// VQMOVNsuv8i8
    984844011U,	// VQMOVNsv2i32
    953386731U,	// VQMOVNsv4i16
    954435307U,	// VQMOVNsv8i8
    985892587U,	// VQMOVNuv2i32
    956532459U,	// VQMOVNuv4i16
    957581035U,	// VQMOVNuv8i8
    955483890U,	// VQNEGv16i8
    953386738U,	// VQNEGv2i32
    954435314U,	// VQNEGv4i16
    953386738U,	// VQNEGv4i32
    954435314U,	// VQNEGv8i16
    955483890U,	// VQNEGv8i8
    684951288U,	// VQRDMULHslv2i32
    685999864U,	// VQRDMULHslv4i16
    684951288U,	// VQRDMULHslv4i32
    685999864U,	// VQRDMULHslv8i16
    550733560U,	// VQRDMULHv2i32
    551782136U,	// VQRDMULHv4i16
    550733560U,	// VQRDMULHv4i32
    551782136U,	// VQRDMULHv8i16
    552830721U,	// VQRSHLsv16i8
    582190849U,	// VQRSHLsv1i64
    550733569U,	// VQRSHLsv2i32
    582190849U,	// VQRSHLsv2i64
    551782145U,	// VQRSHLsv4i16
    550733569U,	// VQRSHLsv4i32
    551782145U,	// VQRSHLsv8i16
    552830721U,	// VQRSHLsv8i8
    555976449U,	// VQRSHLuv16i8
    583239425U,	// VQRSHLuv1i64
    553879297U,	// VQRSHLuv2i32
    583239425U,	// VQRSHLuv2i64
    554927873U,	// VQRSHLuv4i16
    553879297U,	// VQRSHLuv4i32
    554927873U,	// VQRSHLuv8i16
    555976449U,	// VQRSHLuv8i8
    582190856U,	// VQRSHRNsv2i32
    550733576U,	// VQRSHRNsv4i16
    551782152U,	// VQRSHRNsv8i8
    583239432U,	// VQRSHRNuv2i32
    553879304U,	// VQRSHRNuv4i16
    554927880U,	// VQRSHRNuv8i8
    582190864U,	// VQRSHRUNv2i32
    550733584U,	// VQRSHRUNv4i16
    551782160U,	// VQRSHRUNv8i8
    552830745U,	// VQSHLsiv16i8
    582190873U,	// VQSHLsiv1i64
    550733593U,	// VQSHLsiv2i32
    582190873U,	// VQSHLsiv2i64
    551782169U,	// VQSHLsiv4i16
    550733593U,	// VQSHLsiv4i32
    551782169U,	// VQSHLsiv8i16
    552830745U,	// VQSHLsiv8i8
    552830751U,	// VQSHLsuv16i8
    582190879U,	// VQSHLsuv1i64
    550733599U,	// VQSHLsuv2i32
    582190879U,	// VQSHLsuv2i64
    551782175U,	// VQSHLsuv4i16
    550733599U,	// VQSHLsuv4i32
    551782175U,	// VQSHLsuv8i16
    552830751U,	// VQSHLsuv8i8
    552830745U,	// VQSHLsv16i8
    582190873U,	// VQSHLsv1i64
    550733593U,	// VQSHLsv2i32
    582190873U,	// VQSHLsv2i64
    551782169U,	// VQSHLsv4i16
    550733593U,	// VQSHLsv4i32
    551782169U,	// VQSHLsv8i16
    552830745U,	// VQSHLsv8i8
    555976473U,	// VQSHLuiv16i8
    583239449U,	// VQSHLuiv1i64
    553879321U,	// VQSHLuiv2i32
    583239449U,	// VQSHLuiv2i64
    554927897U,	// VQSHLuiv4i16
    553879321U,	// VQSHLuiv4i32
    554927897U,	// VQSHLuiv8i16
    555976473U,	// VQSHLuiv8i8
    555976473U,	// VQSHLuv16i8
    583239449U,	// VQSHLuv1i64
    553879321U,	// VQSHLuv2i32
    583239449U,	// VQSHLuv2i64
    554927897U,	// VQSHLuv4i16
    553879321U,	// VQSHLuv4i32
    554927897U,	// VQSHLuv8i16
    555976473U,	// VQSHLuv8i8
    582190886U,	// VQSHRNsv2i32
    550733606U,	// VQSHRNsv4i16
    551782182U,	// VQSHRNsv8i8
    583239462U,	// VQSHRNuv2i32
    553879334U,	// VQSHRNuv4i16
    554927910U,	// VQSHRNuv8i8
    582190893U,	// VQSHRUNv2i32
    550733613U,	// VQSHRUNv4i16
    551782189U,	// VQSHRUNv8i8
    552830773U,	// VQSUBsv16i8
    582190901U,	// VQSUBsv1i64
    550733621U,	// VQSUBsv2i32
    582190901U,	// VQSUBsv2i64
    551782197U,	// VQSUBsv4i16
    550733621U,	// VQSUBsv4i32
    551782197U,	// VQSUBsv8i16
    552830773U,	// VQSUBsv8i8
    555976501U,	// VQSUBuv16i8
    583239477U,	// VQSUBuv1i64
    553879349U,	// VQSUBuv2i32
    583239477U,	// VQSUBuv2i64
    554927925U,	// VQSUBuv4i16
    553879349U,	// VQSUBuv4i32
    554927925U,	// VQSUBuv8i16
    555976501U,	// VQSUBuv8i8
    557025083U,	// VRADDHNv2i32
    558073659U,	// VRADDHNv4i16
    559122235U,	// VRADDHNv8i8
    956532547U,	// VRECPEd
    944867139U,	// VRECPEfd
    944867139U,	// VRECPEfq
    956532547U,	// VRECPEq
    542213962U,	// VRECPSfd
    542213962U,	// VRECPSfq
    963741521U,	// VREV16d8
    963741521U,	// VREV16q8
    973178712U,	// VREV32d16
    963741528U,	// VREV32d8
    973178712U,	// VREV32q16
    963741528U,	// VREV32q8
    973178719U,	// VREV64d16
    974227295U,	// VREV64d32
    963741535U,	// VREV64d8
    973178719U,	// VREV64q16
    974227295U,	// VREV64q32
    963741535U,	// VREV64q8
    552830822U,	// VRHADDsv16i8
    550733670U,	// VRHADDsv2i32
    551782246U,	// VRHADDsv4i16
    550733670U,	// VRHADDsv4i32
    551782246U,	// VRHADDsv8i16
    552830822U,	// VRHADDsv8i8
    555976550U,	// VRHADDuv16i8
    553879398U,	// VRHADDuv2i32
    554927974U,	// VRHADDuv4i16
    553879398U,	// VRHADDuv4i32
    554927974U,	// VRHADDuv8i16
    555976550U,	// VRHADDuv8i8
    552830829U,	// VRSHLsv16i8
    582190957U,	// VRSHLsv1i64
    550733677U,	// VRSHLsv2i32
    582190957U,	// VRSHLsv2i64
    551782253U,	// VRSHLsv4i16
    550733677U,	// VRSHLsv4i32
    551782253U,	// VRSHLsv8i16
    552830829U,	// VRSHLsv8i8
    555976557U,	// VRSHLuv16i8
    583239533U,	// VRSHLuv1i64
    553879405U,	// VRSHLuv2i32
    583239533U,	// VRSHLuv2i64
    554927981U,	// VRSHLuv4i16
    553879405U,	// VRSHLuv4i32
    554927981U,	// VRSHLuv8i16
    555976557U,	// VRSHLuv8i8
    557025139U,	// VRSHRNv2i32
    558073715U,	// VRSHRNv4i16
    559122291U,	// VRSHRNv8i8
    552830842U,	// VRSHRsv16i8
    582190970U,	// VRSHRsv1i64
    550733690U,	// VRSHRsv2i32
    582190970U,	// VRSHRsv2i64
    551782266U,	// VRSHRsv4i16
    550733690U,	// VRSHRsv4i32
    551782266U,	// VRSHRsv8i16
    552830842U,	// VRSHRsv8i8
    555976570U,	// VRSHRuv16i8
    583239546U,	// VRSHRuv1i64
    553879418U,	// VRSHRuv2i32
    583239546U,	// VRSHRuv2i64
    554927994U,	// VRSHRuv4i16
    553879418U,	// VRSHRuv4i32
    554927994U,	// VRSHRuv8i16
    555976570U,	// VRSHRuv8i8
    956532608U,	// VRSQRTEd
    944867200U,	// VRSQRTEfd
    944867200U,	// VRSQRTEfq
    956532608U,	// VRSQRTEq
    542214024U,	// VRSQRTSfd
    542214024U,	// VRSQRTSfq
    687212432U,	// VRSRAsv16i8
    716572560U,	// VRSRAsv1i64
    685115280U,	// VRSRAsv2i32
    716572560U,	// VRSRAsv2i64
    686163856U,	// VRSRAsv4i16
    685115280U,	// VRSRAsv4i32
    686163856U,	// VRSRAsv8i16
    687212432U,	// VRSRAsv8i8
    690358160U,	// VRSRAuv16i8
    717621136U,	// VRSRAuv1i64
    688261008U,	// VRSRAuv2i32
    717621136U,	// VRSRAuv2i64
    689309584U,	// VRSRAuv4i16
    688261008U,	// VRSRAuv4i32
    689309584U,	// VRSRAuv8i16
    690358160U,	// VRSRAuv8i8
    557025174U,	// VRSUBHNv2i32
    558073750U,	// VRSUBHNv4i16
    559122326U,	// VRSUBHNv8i8
    705200261U,	// VSETLNi16
    706248837U,	// VSETLNi32
    695763077U,	// VSETLNi8
    559122334U,	// VSHLLi16
    558073758U,	// VSHLLi32
    560170910U,	// VSHLLi8
    550733726U,	// VSHLLsv2i64
    551782302U,	// VSHLLsv4i32
    552830878U,	// VSHLLsv8i16
    553879454U,	// VSHLLuv2i64
    554928030U,	// VSHLLuv4i32
    555976606U,	// VSHLLuv8i16
    560170916U,	// VSHLiv16i8
    557025188U,	// VSHLiv1i64
    558073764U,	// VSHLiv2i32
    557025188U,	// VSHLiv2i64
    559122340U,	// VSHLiv4i16
    558073764U,	// VSHLiv4i32
    559122340U,	// VSHLiv8i16
    560170916U,	// VSHLiv8i8
    552830884U,	// VSHLsv16i8
    582191012U,	// VSHLsv1i64
    550733732U,	// VSHLsv2i32
    582191012U,	// VSHLsv2i64
    551782308U,	// VSHLsv4i16
    550733732U,	// VSHLsv4i32
    551782308U,	// VSHLsv8i16
    552830884U,	// VSHLsv8i8
    555976612U,	// VSHLuv16i8
    583239588U,	// VSHLuv1i64
    553879460U,	// VSHLuv2i32
    583239588U,	// VSHLuv2i64
    554928036U,	// VSHLuv4i16
    553879460U,	// VSHLuv4i32
    554928036U,	// VSHLuv8i16
    555976612U,	// VSHLuv8i8
    557025193U,	// VSHRNv2i32
    558073769U,	// VSHRNv4i16
    559122345U,	// VSHRNv8i8
    552830895U,	// VSHRsv16i8
    582191023U,	// VSHRsv1i64
    550733743U,	// VSHRsv2i32
    582191023U,	// VSHRsv2i64
    551782319U,	// VSHRsv4i16
    550733743U,	// VSHRsv4i32
    551782319U,	// VSHRsv8i16
    552830895U,	// VSHRsv8i8
    555976623U,	// VSHRuv16i8
    583239599U,	// VSHRuv1i64
    553879471U,	// VSHRuv2i32
    583239599U,	// VSHRuv2i64
    554928047U,	// VSHRuv4i16
    553879471U,	// VSHRuv4i32
    554928047U,	// VSHRuv8i16
    555976623U,	// VSHRuv8i8
    584058339U,	// VSHTOD
    585106915U,	// VSHTOS
    989300195U,	// VSITOD
    971474403U,	// VSITOS
    695306164U,	// VSLIv16i8
    711329716U,	// VSLIv1i64
    705791924U,	// VSLIv2i32
    711329716U,	// VSLIv2i64
    704743348U,	// VSLIv4i16
    705791924U,	// VSLIv4i32
    704743348U,	// VSLIv8i16
    695306164U,	// VSLIv8i8
    586253795U,	// VSLTOD
    568428003U,	// VSLTOS
    943818681U,	// VSQRTD
    944867257U,	// VSQRTS
    687212479U,	// VSRAsv16i8
    716572607U,	// VSRAsv1i64
    685115327U,	// VSRAsv2i32
    716572607U,	// VSRAsv2i64
    686163903U,	// VSRAsv4i16
    685115327U,	// VSRAsv4i32
    686163903U,	// VSRAsv8i16
    687212479U,	// VSRAsv8i8
    690358207U,	// VSRAuv16i8
    717621183U,	// VSRAuv1i64
    688261055U,	// VSRAuv2i32
    717621183U,	// VSRAuv2i64
    689309631U,	// VSRAuv4i16
    688261055U,	// VSRAuv4i32
    689309631U,	// VSRAuv8i16
    690358207U,	// VSRAuv8i8
    695306180U,	// VSRIv16i8
    711329732U,	// VSRIv1i64
    705791940U,	// VSRIv2i32
    711329732U,	// VSRIv2i64
    704743364U,	// VSRIv4i16
    705791940U,	// VSRIv4i32
    704743364U,	// VSRIv8i16
    695306180U,	// VSRIv8i8
    707135433U,	// VST1LNd16
    1512638409U,	// VST1LNd16_UPD
    708184009U,	// VST1LNd32
    1513686985U,	// VST1LNd32_UPD
    709232585U,	// VST1LNd8
    1514735561U,	// VST1LNd8_UPD
    0U,	// VST1LNq16Pseudo
    0U,	// VST1LNq16Pseudo_UPD
    0U,	// VST1LNq32Pseudo
    0U,	// VST1LNq32Pseudo_UPD
    0U,	// VST1LNq8Pseudo
    0U,	// VST1LNq8Pseudo_UPD
    572917705U,	// VST1d16
    1512441801U,	// VST1d16Q
    2989033417U,	// VST1d16Q_UPD
    841353161U,	// VST1d16T
    2854815689U,	// VST1d16T_UPD
    841549769U,	// VST1d16_UPD
    573966281U,	// VST1d32
    1513490377U,	// VST1d32Q
    2990081993U,	// VST1d32Q_UPD
    842401737U,	// VST1d32T
    2855864265U,	// VST1d32T_UPD
    842598345U,	// VST1d32_UPD
    576063433U,	// VST1d64
    1515587529U,	// VST1d64Q
    0U,	// VST1d64QPseudo
    0U,	// VST1d64QPseudo_UPD
    2992179145U,	// VST1d64Q_UPD
    844498889U,	// VST1d64T
    0U,	// VST1d64TPseudo
    0U,	// VST1d64TPseudo_UPD
    2857961417U,	// VST1d64T_UPD
    844695497U,	// VST1d64_UPD
    575014857U,	// VST1d8
    1514538953U,	// VST1d8Q
    2991130569U,	// VST1d8Q_UPD
    843450313U,	// VST1d8T
    2856912841U,	// VST1d8T_UPD
    843646921U,	// VST1d8_UPD
    707135433U,	// VST1q16
    0U,	// VST1q16Pseudo
    0U,	// VST1q16Pseudo_UPD
    1512638409U,	// VST1q16_UPD
    708184009U,	// VST1q32
    0U,	// VST1q32Pseudo
    0U,	// VST1q32Pseudo_UPD
    1513686985U,	// VST1q32_UPD
    710281161U,	// VST1q64
    0U,	// VST1q64Pseudo
    0U,	// VST1q64Pseudo_UPD
    1515784137U,	// VST1q64_UPD
    709232585U,	// VST1q8
    0U,	// VST1q8Pseudo
    0U,	// VST1q8Pseudo_UPD
    1514735561U,	// VST1q8_UPD
    841353166U,	// VST2LNd16
    0U,	// VST2LNd16Pseudo
    0U,	// VST2LNd16Pseudo_UPD
    2854815694U,	// VST2LNd16_UPD
    842401742U,	// VST2LNd32
    0U,	// VST2LNd32Pseudo
    0U,	// VST2LNd32Pseudo_UPD
    2855864270U,	// VST2LNd32_UPD
    843450318U,	// VST2LNd8
    0U,	// VST2LNd8Pseudo
    0U,	// VST2LNd8Pseudo_UPD
    2856912846U,	// VST2LNd8_UPD
    841353166U,	// VST2LNq16
    0U,	// VST2LNq16Pseudo
    0U,	// VST2LNq16Pseudo_UPD
    2854815694U,	// VST2LNq16_UPD
    842401742U,	// VST2LNq32
    0U,	// VST2LNq32Pseudo
    0U,	// VST2LNq32Pseudo_UPD
    2855864270U,	// VST2LNq32_UPD
    707135438U,	// VST2b16
    1512638414U,	// VST2b16_UPD
    708184014U,	// VST2b32
    1513686990U,	// VST2b32_UPD
    709232590U,	// VST2b8
    1514735566U,	// VST2b8_UPD
    707135438U,	// VST2d16
    0U,	// VST2d16Pseudo
    0U,	// VST2d16Pseudo_UPD
    1512638414U,	// VST2d16_UPD
    708184014U,	// VST2d32
    0U,	// VST2d32Pseudo
    0U,	// VST2d32Pseudo_UPD
    1513686990U,	// VST2d32_UPD
    709232590U,	// VST2d8
    0U,	// VST2d8Pseudo
    0U,	// VST2d8Pseudo_UPD
    1514735566U,	// VST2d8_UPD
    1512441806U,	// VST2q16
    0U,	// VST2q16Pseudo
    0U,	// VST2q16Pseudo_UPD
    2989033422U,	// VST2q16_UPD
    1513490382U,	// VST2q32
    0U,	// VST2q32Pseudo
    0U,	// VST2q32Pseudo_UPD
    2990081998U,	// VST2q32_UPD
    1514538958U,	// VST2q8
    0U,	// VST2q8Pseudo
    0U,	// VST2q8Pseudo_UPD
    2991130574U,	// VST2q8_UPD
    1512441811U,	// VST3LNd16
    0U,	// VST3LNd16Pseudo
    0U,	// VST3LNd16Pseudo_UPD
    2989033427U,	// VST3LNd16_UPD
    1513490387U,	// VST3LNd32
    0U,	// VST3LNd32Pseudo
    0U,	// VST3LNd32Pseudo_UPD
    2990082003U,	// VST3LNd32_UPD
    1514538963U,	// VST3LNd8
    0U,	// VST3LNd8Pseudo
    0U,	// VST3LNd8Pseudo_UPD
    2991130579U,	// VST3LNd8_UPD
    1512441811U,	// VST3LNq16
    0U,	// VST3LNq16Pseudo
    0U,	// VST3LNq16Pseudo_UPD
    2989033427U,	// VST3LNq16_UPD
    1513490387U,	// VST3LNq32
    0U,	// VST3LNq32Pseudo
    0U,	// VST3LNq32Pseudo_UPD
    2990082003U,	// VST3LNq32_UPD
    841353171U,	// VST3d16
    0U,	// VST3d16Pseudo
    0U,	// VST3d16Pseudo_UPD
    2854815699U,	// VST3d16_UPD
    842401747U,	// VST3d32
    0U,	// VST3d32Pseudo
    0U,	// VST3d32Pseudo_UPD
    2855864275U,	// VST3d32_UPD
    843450323U,	// VST3d8
    0U,	// VST3d8Pseudo
    0U,	// VST3d8Pseudo_UPD
    2856912851U,	// VST3d8_UPD
    841353171U,	// VST3q16
    0U,	// VST3q16Pseudo_UPD
    2854815699U,	// VST3q16_UPD
    0U,	// VST3q16oddPseudo
    0U,	// VST3q16oddPseudo_UPD
    842401747U,	// VST3q32
    0U,	// VST3q32Pseudo_UPD
    2855864275U,	// VST3q32_UPD
    0U,	// VST3q32oddPseudo
    0U,	// VST3q32oddPseudo_UPD
    843450323U,	// VST3q8
    0U,	// VST3q8Pseudo_UPD
    2856912851U,	// VST3q8_UPD
    0U,	// VST3q8oddPseudo
    0U,	// VST3q8oddPseudo_UPD
    2854619096U,	// VST4LNd16
    0U,	// VST4LNd16Pseudo
    0U,	// VST4LNd16Pseudo_UPD
    3123251160U,	// VST4LNd16_UPD
    2855667672U,	// VST4LNd32
    0U,	// VST4LNd32Pseudo
    0U,	// VST4LNd32Pseudo_UPD
    3124299736U,	// VST4LNd32_UPD
    2856716248U,	// VST4LNd8
    0U,	// VST4LNd8Pseudo
    0U,	// VST4LNd8Pseudo_UPD
    3125348312U,	// VST4LNd8_UPD
    2854619096U,	// VST4LNq16
    0U,	// VST4LNq16Pseudo
    0U,	// VST4LNq16Pseudo_UPD
    3123251160U,	// VST4LNq16_UPD
    2855667672U,	// VST4LNq32
    0U,	// VST4LNq32Pseudo
    0U,	// VST4LNq32Pseudo_UPD
    3124299736U,	// VST4LNq32_UPD
    1512441816U,	// VST4d16
    0U,	// VST4d16Pseudo
    0U,	// VST4d16Pseudo_UPD
    2989033432U,	// VST4d16_UPD
    1513490392U,	// VST4d32
    0U,	// VST4d32Pseudo
    0U,	// VST4d32Pseudo_UPD
    2990082008U,	// VST4d32_UPD
    1514538968U,	// VST4d8
    0U,	// VST4d8Pseudo
    0U,	// VST4d8Pseudo_UPD
    2991130584U,	// VST4d8_UPD
    1512441816U,	// VST4q16
    0U,	// VST4q16Pseudo_UPD
    2989033432U,	// VST4q16_UPD
    0U,	// VST4q16oddPseudo
    0U,	// VST4q16oddPseudo_UPD
    1513490392U,	// VST4q32
    0U,	// VST4q32Pseudo_UPD
    2990082008U,	// VST4q32_UPD
    0U,	// VST4q32oddPseudo
    0U,	// VST4q32oddPseudo_UPD
    1514538968U,	// VST4q8
    0U,	// VST4q8Pseudo_UPD
    2991130584U,	// VST4q8_UPD
    0U,	// VST4q8oddPseudo
    0U,	// VST4q8oddPseudo_UPD
    939755485U,	// VSTMDDB_UPD
    1073743844U,	// VSTMDIA
    939755492U,	// VSTMDIA_UPD
    0U,	// VSTMQIA
    939755485U,	// VSTMSDB_UPD
    1073743844U,	// VSTMSIA
    939755492U,	// VSTMSIA_UPD
    577243115U,	// VSTRD
    571574251U,	// VSTRS
    541165552U,	// VSUBD
    557025269U,	// VSUBHNv2i32
    558073845U,	// VSUBHNv4i16
    559122421U,	// VSUBHNv8i8
    550733820U,	// VSUBLsv2i64
    551782396U,	// VSUBLsv4i32
    552830972U,	// VSUBLsv8i16
    553879548U,	// VSUBLuv2i64
    554928124U,	// VSUBLuv4i32
    555976700U,	// VSUBLuv8i16
    542214128U,	// VSUBS
    550733826U,	// VSUBWsv2i64
    551782402U,	// VSUBWsv4i32
    552830978U,	// VSUBWsv8i16
    553879554U,	// VSUBWuv2i64
    554928130U,	// VSUBWuv4i32
    555976706U,	// VSUBWuv8i16
    542214128U,	// VSUBfd
    542214128U,	// VSUBfq
    560170992U,	// VSUBv16i8
    557025264U,	// VSUBv1i64
    558073840U,	// VSUBv2i32
    557025264U,	// VSUBv2i64
    559122416U,	// VSUBv4i16
    558073840U,	// VSUBv4i32
    559122416U,	// VSUBv8i16
    560170992U,	// VSUBv8i8
    939526152U,	// VSWPd
    939526152U,	// VSWPq
    561612813U,	// VTBL1
    695830541U,	// VTBL2
    0U,	// VTBL2Pseudo
    830048269U,	// VTBL3
    0U,	// VTBL3Pseudo
    1501136909U,	// VTBL4
    0U,	// VTBL4Pseudo
    695830546U,	// VTBX1
    830048274U,	// VTBX2
    0U,	// VTBX2Pseudo
    1501136914U,	// VTBX3
    0U,	// VTBX3Pseudo
    2843314194U,	// VTBX4
    0U,	// VTBX4Pseudo
    587204067U,	// VTOSHD
    588252643U,	// VTOSHS
    992446487U,	// VTOSIRD
    969377815U,	// VTOSIRS
    992445923U,	// VTOSIZD
    969377251U,	// VTOSIZS
    589399523U,	// VTOSLD
    566330851U,	// VTOSLS
    590349795U,	// VTOUHD
    591398371U,	// VTOUHS
    995592215U,	// VTOUIRD
    970426391U,	// VTOUIRS
    995591651U,	// VTOUIZD
    970425827U,	// VTOUIZS
    592545251U,	// VTOULD
    567379427U,	// VTOULS
    704743453U,	// VTRNd16
    705792029U,	// VTRNd32
    695306269U,	// VTRNd8
    704743453U,	// VTRNq16
    705792029U,	// VTRNq32
    695306269U,	// VTRNq8
    561088546U,	// VTSTv16i8
    571574306U,	// VTSTv2i32
    570525730U,	// VTSTv4i16
    571574306U,	// VTSTv4i32
    570525730U,	// VTSTv8i16
    561088546U,	// VTSTv8i8
    593495523U,	// VUHTOD
    594544099U,	// VUHTOS
    998737379U,	// VUITOD
    972522979U,	// VUITOS
    595690979U,	// VULTOD
    569476579U,	// VULTOS
    704743463U,	// VUZPd16
    705792039U,	// VUZPd32
    695306279U,	// VUZPd8
    704743463U,	// VUZPq16
    705792039U,	// VUZPq32
    695306279U,	// VUZPq8
    704743468U,	// VZIPd16
    705792044U,	// VZIPd32
    695306284U,	// VZIPd8
    704743468U,	// VZIPq16
    705792044U,	// VZIPq32
    695306284U,	// VZIPq8
    1343227953U,	// WFE
    1343227957U,	// WFI
    1343227961U,	// YIELD
    0U,	// t2ADCSri
    0U,	// t2ADCSrr
    0U,	// t2ADCSrs
    134217739U,	// t2ADCri
    193986571U,	// t2ADCrr
    328204299U,	// t2ADCrs
    596639759U,	// t2ADDSri
    596639759U,	// t2ADDSrr
    730857487U,	// t2ADDSrs
    193986580U,	// t2ADDri
    536873023U,	// t2ADDri12
    193986580U,	// t2ADDrr
    328204308U,	// t2ADDrs
    999292952U,	// t2ADR
    134217756U,	// t2ANDri
    193986588U,	// t2ANDrr
    328204316U,	// t2ANDrs
    193988676U,	// t2ASRri
    193988676U,	// t2ASRrr
    1209010248U,	// t2B
    536870944U,	// t2BFC
    671088676U,	// t2BFI
    805306404U,	// t2BFI4p
    134217768U,	// t2BICri
    193986600U,	// t2BICrr
    328204328U,	// t2BICrs
    0U,	// t2BR_JT
    1073741893U,	// t2BXJ
    1133510732U,	// t2Bcc
    1613758546U,	// t2CDP2
    88U,	// t2CLREX
    939524190U,	// t2CLZ
    999293026U,	// t2CMNzri
    999293026U,	// t2CMNzrr
    596639842U,	// t2CMNzrs
    999293030U,	// t2CMPri
    999293030U,	// t2CMPrr
    596639846U,	// t2CMPrs
    1209008234U,	// t2CPS1p
    1804664943U,	// t2CPS2p
    1804664943U,	// t2CPS3p
    1073741939U,	// t2DBG
    1879048311U,	// t2DMB
    1879048316U,	// t2DSB
    134217857U,	// t2EORri
    193986689U,	// t2EORrr
    328204417U,	// t2EORrs
    2125U,	// t2ISB
    3489663057U,	// t2IT
    0U,	// t2Int_eh_sjlj_setjmp
    0U,	// t2Int_eh_sjlj_setjmp_nofp
    1133510834U,	// t2LDMDB
    999522482U,	// t2LDMDB_UPD
    1133512788U,	// t2LDMIA
    0U,	// t2LDMIA_RET
    999524436U,	// t2LDMIA_UPD
    536871106U,	// t2LDRBT
    671088840U,	// t2LDRB_POST
    671088840U,	// t2LDRB_PRE
    596639944U,	// t2LDRBi12
    536871112U,	// t2LDRBi8
    999293128U,	// t2LDRBpci
    730857672U,	// t2LDRBs
    805306573U,	// t2LDRD_POST
    805306573U,	// t2LDRD_PRE
    671088845U,	// t2LDRDi8
    939524306U,	// t2LDREX
    939524312U,	// t2LDREXB
    536871135U,	// t2LDREXD
    939524326U,	// t2LDREXH
    536871154U,	// t2LDRHT
    671088877U,	// t2LDRH_POST
    671088877U,	// t2LDRH_PRE
    596639981U,	// t2LDRHi12
    536871149U,	// t2LDRHi8
    999293165U,	// t2LDRHpci
    730857709U,	// t2LDRHs
    536871166U,	// t2LDRSBT
    671088888U,	// t2LDRSB_POST
    671088888U,	// t2LDRSB_PRE
    596639992U,	// t2LDRSBi12
    536871160U,	// t2LDRSBi8
    999293176U,	// t2LDRSBpci
    730857720U,	// t2LDRSBs
    536871179U,	// t2LDRSHT
    671088901U,	// t2LDRSH_POST
    671088901U,	// t2LDRSH_PRE
    596640005U,	// t2LDRSHi12
    536871173U,	// t2LDRSHi8
    999293189U,	// t2LDRSHpci
    730857733U,	// t2LDRSHs
    536871186U,	// t2LDRT
    671088919U,	// t2LDR_POST
    671088919U,	// t2LDR_PRE
    596640023U,	// t2LDRi12
    536871191U,	// t2LDRi8
    999293207U,	// t2LDRpci
    0U,	// t2LDRpci_pic
    730857751U,	// t2LDRs
    0U,	// t2LEApcrel
    0U,	// t2LEApcrelJT
    193988698U,	// t2LSLri
    193988698U,	// t2LSLrr
    193988702U,	// t2LSRri
    193988702U,	// t2LSRrr
    1621362786U,	// t2MCR
    1621360927U,	// t2MCR2
    1621395559U,	// t2MCRR
    1621393706U,	// t2MCRR2
    671088945U,	// t2MLA
    671088949U,	// t2MLS
    730859588U,	// t2MOVCCasr
    0U,	// t2MOVCCi
    536871234U,	// t2MOVCCi16
    0U,	// t2MOVCCi32imm
    730859610U,	// t2MOVCClsl
    730859614U,	// t2MOVCClsr
    0U,	// t2MOVCCr
    730859629U,	// t2MOVCCror
    536871229U,	// t2MOVTi16
    0U,	// t2MOVTi16_ga_pcrel
    0U,	// t2MOV_ga_dyn
    0U,	// t2MOV_ga_pcrel
    2207252793U,	// t2MOVi
    939524418U,	// t2MOVi16
    0U,	// t2MOVi16_ga_pcrel
    0U,	// t2MOVi32imm
    2207252793U,	// t2MOVr
    999295089U,	// t2MOVsra_flag
    999295094U,	// t2MOVsrl_flag
    2281703547U,	// t2MRC
    2281701707U,	// t2MRC2
    1621395584U,	// t2MRRC
    1621393750U,	// t2MRRC2
    1073742173U,	// t2MRS
    1073742173U,	// t2MRSsys
    939884897U,	// t2MSR
    536871269U,	// t2MUL
    596640105U,	// t2MVNCCi
    2147484009U,	// t2MVNi
    2207252841U,	// t2MVNr
    193986921U,	// t2MVNs
    1402995053U,	// t2NOP
    134219910U,	// t2ORNri
    134219910U,	// t2ORNrr
    268437638U,	// t2ORNrs
    134218097U,	// t2ORRri
    193986929U,	// t2ORRrr
    328204657U,	// t2ORRrs
    671089013U,	// t2PKHBT
    671089019U,	// t2PKHTB
    940181642U,	// t2PLDWi12
    940214410U,	// t2PLDWi8
    537593994U,	// t2PLDWs
    940181647U,	// t2PLDi12
    940214415U,	// t2PLDi8
    537593999U,	// t2PLDs
    940181651U,	// t2PLIi12
    940214419U,	// t2PLIi8
    537594003U,	// t2PLIs
    536871313U,	// t2QADD
    536871318U,	// t2QADD16
    536871325U,	// t2QADD8
    536871331U,	// t2QASX
    536871336U,	// t2QDADD
    536871342U,	// t2QDSUB
    536871348U,	// t2QSAX
    536871353U,	// t2QSUB
    536871358U,	// t2QSUB16
    536871365U,	// t2QSUB8
    939524555U,	// t2RBIT
    999293392U,	// t2REV
    999293396U,	// t2REV16
    999293402U,	// t2REVSH
    1073744023U,	// t2RFEDB
    1073744023U,	// t2RFEDBW
    1073744029U,	// t2RFEIA
    1073744029U,	// t2RFEIAW
    193988717U,	// t2RORri
    193988717U,	// t2RORrr
    2147485859U,	// t2RRX
    596641959U,	// t2RSBSri
    671090855U,	// t2RSBSrs
    193987068U,	// t2RSBri
    134218236U,	// t2RSBrr
    268435964U,	// t2RSBrs
    536871428U,	// t2SADD16
    536871435U,	// t2SADD8
    536871441U,	// t2SASX
    0U,	// t2SBCSri
    0U,	// t2SBCSrr
    0U,	// t2SBCSrs
    134218262U,	// t2SBCri
    193987094U,	// t2SBCrr
    328204822U,	// t2SBCrs
    671089178U,	// t2SBFX
    536873132U,	// t2SDIV
    536871455U,	// t2SEL
    1402995243U,	// t2SEV
    536871471U,	// t2SHADD16
    536871479U,	// t2SHADD8
    536871486U,	// t2SHASX
    536871492U,	// t2SHSAX
    536871498U,	// t2SHSUB16
    536871506U,	// t2SHSUB8
    1073742425U,	// t2SMC
    671089245U,	// t2SMLABB
    671089252U,	// t2SMLABT
    671089259U,	// t2SMLAD
    671089265U,	// t2SMLADX
    671089272U,	// t2SMLAL
    671089278U,	// t2SMLALBB
    671089286U,	// t2SMLALBT
    671089294U,	// t2SMLALD
    671089301U,	// t2SMLALDX
    671089309U,	// t2SMLALTB
    671089317U,	// t2SMLALTT
    671089325U,	// t2SMLATB
    671089332U,	// t2SMLATT
    671089339U,	// t2SMLAWB
    671089346U,	// t2SMLAWT
    671089353U,	// t2SMLSD
    671089359U,	// t2SMLSDX
    671089366U,	// t2SMLSLD
    671089373U,	// t2SMLSLDX
    671089381U,	// t2SMMLA
    671089387U,	// t2SMMLAR
    671089394U,	// t2SMMLS
    671089400U,	// t2SMMLSR
    536871679U,	// t2SMMUL
    536871685U,	// t2SMMULR
    536871692U,	// t2SMUAD
    536871698U,	// t2SMUADX
    536871705U,	// t2SMULBB
    536871712U,	// t2SMULBT
    671089447U,	// t2SMULL
    536871725U,	// t2SMULTB
    536871732U,	// t2SMULTT
    536871739U,	// t2SMULWB
    536871746U,	// t2SMULWT
    536871753U,	// t2SMUSD
    536871759U,	// t2SMUSDX
    1135610033U,	// t2SRSDB
    1136658609U,	// t2SRSDBW
    1135610039U,	// t2SRSIA
    1136658615U,	// t2SRSIAW
    671089586U,	// t2SSAT
    536871863U,	// t2SSAT16
    536871870U,	// t2SSAX
    536871875U,	// t2SSUB16
    536871882U,	// t2SSUB8
    1133511662U,	// t2STMDB
    999523310U,	// t2STMDB_UPD
    1133512893U,	// t2STMIA
    999524541U,	// t2STMIA_UPD
    536871934U,	// t2STRBT
    671319044U,	// t2STRB_POST
    671319044U,	// t2STRB_PRE
    596640772U,	// t2STRBi12
    536871940U,	// t2STRBi8
    730858500U,	// t2STRBs
    805536777U,	// t2STRD_POST
    805536777U,	// t2STRD_PRE
    671089673U,	// t2STRDi8
    536871950U,	// t2STREX
    536871956U,	// t2STREXB
    671089691U,	// t2STREXD
    536871970U,	// t2STREXH
    536871982U,	// t2STRHT
    671319081U,	// t2STRH_POST
    671319081U,	// t2STRH_PRE
    596640809U,	// t2STRHi12
    536871977U,	// t2STRHi8
    730858537U,	// t2STRHs
    536871988U,	// t2STRT
    671319097U,	// t2STR_POST
    671319097U,	// t2STR_PRE
    596640825U,	// t2STRi12
    536871993U,	// t2STRi8
    730858553U,	// t2STRs
    596640829U,	// t2SUBSri
    596640829U,	// t2SUBSrr
    730858557U,	// t2SUBSrs
    193987650U,	// t2SUBri
    536873155U,	// t2SUBri12
    193987650U,	// t2SUBrr
    328205378U,	// t2SUBrs
    671089747U,	// t2SXTAB
    671089753U,	// t2SXTAB16
    671089761U,	// t2SXTAH
    596640871U,	// t2SXTB
    536872044U,	// t2SXTB16
    596640883U,	// t2SXTH
    1004243144U,	// t2TBB
    0U,	// t2TBB_JT
    1004275916U,	// t2TBH
    0U,	// t2TBH_JT
    999294072U,	// t2TEQri
    999294072U,	// t2TEQrr
    596640888U,	// t2TEQrs
    999294081U,	// t2TSTri
    999294081U,	// t2TSTrr
    596640897U,	// t2TSTrs
    536872069U,	// t2UADD16
    536872076U,	// t2UADD8
    536872082U,	// t2UASX
    671089815U,	// t2UBFX
    536873168U,	// t2UDIV
    536872092U,	// t2UHADD16
    536872100U,	// t2UHADD8
    536872107U,	// t2UHASX
    536872113U,	// t2UHSAX
    536872119U,	// t2UHSUB16
    536872127U,	// t2UHSUB8
    671089862U,	// t2UMAAL
    671089868U,	// t2UMLAL
    671089874U,	// t2UMULL
    536872152U,	// t2UQADD16
    536872160U,	// t2UQADD8
    536872167U,	// t2UQASX
    536872173U,	// t2UQSAX
    536872179U,	// t2UQSUB16
    536872187U,	// t2UQSUB8
    536872194U,	// t2USAD8
    671089928U,	// t2USADA8
    671089935U,	// t2USAT
    536872212U,	// t2USAT16
    536872219U,	// t2USAX
    536872224U,	// t2USUB16
    536872231U,	// t2USUB8
    671089965U,	// t2UXTAB
    671089971U,	// t2UXTAB16
    671089979U,	// t2UXTAH
    596641089U,	// t2UXTB
    536872262U,	// t2UXTB16
    596641101U,	// t2UXTH
    1402996785U,	// t2WFE
    1402996789U,	// t2WFI
    1402996793U,	// t2YIELD
    3689185291U,	// tADC
    536870932U,	// tADDhirr
    3689283604U,	// tADDi3
    3689185300U,	// tADDi8
    1215695061U,	// tADDrSP
    1215531221U,	// tADDrSPi
    3689283604U,	// tADDrr
    1216121045U,	// tADDspi
    1215695061U,	// tADDspr
    0U,	// tADJCALLSTACKDOWN
    0U,	// tADJCALLSTACKUP
    939524120U,	// tADR
    3689185308U,	// tAND
    3689285700U,	// tASRri
    3689187396U,	// tASRrr
    1209010394U,	// tB
    3689185320U,	// tBIC
    1209010397U,	// tBKPT
    1342570558U,	// tBL
    1342570554U,	// tBLXi
    0U,	// tBLXi_r9
    1342570554U,	// tBLXr
    0U,	// tBLXr_r9
    0U,	// tBLr9
    0U,	// tBRIND
    0U,	// tBR_JTr
    1073741897U,	// tBX
    0U,	// tBX_CALL
    0U,	// tBX_RET
    0U,	// tBX_RET_vararg
    0U,	// tBXr9_CALL
    1073741900U,	// tBcc
    0U,	// tBfar
    1215531235U,	// tCBNZ
    1215531241U,	// tCBZ
    1613760750U,	// tCDP
    939524194U,	// tCMNz
    939524198U,	// tCMPhir
    939524198U,	// tCMPi8
    939524198U,	// tCMPr
    1810890863U,	// tCPS
    3689185409U,	// tEOR
    0U,	// tInt_eh_sjlj_longjmp
    0U,	// tInt_eh_sjlj_setjmp
    1073743956U,	// tLDMIA
    0U,	// tLDMIA_UPD
    536871112U,	// tLDRBi
    536871112U,	// tLDRBr
    536871149U,	// tLDRHi
    536871149U,	// tLDRHr
    536871160U,	// tLDRSB
    536871173U,	// tLDRSH
    536871191U,	// tLDRi
    1006633239U,	// tLDRpci
    939524375U,	// tLDRpciDIS
    0U,	// tLDRpci_pic
    536871191U,	// tLDRr
    536871191U,	// tLDRspi
    0U,	// tLEApcrel
    0U,	// tLEApcrelJT
    3689285722U,	// tLSLri
    3689187418U,	// tLSLrr
    3689285726U,	// tLSRri
    3689187422U,	// tLSRrr
    0U,	// tMOVCCr_pseudo
    1215531251U,	// tMOVSr
    3692527929U,	// tMOVi8
    939524409U,	// tMOVr
    3689185637U,	// tMUL
    3692527977U,	// tMVN
    1343226221U,	// tNOP
    3689185649U,	// tORR
    0U,	// tPICADD
    1343031545U,	// tPOP
    0U,	// tPOP_RET
    1343031549U,	// tPUSH
    939524560U,	// tREV
    939524564U,	// tREV16
    939524570U,	// tREVSH
    3689187437U,	// tROR
    3692495356U,	// tRSB
    3689185814U,	// tSBC
    2684355107U,	// tSETEND
    1343226411U,	// tSEV
    1073744061U,	// tSTMIA
    0U,	// tSTMIA_UPD
    536871940U,	// tSTRBi
    536871940U,	// tSTRBr
    536871977U,	// tSTRHi
    536871977U,	// tSTRHr
    536871993U,	// tSTRi
    536871993U,	// tSTRr
    536871993U,	// tSTRspi
    3689284674U,	// tSUBi3
    3689186370U,	// tSUBi8
    3689284674U,	// tSUBrr
    1216121090U,	// tSUBspi
    1073742918U,	// tSVC
    939525223U,	// tSXTB
    939525235U,	// tSXTH
    0U,	// tTAILJMPd
    0U,	// tTAILJMPdND
    0U,	// tTAILJMPr
    0U,	// tTAILJMPrND
    0U,	// tTPsoft
    1148U,	// tTRAP
    939525249U,	// tTST
    939525441U,	// tUXTB
    939525453U,	// tUXTH
    1343227953U,	// tWFE
    1343227957U,	// tWFI
    1343227961U,	// tYIELD
    0U
  };

  const char *AsmStrs = 
    "DBG_VALUE\000adc\000adds\000add\000adr\000and\000bfc\000bfi\000bic\000b"
    "kpt\000bl\t\000blx\t\000blx\000bl\000bx\t\000bxj\000bx\000b\000cdp\000c"
    "dp2\t\000clrex\000clz\000cmn\000cmp\000cps\t\000cps\000dbg\000dmb\t\000"
    "dsb\t\000eor\000vmov\000vmrs\000isb\t\000ldc2l\tp\000ldc2\tp\000ldcl\000"
    "ldc\000ldmda\000ldmdb\000ldm\000ldmib\000ldrbt\000ldrb\000ldrd\000ldrex"
    "\000ldrexb\000ldrexd\000ldrexh\000ldrh\000ldrht\000ldrsb\000ldrsbt\000l"
    "drsh\000ldrsht\000ldrt\000ldr\000mcr\000mcr2\t\000mcrr\000mcrr2\t\000ml"
    "a\000mls\000mov\000movt\000movw\000mrc\000mrc2\t\000mrrc\000mrrc2\t\000"
    "mrs\000msr\000mul\000mvn\000nop\000orr\000pkhbt\000pkhtb\000pldw\t\000p"
    "ld\t\000pli\t\000qadd\000qadd16\000qadd8\000qasx\000qdadd\000qdsub\000q"
    "sax\000qsub\000qsub16\000qsub8\000rbit\000rev\000rev16\000revsh\000rfed"
    "a\t\000rfedb\t\000rfeia\t\000rfeib\t\000rsb\000rsc\000sadd16\000sadd8\000"
    "sasx\000sbc\000sbfx\000sel\000setend\t\000sev\000shadd16\000shadd8\000s"
    "hasx\000shsax\000shsub16\000shsub8\000smc\000smlabb\000smlabt\000smlad\000"
    "smladx\000smlal\000smlalbb\000smlalbt\000smlald\000smlaldx\000smlaltb\000"
    "smlaltt\000smlatb\000smlatt\000smlawb\000smlawt\000smlsd\000smlsdx\000s"
    "mlsld\000smlsldx\000smmla\000smmlar\000smmls\000smmlsr\000smmul\000smmu"
    "lr\000smuad\000smuadx\000smulbb\000smulbt\000smull\000smultb\000smultt\000"
    "smulwb\000smulwt\000smusd\000smusdx\000srsda\tsp, \000srsda\tsp!, \000s"
    "rsdb\tsp, \000srsdb\tsp!, \000srsia\tsp, \000srsia\tsp!, \000srsib\tsp,"
    " \000srsib\tsp!, \000ssat\000ssat16\000ssax\000ssub16\000ssub8\000stc2l"
    "\tp\000stc2\tp\000stcl\000stc\000stmda\000stmdb\000stm\000stmib\000strb"
    "t\000strb\000strd\000strex\000strexb\000strexd\000strexh\000strh\000str"
    "ht\000strt\000str\000subs\000sub\000svc\000swp\000swpb\000sxtab\000sxta"
    "b16\000sxtah\000sxtb\000sxtb16\000sxth\000teq\000trap\000tst\000uadd16\000"
    "uadd8\000uasx\000ubfx\000uhadd16\000uhadd8\000uhasx\000uhsax\000uhsub16"
    "\000uhsub8\000umaal\000umlal\000umull\000uqadd16\000uqadd8\000uqasx\000"
    "uqsax\000uqsub16\000uqsub8\000usad8\000usada8\000usat\000usat16\000usax"
    "\000usub16\000usub8\000uxtab\000uxtab16\000uxtah\000uxtb\000uxtb16\000u"
    "xth\000vabal\000vaba\000vabdl\000vabd\000vabs\000vacge\000vacgt\000vadd"
    "\000vaddhn\000vaddl\000vaddw\000vand\000vbic\000vbif\000vbit\000vbsl\000"
    "vceq\000vcge\000vcgt\000vcle\000vcls\000vclt\000vclz\000vcmp\000vcmpe\000"
    "vcnt\000vcvtb\000vcvt\000vcvtt\000vdiv\000vdup\000veor\000vext\000vhadd"
    "\000vhsub\000vld1\000vld2\000vld3\000vld4\000vldmdb\000vldmia\000vldr\000"
    "vmax\000vmin\000vmla\000vmlal\000vmls\000vmlsl\000vmovl\000vmovn\000vms"
    "r\000vmul\000vmull\000vmvn\000vneg\000vnmla\000vnmls\000vnmul\000vorn\000"
    "vorr\000vpadal\000vpaddl\000vpadd\000vpmax\000vpmin\000vqabs\000vqadd\000"
    "vqdmlal\000vqdmlsl\000vqdmulh\000vqdmull\000vqmovun\000vqmovn\000vqneg\000"
    "vqrdmulh\000vqrshl\000vqrshrn\000vqrshrun\000vqshl\000vqshlu\000vqshrn\000"
    "vqshrun\000vqsub\000vraddhn\000vrecpe\000vrecps\000vrev16\000vrev32\000"
    "vrev64\000vrhadd\000vrshl\000vrshrn\000vrshr\000vrsqrte\000vrsqrts\000v"
    "rsra\000vrsubhn\000vshll\000vshl\000vshrn\000vshr\000vsli\000vsqrt\000v"
    "sra\000vsri\000vst1\000vst2\000vst3\000vst4\000vstmdb\000vstmia\000vstr"
    "\000vsub\000vsubhn\000vsubl\000vsubw\000vswp\000vtbl\000vtbx\000vcvtr\000"
    "vtrn\000vtst\000vuzp\000vzip\000wfe\000wfi\000yield\000addw\000asr\000b"
    ".w\t\000isb\000it\000ldmia\000lsl\000lsr\000mcr\t\000mcrr\t\000ror\000a"
    "srs\000lsrs\000mrc\t\000mrrc\t\000orn\000pldw\000pld\000pli\000rfedb\000"
    "rfeia\000rrx\000rsbs\000sdiv\000srsdb\000srsia\000stmia\000subw\000tbb\000"
    "tbh\000udiv\000add\t\000b\t\000bkpt\t\000cbnz\t\000cbz\t\000cdp\t\000mo"
    "vs\t\000pop\000push\000sub\t\000";

  O << "\t";

  // Emit the opcode for the instruction.
  unsigned Bits = OpInfo[MI->getOpcode()];
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 5 bits for 28 unique commands.
  switch ((Bits >> 27) & 31) {
  default:   // unreachable.
  case 0:
    // DBG_VALUE, CLREX, TRAP, t2CLREX, t2ISB, tTRAP
    return;
    break;
  case 1:
    // ADCri, ADCrr, ADDri, ADDrr, ANDri, ANDrr, BICri, BICrr, EORri, EORrr, ...
    printSBitModifierOperand(MI, 5, O); 
    printPredicateOperand(MI, 3, O); 
    break;
  case 2:
    // ADCrsi, ADDrsi, ANDrsi, BICrsi, EORrsi, MLA, MOVsr, MVNsr, ORRrsi, RSB...
    printSBitModifierOperand(MI, 6, O); 
    printPredicateOperand(MI, 4, O); 
    break;
  case 3:
    // ADCrsr, ADDrsr, ANDrsr, BICrsr, EORrsr, ORRrsr, RSBrsr, RSCrsr, SBCrsr...
    printSBitModifierOperand(MI, 7, O); 
    printPredicateOperand(MI, 5, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printSORegRegOperand(MI, 2, O); 
    return;
    break;
  case 4:
    // ADDSri, ADDSrr, BFC, CMNzrsi, CMPrsi, LDRBi12, LDREXD, LDRcp, LDRi12, ...
    printPredicateOperand(MI, 3, O); 
    break;
  case 5:
    // ADDSrsi, BFI, CMNzrsr, CMPrsr, LDCL_OPTION, LDCL_POST, LDC_OPTION, LDR...
    printPredicateOperand(MI, 4, O); 
    break;
  case 6:
    // ADDSrsr, BFI4p, LDCL_OFFSET, LDCL_PRE, LDC_OFFSET, LDC_POST, LDC_PRE, ...
    printPredicateOperand(MI, 5, O); 
    break;
  case 7:
    // ADR, CLZ, CMNzri, CMNzrr, CMPri, CMPrr, FCONSTD, FCONSTS, LDMDA_UPD, L...
    printPredicateOperand(MI, 2, O); 
    break;
  case 8:
    // BKPT, BLX_pred, BL_pred, BXJ, BX_pred, Bcc, DBG, LDMDA, LDMDB, LDMIA, ...
    printPredicateOperand(MI, 1, O); 
    break;
  case 9:
    // BL, BLX, BLXi, BX, CPS1p, RFEDA, RFEDA_UPD, RFEDB, RFEDB_UPD, RFEIA, R...
    printOperand(MI, 0, O); 
    break;
  case 10:
    // BX_RET, FMSTAT, MOVPCLR, NOP, SEV, WFE, WFI, YIELD, t2NOP, t2SEV, t2WF...
    printPredicateOperand(MI, 0, O); 
    break;
  case 11:
    // CDP, LDRD_POST, LDRD_PRE, MCR, MRC, STRD_POST, STRD_PRE, VLD1DUPq16_UP...
    printPredicateOperand(MI, 6, O); 
    break;
  case 12:
    // CDP2, MCR2, MCRR2, MRRC2, t2CDP2, t2MCR, t2MCR2, t2MCRR, t2MCRR2, t2MR...
    printPImmediate(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 13:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p, tCPS
    printCPSIMod(MI, 0, O); 
    break;
  case 14:
    // DMB, DSB, ISB, t2DMB, t2DSB
    printMemBOption(MI, 0, O); 
    return;
    break;
  case 15:
    // LDC2L_OFFSET, LDC2L_OPTION, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_O...
    printNoHashImmediate(MI, 0, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 1, O); 
    break;
  case 16:
    // MOVi, MOVr, MOVr_TC, MVNi, MVNr, t2MOVi, t2MOVr, t2MVNi, t2MVNr, t2RRX
    printSBitModifierOperand(MI, 4, O); 
    printPredicateOperand(MI, 2, O); 
    break;
  case 17:
    // MRC2, t2MRC, t2MRC2
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 18:
    // PLDWi12, PLDi12, PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 19:
    // PLDWrs, PLDrs, PLIrs
    printAddrMode2Operand(MI, 0, O); 
    return;
    break;
  case 20:
    // SETEND, tSETEND
    printSetendOperand(MI, 0, O); 
    return;
    break;
  case 21:
    // VLD1LNd16_UPD, VLD1LNd32_UPD, VLD1LNd8_UPD, VLD1d16T_UPD, VLD1d32T_UPD...
    printPredicateOperand(MI, 7, O); 
    break;
  case 22:
    // VLD1d16Q_UPD, VLD1d32Q_UPD, VLD1d64Q_UPD, VLD1d8Q_UPD, VLD2q16_UPD, VL...
    printPredicateOperand(MI, 8, O); 
    break;
  case 23:
    // VLD2LNd16_UPD, VLD2LNd32_UPD, VLD2LNd8_UPD, VLD2LNq16_UPD, VLD2LNq32_U...
    printPredicateOperand(MI, 9, O); 
    break;
  case 24:
    // VLD3LNd16_UPD, VLD3LNd32_UPD, VLD3LNd8_UPD, VLD3LNq16_UPD, VLD3LNq32_U...
    printPredicateOperand(MI, 11, O); 
    break;
  case 25:
    // VLD4LNd16_UPD, VLD4LNd32_UPD, VLD4LNd8_UPD, VLD4LNq16_UPD, VLD4LNq32_U...
    printPredicateOperand(MI, 13, O); 
    break;
  case 26:
    // t2IT
    printThumbITMask(MI, 1, O); 
    O << "\t"; 
    printMandatoryPredicateOperand(MI, 0, O); 
    return;
    break;
  case 27:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printSBitModifierOperand(MI, 1, O); 
    break;
  }


  // Fragment 1 encoded into 7 bits for 66 unique commands.
  switch ((Bits >> 20) & 127) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDSri, ADDSrr, ADDSrsi, ADDSrsr, ADDri, ADDrr, ...
    O << "\t"; 
    break;
  case 1:
    // BL, BLX, BLXi, BX, CPS1p, NOP, RFEDA, RFEDB, RFEIA, RFEIB, SEV, SRSDA,...
    return;
    break;
  case 2:
    // BX_RET
    O << "\tlr"; 
    return;
    break;
  case 3:
    // CDP2, t2CDP2, tCDP
    printCImmediate(MI, 2, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 4:
    // FCONSTD, VABSD, VADDD, VCMPD, VCMPED, VCMPEZD, VCMPZD, VDIVD, VMLAD, V...
    O << ".f64\t"; 
    printOperand(MI, 0, O); 
    break;
  case 5:
    // FCONSTS, VABDfd, VABDfq, VABSS, VABSfd, VABSfq, VACGEd, VACGEq, VACGTd...
    O << ".f32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 6:
    // FMSTAT
    O << "\tapsr_nzcv, fpscr"; 
    return;
    break;
  case 7:
    // LDC2L_OFFSET, LDC2L_POST, LDC2L_PRE, LDC2_OFFSET, LDC2_POST, LDC2_PRE,...
    O << ", "; 
    break;
  case 8:
    // LDC2L_OPTION, LDC2_OPTION, STC2L_OPTION, STC2_OPTION
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], {"; 
    printNoHashImmediate(MI, 3, O); 
    O << '}'; 
    return;
    break;
  case 9:
    // LDCL_OFFSET, LDCL_OPTION, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_OPTION,...
    O << "\tp"; 
    printNoHashImmediate(MI, 0, O); 
    O << ", cr"; 
    printNoHashImmediate(MI, 1, O); 
    break;
  case 10:
    // MCR2, MCRR2, MRRC2, t2MCR, t2MCR2, t2MCRR, t2MCRR2, t2MRRC, t2MRRC2
    printOperand(MI, 2, O); 
    O << ", "; 
    break;
  case 11:
    // MOVPCLR
    O << "\tpc, lr"; 
    return;
    break;
  case 12:
    // RFEDA_UPD, RFEDB_UPD, RFEIA_UPD, RFEIB_UPD
    O << '!'; 
    return;
    break;
  case 13:
    // VABALsv2i64, VABAsv2i32, VABAsv4i32, VABDLsv2i64, VABDsv2i32, VABDsv4i...
    O << ".s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 14:
    // VABALsv4i32, VABAsv4i16, VABAsv8i16, VABDLsv4i32, VABDsv4i16, VABDsv8i...
    O << ".s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 15:
    // VABALsv8i16, VABAsv16i8, VABAsv8i8, VABDLsv8i16, VABDsv16i8, VABDsv8i8...
    O << ".s8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 16:
    // VABALuv2i64, VABAuv2i32, VABAuv4i32, VABDLuv2i64, VABDuv2i32, VABDuv4i...
    O << ".u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 17:
    // VABALuv4i32, VABAuv4i16, VABAuv8i16, VABDLuv4i32, VABDuv4i16, VABDuv8i...
    O << ".u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 18:
    // VABALuv8i16, VABAuv16i8, VABAuv8i8, VABDLuv8i16, VABDuv16i8, VABDuv8i8...
    O << ".u8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 19:
    // VADDHNv2i32, VADDv1i64, VADDv2i64, VMOVNv2i32, VMOVv1i64, VMOVv2i64, V...
    O << ".i64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 20:
    // VADDHNv4i16, VADDv2i32, VADDv4i32, VBICiv2i32, VBICiv4i32, VCEQv2i32, ...
    O << ".i32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 21:
    // VADDHNv8i8, VADDv4i16, VADDv8i16, VBICiv4i16, VBICiv8i16, VCEQv4i16, V...
    O << ".i16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 22:
    // VADDv16i8, VADDv8i8, VCEQv16i8, VCEQv8i8, VCEQzv16i8, VCEQzv8i8, VCLZv...
    O << ".i8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 23:
    // VCNTd, VCNTq, VDUP8d, VDUP8q, VDUPLN8d, VDUPLN8q, VEXTd8, VEXTq8, VREV...
    O << ".8\t"; 
    printOperand(MI, 0, O); 
    break;
  case 24:
    // VCVTBHS, VCVTTHS, VCVTf2h
    O << ".f16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 25:
    // VCVTBSH, VCVTTSH, VCVTh2f
    O << ".f32.f16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 26:
    // VCVTDS
    O << ".f64.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 27:
    // VCVTSD
    O << ".f32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 28:
    // VCVTf2sd, VCVTf2sq, VCVTf2xsd, VCVTf2xsq, VTOSIRS, VTOSIZS, VTOSLS
    O << ".s32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 29:
    // VCVTf2ud, VCVTf2uq, VCVTf2xud, VCVTf2xuq, VTOUIRS, VTOUIZS, VTOULS
    O << ".u32.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 30:
    // VCVTs2fd, VCVTs2fq, VCVTxs2fd, VCVTxs2fq, VSITOS, VSLTOS
    O << ".f32.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 31:
    // VCVTu2fd, VCVTu2fq, VCVTxu2fd, VCVTxu2fq, VUITOS, VULTOS
    O << ".f32.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 32:
    // VDUP16d, VDUP16q, VDUPLN16d, VDUPLN16q, VEXTd16, VEXTq16, VREV32d16, V...
    O << ".16\t"; 
    printOperand(MI, 0, O); 
    break;
  case 33:
    // VDUP32d, VDUP32q, VDUPLN32d, VDUPLN32q, VEXTd32, VEXTq32, VGETLNi32, V...
    O << ".32\t"; 
    printOperand(MI, 0, O); 
    break;
  case 34:
    // VLD1DUPd16, VLD1DUPd16_UPD, VLD1DUPq16, VLD1DUPq16_UPD, VLD1LNd16, VLD...
    O << ".16\t{"; 
    break;
  case 35:
    // VLD1DUPd32, VLD1DUPd32_UPD, VLD1DUPq32, VLD1DUPq32_UPD, VLD1LNd32, VLD...
    O << ".32\t{"; 
    break;
  case 36:
    // VLD1DUPd8, VLD1DUPd8_UPD, VLD1DUPq8, VLD1DUPq8_UPD, VLD1LNd8, VLD1LNd8...
    O << ".8\t{"; 
    break;
  case 37:
    // VLD1d64, VLD1d64Q, VLD1d64Q_UPD, VLD1d64T, VLD1d64T_UPD, VLD1d64_UPD, ...
    O << ".64\t{"; 
    break;
  case 38:
    // VLDRD, VSLIv1i64, VSLIv2i64, VSRIv1i64, VSRIv2i64, VSTRD
    O << ".64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 39:
    // VMSR
    O << "\tfpscr, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 40:
    // VMSR_FPEXC
    O << "\tfpexc, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 41:
    // VMSR_FPSID
    O << "\tfpsid, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 42:
    // VMULLp, VMULpd, VMULpq
    O << ".p8\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 43:
    // VQADDsv1i64, VQADDsv2i64, VQMOVNsuv2i32, VQMOVNsv2i32, VQRSHLsv1i64, V...
    O << ".s64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 44:
    // VQADDuv1i64, VQADDuv2i64, VQMOVNuv2i32, VQRSHLuv1i64, VQRSHLuv2i64, VQ...
    O << ".u64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 45:
    // VSHTOD
    O << ".f64.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 46:
    // VSHTOS
    O << ".f32.s16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 47:
    // VSITOD, VSLTOD
    O << ".f64.s32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 48:
    // VTOSHD
    O << ".s16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 49:
    // VTOSHS
    O << ".s16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 50:
    // VTOSIRD, VTOSIZD, VTOSLD
    O << ".s32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 51:
    // VTOUHD
    O << ".u16.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 52:
    // VTOUHS
    O << ".u16.f32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 53:
    // VTOUIRD, VTOUIZD, VTOULD
    O << ".u32.f64\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 54:
    // VUHTOD
    O << ".f64.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 55:
    // VUHTOS
    O << ".f32.u16\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 56:
    // VUITOD, VULTOD
    O << ".f64.u32\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 57:
    // t2ADCrr, t2ADCrs, t2ADDSri, t2ADDSrr, t2ADDSrs, t2ADDri, t2ADDrr, t2AD...
    O << ".w\t"; 
    break;
  case 58:
    // t2NOP, t2SEV, t2WFE, t2WFI, t2YIELD
    O << ".w"; 
    return;
    break;
  case 59:
    // t2SRSDB, t2SRSIA
    O << "\tsp, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 60:
    // t2SRSDBW, t2SRSIAW
    O << "\tsp!, "; 
    printOperand(MI, 0, O); 
    return;
    break;
  case 61:
    // t2TBB, t2TBH
    O << "\t["; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    break;
  case 62:
    // tADC, tADDi3, tADDi8, tADDrr, tAND, tASRri, tASRrr, tBIC, tEOR, tLSLri...
    printPredicateOperand(MI, 4, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    break;
  case 63:
    // tCPS
    O << ' '; 
    printCPSIFlag(MI, 1, O); 
    return;
    break;
  case 64:
    // tLDRpci
    O << ".n\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 65:
    // tMOVi8, tMVN, tRSB
    printPredicateOperand(MI, 3, O); 
    O << "\t"; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    break;
  }


  // Fragment 2 encoded into 5 bits for 27 unique commands.
  switch ((Bits >> 15) & 31) {
  default:   // unreachable.
  case 0:
    // ADCri, ADCrr, ADCrsi, ADDSri, ADDSrr, ADDSrsi, ADDSrsr, ADDri, ADDrr, ...
    printOperand(MI, 0, O); 
    break;
  case 1:
    // CDP, MCR, MCRR, MRRC
    printPImmediate(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    break;
  case 2:
    // CPS2p, CPS3p, t2CPS2p, t2CPS3p
    printCPSIFlag(MI, 1, O); 
    break;
  case 3:
    // FCONSTD, FCONSTS, LDCL_OFFSET, LDCL_POST, LDCL_PRE, LDC_OFFSET, LDC_PO...
    O << ", "; 
    break;
  case 4:
    // LDC2L_OFFSET, LDC2L_PRE, LDC2_OFFSET, LDC2_POST, LDC2_PRE, STC2L_OFFSE...
    printAddrMode2Operand(MI, 2, O); 
    break;
  case 5:
    // LDC2L_POST, STC2L_POST
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    printPostIdxImm8s4Operand(MI, 3, O); 
    return;
    break;
  case 6:
    // LDCL_OPTION, LDC_OPTION, STCL_OPTION, STC_OPTION
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << "], {"; 
    printNoHashImmediate(MI, 3, O); 
    O << '}'; 
    return;
    break;
  case 7:
    // LDMDA_UPD, LDMDB_UPD, LDMIA_UPD, LDMIB_UPD, STMDA_UPD, STMDB_UPD, STMI...
    printOperand(MI, 1, O); 
    break;
  case 8:
    // MCR2, t2MCR, t2MCR2
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 9:
    // MCRR2, MRRC2, t2MCRR, t2MCRR2, t2MRRC, t2MRRC2, tADC, tADDi8, tAND, tA...
    printOperand(MI, 3, O); 
    break;
  case 10:
    // MRC
    printPImmediate(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 0, O); 
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case 11:
    // MSR, MSRi, t2MSR
    printMSRMaskOperand(MI, 0, O); 
    O << ", "; 
    printOperand(MI, 1, O); 
    return;
    break;
  case 12:
    // VABALsv2i64, VABALsv4i32, VABALsv8i16, VABALuv2i64, VABALuv4i32, VABAL...
    printOperand(MI, 2, O); 
    break;
  case 13:
    // VBICiv2i32, VBICiv4i16, VBICiv4i32, VBICiv8i16, VMOVv16i8, VMOVv1i64, ...
    printNEONModImmOperand(MI, 1, O); 
    return;
    break;
  case 14:
    // VCMPEZD, VCMPEZS, VCMPZD, VCMPZS, tRSB
    O << ", #0"; 
    return;
    break;
  case 15:
    // VCVTf2sd, VCVTf2sq, VCVTf2ud, VCVTf2uq, VCVTs2fd, VCVTs2fq, VCVTu2fd, ...
    return;
    break;
  case 16:
    // VLDRD, VSTRD
    printAddrMode5Operand(MI, 1, O); 
    return;
    break;
  case 17:
    // VSETLNi16, VSETLNi32, VSETLNi8
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case 18:
    // VST1LNd16_UPD, VST1LNd32_UPD, VST1LNd8_UPD, VST1d16Q_UPD, VST1d16T_UPD...
    printOperand(MI, 4, O); 
    break;
  case 19:
    // VTBL1, VTBL2, VTBL3, VTBL4, VTBX1, VTBX2, VTBX3, VTBX4
    O << ", {"; 
    break;
  case 20:
    // t2PLDWi12, t2PLDi12, t2PLIi12
    printAddrModeImm12Operand(MI, 0, O); 
    return;
    break;
  case 21:
    // t2PLDWi8, t2PLDi8, t2PLIi8
    printT2AddrModeImm8Operand(MI, 0, O); 
    return;
    break;
  case 22:
    // t2PLDWs, t2PLDs, t2PLIs
    printT2AddrModeSoRegOperand(MI, 0, O); 
    return;
    break;
  case 23:
    // t2TBB
    O << ']'; 
    return;
    break;
  case 24:
    // t2TBH
    O << ", lsl #1]"; 
    return;
    break;
  case 25:
    // tADDspi, tSUBspi
    printThumbS4ImmOperand(MI, 2, O); 
    return;
    break;
  case 26:
    // tPOP, tPUSH
    printRegisterList(MI, 2, O); 
    return;
    break;
  }

  switch (MI->getOpcode()) {
  case ARM::ADCri:
  case ARM::ADCrr:
  case ARM::ADCrsi:
  case ARM::ADDSri:
  case ARM::ADDSrr:
  case ARM::ADDSrsi:
  case ARM::ADDSrsr:
  case ARM::ADDri:
  case ARM::ADDrr:
  case ARM::ADDrsi:
  case ARM::ANDri:
  case ARM::ANDrr:
  case ARM::ANDrsi:
  case ARM::BICri:
  case ARM::BICrr:
  case ARM::BICrsi:
  case ARM::EORri:
  case ARM::EORrr:
  case ARM::EORrsi:
  case ARM::LDRD:
  case ARM::LDREXD:
  case ARM::MUL:
  case ARM::ORRri:
  case ARM::ORRrr:
  case ARM::ORRrsi:
  case ARM::QADD:
  case ARM::QADD16:
  case ARM::QADD8:
  case ARM::QASX:
  case ARM::QDADD:
  case ARM::QDSUB:
  case ARM::QSAX:
  case ARM::QSUB:
  case ARM::QSUB16:
  case ARM::QSUB8:
  case ARM::RSBri:
  case ARM::RSBrr:
  case ARM::RSBrsi:
  case ARM::RSCri:
  case ARM::RSCrr:
  case ARM::RSCrsi:
  case ARM::SADD16:
  case ARM::SADD8:
  case ARM::SASX:
  case ARM::SBCri:
  case ARM::SBCrr:
  case ARM::SBCrsi:
  case ARM::SEL:
  case ARM::SHADD16:
  case ARM::SHADD8:
  case ARM::SHASX:
  case ARM::SHSAX:
  case ARM::SHSUB16:
  case ARM::SHSUB8:
  case ARM::SMMUL:
  case ARM::SMMULR:
  case ARM::SMUAD:
  case ARM::SMUADX:
  case ARM::SMULBB:
  case ARM::SMULBT:
  case ARM::SMULTB:
  case ARM::SMULTT:
  case ARM::SMULWB:
  case ARM::SMULWT:
  case ARM::SMUSD:
  case ARM::SMUSDX:
  case ARM::SSAX:
  case ARM::SSUB16:
  case ARM::SSUB8:
  case ARM::STRD:
  case ARM::STREX:
  case ARM::STREXB:
  case ARM::STREXH:
  case ARM::SUBSri:
  case ARM::SUBSrr:
  case ARM::SUBSrsi:
  case ARM::SUBSrsr:
  case ARM::SUBri:
  case ARM::SUBrr:
  case ARM::SUBrsi:
  case ARM::SWP:
  case ARM::SWPB:
  case ARM::UADD16:
  case ARM::UADD8:
  case ARM::UASX:
  case ARM::UHADD16:
  case ARM::UHADD8:
  case ARM::UHASX:
  case ARM::UHSAX:
  case ARM::UHSUB16:
  case ARM::UHSUB8:
  case ARM::UQADD16:
  case ARM::UQADD8:
  case ARM::UQASX:
  case ARM::UQSAX:
  case ARM::UQSUB16:
  case ARM::UQSUB8:
  case ARM::USAD8:
  case ARM::USAT16:
  case ARM::USAX:
  case ARM::USUB16:
  case ARM::USUB8:
  case ARM::VANDd:
  case ARM::VANDq:
  case ARM::VBICd:
  case ARM::VBICq:
  case ARM::VEORd:
  case ARM::VEORq:
  case ARM::VMOVDRR:
  case ARM::VMOVRRD:
  case ARM::VORNd:
  case ARM::VORNq:
  case ARM::VORRd:
  case ARM::VORRq:
  case ARM::t2ADCri:
  case ARM::t2ADCrr:
  case ARM::t2ADCrs:
  case ARM::t2ADDSri:
  case ARM::t2ADDSrr:
  case ARM::t2ADDSrs:
  case ARM::t2ADDri:
  case ARM::t2ADDri12:
  case ARM::t2ADDrr:
  case ARM::t2ADDrs:
  case ARM::t2ANDri:
  case ARM::t2ANDrr:
  case ARM::t2ANDrs:
  case ARM::t2ASRri:
  case ARM::t2ASRrr:
  case ARM::t2BICri:
  case ARM::t2BICrr:
  case ARM::t2BICrs:
  case ARM::t2EORri:
  case ARM::t2EORrr:
  case ARM::t2EORrs:
  case ARM::t2LDRDi8:
  case ARM::t2LDREXD:
  case ARM::t2LSLri:
  case ARM::t2LSLrr:
  case ARM::t2LSRri:
  case ARM::t2LSRrr:
  case ARM::t2MUL:
  case ARM::t2ORNri:
  case ARM::t2ORNrr:
  case ARM::t2ORNrs:
  case ARM::t2ORRri:
  case ARM::t2ORRrr:
  case ARM::t2ORRrs:
  case ARM::t2QADD:
  case ARM::t2QADD16:
  case ARM::t2QADD8:
  case ARM::t2QASX:
  case ARM::t2QDADD:
  case ARM::t2QDSUB:
  case ARM::t2QSAX:
  case ARM::t2QSUB:
  case ARM::t2QSUB16:
  case ARM::t2QSUB8:
  case ARM::t2RORri:
  case ARM::t2RORrr:
  case ARM::t2RSBSri:
  case ARM::t2RSBSrs:
  case ARM::t2RSBri:
  case ARM::t2RSBrr:
  case ARM::t2RSBrs:
  case ARM::t2SADD16:
  case ARM::t2SADD8:
  case ARM::t2SASX:
  case ARM::t2SBCri:
  case ARM::t2SBCrr:
  case ARM::t2SBCrs:
  case ARM::t2SDIV:
  case ARM::t2SEL:
  case ARM::t2SHADD16:
  case ARM::t2SHADD8:
  case ARM::t2SHASX:
  case ARM::t2SHSAX:
  case ARM::t2SHSUB16:
  case ARM::t2SHSUB8:
  case ARM::t2SMMUL:
  case ARM::t2SMMULR:
  case ARM::t2SMUAD:
  case ARM::t2SMUADX:
  case ARM::t2SMULBB:
  case ARM::t2SMULBT:
  case ARM::t2SMULTB:
  case ARM::t2SMULTT:
  case ARM::t2SMULWB:
  case ARM::t2SMULWT:
  case ARM::t2SMUSD:
  case ARM::t2SMUSDX:
  case ARM::t2SSAX:
  case ARM::t2SSUB16:
  case ARM::t2SSUB8:
  case ARM::t2STRDi8:
  case ARM::t2STREX:
  case ARM::t2STREXB:
  case ARM::t2STREXH:
  case ARM::t2SUBSri:
  case ARM::t2SUBSrr:
  case ARM::t2SUBSrs:
  case ARM::t2SUBri:
  case ARM::t2SUBri12:
  case ARM::t2SUBrr:
  case ARM::t2SUBrs:
  case ARM::t2UADD16:
  case ARM::t2UADD8:
  case ARM::t2UASX:
  case ARM::t2UDIV:
  case ARM::t2UHADD16:
  case ARM::t2UHADD8:
  case ARM::t2UHASX:
  case ARM::t2UHSAX:
  case ARM::t2UHSUB16:
  case ARM::t2UHSUB8:
  case ARM::t2UQADD16:
  case ARM::t2UQADD8:
  case ARM::t2UQASX:
  case ARM::t2UQSAX:
  case ARM::t2UQSUB16:
  case ARM::t2UQSUB8:
  case ARM::t2USAD8:
  case ARM::t2USAT16:
  case ARM::t2USAX:
  case ARM::t2USUB16:
  case ARM::t2USUB8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADCri: 
    case ARM::ADCrr: 
    case ARM::ADDSri: 
    case ARM::ADDSrr: 
    case ARM::ADDri: 
    case ARM::ADDrr: 
    case ARM::ANDri: 
    case ARM::ANDrr: 
    case ARM::BICri: 
    case ARM::BICrr: 
    case ARM::EORri: 
    case ARM::EORrr: 
    case ARM::MUL: 
    case ARM::ORRri: 
    case ARM::ORRrr: 
    case ARM::QADD: 
    case ARM::QADD16: 
    case ARM::QADD8: 
    case ARM::QASX: 
    case ARM::QDADD: 
    case ARM::QDSUB: 
    case ARM::QSAX: 
    case ARM::QSUB: 
    case ARM::QSUB16: 
    case ARM::QSUB8: 
    case ARM::RSBri: 
    case ARM::RSBrr: 
    case ARM::RSCri: 
    case ARM::RSCrr: 
    case ARM::SADD16: 
    case ARM::SADD8: 
    case ARM::SASX: 
    case ARM::SBCri: 
    case ARM::SBCrr: 
    case ARM::SEL: 
    case ARM::SHADD16: 
    case ARM::SHADD8: 
    case ARM::SHASX: 
    case ARM::SHSAX: 
    case ARM::SHSUB16: 
    case ARM::SHSUB8: 
    case ARM::SMMUL: 
    case ARM::SMMULR: 
    case ARM::SMUAD: 
    case ARM::SMUADX: 
    case ARM::SMULBB: 
    case ARM::SMULBT: 
    case ARM::SMULTB: 
    case ARM::SMULTT: 
    case ARM::SMULWB: 
    case ARM::SMULWT: 
    case ARM::SMUSD: 
    case ARM::SMUSDX: 
    case ARM::SSAX: 
    case ARM::SSUB16: 
    case ARM::SSUB8: 
    case ARM::SUBSri: 
    case ARM::SUBSrr: 
    case ARM::SUBri: 
    case ARM::SUBrr: 
    case ARM::UADD16: 
    case ARM::UADD8: 
    case ARM::UASX: 
    case ARM::UHADD16: 
    case ARM::UHADD8: 
    case ARM::UHASX: 
    case ARM::UHSAX: 
    case ARM::UHSUB16: 
    case ARM::UHSUB8: 
    case ARM::UQADD16: 
    case ARM::UQADD8: 
    case ARM::UQASX: 
    case ARM::UQSAX: 
    case ARM::UQSUB16: 
    case ARM::UQSUB8: 
    case ARM::USAD8: 
    case ARM::USAT16: 
    case ARM::USAX: 
    case ARM::USUB16: 
    case ARM::USUB8: 
    case ARM::VANDd: 
    case ARM::VANDq: 
    case ARM::VBICd: 
    case ARM::VBICq: 
    case ARM::VEORd: 
    case ARM::VEORq: 
    case ARM::VMOVDRR: 
    case ARM::VMOVRRD: 
    case ARM::VORNd: 
    case ARM::VORNq: 
    case ARM::VORRd: 
    case ARM::VORRq: 
    case ARM::t2ADCri: 
    case ARM::t2ADCrr: 
    case ARM::t2ADDSri: 
    case ARM::t2ADDSrr: 
    case ARM::t2ADDri: 
    case ARM::t2ADDri12: 
    case ARM::t2ADDrr: 
    case ARM::t2ANDri: 
    case ARM::t2ANDrr: 
    case ARM::t2ASRri: 
    case ARM::t2ASRrr: 
    case ARM::t2BICri: 
    case ARM::t2BICrr: 
    case ARM::t2EORri: 
    case ARM::t2EORrr: 
    case ARM::t2LSLri: 
    case ARM::t2LSLrr: 
    case ARM::t2LSRri: 
    case ARM::t2LSRrr: 
    case ARM::t2MUL: 
    case ARM::t2ORNri: 
    case ARM::t2ORNrr: 
    case ARM::t2ORRri: 
    case ARM::t2ORRrr: 
    case ARM::t2QADD: 
    case ARM::t2QADD16: 
    case ARM::t2QADD8: 
    case ARM::t2QASX: 
    case ARM::t2QDADD: 
    case ARM::t2QDSUB: 
    case ARM::t2QSAX: 
    case ARM::t2QSUB: 
    case ARM::t2QSUB16: 
    case ARM::t2QSUB8: 
    case ARM::t2RORri: 
    case ARM::t2RORrr: 
    case ARM::t2RSBSri: 
    case ARM::t2RSBri: 
    case ARM::t2RSBrr: 
    case ARM::t2SADD16: 
    case ARM::t2SADD8: 
    case ARM::t2SASX: 
    case ARM::t2SBCri: 
    case ARM::t2SBCrr: 
    case ARM::t2SDIV: 
    case ARM::t2SEL: 
    case ARM::t2SHADD16: 
    case ARM::t2SHADD8: 
    case ARM::t2SHASX: 
    case ARM::t2SHSAX: 
    case ARM::t2SHSUB16: 
    case ARM::t2SHSUB8: 
    case ARM::t2SMMUL: 
    case ARM::t2SMMULR: 
    case ARM::t2SMUAD: 
    case ARM::t2SMUADX: 
    case ARM::t2SMULBB: 
    case ARM::t2SMULBT: 
    case ARM::t2SMULTB: 
    case ARM::t2SMULTT: 
    case ARM::t2SMULWB: 
    case ARM::t2SMULWT: 
    case ARM::t2SMUSD: 
    case ARM::t2SMUSDX: 
    case ARM::t2SSAX: 
    case ARM::t2SSUB16: 
    case ARM::t2SSUB8: 
    case ARM::t2SUBSri: 
    case ARM::t2SUBSrr: 
    case ARM::t2SUBri: 
    case ARM::t2SUBri12: 
    case ARM::t2SUBrr: 
    case ARM::t2UADD16: 
    case ARM::t2UADD8: 
    case ARM::t2UASX: 
    case ARM::t2UDIV: 
    case ARM::t2UHADD16: 
    case ARM::t2UHADD8: 
    case ARM::t2UHASX: 
    case ARM::t2UHSAX: 
    case ARM::t2UHSUB16: 
    case ARM::t2UHSUB8: 
    case ARM::t2UQADD16: 
    case ARM::t2UQADD8: 
    case ARM::t2UQASX: 
    case ARM::t2UQSAX: 
    case ARM::t2UQSUB16: 
    case ARM::t2UQSUB8: 
    case ARM::t2USAD8: 
    case ARM::t2USAT16: 
    case ARM::t2USAX: 
    case ARM::t2USUB16: 
    case ARM::t2USUB8: printOperand(MI, 2, O); break;
    case ARM::ADCrsi: 
    case ARM::ADDSrsi: 
    case ARM::ADDrsi: 
    case ARM::ANDrsi: 
    case ARM::BICrsi: 
    case ARM::EORrsi: 
    case ARM::ORRrsi: 
    case ARM::RSBrsi: 
    case ARM::RSCrsi: 
    case ARM::SBCrsi: 
    case ARM::SUBSrsi: 
    case ARM::SUBrsi: printSORegImmOperand(MI, 2, O); break;
    case ARM::ADDSrsr: 
    case ARM::SUBSrsr: printSORegRegOperand(MI, 2, O); break;
    case ARM::LDRD: 
    case ARM::STRD: printAddrMode3Operand(MI, 2, O); break;
    case ARM::LDREXD: 
    case ARM::STREX: 
    case ARM::STREXB: 
    case ARM::STREXH: 
    case ARM::SWP: 
    case ARM::SWPB: 
    case ARM::t2LDREXD: 
    case ARM::t2STREX: 
    case ARM::t2STREXB: 
    case ARM::t2STREXH: printAddrMode7Operand(MI, 2, O); break;
    case ARM::t2ADCrs: 
    case ARM::t2ADDSrs: 
    case ARM::t2ADDrs: 
    case ARM::t2ANDrs: 
    case ARM::t2BICrs: 
    case ARM::t2EORrs: 
    case ARM::t2ORNrs: 
    case ARM::t2ORRrs: 
    case ARM::t2RSBSrs: 
    case ARM::t2RSBrs: 
    case ARM::t2SBCrs: 
    case ARM::t2SUBSrs: 
    case ARM::t2SUBrs: printT2SOOperand(MI, 2, O); break;
    case ARM::t2LDRDi8: 
    case ARM::t2STRDi8: printT2AddrModeImm8s4Operand(MI, 2, O); break;
    }
    return;
    break;
  case ARM::ADR:
  case ARM::BFC:
  case ARM::CLZ:
  case ARM::CMNzri:
  case ARM::CMNzrr:
  case ARM::CMNzrsi:
  case ARM::CMNzrsr:
  case ARM::CMPri:
  case ARM::CMPrr:
  case ARM::CMPrsi:
  case ARM::CMPrsr:
  case ARM::CPS3p:
  case ARM::LDMDA:
  case ARM::LDMDB:
  case ARM::LDMIA:
  case ARM::LDMIB:
  case ARM::LDRBi12:
  case ARM::LDRBrs:
  case ARM::LDREX:
  case ARM::LDREXB:
  case ARM::LDREXH:
  case ARM::LDRH:
  case ARM::LDRSB:
  case ARM::LDRSH:
  case ARM::LDRcp:
  case ARM::LDRi12:
  case ARM::LDRrs:
  case ARM::MCRR2:
  case ARM::MOVTi16:
  case ARM::MOVi:
  case ARM::MOVi16:
  case ARM::MOVr:
  case ARM::MOVr_TC:
  case ARM::MOVsi:
  case ARM::MOVsr:
  case ARM::MRRC2:
  case ARM::MVNi:
  case ARM::MVNr:
  case ARM::MVNsi:
  case ARM::MVNsr:
  case ARM::RBIT:
  case ARM::REV:
  case ARM::REV16:
  case ARM::REVSH:
  case ARM::STMDA:
  case ARM::STMDB:
  case ARM::STMIA:
  case ARM::STMIB:
  case ARM::STRBi12:
  case ARM::STRBrs:
  case ARM::STRH:
  case ARM::STRi12:
  case ARM::STRrs:
  case ARM::TEQri:
  case ARM::TEQrr:
  case ARM::TEQrsi:
  case ARM::TEQrsr:
  case ARM::TSTri:
  case ARM::TSTrr:
  case ARM::TSTrsi:
  case ARM::TSTrsr:
  case ARM::VABALsv2i64:
  case ARM::VABALsv4i32:
  case ARM::VABALsv8i16:
  case ARM::VABALuv2i64:
  case ARM::VABALuv4i32:
  case ARM::VABALuv8i16:
  case ARM::VABAsv16i8:
  case ARM::VABAsv2i32:
  case ARM::VABAsv4i16:
  case ARM::VABAsv4i32:
  case ARM::VABAsv8i16:
  case ARM::VABAsv8i8:
  case ARM::VABAuv16i8:
  case ARM::VABAuv2i32:
  case ARM::VABAuv4i16:
  case ARM::VABAuv4i32:
  case ARM::VABAuv8i16:
  case ARM::VABAuv8i8:
  case ARM::VABDLsv2i64:
  case ARM::VABDLsv4i32:
  case ARM::VABDLsv8i16:
  case ARM::VABDLuv2i64:
  case ARM::VABDLuv4i32:
  case ARM::VABDLuv8i16:
  case ARM::VABDsv16i8:
  case ARM::VABDsv2i32:
  case ARM::VABDsv4i16:
  case ARM::VABDsv4i32:
  case ARM::VABDsv8i16:
  case ARM::VABDsv8i8:
  case ARM::VABDuv16i8:
  case ARM::VABDuv2i32:
  case ARM::VABDuv4i16:
  case ARM::VABDuv4i32:
  case ARM::VABDuv8i16:
  case ARM::VABDuv8i8:
  case ARM::VADDHNv2i32:
  case ARM::VADDHNv4i16:
  case ARM::VADDHNv8i8:
  case ARM::VADDLsv2i64:
  case ARM::VADDLsv4i32:
  case ARM::VADDLsv8i16:
  case ARM::VADDLuv2i64:
  case ARM::VADDLuv4i32:
  case ARM::VADDLuv8i16:
  case ARM::VADDWsv2i64:
  case ARM::VADDWsv4i32:
  case ARM::VADDWsv8i16:
  case ARM::VADDWuv2i64:
  case ARM::VADDWuv4i32:
  case ARM::VADDWuv8i16:
  case ARM::VADDv16i8:
  case ARM::VADDv1i64:
  case ARM::VADDv2i32:
  case ARM::VADDv2i64:
  case ARM::VADDv4i16:
  case ARM::VADDv4i32:
  case ARM::VADDv8i16:
  case ARM::VADDv8i8:
  case ARM::VCEQv16i8:
  case ARM::VCEQv2i32:
  case ARM::VCEQv4i16:
  case ARM::VCEQv4i32:
  case ARM::VCEQv8i16:
  case ARM::VCEQv8i8:
  case ARM::VCGEsv16i8:
  case ARM::VCGEsv2i32:
  case ARM::VCGEsv4i16:
  case ARM::VCGEsv4i32:
  case ARM::VCGEsv8i16:
  case ARM::VCGEsv8i8:
  case ARM::VCGEuv16i8:
  case ARM::VCGEuv2i32:
  case ARM::VCGEuv4i16:
  case ARM::VCGEuv4i32:
  case ARM::VCGEuv8i16:
  case ARM::VCGEuv8i8:
  case ARM::VCGTsv16i8:
  case ARM::VCGTsv2i32:
  case ARM::VCGTsv4i16:
  case ARM::VCGTsv4i32:
  case ARM::VCGTsv8i16:
  case ARM::VCGTsv8i8:
  case ARM::VCGTuv16i8:
  case ARM::VCGTuv2i32:
  case ARM::VCGTuv4i16:
  case ARM::VCGTuv4i32:
  case ARM::VCGTuv8i16:
  case ARM::VCGTuv8i8:
  case ARM::VHADDsv16i8:
  case ARM::VHADDsv2i32:
  case ARM::VHADDsv4i16:
  case ARM::VHADDsv4i32:
  case ARM::VHADDsv8i16:
  case ARM::VHADDsv8i8:
  case ARM::VHADDuv16i8:
  case ARM::VHADDuv2i32:
  case ARM::VHADDuv4i16:
  case ARM::VHADDuv4i32:
  case ARM::VHADDuv8i16:
  case ARM::VHADDuv8i8:
  case ARM::VHSUBsv16i8:
  case ARM::VHSUBsv2i32:
  case ARM::VHSUBsv4i16:
  case ARM::VHSUBsv4i32:
  case ARM::VHSUBsv8i16:
  case ARM::VHSUBsv8i8:
  case ARM::VHSUBuv16i8:
  case ARM::VHSUBuv2i32:
  case ARM::VHSUBuv4i16:
  case ARM::VHSUBuv4i32:
  case ARM::VHSUBuv8i16:
  case ARM::VHSUBuv8i8:
  case ARM::VLDMDIA:
  case ARM::VLDMSIA:
  case ARM::VMAXsv16i8:
  case ARM::VMAXsv2i32:
  case ARM::VMAXsv4i16:
  case ARM::VMAXsv4i32:
  case ARM::VMAXsv8i16:
  case ARM::VMAXsv8i8:
  case ARM::VMAXuv16i8:
  case ARM::VMAXuv2i32:
  case ARM::VMAXuv4i16:
  case ARM::VMAXuv4i32:
  case ARM::VMAXuv8i16:
  case ARM::VMAXuv8i8:
  case ARM::VMINsv16i8:
  case ARM::VMINsv2i32:
  case ARM::VMINsv4i16:
  case ARM::VMINsv4i32:
  case ARM::VMINsv8i16:
  case ARM::VMINsv8i8:
  case ARM::VMINuv16i8:
  case ARM::VMINuv2i32:
  case ARM::VMINuv4i16:
  case ARM::VMINuv4i32:
  case ARM::VMINuv8i16:
  case ARM::VMINuv8i8:
  case ARM::VMLALsv2i64:
  case ARM::VMLALsv4i32:
  case ARM::VMLALsv8i16:
  case ARM::VMLALuv2i64:
  case ARM::VMLALuv4i32:
  case ARM::VMLALuv8i16:
  case ARM::VMLAv16i8:
  case ARM::VMLAv2i32:
  case ARM::VMLAv4i16:
  case ARM::VMLAv4i32:
  case ARM::VMLAv8i16:
  case ARM::VMLAv8i8:
  case ARM::VMLSLsv2i64:
  case ARM::VMLSLsv4i32:
  case ARM::VMLSLsv8i16:
  case ARM::VMLSLuv2i64:
  case ARM::VMLSLuv4i32:
  case ARM::VMLSLuv8i16:
  case ARM::VMLSv16i8:
  case ARM::VMLSv2i32:
  case ARM::VMLSv4i16:
  case ARM::VMLSv4i32:
  case ARM::VMLSv8i16:
  case ARM::VMLSv8i8:
  case ARM::VMOVRS:
  case ARM::VMOVSR:
  case ARM::VMULLsv2i64:
  case ARM::VMULLsv4i32:
  case ARM::VMULLsv8i16:
  case ARM::VMULLuv2i64:
  case ARM::VMULLuv4i32:
  case ARM::VMULLuv8i16:
  case ARM::VMULv16i8:
  case ARM::VMULv2i32:
  case ARM::VMULv4i16:
  case ARM::VMULv4i32:
  case ARM::VMULv8i16:
  case ARM::VMULv8i8:
  case ARM::VMVNd:
  case ARM::VMVNq:
  case ARM::VPADDi16:
  case ARM::VPADDi32:
  case ARM::VPADDi8:
  case ARM::VPMAXs16:
  case ARM::VPMAXs32:
  case ARM::VPMAXs8:
  case ARM::VPMAXu16:
  case ARM::VPMAXu32:
  case ARM::VPMAXu8:
  case ARM::VPMINs16:
  case ARM::VPMINs32:
  case ARM::VPMINs8:
  case ARM::VPMINu16:
  case ARM::VPMINu32:
  case ARM::VPMINu8:
  case ARM::VQADDsv16i8:
  case ARM::VQADDsv1i64:
  case ARM::VQADDsv2i32:
  case ARM::VQADDsv2i64:
  case ARM::VQADDsv4i16:
  case ARM::VQADDsv4i32:
  case ARM::VQADDsv8i16:
  case ARM::VQADDsv8i8:
  case ARM::VQADDuv16i8:
  case ARM::VQADDuv1i64:
  case ARM::VQADDuv2i32:
  case ARM::VQADDuv2i64:
  case ARM::VQADDuv4i16:
  case ARM::VQADDuv4i32:
  case ARM::VQADDuv8i16:
  case ARM::VQADDuv8i8:
  case ARM::VQDMLALv2i64:
  case ARM::VQDMLALv4i32:
  case ARM::VQDMLSLv2i64:
  case ARM::VQDMLSLv4i32:
  case ARM::VQDMULHv2i32:
  case ARM::VQDMULHv4i16:
  case ARM::VQDMULHv4i32:
  case ARM::VQDMULHv8i16:
  case ARM::VQDMULLv2i64:
  case ARM::VQDMULLv4i32:
  case ARM::VQRDMULHv2i32:
  case ARM::VQRDMULHv4i16:
  case ARM::VQRDMULHv4i32:
  case ARM::VQRDMULHv8i16:
  case ARM::VQRSHLsv16i8:
  case ARM::VQRSHLsv1i64:
  case ARM::VQRSHLsv2i32:
  case ARM::VQRSHLsv2i64:
  case ARM::VQRSHLsv4i16:
  case ARM::VQRSHLsv4i32:
  case ARM::VQRSHLsv8i16:
  case ARM::VQRSHLsv8i8:
  case ARM::VQRSHLuv16i8:
  case ARM::VQRSHLuv1i64:
  case ARM::VQRSHLuv2i32:
  case ARM::VQRSHLuv2i64:
  case ARM::VQRSHLuv4i16:
  case ARM::VQRSHLuv4i32:
  case ARM::VQRSHLuv8i16:
  case ARM::VQRSHLuv8i8:
  case ARM::VQRSHRNsv2i32:
  case ARM::VQRSHRNsv4i16:
  case ARM::VQRSHRNsv8i8:
  case ARM::VQRSHRNuv2i32:
  case ARM::VQRSHRNuv4i16:
  case ARM::VQRSHRNuv8i8:
  case ARM::VQRSHRUNv2i32:
  case ARM::VQRSHRUNv4i16:
  case ARM::VQRSHRUNv8i8:
  case ARM::VQSHLsiv16i8:
  case ARM::VQSHLsiv1i64:
  case ARM::VQSHLsiv2i32:
  case ARM::VQSHLsiv2i64:
  case ARM::VQSHLsiv4i16:
  case ARM::VQSHLsiv4i32:
  case ARM::VQSHLsiv8i16:
  case ARM::VQSHLsiv8i8:
  case ARM::VQSHLsuv16i8:
  case ARM::VQSHLsuv1i64:
  case ARM::VQSHLsuv2i32:
  case ARM::VQSHLsuv2i64:
  case ARM::VQSHLsuv4i16:
  case ARM::VQSHLsuv4i32:
  case ARM::VQSHLsuv8i16:
  case ARM::VQSHLsuv8i8:
  case ARM::VQSHLsv16i8:
  case ARM::VQSHLsv1i64:
  case ARM::VQSHLsv2i32:
  case ARM::VQSHLsv2i64:
  case ARM::VQSHLsv4i16:
  case ARM::VQSHLsv4i32:
  case ARM::VQSHLsv8i16:
  case ARM::VQSHLsv8i8:
  case ARM::VQSHLuiv16i8:
  case ARM::VQSHLuiv1i64:
  case ARM::VQSHLuiv2i32:
  case ARM::VQSHLuiv2i64:
  case ARM::VQSHLuiv4i16:
  case ARM::VQSHLuiv4i32:
  case ARM::VQSHLuiv8i16:
  case ARM::VQSHLuiv8i8:
  case ARM::VQSHLuv16i8:
  case ARM::VQSHLuv1i64:
  case ARM::VQSHLuv2i32:
  case ARM::VQSHLuv2i64:
  case ARM::VQSHLuv4i16:
  case ARM::VQSHLuv4i32:
  case ARM::VQSHLuv8i16:
  case ARM::VQSHLuv8i8:
  case ARM::VQSHRNsv2i32:
  case ARM::VQSHRNsv4i16:
  case ARM::VQSHRNsv8i8:
  case ARM::VQSHRNuv2i32:
  case ARM::VQSHRNuv4i16:
  case ARM::VQSHRNuv8i8:
  case ARM::VQSHRUNv2i32:
  case ARM::VQSHRUNv4i16:
  case ARM::VQSHRUNv8i8:
  case ARM::VQSUBsv16i8:
  case ARM::VQSUBsv1i64:
  case ARM::VQSUBsv2i32:
  case ARM::VQSUBsv2i64:
  case ARM::VQSUBsv4i16:
  case ARM::VQSUBsv4i32:
  case ARM::VQSUBsv8i16:
  case ARM::VQSUBsv8i8:
  case ARM::VQSUBuv16i8:
  case ARM::VQSUBuv1i64:
  case ARM::VQSUBuv2i32:
  case ARM::VQSUBuv2i64:
  case ARM::VQSUBuv4i16:
  case ARM::VQSUBuv4i32:
  case ARM::VQSUBuv8i16:
  case ARM::VQSUBuv8i8:
  case ARM::VRADDHNv2i32:
  case ARM::VRADDHNv4i16:
  case ARM::VRADDHNv8i8:
  case ARM::VRHADDsv16i8:
  case ARM::VRHADDsv2i32:
  case ARM::VRHADDsv4i16:
  case ARM::VRHADDsv4i32:
  case ARM::VRHADDsv8i16:
  case ARM::VRHADDsv8i8:
  case ARM::VRHADDuv16i8:
  case ARM::VRHADDuv2i32:
  case ARM::VRHADDuv4i16:
  case ARM::VRHADDuv4i32:
  case ARM::VRHADDuv8i16:
  case ARM::VRHADDuv8i8:
  case ARM::VRSHLsv16i8:
  case ARM::VRSHLsv1i64:
  case ARM::VRSHLsv2i32:
  case ARM::VRSHLsv2i64:
  case ARM::VRSHLsv4i16:
  case ARM::VRSHLsv4i32:
  case ARM::VRSHLsv8i16:
  case ARM::VRSHLsv8i8:
  case ARM::VRSHLuv16i8:
  case ARM::VRSHLuv1i64:
  case ARM::VRSHLuv2i32:
  case ARM::VRSHLuv2i64:
  case ARM::VRSHLuv4i16:
  case ARM::VRSHLuv4i32:
  case ARM::VRSHLuv8i16:
  case ARM::VRSHLuv8i8:
  case ARM::VRSHRNv2i32:
  case ARM::VRSHRNv4i16:
  case ARM::VRSHRNv8i8:
  case ARM::VRSHRsv16i8:
  case ARM::VRSHRsv1i64:
  case ARM::VRSHRsv2i32:
  case ARM::VRSHRsv2i64:
  case ARM::VRSHRsv4i16:
  case ARM::VRSHRsv4i32:
  case ARM::VRSHRsv8i16:
  case ARM::VRSHRsv8i8:
  case ARM::VRSHRuv16i8:
  case ARM::VRSHRuv1i64:
  case ARM::VRSHRuv2i32:
  case ARM::VRSHRuv2i64:
  case ARM::VRSHRuv4i16:
  case ARM::VRSHRuv4i32:
  case ARM::VRSHRuv8i16:
  case ARM::VRSHRuv8i8:
  case ARM::VRSRAsv16i8:
  case ARM::VRSRAsv1i64:
  case ARM::VRSRAsv2i32:
  case ARM::VRSRAsv2i64:
  case ARM::VRSRAsv4i16:
  case ARM::VRSRAsv4i32:
  case ARM::VRSRAsv8i16:
  case ARM::VRSRAsv8i8:
  case ARM::VRSRAuv16i8:
  case ARM::VRSRAuv1i64:
  case ARM::VRSRAuv2i32:
  case ARM::VRSRAuv2i64:
  case ARM::VRSRAuv4i16:
  case ARM::VRSRAuv4i32:
  case ARM::VRSRAuv8i16:
  case ARM::VRSRAuv8i8:
  case ARM::VRSUBHNv2i32:
  case ARM::VRSUBHNv4i16:
  case ARM::VRSUBHNv8i8:
  case ARM::VSHLLi16:
  case ARM::VSHLLi32:
  case ARM::VSHLLi8:
  case ARM::VSHLLsv2i64:
  case ARM::VSHLLsv4i32:
  case ARM::VSHLLsv8i16:
  case ARM::VSHLLuv2i64:
  case ARM::VSHLLuv4i32:
  case ARM::VSHLLuv8i16:
  case ARM::VSHLiv16i8:
  case ARM::VSHLiv1i64:
  case ARM::VSHLiv2i32:
  case ARM::VSHLiv2i64:
  case ARM::VSHLiv4i16:
  case ARM::VSHLiv4i32:
  case ARM::VSHLiv8i16:
  case ARM::VSHLiv8i8:
  case ARM::VSHLsv16i8:
  case ARM::VSHLsv1i64:
  case ARM::VSHLsv2i32:
  case ARM::VSHLsv2i64:
  case ARM::VSHLsv4i16:
  case ARM::VSHLsv4i32:
  case ARM::VSHLsv8i16:
  case ARM::VSHLsv8i8:
  case ARM::VSHLuv16i8:
  case ARM::VSHLuv1i64:
  case ARM::VSHLuv2i32:
  case ARM::VSHLuv2i64:
  case ARM::VSHLuv4i16:
  case ARM::VSHLuv4i32:
  case ARM::VSHLuv8i16:
  case ARM::VSHLuv8i8:
  case ARM::VSHRNv2i32:
  case ARM::VSHRNv4i16:
  case ARM::VSHRNv8i8:
  case ARM::VSHRsv16i8:
  case ARM::VSHRsv1i64:
  case ARM::VSHRsv2i32:
  case ARM::VSHRsv2i64:
  case ARM::VSHRsv4i16:
  case ARM::VSHRsv4i32:
  case ARM::VSHRsv8i16:
  case ARM::VSHRsv8i8:
  case ARM::VSHRuv16i8:
  case ARM::VSHRuv1i64:
  case ARM::VSHRuv2i32:
  case ARM::VSHRuv2i64:
  case ARM::VSHRuv4i16:
  case ARM::VSHRuv4i32:
  case ARM::VSHRuv8i16:
  case ARM::VSHRuv8i8:
  case ARM::VSLIv1i64:
  case ARM::VSLIv2i64:
  case ARM::VSRAsv16i8:
  case ARM::VSRAsv1i64:
  case ARM::VSRAsv2i32:
  case ARM::VSRAsv2i64:
  case ARM::VSRAsv4i16:
  case ARM::VSRAsv4i32:
  case ARM::VSRAsv8i16:
  case ARM::VSRAsv8i8:
  case ARM::VSRAuv16i8:
  case ARM::VSRAuv1i64:
  case ARM::VSRAuv2i32:
  case ARM::VSRAuv2i64:
  case ARM::VSRAuv4i16:
  case ARM::VSRAuv4i32:
  case ARM::VSRAuv8i16:
  case ARM::VSRAuv8i8:
  case ARM::VSRIv1i64:
  case ARM::VSRIv2i64:
  case ARM::VSTMDIA:
  case ARM::VSTMSIA:
  case ARM::VSUBHNv2i32:
  case ARM::VSUBHNv4i16:
  case ARM::VSUBHNv8i8:
  case ARM::VSUBLsv2i64:
  case ARM::VSUBLsv4i32:
  case ARM::VSUBLsv8i16:
  case ARM::VSUBLuv2i64:
  case ARM::VSUBLuv4i32:
  case ARM::VSUBLuv8i16:
  case ARM::VSUBWsv2i64:
  case ARM::VSUBWsv4i32:
  case ARM::VSUBWsv8i16:
  case ARM::VSUBWuv2i64:
  case ARM::VSUBWuv4i32:
  case ARM::VSUBWuv8i16:
  case ARM::VSUBv16i8:
  case ARM::VSUBv1i64:
  case ARM::VSUBv2i32:
  case ARM::VSUBv2i64:
  case ARM::VSUBv4i16:
  case ARM::VSUBv4i32:
  case ARM::VSUBv8i16:
  case ARM::VSUBv8i8:
  case ARM::VSWPd:
  case ARM::VSWPq:
  case ARM::t2BFC:
  case ARM::t2CLZ:
  case ARM::t2CMNzri:
  case ARM::t2CMNzrr:
  case ARM::t2CMNzrs:
  case ARM::t2CMPri:
  case ARM::t2CMPrr:
  case ARM::t2CMPrs:
  case ARM::t2CPS3p:
  case ARM::t2LDMDB:
  case ARM::t2LDMDB_UPD:
  case ARM::t2LDMIA:
  case ARM::t2LDRBT:
  case ARM::t2LDRBi12:
  case ARM::t2LDRBi8:
  case ARM::t2LDRBpci:
  case ARM::t2LDRBs:
  case ARM::t2LDREX:
  case ARM::t2LDREXB:
  case ARM::t2LDREXH:
  case ARM::t2LDRHT:
  case ARM::t2LDRHi12:
  case ARM::t2LDRHi8:
  case ARM::t2LDRHpci:
  case ARM::t2LDRHs:
  case ARM::t2LDRSBT:
  case ARM::t2LDRSBi12:
  case ARM::t2LDRSBi8:
  case ARM::t2LDRSBpci:
  case ARM::t2LDRSBs:
  case ARM::t2LDRSHT:
  case ARM::t2LDRSHi12:
  case ARM::t2LDRSHi8:
  case ARM::t2LDRSHpci:
  case ARM::t2LDRSHs:
  case ARM::t2LDRT:
  case ARM::t2LDRi12:
  case ARM::t2LDRi8:
  case ARM::t2LDRpci:
  case ARM::t2LDRs:
  case ARM::t2MCRR:
  case ARM::t2MCRR2:
  case ARM::t2MOVCCi16:
  case ARM::t2MOVTi16:
  case ARM::t2MOVi:
  case ARM::t2MOVi16:
  case ARM::t2MOVr:
  case ARM::t2MRRC:
  case ARM::t2MRRC2:
  case ARM::t2MVNCCi:
  case ARM::t2MVNi:
  case ARM::t2MVNr:
  case ARM::t2MVNs:
  case ARM::t2RBIT:
  case ARM::t2REV:
  case ARM::t2REV16:
  case ARM::t2REVSH:
  case ARM::t2RRX:
  case ARM::t2STMDB:
  case ARM::t2STMDB_UPD:
  case ARM::t2STMIA:
  case ARM::t2STRBT:
  case ARM::t2STRBi12:
  case ARM::t2STRBi8:
  case ARM::t2STRBs:
  case ARM::t2STRHT:
  case ARM::t2STRHi12:
  case ARM::t2STRHi8:
  case ARM::t2STRHs:
  case ARM::t2STRT:
  case ARM::t2STRi12:
  case ARM::t2STRi8:
  case ARM::t2STRs:
  case ARM::t2TEQri:
  case ARM::t2TEQrr:
  case ARM::t2TEQrs:
  case ARM::t2TSTri:
  case ARM::t2TSTrr:
  case ARM::t2TSTrs:
  case ARM::tADDhirr:
  case ARM::tADDi3:
  case ARM::tADDrSPi:
  case ARM::tADDrr:
  case ARM::tASRri:
  case ARM::tCMNz:
  case ARM::tCMPhir:
  case ARM::tCMPi8:
  case ARM::tCMPr:
  case ARM::tLDMIA:
  case ARM::tLDRBi:
  case ARM::tLDRBr:
  case ARM::tLDRHi:
  case ARM::tLDRHr:
  case ARM::tLDRSB:
  case ARM::tLDRSH:
  case ARM::tLDRi:
  case ARM::tLDRpciDIS:
  case ARM::tLDRr:
  case ARM::tLDRspi:
  case ARM::tLSLri:
  case ARM::tLSRri:
  case ARM::tMOVr:
  case ARM::tMUL:
  case ARM::tREV:
  case ARM::tREV16:
  case ARM::tREVSH:
  case ARM::tSTMIA:
  case ARM::tSTRBi:
  case ARM::tSTRBr:
  case ARM::tSTRHi:
  case ARM::tSTRHr:
  case ARM::tSTRi:
  case ARM::tSTRr:
  case ARM::tSTRspi:
  case ARM::tSUBi3:
  case ARM::tSUBrr:
  case ARM::tSXTB:
  case ARM::tSXTH:
  case ARM::tTST:
  case ARM::tUXTB:
  case ARM::tUXTH:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::ADR: 
    case ARM::CLZ: 
    case ARM::CMNzri: 
    case ARM::CMNzrr: 
    case ARM::CMPri: 
    case ARM::CMPrr: 
    case ARM::MOVi: 
    case ARM::MOVi16: 
    case ARM::MOVr: 
    case ARM::MOVr_TC: 
    case ARM::MVNi: 
    case ARM::MVNr: 
    case ARM::RBIT: 
    case ARM::REV: 
    case ARM::REV16: 
    case ARM::REVSH: 
    case ARM::TEQri: 
    case ARM::TEQrr: 
    case ARM::TSTri: 
    case ARM::TSTrr: 
    case ARM::VMOVRS: 
    case ARM::VMOVSR: 
    case ARM::VMVNd: 
    case ARM::VMVNq: 
    case ARM::VSWPd: 
    case ARM::VSWPq: 
    case ARM::t2CLZ: 
    case ARM::t2CMNzri: 
    case ARM::t2CMNzrr: 
    case ARM::t2CMPri: 
    case ARM::t2CMPrr: 
    case ARM::t2LDRBpci: 
    case ARM::t2LDRHpci: 
    case ARM::t2LDRSBpci: 
    case ARM::t2LDRSHpci: 
    case ARM::t2LDRpci: 
    case ARM::t2MOVi: 
    case ARM::t2MOVi16: 
    case ARM::t2MOVr: 
    case ARM::t2MVNi: 
    case ARM::t2MVNr: 
    case ARM::t2RBIT: 
    case ARM::t2REV: 
    case ARM::t2REV16: 
    case ARM::t2REVSH: 
    case ARM::t2RRX: 
    case ARM::t2TEQri: 
    case ARM::t2TEQrr: 
    case ARM::t2TSTri: 
    case ARM::t2TSTrr: 
    case ARM::tCMNz: 
    case ARM::tCMPhir: 
    case ARM::tCMPi8: 
    case ARM::tCMPr: 
    case ARM::tLDRpciDIS: 
    case ARM::tMOVr: 
    case ARM::tREV: 
    case ARM::tREV16: 
    case ARM::tREVSH: 
    case ARM::tSXTB: 
    case ARM::tSXTH: 
    case ARM::tTST: 
    case ARM::tUXTB: 
    case ARM::tUXTH: printOperand(MI, 1, O); break;
    case ARM::BFC: 
    case ARM::t2BFC: printBitfieldInvMaskImmOperand(MI, 2, O); break;
    case ARM::CMNzrsi: 
    case ARM::CMPrsi: 
    case ARM::MOVsi: 
    case ARM::MVNsi: 
    case ARM::TEQrsi: 
    case ARM::TSTrsi: printSORegImmOperand(MI, 1, O); break;
    case ARM::CMNzrsr: 
    case ARM::CMPrsr: 
    case ARM::MOVsr: 
    case ARM::MVNsr: 
    case ARM::TEQrsr: 
    case ARM::TSTrsr: printSORegRegOperand(MI, 1, O); break;
    case ARM::CPS3p: 
    case ARM::MOVTi16: 
    case ARM::VABDLsv2i64: 
    case ARM::VABDLsv4i32: 
    case ARM::VABDLsv8i16: 
    case ARM::VABDLuv2i64: 
    case ARM::VABDLuv4i32: 
    case ARM::VABDLuv8i16: 
    case ARM::VABDsv16i8: 
    case ARM::VABDsv2i32: 
    case ARM::VABDsv4i16: 
    case ARM::VABDsv4i32: 
    case ARM::VABDsv8i16: 
    case ARM::VABDsv8i8: 
    case ARM::VABDuv16i8: 
    case ARM::VABDuv2i32: 
    case ARM::VABDuv4i16: 
    case ARM::VABDuv4i32: 
    case ARM::VABDuv8i16: 
    case ARM::VABDuv8i8: 
    case ARM::VADDHNv2i32: 
    case ARM::VADDHNv4i16: 
    case ARM::VADDHNv8i8: 
    case ARM::VADDLsv2i64: 
    case ARM::VADDLsv4i32: 
    case ARM::VADDLsv8i16: 
    case ARM::VADDLuv2i64: 
    case ARM::VADDLuv4i32: 
    case ARM::VADDLuv8i16: 
    case ARM::VADDWsv2i64: 
    case ARM::VADDWsv4i32: 
    case ARM::VADDWsv8i16: 
    case ARM::VADDWuv2i64: 
    case ARM::VADDWuv4i32: 
    case ARM::VADDWuv8i16: 
    case ARM::VADDv16i8: 
    case ARM::VADDv1i64: 
    case ARM::VADDv2i32: 
    case ARM::VADDv2i64: 
    case ARM::VADDv4i16: 
    case ARM::VADDv4i32: 
    case ARM::VADDv8i16: 
    case ARM::VADDv8i8: 
    case ARM::VCEQv16i8: 
    case ARM::VCEQv2i32: 
    case ARM::VCEQv4i16: 
    case ARM::VCEQv4i32: 
    case ARM::VCEQv8i16: 
    case ARM::VCEQv8i8: 
    case ARM::VCGEsv16i8: 
    case ARM::VCGEsv2i32: 
    case ARM::VCGEsv4i16: 
    case ARM::VCGEsv4i32: 
    case ARM::VCGEsv8i16: 
    case ARM::VCGEsv8i8: 
    case ARM::VCGEuv16i8: 
    case ARM::VCGEuv2i32: 
    case ARM::VCGEuv4i16: 
    case ARM::VCGEuv4i32: 
    case ARM::VCGEuv8i16: 
    case ARM::VCGEuv8i8: 
    case ARM::VCGTsv16i8: 
    case ARM::VCGTsv2i32: 
    case ARM::VCGTsv4i16: 
    case ARM::VCGTsv4i32: 
    case ARM::VCGTsv8i16: 
    case ARM::VCGTsv8i8: 
    case ARM::VCGTuv16i8: 
    case ARM::VCGTuv2i32: 
    case ARM::VCGTuv4i16: 
    case ARM::VCGTuv4i32: 
    case ARM::VCGTuv8i16: 
    case ARM::VCGTuv8i8: 
    case ARM::VHADDsv16i8: 
    case ARM::VHADDsv2i32: 
    case ARM::VHADDsv4i16: 
    case ARM::VHADDsv4i32: 
    case ARM::VHADDsv8i16: 
    case ARM::VHADDsv8i8: 
    case ARM::VHADDuv16i8: 
    case ARM::VHADDuv2i32: 
    case ARM::VHADDuv4i16: 
    case ARM::VHADDuv4i32: 
    case ARM::VHADDuv8i16: 
    case ARM::VHADDuv8i8: 
    case ARM::VHSUBsv16i8: 
    case ARM::VHSUBsv2i32: 
    case ARM::VHSUBsv4i16: 
    case ARM::VHSUBsv4i32: 
    case ARM::VHSUBsv8i16: 
    case ARM::VHSUBsv8i8: 
    case ARM::VHSUBuv16i8: 
    case ARM::VHSUBuv2i32: 
    case ARM::VHSUBuv4i16: 
    case ARM::VHSUBuv4i32: 
    case ARM::VHSUBuv8i16: 
    case ARM::VHSUBuv8i8: 
    case ARM::VMAXsv16i8: 
    case ARM::VMAXsv2i32: 
    case ARM::VMAXsv4i16: 
    case ARM::VMAXsv4i32: 
    case ARM::VMAXsv8i16: 
    case ARM::VMAXsv8i8: 
    case ARM::VMAXuv16i8: 
    case ARM::VMAXuv2i32: 
    case ARM::VMAXuv4i16: 
    case ARM::VMAXuv4i32: 
    case ARM::VMAXuv8i16: 
    case ARM::VMAXuv8i8: 
    case ARM::VMINsv16i8: 
    case ARM::VMINsv2i32: 
    case ARM::VMINsv4i16: 
    case ARM::VMINsv4i32: 
    case ARM::VMINsv8i16: 
    case ARM::VMINsv8i8: 
    case ARM::VMINuv16i8: 
    case ARM::VMINuv2i32: 
    case ARM::VMINuv4i16: 
    case ARM::VMINuv4i32: 
    case ARM::VMINuv8i16: 
    case ARM::VMINuv8i8: 
    case ARM::VMULLsv2i64: 
    case ARM::VMULLsv4i32: 
    case ARM::VMULLsv8i16: 
    case ARM::VMULLuv2i64: 
    case ARM::VMULLuv4i32: 
    case ARM::VMULLuv8i16: 
    case ARM::VMULv16i8: 
    case ARM::VMULv2i32: 
    case ARM::VMULv4i16: 
    case ARM::VMULv4i32: 
    case ARM::VMULv8i16: 
    case ARM::VMULv8i8: 
    case ARM::VPADDi16: 
    case ARM::VPADDi32: 
    case ARM::VPADDi8: 
    case ARM::VPMAXs16: 
    case ARM::VPMAXs32: 
    case ARM::VPMAXs8: 
    case ARM::VPMAXu16: 
    case ARM::VPMAXu32: 
    case ARM::VPMAXu8: 
    case ARM::VPMINs16: 
    case ARM::VPMINs32: 
    case ARM::VPMINs8: 
    case ARM::VPMINu16: 
    case ARM::VPMINu32: 
    case ARM::VPMINu8: 
    case ARM::VQADDsv16i8: 
    case ARM::VQADDsv1i64: 
    case ARM::VQADDsv2i32: 
    case ARM::VQADDsv2i64: 
    case ARM::VQADDsv4i16: 
    case ARM::VQADDsv4i32: 
    case ARM::VQADDsv8i16: 
    case ARM::VQADDsv8i8: 
    case ARM::VQADDuv16i8: 
    case ARM::VQADDuv1i64: 
    case ARM::VQADDuv2i32: 
    case ARM::VQADDuv2i64: 
    case ARM::VQADDuv4i16: 
    case ARM::VQADDuv4i32: 
    case ARM::VQADDuv8i16: 
    case ARM::VQADDuv8i8: 
    case ARM::VQDMULHv2i32: 
    case ARM::VQDMULHv4i16: 
    case ARM::VQDMULHv4i32: 
    case ARM::VQDMULHv8i16: 
    case ARM::VQDMULLv2i64: 
    case ARM::VQDMULLv4i32: 
    case ARM::VQRDMULHv2i32: 
    case ARM::VQRDMULHv4i16: 
    case ARM::VQRDMULHv4i32: 
    case ARM::VQRDMULHv8i16: 
    case ARM::VQRSHLsv16i8: 
    case ARM::VQRSHLsv1i64: 
    case ARM::VQRSHLsv2i32: 
    case ARM::VQRSHLsv2i64: 
    case ARM::VQRSHLsv4i16: 
    case ARM::VQRSHLsv4i32: 
    case ARM::VQRSHLsv8i16: 
    case ARM::VQRSHLsv8i8: 
    case ARM::VQRSHLuv16i8: 
    case ARM::VQRSHLuv1i64: 
    case ARM::VQRSHLuv2i32: 
    case ARM::VQRSHLuv2i64: 
    case ARM::VQRSHLuv4i16: 
    case ARM::VQRSHLuv4i32: 
    case ARM::VQRSHLuv8i16: 
    case ARM::VQRSHLuv8i8: 
    case ARM::VQRSHRNsv2i32: 
    case ARM::VQRSHRNsv4i16: 
    case ARM::VQRSHRNsv8i8: 
    case ARM::VQRSHRNuv2i32: 
    case ARM::VQRSHRNuv4i16: 
    case ARM::VQRSHRNuv8i8: 
    case ARM::VQRSHRUNv2i32: 
    case ARM::VQRSHRUNv4i16: 
    case ARM::VQRSHRUNv8i8: 
    case ARM::VQSHLsiv16i8: 
    case ARM::VQSHLsiv1i64: 
    case ARM::VQSHLsiv2i32: 
    case ARM::VQSHLsiv2i64: 
    case ARM::VQSHLsiv4i16: 
    case ARM::VQSHLsiv4i32: 
    case ARM::VQSHLsiv8i16: 
    case ARM::VQSHLsiv8i8: 
    case ARM::VQSHLsuv16i8: 
    case ARM::VQSHLsuv1i64: 
    case ARM::VQSHLsuv2i32: 
    case ARM::VQSHLsuv2i64: 
    case ARM::VQSHLsuv4i16: 
    case ARM::VQSHLsuv4i32: 
    case ARM::VQSHLsuv8i16: 
    case ARM::VQSHLsuv8i8: 
    case ARM::VQSHLsv16i8: 
    case ARM::VQSHLsv1i64: 
    case ARM::VQSHLsv2i32: 
    case ARM::VQSHLsv2i64: 
    case ARM::VQSHLsv4i16: 
    case ARM::VQSHLsv4i32: 
    case ARM::VQSHLsv8i16: 
    case ARM::VQSHLsv8i8: 
    case ARM::VQSHLuiv16i8: 
    case ARM::VQSHLuiv1i64: 
    case ARM::VQSHLuiv2i32: 
    case ARM::VQSHLuiv2i64: 
    case ARM::VQSHLuiv4i16: 
    case ARM::VQSHLuiv4i32: 
    case ARM::VQSHLuiv8i16: 
    case ARM::VQSHLuiv8i8: 
    case ARM::VQSHLuv16i8: 
    case ARM::VQSHLuv1i64: 
    case ARM::VQSHLuv2i32: 
    case ARM::VQSHLuv2i64: 
    case ARM::VQSHLuv4i16: 
    case ARM::VQSHLuv4i32: 
    case ARM::VQSHLuv8i16: 
    case ARM::VQSHLuv8i8: 
    case ARM::VQSHRNsv2i32: 
    case ARM::VQSHRNsv4i16: 
    case ARM::VQSHRNsv8i8: 
    case ARM::VQSHRNuv2i32: 
    case ARM::VQSHRNuv4i16: 
    case ARM::VQSHRNuv8i8: 
    case ARM::VQSHRUNv2i32: 
    case ARM::VQSHRUNv4i16: 
    case ARM::VQSHRUNv8i8: 
    case ARM::VQSUBsv16i8: 
    case ARM::VQSUBsv1i64: 
    case ARM::VQSUBsv2i32: 
    case ARM::VQSUBsv2i64: 
    case ARM::VQSUBsv4i16: 
    case ARM::VQSUBsv4i32: 
    case ARM::VQSUBsv8i16: 
    case ARM::VQSUBsv8i8: 
    case ARM::VQSUBuv16i8: 
    case ARM::VQSUBuv1i64: 
    case ARM::VQSUBuv2i32: 
    case ARM::VQSUBuv2i64: 
    case ARM::VQSUBuv4i16: 
    case ARM::VQSUBuv4i32: 
    case ARM::VQSUBuv8i16: 
    case ARM::VQSUBuv8i8: 
    case ARM::VRADDHNv2i32: 
    case ARM::VRADDHNv4i16: 
    case ARM::VRADDHNv8i8: 
    case ARM::VRHADDsv16i8: 
    case ARM::VRHADDsv2i32: 
    case ARM::VRHADDsv4i16: 
    case ARM::VRHADDsv4i32: 
    case ARM::VRHADDsv8i16: 
    case ARM::VRHADDsv8i8: 
    case ARM::VRHADDuv16i8: 
    case ARM::VRHADDuv2i32: 
    case ARM::VRHADDuv4i16: 
    case ARM::VRHADDuv4i32: 
    case ARM::VRHADDuv8i16: 
    case ARM::VRHADDuv8i8: 
    case ARM::VRSHLsv16i8: 
    case ARM::VRSHLsv1i64: 
    case ARM::VRSHLsv2i32: 
    case ARM::VRSHLsv2i64: 
    case ARM::VRSHLsv4i16: 
    case ARM::VRSHLsv4i32: 
    case ARM::VRSHLsv8i16: 
    case ARM::VRSHLsv8i8: 
    case ARM::VRSHLuv16i8: 
    case ARM::VRSHLuv1i64: 
    case ARM::VRSHLuv2i32: 
    case ARM::VRSHLuv2i64: 
    case ARM::VRSHLuv4i16: 
    case ARM::VRSHLuv4i32: 
    case ARM::VRSHLuv8i16: 
    case ARM::VRSHLuv8i8: 
    case ARM::VRSHRNv2i32: 
    case ARM::VRSHRNv4i16: 
    case ARM::VRSHRNv8i8: 
    case ARM::VRSHRsv16i8: 
    case ARM::VRSHRsv1i64: 
    case ARM::VRSHRsv2i32: 
    case ARM::VRSHRsv2i64: 
    case ARM::VRSHRsv4i16: 
    case ARM::VRSHRsv4i32: 
    case ARM::VRSHRsv8i16: 
    case ARM::VRSHRsv8i8: 
    case ARM::VRSHRuv16i8: 
    case ARM::VRSHRuv1i64: 
    case ARM::VRSHRuv2i32: 
    case ARM::VRSHRuv2i64: 
    case ARM::VRSHRuv4i16: 
    case ARM::VRSHRuv4i32: 
    case ARM::VRSHRuv8i16: 
    case ARM::VRSHRuv8i8: 
    case ARM::VRSUBHNv2i32: 
    case ARM::VRSUBHNv4i16: 
    case ARM::VRSUBHNv8i8: 
    case ARM::VSHLLi16: 
    case ARM::VSHLLi32: 
    case ARM::VSHLLi8: 
    case ARM::VSHLLsv2i64: 
    case ARM::VSHLLsv4i32: 
    case ARM::VSHLLsv8i16: 
    case ARM::VSHLLuv2i64: 
    case ARM::VSHLLuv4i32: 
    case ARM::VSHLLuv8i16: 
    case ARM::VSHLiv16i8: 
    case ARM::VSHLiv1i64: 
    case ARM::VSHLiv2i32: 
    case ARM::VSHLiv2i64: 
    case ARM::VSHLiv4i16: 
    case ARM::VSHLiv4i32: 
    case ARM::VSHLiv8i16: 
    case ARM::VSHLiv8i8: 
    case ARM::VSHLsv16i8: 
    case ARM::VSHLsv1i64: 
    case ARM::VSHLsv2i32: 
    case ARM::VSHLsv2i64: 
    case ARM::VSHLsv4i16: 
    case ARM::VSHLsv4i32: 
    case ARM::VSHLsv8i16: 
    case ARM::VSHLsv8i8: 
    case ARM::VSHLuv16i8: 
    case ARM::VSHLuv1i64: 
    case ARM::VSHLuv2i32: 
    case ARM::VSHLuv2i64: 
    case ARM::VSHLuv4i16: 
    case ARM::VSHLuv4i32: 
    case ARM::VSHLuv8i16: 
    case ARM::VSHLuv8i8: 
    case ARM::VSHRNv2i32: 
    case ARM::VSHRNv4i16: 
    case ARM::VSHRNv8i8: 
    case ARM::VSHRsv16i8: 
    case ARM::VSHRsv1i64: 
    case ARM::VSHRsv2i32: 
    case ARM::VSHRsv2i64: 
    case ARM::VSHRsv4i16: 
    case ARM::VSHRsv4i32: 
    case ARM::VSHRsv8i16: 
    case ARM::VSHRsv8i8: 
    case ARM::VSHRuv16i8: 
    case ARM::VSHRuv1i64: 
    case ARM::VSHRuv2i32: 
    case ARM::VSHRuv2i64: 
    case ARM::VSHRuv4i16: 
    case ARM::VSHRuv4i32: 
    case ARM::VSHRuv8i16: 
    case ARM::VSHRuv8i8: 
    case ARM::VSUBHNv2i32: 
    case ARM::VSUBHNv4i16: 
    case ARM::VSUBHNv8i8: 
    case ARM::VSUBLsv2i64: 
    case ARM::VSUBLsv4i32: 
    case ARM::VSUBLsv8i16: 
    case ARM::VSUBLuv2i64: 
    case ARM::VSUBLuv4i32: 
    case ARM::VSUBLuv8i16: 
    case ARM::VSUBWsv2i64: 
    case ARM::VSUBWsv4i32: 
    case ARM::VSUBWsv8i16: 
    case ARM::VSUBWuv2i64: 
    case ARM::VSUBWuv4i32: 
    case ARM::VSUBWuv8i16: 
    case ARM::VSUBv16i8: 
    case ARM::VSUBv1i64: 
    case ARM::VSUBv2i32: 
    case ARM::VSUBv2i64: 
    case ARM::VSUBv4i16: 
    case ARM::VSUBv4i32: 
    case ARM::VSUBv8i16: 
    case ARM::VSUBv8i8: 
    case ARM::t2CPS3p: 
    case ARM::t2MOVCCi16: 
    case ARM::t2MOVTi16: 
    case ARM::t2MVNCCi: 
    case ARM::tADDhirr: printOperand(MI, 2, O); break;
    case ARM::LDMDA: 
    case ARM::LDMDB: 
    case ARM::LDMIA: 
    case ARM::LDMIB: 
    case ARM::STMDA: 
    case ARM::STMDB: 
    case ARM::STMIA: 
    case ARM::STMIB: 
    case ARM::VLDMDIA: 
    case ARM::VLDMSIA: 
    case ARM::VSTMDIA: 
    case ARM::VSTMSIA: 
    case ARM::t2LDMDB: 
    case ARM::t2LDMIA: 
    case ARM::t2STMDB: 
    case ARM::t2STMIA: 
    case ARM::tLDMIA: 
    case ARM::tSTMIA: printRegisterList(MI, 3, O); break;
    case ARM::LDRBi12: 
    case ARM::LDRcp: 
    case ARM::LDRi12: 
    case ARM::STRBi12: 
    case ARM::STRi12: 
    case ARM::t2LDRBi12: 
    case ARM::t2LDRHi12: 
    case ARM::t2LDRSBi12: 
    case ARM::t2LDRSHi12: 
    case ARM::t2LDRi12: 
    case ARM::t2STRBi12: 
    case ARM::t2STRHi12: 
    case ARM::t2STRi12: printAddrModeImm12Operand(MI, 1, O); break;
    case ARM::LDRBrs: 
    case ARM::LDRrs: 
    case ARM::STRBrs: 
    case ARM::STRrs: printAddrMode2Operand(MI, 1, O); break;
    case ARM::LDREX: 
    case ARM::LDREXB: 
    case ARM::LDREXH: 
    case ARM::t2LDREX: 
    case ARM::t2LDREXB: 
    case ARM::t2LDREXH: printAddrMode7Operand(MI, 1, O); break;
    case ARM::LDRH: 
    case ARM::LDRSB: 
    case ARM::LDRSH: 
    case ARM::STRH: printAddrMode3Operand(MI, 1, O); break;
    case ARM::MCRR2: 
    case ARM::MRRC2: 
    case ARM::t2MCRR: 
    case ARM::t2MCRR2: 
    case ARM::t2MRRC: 
    case ARM::t2MRRC2: printCImmediate(MI, 4, O); break;
    case ARM::VABALsv2i64: 
    case ARM::VABALsv4i32: 
    case ARM::VABALsv8i16: 
    case ARM::VABALuv2i64: 
    case ARM::VABALuv4i32: 
    case ARM::VABALuv8i16: 
    case ARM::VABAsv16i8: 
    case ARM::VABAsv2i32: 
    case ARM::VABAsv4i16: 
    case ARM::VABAsv4i32: 
    case ARM::VABAsv8i16: 
    case ARM::VABAsv8i8: 
    case ARM::VABAuv16i8: 
    case ARM::VABAuv2i32: 
    case ARM::VABAuv4i16: 
    case ARM::VABAuv4i32: 
    case ARM::VABAuv8i16: 
    case ARM::VABAuv8i8: 
    case ARM::VMLALsv2i64: 
    case ARM::VMLALsv4i32: 
    case ARM::VMLALsv8i16: 
    case ARM::VMLALuv2i64: 
    case ARM::VMLALuv4i32: 
    case ARM::VMLALuv8i16: 
    case ARM::VMLAv16i8: 
    case ARM::VMLAv2i32: 
    case ARM::VMLAv4i16: 
    case ARM::VMLAv4i32: 
    case ARM::VMLAv8i16: 
    case ARM::VMLAv8i8: 
    case ARM::VMLSLsv2i64: 
    case ARM::VMLSLsv4i32: 
    case ARM::VMLSLsv8i16: 
    case ARM::VMLSLuv2i64: 
    case ARM::VMLSLuv4i32: 
    case ARM::VMLSLuv8i16: 
    case ARM::VMLSv16i8: 
    case ARM::VMLSv2i32: 
    case ARM::VMLSv4i16: 
    case ARM::VMLSv4i32: 
    case ARM::VMLSv8i16: 
    case ARM::VMLSv8i8: 
    case ARM::VQDMLALv2i64: 
    case ARM::VQDMLALv4i32: 
    case ARM::VQDMLSLv2i64: 
    case ARM::VQDMLSLv4i32: 
    case ARM::VRSRAsv16i8: 
    case ARM::VRSRAsv1i64: 
    case ARM::VRSRAsv2i32: 
    case ARM::VRSRAsv2i64: 
    case ARM::VRSRAsv4i16: 
    case ARM::VRSRAsv4i32: 
    case ARM::VRSRAsv8i16: 
    case ARM::VRSRAsv8i8: 
    case ARM::VRSRAuv16i8: 
    case ARM::VRSRAuv1i64: 
    case ARM::VRSRAuv2i32: 
    case ARM::VRSRAuv2i64: 
    case ARM::VRSRAuv4i16: 
    case ARM::VRSRAuv4i32: 
    case ARM::VRSRAuv8i16: 
    case ARM::VRSRAuv8i8: 
    case ARM::VSLIv1i64: 
    case ARM::VSLIv2i64: 
    case ARM::VSRAsv16i8: 
    case ARM::VSRAsv1i64: 
    case ARM::VSRAsv2i32: 
    case ARM::VSRAsv2i64: 
    case ARM::VSRAsv4i16: 
    case ARM::VSRAsv4i32: 
    case ARM::VSRAsv8i16: 
    case ARM::VSRAsv8i8: 
    case ARM::VSRAuv16i8: 
    case ARM::VSRAuv1i64: 
    case ARM::VSRAuv2i32: 
    case ARM::VSRAuv2i64: 
    case ARM::VSRAuv4i16: 
    case ARM::VSRAuv4i32: 
    case ARM::VSRAuv8i16: 
    case ARM::VSRAuv8i8: 
    case ARM::VSRIv1i64: 
    case ARM::VSRIv2i64: 
    case ARM::tADDi3: 
    case ARM::tADDrr: 
    case ARM::tASRri: 
    case ARM::tLSLri: 
    case ARM::tLSRri: 
    case ARM::tSUBi3: 
    case ARM::tSUBrr: printOperand(MI, 3, O); break;
    case ARM::t2CMNzrs: 
    case ARM::t2CMPrs: 
    case ARM::t2MVNs: 
    case ARM::t2TEQrs: 
    case ARM::t2TSTrs: printT2SOOperand(MI, 1, O); break;
    case ARM::t2LDMDB_UPD: 
    case ARM::t2STMDB_UPD: printRegisterList(MI, 4, O); break;
    case ARM::t2LDRBT: 
    case ARM::t2LDRBi8: 
    case ARM::t2LDRHT: 
    case ARM::t2LDRHi8: 
    case ARM::t2LDRSBT: 
    case ARM::t2LDRSBi8: 
    case ARM::t2LDRSHT: 
    case ARM::t2LDRSHi8: 
    case ARM::t2LDRT: 
    case ARM::t2LDRi8: 
    case ARM::t2STRBT: 
    case ARM::t2STRBi8: 
    case ARM::t2STRHT: 
    case ARM::t2STRHi8: 
    case ARM::t2STRT: 
    case ARM::t2STRi8: printT2AddrModeImm8Operand(MI, 1, O); break;
    case ARM::t2LDRBs: 
    case ARM::t2LDRHs: 
    case ARM::t2LDRSBs: 
    case ARM::t2LDRSHs: 
    case ARM::t2LDRs: 
    case ARM::t2STRBs: 
    case ARM::t2STRHs: 
    case ARM::t2STRs: printT2AddrModeSoRegOperand(MI, 1, O); break;
    case ARM::tADDrSPi: printThumbS4ImmOperand(MI, 2, O); break;
    case ARM::tLDRBi: 
    case ARM::tSTRBi: printThumbAddrModeImm5S1Operand(MI, 1, O); break;
    case ARM::tLDRBr: 
    case ARM::tLDRHr: 
    case ARM::tLDRSB: 
    case ARM::tLDRSH: 
    case ARM::tLDRr: 
    case ARM::tSTRBr: 
    case ARM::tSTRHr: 
    case ARM::tSTRr: printThumbAddrModeRROperand(MI, 1, O); break;
    case ARM::tLDRHi: 
    case ARM::tSTRHi: printThumbAddrModeImm5S2Operand(MI, 1, O); break;
    case ARM::tLDRi: 
    case ARM::tSTRi: printThumbAddrModeImm5S4Operand(MI, 1, O); break;
    case ARM::tLDRspi: 
    case ARM::tSTRspi: printThumbAddrModeSPOperand(MI, 1, O); break;
    case ARM::tMUL: printOperand(MI, 0, O); break;
    }
    return;
    break;
  case ARM::BFI:
  case ARM::VBIFd:
  case ARM::VBIFq:
  case ARM::VBITd:
  case ARM::VBITq:
  case ARM::VBSLd:
  case ARM::VBSLq:
  case ARM::t2BFI:
  case ARM::t2MOVCCasr:
  case ARM::t2MOVCClsl:
  case ARM::t2MOVCClsr:
  case ARM::t2MOVCCror:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::BFI: 
    case ARM::t2BFI: printBitfieldInvMaskImmOperand(MI, 3, O); break;
    case ARM::VBIFd: 
    case ARM::VBIFq: 
    case ARM::VBITd: 
    case ARM::VBITq: 
    case ARM::VBSLd: 
    case ARM::VBSLq: 
    case ARM::t2MOVCCasr: 
    case ARM::t2MOVCClsl: 
    case ARM::t2MOVCClsr: 
    case ARM::t2MOVCCror: printOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::BFI4p:
  case ARM::t2BFI4p:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::BKPT:
  case ARM::BLX_pred:
  case ARM::BL_pred:
  case ARM::BXJ:
  case ARM::BX_pred:
  case ARM::Bcc:
  case ARM::CPS2p:
  case ARM::DBG:
  case ARM::LDC2L_OFFSET:
  case ARM::LDC2_OFFSET:
  case ARM::LDC2_POST:
  case ARM::SMC:
  case ARM::STC2L_OFFSET:
  case ARM::STC2_OFFSET:
  case ARM::STC2_POST:
  case ARM::SVC:
  case ARM::VABSv16i8:
  case ARM::VABSv2i32:
  case ARM::VABSv4i16:
  case ARM::VABSv4i32:
  case ARM::VABSv8i16:
  case ARM::VABSv8i8:
  case ARM::VCLSv16i8:
  case ARM::VCLSv2i32:
  case ARM::VCLSv4i16:
  case ARM::VCLSv4i32:
  case ARM::VCLSv8i16:
  case ARM::VCLSv8i8:
  case ARM::VCLZv16i8:
  case ARM::VCLZv2i32:
  case ARM::VCLZv4i16:
  case ARM::VCLZv4i32:
  case ARM::VCLZv8i16:
  case ARM::VCLZv8i8:
  case ARM::VMOVLsv2i64:
  case ARM::VMOVLsv4i32:
  case ARM::VMOVLsv8i16:
  case ARM::VMOVLuv2i64:
  case ARM::VMOVLuv4i32:
  case ARM::VMOVLuv8i16:
  case ARM::VMOVNv2i32:
  case ARM::VMOVNv4i16:
  case ARM::VMOVNv8i8:
  case ARM::VNEGs16d:
  case ARM::VNEGs16q:
  case ARM::VNEGs32d:
  case ARM::VNEGs32q:
  case ARM::VNEGs8d:
  case ARM::VNEGs8q:
  case ARM::VPADALsv16i8:
  case ARM::VPADALsv2i32:
  case ARM::VPADALsv4i16:
  case ARM::VPADALsv4i32:
  case ARM::VPADALsv8i16:
  case ARM::VPADALsv8i8:
  case ARM::VPADALuv16i8:
  case ARM::VPADALuv2i32:
  case ARM::VPADALuv4i16:
  case ARM::VPADALuv4i32:
  case ARM::VPADALuv8i16:
  case ARM::VPADALuv8i8:
  case ARM::VPADDLsv16i8:
  case ARM::VPADDLsv2i32:
  case ARM::VPADDLsv4i16:
  case ARM::VPADDLsv4i32:
  case ARM::VPADDLsv8i16:
  case ARM::VPADDLsv8i8:
  case ARM::VPADDLuv16i8:
  case ARM::VPADDLuv2i32:
  case ARM::VPADDLuv4i16:
  case ARM::VPADDLuv4i32:
  case ARM::VPADDLuv8i16:
  case ARM::VPADDLuv8i8:
  case ARM::VQABSv16i8:
  case ARM::VQABSv2i32:
  case ARM::VQABSv4i16:
  case ARM::VQABSv4i32:
  case ARM::VQABSv8i16:
  case ARM::VQABSv8i8:
  case ARM::VQMOVNsuv2i32:
  case ARM::VQMOVNsuv4i16:
  case ARM::VQMOVNsuv8i8:
  case ARM::VQMOVNsv2i32:
  case ARM::VQMOVNsv4i16:
  case ARM::VQMOVNsv8i8:
  case ARM::VQMOVNuv2i32:
  case ARM::VQMOVNuv4i16:
  case ARM::VQMOVNuv8i8:
  case ARM::VQNEGv16i8:
  case ARM::VQNEGv2i32:
  case ARM::VQNEGv4i16:
  case ARM::VQNEGv4i32:
  case ARM::VQNEGv8i16:
  case ARM::VQNEGv8i8:
  case ARM::VRECPEd:
  case ARM::VRECPEq:
  case ARM::VRSQRTEd:
  case ARM::VRSQRTEq:
  case ARM::t2BXJ:
  case ARM::t2Bcc:
  case ARM::t2CPS2p:
  case ARM::t2DBG:
  case ARM::t2RFEDB:
  case ARM::t2RFEIA:
  case ARM::t2SMC:
  case ARM::tADC:
  case ARM::tADDi8:
  case ARM::tADDrSP:
  case ARM::tADDspr:
  case ARM::tAND:
  case ARM::tASRrr:
  case ARM::tBIC:
  case ARM::tBL:
  case ARM::tBLXi:
  case ARM::tBLXr:
  case ARM::tBX:
  case ARM::tBcc:
  case ARM::tCBNZ:
  case ARM::tCBZ:
  case ARM::tEOR:
  case ARM::tLSLrr:
  case ARM::tLSRrr:
  case ARM::tMOVSr:
  case ARM::tORR:
  case ARM::tROR:
  case ARM::tSBC:
  case ARM::tSUBi8:
  case ARM::tSVC:
    return;
    break;
  case ARM::CDP:
  case ARM::MCR:
    switch (MI->getOpcode()) {
    case ARM::CDP: printCImmediate(MI, 2, O); break;
    case ARM::MCR: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printCImmediate(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::FCONSTD:
  case ARM::FCONSTS:
  case ARM::LDC2L_PRE:
  case ARM::LDC2_PRE:
  case ARM::LDCL_OFFSET:
  case ARM::LDC_OFFSET:
  case ARM::LDC_POST:
  case ARM::MRS:
  case ARM::MRSsys:
  case ARM::STC2L_PRE:
  case ARM::STC2_PRE:
  case ARM::STCL_OFFSET:
  case ARM::STC_OFFSET:
  case ARM::STC_POST:
  case ARM::VABSD:
  case ARM::VABSS:
  case ARM::VABSfd:
  case ARM::VABSfq:
  case ARM::VCEQzv16i8:
  case ARM::VCEQzv2i32:
  case ARM::VCEQzv4i16:
  case ARM::VCEQzv4i32:
  case ARM::VCEQzv8i16:
  case ARM::VCEQzv8i8:
  case ARM::VCGEzv16i8:
  case ARM::VCGEzv2i32:
  case ARM::VCGEzv4i16:
  case ARM::VCGEzv4i32:
  case ARM::VCGEzv8i16:
  case ARM::VCGEzv8i8:
  case ARM::VCGTzv16i8:
  case ARM::VCGTzv2i32:
  case ARM::VCGTzv4i16:
  case ARM::VCGTzv4i32:
  case ARM::VCGTzv8i16:
  case ARM::VCGTzv8i8:
  case ARM::VCLEzv16i8:
  case ARM::VCLEzv2i32:
  case ARM::VCLEzv4i16:
  case ARM::VCLEzv4i32:
  case ARM::VCLEzv8i16:
  case ARM::VCLEzv8i8:
  case ARM::VCLTzv16i8:
  case ARM::VCLTzv2i32:
  case ARM::VCLTzv4i16:
  case ARM::VCLTzv4i32:
  case ARM::VCLTzv8i16:
  case ARM::VCLTzv8i8:
  case ARM::VCMPD:
  case ARM::VCMPED:
  case ARM::VCMPES:
  case ARM::VCMPS:
  case ARM::VCNTd:
  case ARM::VCNTq:
  case ARM::VCVTf2xsd:
  case ARM::VCVTf2xsq:
  case ARM::VCVTf2xud:
  case ARM::VCVTf2xuq:
  case ARM::VCVTxs2fd:
  case ARM::VCVTxs2fq:
  case ARM::VCVTxu2fd:
  case ARM::VCVTxu2fq:
  case ARM::VDUP16d:
  case ARM::VDUP16q:
  case ARM::VDUP32d:
  case ARM::VDUP32q:
  case ARM::VDUP8d:
  case ARM::VDUP8q:
  case ARM::VLDRS:
  case ARM::VMOVD:
  case ARM::VMOVS:
  case ARM::VMRS:
  case ARM::VMRS_FPEXC:
  case ARM::VMRS_FPSID:
  case ARM::VNEGD:
  case ARM::VNEGS:
  case ARM::VNEGf32q:
  case ARM::VNEGfd:
  case ARM::VRECPEfd:
  case ARM::VRECPEfq:
  case ARM::VREV16d8:
  case ARM::VREV16q8:
  case ARM::VREV32d16:
  case ARM::VREV32d8:
  case ARM::VREV32q16:
  case ARM::VREV32q8:
  case ARM::VREV64d16:
  case ARM::VREV64d32:
  case ARM::VREV64d8:
  case ARM::VREV64q16:
  case ARM::VREV64q32:
  case ARM::VREV64q8:
  case ARM::VRSQRTEfd:
  case ARM::VRSQRTEfq:
  case ARM::VSLTOD:
  case ARM::VSLTOS:
  case ARM::VSQRTD:
  case ARM::VSQRTS:
  case ARM::VSTRS:
  case ARM::VTOSLD:
  case ARM::VTOSLS:
  case ARM::VTOULD:
  case ARM::VTOULS:
  case ARM::VTRNd16:
  case ARM::VTRNd32:
  case ARM::VTRNd8:
  case ARM::VTRNq16:
  case ARM::VTRNq32:
  case ARM::VTRNq8:
  case ARM::VULTOD:
  case ARM::VULTOS:
  case ARM::VUZPd16:
  case ARM::VUZPd32:
  case ARM::VUZPd8:
  case ARM::VUZPq16:
  case ARM::VUZPq32:
  case ARM::VUZPq8:
  case ARM::VZIPd16:
  case ARM::VZIPd32:
  case ARM::VZIPd8:
  case ARM::VZIPq16:
  case ARM::VZIPq32:
  case ARM::VZIPq8:
  case ARM::t2MRS:
  case ARM::t2MRSsys:
  case ARM::t2RFEDBW:
  case ARM::t2RFEIAW:
    switch (MI->getOpcode()) {
    case ARM::FCONSTD: printVFPf64ImmOperand(MI, 1, O); break;
    case ARM::FCONSTS: printVFPf32ImmOperand(MI, 1, O); break;
    case ARM::LDC2L_PRE: 
    case ARM::LDC2_PRE: 
    case ARM::STC2L_PRE: 
    case ARM::STC2_PRE: 
    case ARM::t2RFEDBW: 
    case ARM::t2RFEIAW: O << '!'; break;
    case ARM::LDCL_OFFSET: 
    case ARM::LDC_OFFSET: 
    case ARM::LDC_POST: 
    case ARM::STCL_OFFSET: 
    case ARM::STC_OFFSET: 
    case ARM::STC_POST: printAddrMode2Operand(MI, 2, O); break;
    case ARM::MRS: O << ", apsr"; break;
    case ARM::MRSsys: 
    case ARM::t2MRSsys: O << ", spsr"; break;
    case ARM::VABSD: 
    case ARM::VABSS: 
    case ARM::VABSfd: 
    case ARM::VABSfq: 
    case ARM::VCMPD: 
    case ARM::VCMPED: 
    case ARM::VCMPES: 
    case ARM::VCMPS: 
    case ARM::VCNTd: 
    case ARM::VCNTq: 
    case ARM::VDUP16d: 
    case ARM::VDUP16q: 
    case ARM::VDUP32d: 
    case ARM::VDUP32q: 
    case ARM::VDUP8d: 
    case ARM::VDUP8q: 
    case ARM::VMOVD: 
    case ARM::VMOVS: 
    case ARM::VNEGD: 
    case ARM::VNEGS: 
    case ARM::VNEGf32q: 
    case ARM::VNEGfd: 
    case ARM::VRECPEfd: 
    case ARM::VRECPEfq: 
    case ARM::VREV16d8: 
    case ARM::VREV16q8: 
    case ARM::VREV32d16: 
    case ARM::VREV32d8: 
    case ARM::VREV32q16: 
    case ARM::VREV32q8: 
    case ARM::VREV64d16: 
    case ARM::VREV64d32: 
    case ARM::VREV64d8: 
    case ARM::VREV64q16: 
    case ARM::VREV64q32: 
    case ARM::VREV64q8: 
    case ARM::VRSQRTEfd: 
    case ARM::VRSQRTEfq: 
    case ARM::VSQRTD: 
    case ARM::VSQRTS: 
    case ARM::VTRNd16: 
    case ARM::VTRNd32: 
    case ARM::VTRNd8: 
    case ARM::VTRNq16: 
    case ARM::VTRNq32: 
    case ARM::VTRNq8: 
    case ARM::VUZPd16: 
    case ARM::VUZPd32: 
    case ARM::VUZPd8: 
    case ARM::VUZPq16: 
    case ARM::VUZPq32: 
    case ARM::VUZPq8: 
    case ARM::VZIPd16: 
    case ARM::VZIPd32: 
    case ARM::VZIPd8: 
    case ARM::VZIPq16: 
    case ARM::VZIPq32: 
    case ARM::VZIPq8: printOperand(MI, 1, O); break;
    case ARM::VCEQzv16i8: 
    case ARM::VCEQzv2i32: 
    case ARM::VCEQzv4i16: 
    case ARM::VCEQzv4i32: 
    case ARM::VCEQzv8i16: 
    case ARM::VCEQzv8i8: 
    case ARM::VCGEzv16i8: 
    case ARM::VCGEzv2i32: 
    case ARM::VCGEzv4i16: 
    case ARM::VCGEzv4i32: 
    case ARM::VCGEzv8i16: 
    case ARM::VCGEzv8i8: 
    case ARM::VCGTzv16i8: 
    case ARM::VCGTzv2i32: 
    case ARM::VCGTzv4i16: 
    case ARM::VCGTzv4i32: 
    case ARM::VCGTzv8i16: 
    case ARM::VCGTzv8i8: 
    case ARM::VCLEzv16i8: 
    case ARM::VCLEzv2i32: 
    case ARM::VCLEzv4i16: 
    case ARM::VCLEzv4i32: 
    case ARM::VCLEzv8i16: 
    case ARM::VCLEzv8i8: 
    case ARM::VCLTzv16i8: 
    case ARM::VCLTzv2i32: 
    case ARM::VCLTzv4i16: 
    case ARM::VCLTzv4i32: 
    case ARM::VCLTzv8i16: 
    case ARM::VCLTzv8i8: O << ", #0"; break;
    case ARM::VCVTf2xsd: 
    case ARM::VCVTf2xsq: 
    case ARM::VCVTf2xud: 
    case ARM::VCVTf2xuq: 
    case ARM::VCVTxs2fd: 
    case ARM::VCVTxs2fq: 
    case ARM::VCVTxu2fd: 
    case ARM::VCVTxu2fq: 
    case ARM::VSLTOD: 
    case ARM::VSLTOS: 
    case ARM::VTOSLD: 
    case ARM::VTOSLS: 
    case ARM::VTOULD: 
    case ARM::VTOULS: 
    case ARM::VULTOD: 
    case ARM::VULTOS: printOperand(MI, 2, O); break;
    case ARM::VLDRS: 
    case ARM::VSTRS: printAddrMode5Operand(MI, 1, O); break;
    case ARM::VMRS: O << ", fpscr"; break;
    case ARM::VMRS_FPEXC: O << ", fpexc"; break;
    case ARM::VMRS_FPSID: O << ", fpsid"; break;
    case ARM::t2MRS: O << ", cpsr"; break;
    }
    return;
    break;
  case ARM::LDCL_POST:
  case ARM::STCL_POST:
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    printPostIdxImm8s4Operand(MI, 3, O); 
    return;
    break;
  case ARM::LDCL_PRE:
  case ARM::LDC_PRE:
  case ARM::STCL_PRE:
  case ARM::STC_PRE:
    printAddrMode2Operand(MI, 2, O); 
    O << '!'; 
    return;
    break;
  case ARM::LDMDA_UPD:
  case ARM::LDMDB_UPD:
  case ARM::LDMIA_UPD:
  case ARM::LDMIB_UPD:
  case ARM::STMDA_UPD:
  case ARM::STMDB_UPD:
  case ARM::STMIA_UPD:
  case ARM::STMIB_UPD:
  case ARM::VLDMDDB_UPD:
  case ARM::VLDMDIA_UPD:
  case ARM::VLDMSDB_UPD:
  case ARM::VLDMSIA_UPD:
  case ARM::VSTMDDB_UPD:
  case ARM::VSTMDIA_UPD:
  case ARM::VSTMSDB_UPD:
  case ARM::VSTMSIA_UPD:
  case ARM::t2LDMIA_UPD:
  case ARM::t2STMIA_UPD:
    O << "!, "; 
    printRegisterList(MI, 4, O); 
    return;
    break;
  case ARM::LDRBT_POST_IMM:
  case ARM::LDRBT_POST_REG:
  case ARM::LDRB_POST_IMM:
  case ARM::LDRB_POST_REG:
  case ARM::LDRHTi:
  case ARM::LDRHTr:
  case ARM::LDRH_POST:
  case ARM::LDRSBTi:
  case ARM::LDRSBTr:
  case ARM::LDRSB_POST:
  case ARM::LDRSHTi:
  case ARM::LDRSHTr:
  case ARM::LDRSH_POST:
  case ARM::LDRT_POST_IMM:
  case ARM::LDRT_POST_REG:
  case ARM::LDR_POST_IMM:
  case ARM::LDR_POST_REG:
  case ARM::STRBT_POST_IMM:
  case ARM::STRBT_POST_REG:
  case ARM::STRB_POST_IMM:
  case ARM::STRB_POST_REG:
  case ARM::STRHTi:
  case ARM::STRHTr:
  case ARM::STRH_POST:
  case ARM::STRT_POST_IMM:
  case ARM::STRT_POST_REG:
  case ARM::STR_POST_IMM:
  case ARM::STR_POST_REG:
    O << ", "; 
    printAddrMode7Operand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRBT_POST_IMM: 
    case ARM::LDRBT_POST_REG: 
    case ARM::LDRB_POST_IMM: 
    case ARM::LDRB_POST_REG: 
    case ARM::LDRT_POST_IMM: 
    case ARM::LDRT_POST_REG: 
    case ARM::LDR_POST_IMM: 
    case ARM::LDR_POST_REG: 
    case ARM::STRBT_POST_IMM: 
    case ARM::STRBT_POST_REG: 
    case ARM::STRB_POST_IMM: 
    case ARM::STRB_POST_REG: 
    case ARM::STRT_POST_IMM: 
    case ARM::STRT_POST_REG: 
    case ARM::STR_POST_IMM: 
    case ARM::STR_POST_REG: printAddrMode2OffsetOperand(MI, 3, O); break;
    case ARM::LDRHTi: 
    case ARM::LDRSBTi: 
    case ARM::LDRSHTi: 
    case ARM::STRHTi: printPostIdxImm8Operand(MI, 3, O); break;
    case ARM::LDRHTr: 
    case ARM::LDRSBTr: 
    case ARM::LDRSHTr: 
    case ARM::STRHTr: printPostIdxRegOperand(MI, 3, O); break;
    case ARM::LDRH_POST: 
    case ARM::LDRSB_POST: 
    case ARM::LDRSH_POST: 
    case ARM::STRH_POST: printAddrMode3OffsetOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::LDRB_PRE:
  case ARM::LDRH_PRE:
  case ARM::LDRSB_PRE:
  case ARM::LDRSH_PRE:
  case ARM::LDR_PRE:
  case ARM::STRB_PRE_IMM:
  case ARM::STRB_PRE_REG:
  case ARM::STRH_PRE:
  case ARM::STR_PRE_IMM:
  case ARM::STR_PRE_REG:
  case ARM::t2LDRB_PRE:
  case ARM::t2LDRH_PRE:
  case ARM::t2LDRSB_PRE:
  case ARM::t2LDRSH_PRE:
  case ARM::t2LDR_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRB_PRE: 
    case ARM::LDR_PRE: 
    case ARM::STRB_PRE_REG: 
    case ARM::STR_PRE_REG: printAddrMode2Operand(MI, 2, O); break;
    case ARM::LDRH_PRE: 
    case ARM::LDRSB_PRE: 
    case ARM::LDRSH_PRE: 
    case ARM::STRH_PRE: printAddrMode3Operand(MI, 2, O); break;
    case ARM::STRB_PRE_IMM: 
    case ARM::STR_PRE_IMM: printAddrModeImm12Operand(MI, 2, O); break;
    case ARM::t2LDRB_PRE: 
    case ARM::t2LDRH_PRE: 
    case ARM::t2LDRSB_PRE: 
    case ARM::t2LDRSH_PRE: 
    case ARM::t2LDR_PRE: printT2AddrModeImm8Operand(MI, 2, O); break;
    }
    O << '!'; 
    return;
    break;
  case ARM::LDRD_POST:
  case ARM::STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode7Operand(MI, 3, O); 
    O << ", "; 
    printAddrMode3OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::LDRD_PRE:
  case ARM::STRD_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::LDRD_PRE: printOperand(MI, 1, O); break;
    case ARM::STRD_PRE: printOperand(MI, 2, O); break;
    }
    O << ", "; 
    printAddrMode3Operand(MI, 3, O); 
    O << '!'; 
    return;
    break;
  case ARM::MCRR:
  case ARM::MRRC:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printCImmediate(MI, 4, O); 
    return;
    break;
  case ARM::MLA:
  case ARM::MLS:
  case ARM::SBFX:
  case ARM::SMLABB:
  case ARM::SMLABT:
  case ARM::SMLAD:
  case ARM::SMLADX:
  case ARM::SMLAL:
  case ARM::SMLALBB:
  case ARM::SMLALBT:
  case ARM::SMLALD:
  case ARM::SMLALDX:
  case ARM::SMLALTB:
  case ARM::SMLALTT:
  case ARM::SMLATB:
  case ARM::SMLATT:
  case ARM::SMLAWB:
  case ARM::SMLAWT:
  case ARM::SMLSD:
  case ARM::SMLSDX:
  case ARM::SMLSLD:
  case ARM::SMLSLDX:
  case ARM::SMMLA:
  case ARM::SMMLAR:
  case ARM::SMMLS:
  case ARM::SMMLSR:
  case ARM::SMULL:
  case ARM::STREXD:
  case ARM::UBFX:
  case ARM::UMAAL:
  case ARM::UMLAL:
  case ARM::UMULL:
  case ARM::USADA8:
  case ARM::VMOVRRS:
  case ARM::VMOVSRR:
  case ARM::t2MLA:
  case ARM::t2MLS:
  case ARM::t2SBFX:
  case ARM::t2SMLABB:
  case ARM::t2SMLABT:
  case ARM::t2SMLAD:
  case ARM::t2SMLADX:
  case ARM::t2SMLAL:
  case ARM::t2SMLALBB:
  case ARM::t2SMLALBT:
  case ARM::t2SMLALD:
  case ARM::t2SMLALDX:
  case ARM::t2SMLALTB:
  case ARM::t2SMLALTT:
  case ARM::t2SMLATB:
  case ARM::t2SMLATT:
  case ARM::t2SMLAWB:
  case ARM::t2SMLAWT:
  case ARM::t2SMLSD:
  case ARM::t2SMLSDX:
  case ARM::t2SMLSLD:
  case ARM::t2SMLSLDX:
  case ARM::t2SMMLA:
  case ARM::t2SMMLAR:
  case ARM::t2SMMLS:
  case ARM::t2SMMLSR:
  case ARM::t2SMULL:
  case ARM::t2STREXD:
  case ARM::t2UBFX:
  case ARM::t2UMAAL:
  case ARM::t2UMLAL:
  case ARM::t2UMULL:
  case ARM::t2USADA8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::MLA: 
    case ARM::MLS: 
    case ARM::SMLABB: 
    case ARM::SMLABT: 
    case ARM::SMLAD: 
    case ARM::SMLADX: 
    case ARM::SMLAL: 
    case ARM::SMLALBB: 
    case ARM::SMLALBT: 
    case ARM::SMLALD: 
    case ARM::SMLALDX: 
    case ARM::SMLALTB: 
    case ARM::SMLALTT: 
    case ARM::SMLATB: 
    case ARM::SMLATT: 
    case ARM::SMLAWB: 
    case ARM::SMLAWT: 
    case ARM::SMLSD: 
    case ARM::SMLSDX: 
    case ARM::SMLSLD: 
    case ARM::SMLSLDX: 
    case ARM::SMMLA: 
    case ARM::SMMLAR: 
    case ARM::SMMLS: 
    case ARM::SMMLSR: 
    case ARM::SMULL: 
    case ARM::UMAAL: 
    case ARM::UMLAL: 
    case ARM::UMULL: 
    case ARM::USADA8: 
    case ARM::VMOVRRS: 
    case ARM::VMOVSRR: 
    case ARM::t2MLA: 
    case ARM::t2MLS: 
    case ARM::t2SMLABB: 
    case ARM::t2SMLABT: 
    case ARM::t2SMLAD: 
    case ARM::t2SMLADX: 
    case ARM::t2SMLAL: 
    case ARM::t2SMLALBB: 
    case ARM::t2SMLALBT: 
    case ARM::t2SMLALD: 
    case ARM::t2SMLALDX: 
    case ARM::t2SMLALTB: 
    case ARM::t2SMLALTT: 
    case ARM::t2SMLATB: 
    case ARM::t2SMLATT: 
    case ARM::t2SMLAWB: 
    case ARM::t2SMLAWT: 
    case ARM::t2SMLSD: 
    case ARM::t2SMLSDX: 
    case ARM::t2SMLSLD: 
    case ARM::t2SMLSLDX: 
    case ARM::t2SMMLA: 
    case ARM::t2SMMLAR: 
    case ARM::t2SMMLS: 
    case ARM::t2SMMLSR: 
    case ARM::t2SMULL: 
    case ARM::t2UMAAL: 
    case ARM::t2UMLAL: 
    case ARM::t2UMULL: 
    case ARM::t2USADA8: printOperand(MI, 3, O); break;
    case ARM::SBFX: 
    case ARM::UBFX: 
    case ARM::t2SBFX: 
    case ARM::t2UBFX: printImmPlusOneOperand(MI, 3, O); break;
    case ARM::STREXD: 
    case ARM::t2STREXD: printAddrMode7Operand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::PKHBT:
  case ARM::PKHTB:
  case ARM::SXTAB:
  case ARM::SXTAB16:
  case ARM::SXTAH:
  case ARM::USAT:
  case ARM::UXTAB:
  case ARM::UXTAB16:
  case ARM::UXTAH:
  case ARM::t2SXTAB:
  case ARM::t2SXTAB16:
  case ARM::t2SXTAH:
  case ARM::t2USAT:
  case ARM::t2UXTAB:
  case ARM::t2UXTAB16:
  case ARM::t2UXTAH:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::PKHBT: printPKHLSLShiftImm(MI, 3, O); break;
    case ARM::PKHTB: printPKHASRShiftImm(MI, 3, O); break;
    case ARM::SXTAB: 
    case ARM::SXTAB16: 
    case ARM::SXTAH: 
    case ARM::UXTAB: 
    case ARM::UXTAB16: 
    case ARM::UXTAH: 
    case ARM::t2SXTAB: 
    case ARM::t2SXTAB16: 
    case ARM::t2SXTAH: 
    case ARM::t2UXTAB: 
    case ARM::t2UXTAB16: 
    case ARM::t2UXTAH: printRotImmOperand(MI, 3, O); break;
    case ARM::USAT: 
    case ARM::t2USAT: printShiftImmOperand(MI, 3, O); break;
    }
    return;
    break;
  case ARM::SSAT:
  case ARM::t2SSAT:
    O << ", "; 
    printImmPlusOneOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    printShiftImmOperand(MI, 3, O); 
    return;
    break;
  case ARM::SSAT16:
  case ARM::t2SSAT16:
    O << ", "; 
    printImmPlusOneOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::SXTB:
  case ARM::SXTB16:
  case ARM::SXTH:
  case ARM::UXTB:
  case ARM::UXTB16:
  case ARM::UXTH:
  case ARM::t2MOVsra_flag:
  case ARM::t2MOVsrl_flag:
  case ARM::t2SXTB:
  case ARM::t2SXTB16:
  case ARM::t2SXTH:
  case ARM::t2UXTB:
  case ARM::t2UXTB16:
  case ARM::t2UXTH:
    O << ", "; 
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::SXTB: 
    case ARM::SXTB16: 
    case ARM::SXTH: 
    case ARM::UXTB: 
    case ARM::UXTB16: 
    case ARM::UXTH: 
    case ARM::t2SXTB: 
    case ARM::t2SXTB16: 
    case ARM::t2SXTH: 
    case ARM::t2UXTB: 
    case ARM::t2UXTB16: 
    case ARM::t2UXTH: printRotImmOperand(MI, 2, O); break;
    case ARM::t2MOVsra_flag: 
    case ARM::t2MOVsrl_flag: O << ", #1"; break;
    }
    return;
    break;
  case ARM::VABDfd:
  case ARM::VABDfq:
  case ARM::VACGEd:
  case ARM::VACGEq:
  case ARM::VACGTd:
  case ARM::VACGTq:
  case ARM::VADDD:
  case ARM::VADDS:
  case ARM::VADDfd:
  case ARM::VADDfq:
  case ARM::VCEQfd:
  case ARM::VCEQfq:
  case ARM::VCGEfd:
  case ARM::VCGEfq:
  case ARM::VCGTfd:
  case ARM::VCGTfq:
  case ARM::VDIVD:
  case ARM::VDIVS:
  case ARM::VMAXfd:
  case ARM::VMAXfq:
  case ARM::VMINfd:
  case ARM::VMINfq:
  case ARM::VMULD:
  case ARM::VMULS:
  case ARM::VMULfd:
  case ARM::VMULfq:
  case ARM::VNMULD:
  case ARM::VNMULS:
  case ARM::VPADDf:
  case ARM::VPMAXf:
  case ARM::VPMINf:
  case ARM::VRECPSfd:
  case ARM::VRECPSfq:
  case ARM::VRSQRTSfd:
  case ARM::VRSQRTSfq:
  case ARM::VSUBD:
  case ARM::VSUBS:
  case ARM::VSUBfd:
  case ARM::VSUBfq:
  case ARM::VTBL1:
  case ARM::VTSTv16i8:
  case ARM::VTSTv2i32:
  case ARM::VTSTv4i16:
  case ARM::VTSTv4i32:
  case ARM::VTSTv8i16:
  case ARM::VTSTv8i8:
    printOperand(MI, 1, O); 
    switch (MI->getOpcode()) {
    case ARM::VABDfd: 
    case ARM::VABDfq: 
    case ARM::VACGEd: 
    case ARM::VACGEq: 
    case ARM::VACGTd: 
    case ARM::VACGTq: 
    case ARM::VADDD: 
    case ARM::VADDS: 
    case ARM::VADDfd: 
    case ARM::VADDfq: 
    case ARM::VCEQfd: 
    case ARM::VCEQfq: 
    case ARM::VCGEfd: 
    case ARM::VCGEfq: 
    case ARM::VCGTfd: 
    case ARM::VCGTfq: 
    case ARM::VDIVD: 
    case ARM::VDIVS: 
    case ARM::VMAXfd: 
    case ARM::VMAXfq: 
    case ARM::VMINfd: 
    case ARM::VMINfq: 
    case ARM::VMULD: 
    case ARM::VMULS: 
    case ARM::VMULfd: 
    case ARM::VMULfq: 
    case ARM::VNMULD: 
    case ARM::VNMULS: 
    case ARM::VPADDf: 
    case ARM::VPMAXf: 
    case ARM::VPMINf: 
    case ARM::VRECPSfd: 
    case ARM::VRECPSfq: 
    case ARM::VRSQRTSfd: 
    case ARM::VRSQRTSfq: 
    case ARM::VSUBD: 
    case ARM::VSUBS: 
    case ARM::VSUBfd: 
    case ARM::VSUBfq: 
    case ARM::VTSTv16i8: 
    case ARM::VTSTv2i32: 
    case ARM::VTSTv4i16: 
    case ARM::VTSTv4i32: 
    case ARM::VTSTv8i16: 
    case ARM::VTSTv8i8: O << ", "; break;
    case ARM::VTBL1: O << "}, "; break;
    }
    printOperand(MI, 2, O); 
    return;
    break;
  case ARM::VCEQzv2f32:
  case ARM::VCEQzv4f32:
  case ARM::VCGEzv2f32:
  case ARM::VCGEzv4f32:
  case ARM::VCGTzv2f32:
  case ARM::VCGTzv4f32:
  case ARM::VCLEzv2f32:
  case ARM::VCLEzv4f32:
  case ARM::VCLTzv2f32:
  case ARM::VCLTzv4f32:
    printOperand(MI, 1, O); 
    O << ", #0"; 
    return;
    break;
  case ARM::VDUPLN16d:
  case ARM::VDUPLN16q:
  case ARM::VDUPLN32d:
  case ARM::VDUPLN32q:
  case ARM::VDUPLN8d:
  case ARM::VDUPLN8q:
  case ARM::VGETLNi32:
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::VEXTd16:
  case ARM::VEXTd32:
  case ARM::VEXTd8:
  case ARM::VEXTq16:
  case ARM::VEXTq32:
  case ARM::VEXTq8:
  case ARM::VTBL2:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::VEXTd16: 
    case ARM::VEXTd32: 
    case ARM::VEXTd8: 
    case ARM::VEXTq16: 
    case ARM::VEXTq32: 
    case ARM::VEXTq8: O << ", "; break;
    case ARM::VTBL2: O << "}, "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VGETLNs16:
  case ARM::VGETLNs8:
  case ARM::VGETLNu16:
  case ARM::VGETLNu8:
    O << '['; 
    printNoHashImmediate(MI, 2, O); 
    O << ']'; 
    return;
    break;
  case ARM::VLD1DUPd16:
  case ARM::VLD1DUPd32:
  case ARM::VLD1DUPd8:
  case ARM::VLD1d16:
  case ARM::VLD1d32:
  case ARM::VLD1d64:
  case ARM::VLD1d8:
    switch (MI->getOpcode()) {
    case ARM::VLD1DUPd16: 
    case ARM::VLD1DUPd32: 
    case ARM::VLD1DUPd8: O << "[]}, "; break;
    case ARM::VLD1d16: 
    case ARM::VLD1d32: 
    case ARM::VLD1d64: 
    case ARM::VLD1d8: O << "}, "; break;
    }
    printAddrMode6Operand(MI, 1, O); 
    return;
    break;
  case ARM::VLD1DUPd16_UPD:
  case ARM::VLD1DUPd32_UPD:
  case ARM::VLD1DUPd8_UPD:
  case ARM::VLD1d16_UPD:
  case ARM::VLD1d32_UPD:
  case ARM::VLD1d64_UPD:
  case ARM::VLD1d8_UPD:
    switch (MI->getOpcode()) {
    case ARM::VLD1DUPd16_UPD: 
    case ARM::VLD1DUPd32_UPD: 
    case ARM::VLD1DUPd8_UPD: O << "[]}, "; break;
    case ARM::VLD1d16_UPD: 
    case ARM::VLD1d32_UPD: 
    case ARM::VLD1d64_UPD: 
    case ARM::VLD1d8_UPD: O << "}, "; break;
    }
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1DUPq16:
  case ARM::VLD1DUPq32:
  case ARM::VLD1DUPq8:
  case ARM::VLD2DUPd16:
  case ARM::VLD2DUPd16x2:
  case ARM::VLD2DUPd32:
  case ARM::VLD2DUPd32x2:
  case ARM::VLD2DUPd8:
  case ARM::VLD2DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD1DUPq16_UPD:
  case ARM::VLD1DUPq32_UPD:
  case ARM::VLD1DUPq8_UPD:
  case ARM::VLD2DUPd16_UPD:
  case ARM::VLD2DUPd16x2_UPD:
  case ARM::VLD2DUPd32_UPD:
  case ARM::VLD2DUPd32x2_UPD:
  case ARM::VLD2DUPd8_UPD:
  case ARM::VLD2DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD1LNd16:
  case ARM::VLD1LNd32:
  case ARM::VLD1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    return;
    break;
  case ARM::VLD1LNd16_UPD:
  case ARM::VLD1LNd32_UPD:
  case ARM::VLD1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    printAddrMode6OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1d16Q:
  case ARM::VLD1d32Q:
  case ARM::VLD1d64Q:
  case ARM::VLD1d8Q:
  case ARM::VLD2q16:
  case ARM::VLD2q32:
  case ARM::VLD2q8:
  case ARM::VLD4d16:
  case ARM::VLD4d32:
  case ARM::VLD4d8:
  case ARM::VLD4q16:
  case ARM::VLD4q32:
  case ARM::VLD4q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD1d16Q_UPD:
  case ARM::VLD1d32Q_UPD:
  case ARM::VLD1d64Q_UPD:
  case ARM::VLD1d8Q_UPD:
  case ARM::VLD2q16_UPD:
  case ARM::VLD2q32_UPD:
  case ARM::VLD2q8_UPD:
  case ARM::VLD4d16_UPD:
  case ARM::VLD4d32_UPD:
  case ARM::VLD4d8_UPD:
  case ARM::VLD4q16_UPD:
  case ARM::VLD4q32_UPD:
  case ARM::VLD4q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD1d16T:
  case ARM::VLD1d32T:
  case ARM::VLD1d64T:
  case ARM::VLD1d8T:
  case ARM::VLD3d16:
  case ARM::VLD3d32:
  case ARM::VLD3d8:
  case ARM::VLD3q16:
  case ARM::VLD3q32:
  case ARM::VLD3q8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD1d16T_UPD:
  case ARM::VLD1d32T_UPD:
  case ARM::VLD1d64T_UPD:
  case ARM::VLD1d8T_UPD:
  case ARM::VLD3d16_UPD:
  case ARM::VLD3d32_UPD:
  case ARM::VLD3d8_UPD:
  case ARM::VLD3q16_UPD:
  case ARM::VLD3q32_UPD:
  case ARM::VLD3q8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD1q16:
  case ARM::VLD1q32:
  case ARM::VLD1q64:
  case ARM::VLD1q8:
  case ARM::VLD2b16:
  case ARM::VLD2b32:
  case ARM::VLD2b8:
  case ARM::VLD2d16:
  case ARM::VLD2d32:
  case ARM::VLD2d8:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD1q16_UPD:
  case ARM::VLD1q32_UPD:
  case ARM::VLD1q64_UPD:
  case ARM::VLD1q8_UPD:
  case ARM::VLD2b16_UPD:
  case ARM::VLD2b32_UPD:
  case ARM::VLD2b8_UPD:
  case ARM::VLD2d16_UPD:
  case ARM::VLD2d32_UPD:
  case ARM::VLD2d8_UPD:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD2LNd16:
  case ARM::VLD2LNd32:
  case ARM::VLD2LNd8:
  case ARM::VLD2LNq16:
  case ARM::VLD2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 2, O); 
    return;
    break;
  case ARM::VLD2LNd16_UPD:
  case ARM::VLD2LNd32_UPD:
  case ARM::VLD2LNd8_UPD:
  case ARM::VLD2LNq16_UPD:
  case ARM::VLD2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    printAddrMode6OffsetOperand(MI, 5, O); 
    return;
    break;
  case ARM::VLD3DUPd16:
  case ARM::VLD3DUPd16x2:
  case ARM::VLD3DUPd32:
  case ARM::VLD3DUPd32x2:
  case ARM::VLD3DUPd8:
  case ARM::VLD3DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3DUPd16_UPD:
  case ARM::VLD3DUPd16x2_UPD:
  case ARM::VLD3DUPd32_UPD:
  case ARM::VLD3DUPd32x2_UPD:
  case ARM::VLD3DUPd8_UPD:
  case ARM::VLD3DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD3LNd16:
  case ARM::VLD3LNd32:
  case ARM::VLD3LNd8:
  case ARM::VLD3LNq16:
  case ARM::VLD3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 3, O); 
    return;
    break;
  case ARM::VLD3LNd16_UPD:
  case ARM::VLD3LNd32_UPD:
  case ARM::VLD3LNd8_UPD:
  case ARM::VLD3LNq16_UPD:
  case ARM::VLD3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    printAddrMode6OffsetOperand(MI, 6, O); 
    return;
    break;
  case ARM::VLD4DUPd16:
  case ARM::VLD4DUPd16x2:
  case ARM::VLD4DUPd32:
  case ARM::VLD4DUPd32x2:
  case ARM::VLD4DUPd8:
  case ARM::VLD4DUPd8x2:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4DUPd16_UPD:
  case ARM::VLD4DUPd16x2_UPD:
  case ARM::VLD4DUPd32_UPD:
  case ARM::VLD4DUPd32x2_UPD:
  case ARM::VLD4DUPd8_UPD:
  case ARM::VLD4DUPd8x2_UPD:
    O << "[], "; 
    printOperand(MI, 1, O); 
    O << "[], "; 
    printOperand(MI, 2, O); 
    O << "[], "; 
    printOperand(MI, 3, O); 
    O << "[]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VLD4LNd16:
  case ARM::VLD4LNd32:
  case ARM::VLD4LNd8:
  case ARM::VLD4LNq16:
  case ARM::VLD4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 10, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 4, O); 
    return;
    break;
  case ARM::VLD4LNd16_UPD:
  case ARM::VLD4LNd32_UPD:
  case ARM::VLD4LNd8_UPD:
  case ARM::VLD4LNq16_UPD:
  case ARM::VLD4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 1, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 12, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 5, O); 
    printAddrMode6OffsetOperand(MI, 7, O); 
    return;
    break;
  case ARM::VMLAD:
  case ARM::VMLAS:
  case ARM::VMLAfd:
  case ARM::VMLAfq:
  case ARM::VMLSD:
  case ARM::VMLSS:
  case ARM::VMLSfd:
  case ARM::VMLSfq:
  case ARM::VNMLAD:
  case ARM::VNMLAS:
  case ARM::VNMLSD:
  case ARM::VNMLSS:
  case ARM::VSLIv16i8:
  case ARM::VSLIv2i32:
  case ARM::VSLIv4i16:
  case ARM::VSLIv4i32:
  case ARM::VSLIv8i16:
  case ARM::VSLIv8i8:
  case ARM::VSRIv16i8:
  case ARM::VSRIv2i32:
  case ARM::VSRIv4i16:
  case ARM::VSRIv4i32:
  case ARM::VSRIv8i16:
  case ARM::VSRIv8i8:
  case ARM::VTBX1:
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::VMLAD: 
    case ARM::VMLAS: 
    case ARM::VMLAfd: 
    case ARM::VMLAfq: 
    case ARM::VMLSD: 
    case ARM::VMLSS: 
    case ARM::VMLSfd: 
    case ARM::VMLSfq: 
    case ARM::VNMLAD: 
    case ARM::VNMLAS: 
    case ARM::VNMLSD: 
    case ARM::VNMLSS: 
    case ARM::VSLIv16i8: 
    case ARM::VSLIv2i32: 
    case ARM::VSLIv4i16: 
    case ARM::VSLIv4i32: 
    case ARM::VSLIv8i16: 
    case ARM::VSLIv8i8: 
    case ARM::VSRIv16i8: 
    case ARM::VSRIv2i32: 
    case ARM::VSRIv4i16: 
    case ARM::VSRIv4i32: 
    case ARM::VSRIv8i16: 
    case ARM::VSRIv8i8: O << ", "; break;
    case ARM::VTBX1: O << "}, "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::VMLALslsv2i32:
  case ARM::VMLALslsv4i16:
  case ARM::VMLALsluv2i32:
  case ARM::VMLALsluv4i16:
  case ARM::VMLAslv2i32:
  case ARM::VMLAslv4i16:
  case ARM::VMLAslv4i32:
  case ARM::VMLAslv8i16:
  case ARM::VMLSLslsv2i32:
  case ARM::VMLSLslsv4i16:
  case ARM::VMLSLsluv2i32:
  case ARM::VMLSLsluv4i16:
  case ARM::VMLSslv2i32:
  case ARM::VMLSslv4i16:
  case ARM::VMLSslv4i32:
  case ARM::VMLSslv8i16:
  case ARM::VQDMLALslv2i32:
  case ARM::VQDMLALslv4i16:
  case ARM::VQDMLSLslv2i32:
  case ARM::VQDMLSLslv4i16:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMLAslfd:
  case ARM::VMLAslfq:
  case ARM::VMLSslfd:
  case ARM::VMLSslfq:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMULLslsv2i32:
  case ARM::VMULLslsv4i16:
  case ARM::VMULLsluv2i32:
  case ARM::VMULLsluv4i16:
  case ARM::VMULslv2i32:
  case ARM::VMULslv4i16:
  case ARM::VMULslv4i32:
  case ARM::VMULslv8i16:
  case ARM::VQDMULHslv2i32:
  case ARM::VQDMULHslv4i16:
  case ARM::VQDMULHslv4i32:
  case ARM::VQDMULHslv8i16:
  case ARM::VQDMULLslv2i32:
  case ARM::VQDMULLslv4i16:
  case ARM::VQRDMULHslv2i32:
  case ARM::VQRDMULHslv4i16:
  case ARM::VQRDMULHslv4i32:
  case ARM::VQRDMULHslv8i16:
    O << ", "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::VMULslfd:
  case ARM::VMULslfq:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << ']'; 
    return;
    break;
  case ARM::VST1LNd16:
  case ARM::VST1LNd32:
  case ARM::VST1LNd8:
    O << '['; 
    printNoHashImmediate(MI, 3, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1LNd16_UPD:
  case ARM::VST1LNd32_UPD:
  case ARM::VST1LNd8_UPD:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16:
  case ARM::VST1d32:
  case ARM::VST1d64:
  case ARM::VST1d8:
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16Q:
  case ARM::VST1d32Q:
  case ARM::VST1d64Q:
  case ARM::VST1d8Q:
  case ARM::VST2q16:
  case ARM::VST2q32:
  case ARM::VST2q8:
  case ARM::VST4d16:
  case ARM::VST4d32:
  case ARM::VST4d8:
  case ARM::VST4q16:
  case ARM::VST4q32:
  case ARM::VST4q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16Q_UPD:
  case ARM::VST1d32Q_UPD:
  case ARM::VST1d64Q_UPD:
  case ARM::VST1d8Q_UPD:
  case ARM::VST2q16_UPD:
  case ARM::VST2q32_UPD:
  case ARM::VST2q8_UPD:
  case ARM::VST4d16_UPD:
  case ARM::VST4d32_UPD:
  case ARM::VST4d8_UPD:
  case ARM::VST4q16_UPD:
  case ARM::VST4q32_UPD:
  case ARM::VST4q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << ", "; 
    printOperand(MI, 7, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16T:
  case ARM::VST1d32T:
  case ARM::VST1d64T:
  case ARM::VST1d8T:
  case ARM::VST3d16:
  case ARM::VST3d32:
  case ARM::VST3d8:
  case ARM::VST3q16:
  case ARM::VST3q32:
  case ARM::VST3q8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1d16T_UPD:
  case ARM::VST1d32T_UPD:
  case ARM::VST1d64T_UPD:
  case ARM::VST1d8T_UPD:
  case ARM::VST3d16_UPD:
  case ARM::VST3d32_UPD:
  case ARM::VST3d8_UPD:
  case ARM::VST3q16_UPD:
  case ARM::VST3q32_UPD:
  case ARM::VST3q8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << ", "; 
    printOperand(MI, 6, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1d16_UPD:
  case ARM::VST1d32_UPD:
  case ARM::VST1d64_UPD:
  case ARM::VST1d8_UPD:
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST1q16:
  case ARM::VST1q32:
  case ARM::VST1q64:
  case ARM::VST1q8:
  case ARM::VST2b16:
  case ARM::VST2b32:
  case ARM::VST2b8:
  case ARM::VST2d16:
  case ARM::VST2d32:
  case ARM::VST2d8:
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST1q16_UPD:
  case ARM::VST1q32_UPD:
  case ARM::VST1q64_UPD:
  case ARM::VST1q8_UPD:
  case ARM::VST2b16_UPD:
  case ARM::VST2b32_UPD:
  case ARM::VST2b8_UPD:
  case ARM::VST2d16_UPD:
  case ARM::VST2d32_UPD:
  case ARM::VST2d8_UPD:
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST2LNd16:
  case ARM::VST2LNd32:
  case ARM::VST2LNd8:
  case ARM::VST2LNq16:
  case ARM::VST2LNq32:
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 4, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST2LNd16_UPD:
  case ARM::VST2LNd32_UPD:
  case ARM::VST2LNd8_UPD:
  case ARM::VST2LNq16_UPD:
  case ARM::VST2LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST3LNd16:
  case ARM::VST3LNd32:
  case ARM::VST3LNd8:
  case ARM::VST3LNq16:
  case ARM::VST3LNq32:
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 5, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST3LNd16_UPD:
  case ARM::VST3LNd32_UPD:
  case ARM::VST3LNd8_UPD:
  case ARM::VST3LNq16_UPD:
  case ARM::VST3LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 7, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VST4LNd16:
  case ARM::VST4LNd32:
  case ARM::VST4LNd8:
  case ARM::VST4LNq16:
  case ARM::VST4LNq32:
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 3, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 4, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 6, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 0, O); 
    return;
    break;
  case ARM::VST4LNd16_UPD:
  case ARM::VST4LNd32_UPD:
  case ARM::VST4LNd8_UPD:
  case ARM::VST4LNq16_UPD:
  case ARM::VST4LNq32_UPD:
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 5, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 6, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "], "; 
    printOperand(MI, 7, O); 
    O << '['; 
    printNoHashImmediate(MI, 8, O); 
    O << "]}, "; 
    printAddrMode6Operand(MI, 1, O); 
    printAddrMode6OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::VTBL3:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VTBL4:
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::VTBX2:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << "}, "; 
    printOperand(MI, 4, O); 
    return;
    break;
  case ARM::VTBX3:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << "}, "; 
    printOperand(MI, 5, O); 
    return;
    break;
  case ARM::VTBX4:
    printOperand(MI, 2, O); 
    O << ", "; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printOperand(MI, 4, O); 
    O << ", "; 
    printOperand(MI, 5, O); 
    O << "}, "; 
    printOperand(MI, 6, O); 
    return;
    break;
  case ARM::t2ADR:
  case ARM::tADR:
    O << ", #"; 
    printOperand(MI, 1, O); 
    return;
    break;
  case ARM::t2LDRB_POST:
  case ARM::t2LDRH_POST:
  case ARM::t2LDRSB_POST:
  case ARM::t2LDRSH_POST:
  case ARM::t2LDR_POST:
  case ARM::t2STRB_POST:
  case ARM::t2STRH_POST:
  case ARM::t2STR_POST:
    O << ", ["; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRB_POST: 
    case ARM::t2LDRH_POST: 
    case ARM::t2LDRSB_POST: 
    case ARM::t2LDRSH_POST: 
    case ARM::t2LDR_POST: printOperand(MI, 1, O); break;
    case ARM::t2STRB_POST: 
    case ARM::t2STRH_POST: 
    case ARM::t2STR_POST: printOperand(MI, 2, O); break;
    }
    O << "], "; 
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2LDRD_POST:
  case ARM::t2STRD_POST:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRD_POST: printOperand(MI, 1, O); break;
    case ARM::t2STRD_POST: printOperand(MI, 2, O); break;
    }
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << "], "; 
    printT2AddrModeImm8s4OffsetOperand(MI, 4, O); 
    return;
    break;
  case ARM::t2LDRD_PRE:
  case ARM::t2STRD_PRE:
    O << ", "; 
    switch (MI->getOpcode()) {
    case ARM::t2LDRD_PRE: printOperand(MI, 1, O); break;
    case ARM::t2STRD_PRE: printOperand(MI, 2, O); break;
    }
    O << ", ["; 
    printOperand(MI, 3, O); 
    O << ", "; 
    printT2AddrModeImm8s4OffsetOperand(MI, 4, O); 
    O << "]!"; 
    return;
    break;
  case ARM::t2PKHBT:
  case ARM::t2PKHTB:
    O << ", "; 
    printOperand(MI, 1, O); 
    O << ", "; 
    printOperand(MI, 2, O); 
    switch (MI->getOpcode()) {
    case ARM::t2PKHBT: O << ", lsl "; break;
    case ARM::t2PKHTB: O << ", asr "; break;
    }
    printOperand(MI, 3, O); 
    return;
    break;
  case ARM::t2STRB_PRE:
  case ARM::t2STRH_PRE:
  case ARM::t2STR_PRE:
    O << ", ["; 
    printOperand(MI, 2, O); 
    O << ", "; 
    printT2AddrModeImm8OffsetOperand(MI, 3, O); 
    O << "]!"; 
    return;
    break;
  }
  return;
}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *ARMInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 116 && "Invalid register number!");

  static const unsigned RegAsmOffset[] = {
    0, 5, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 44,
    48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100,
    104, 108, 112, 116, 120, 124, 128, 134, 140, 146, 154, 157, 160, 163,
    166, 169, 172, 175, 178, 181, 184, 187, 190, 194, 198, 202, 206, 210,
    214, 218, 222, 226, 230, 234, 238, 242, 246, 252, 258, 264, 270, 273,
    276, 279, 282, 285, 288, 291, 294, 297, 300, 304, 308, 312, 315, 318,
    321, 324, 327, 330, 333, 336, 339, 342, 346, 350, 354, 358, 362, 366,
    370, 374, 378, 382, 386, 390, 394, 398, 402, 406, 410, 414, 418, 422,
    426, 430, 433, 0
  };

  const char *AsmStrs =
    "apsr\000cpsr\000d0\000d1\000d2\000d3\000d4\000d5\000d6\000d7\000d8\000d"
    "9\000d10\000d11\000d12\000d13\000d14\000d15\000d16\000d17\000d18\000d19"
    "\000d20\000d21\000d22\000d23\000d24\000d25\000d26\000d27\000d28\000d29\000"
    "d30\000d31\000fpexc\000fpscr\000fpsid\000itstate\000lr\000pc\000q0\000q"
    "1\000q2\000q3\000q4\000q5\000q6\000q7\000q8\000q9\000q10\000q11\000q12\000"
    "q13\000q14\000q15\000qq0\000qq1\000qq2\000qq3\000qq4\000qq5\000qq6\000q"
    "q7\000qqqq0\000qqqq1\000qqqq2\000qqqq3\000r0\000r1\000r2\000r3\000r4\000"
    "r5\000r6\000r7\000r8\000r9\000r10\000r11\000r12\000s0\000s1\000s2\000s3"
    "\000s4\000s5\000s6\000s7\000s8\000s9\000s10\000s11\000s12\000s13\000s14"
    "\000s15\000s16\000s17\000s18\000s19\000s20\000s21\000s22\000s23\000s24\000"
    "s25\000s26\000s27\000s28\000s29\000s30\000s31\000sp\000spsr\000";
  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}


#ifdef GET_INSTRUCTION_NAME
#undef GET_INSTRUCTION_NAME

/// getInstructionName: This method is automatically generated by tblgen
/// from the instruction set description.  This returns the enum name of the
/// specified instruction.
const char *ARMInstPrinter::getInstructionName(unsigned Opcode) {
  assert(Opcode < 2365 && "Invalid instruction number!");

  static const unsigned InstAsmOffset[] = {
    0, 4, 14, 27, 36, 45, 50, 65, 79, 92, 106, 123, 133, 146, 
    151, 158, 165, 173, 181, 187, 193, 200, 207, 214, 221, 229, 237, 243, 
    249, 256, 263, 280, 295, 299, 305, 311, 318, 325, 345, 365, 384, 404, 
    424, 443, 463, 483, 502, 522, 542, 561, 581, 601, 620, 641, 662, 682, 
    701, 720, 738, 758, 778, 797, 818, 839, 859, 880, 901, 921, 941, 961, 
    980, 996, 1012, 1027, 1029, 1037, 1044, 1048, 1052, 1058, 1064, 1070, 1077, 1084, 
    1089, 1092, 1096, 1105, 1110, 1116, 1127, 1135, 1140, 1150, 1164, 1180, 1189, 1196, 
    1203, 1206, 1210, 1218, 1225, 1233, 1243, 1247, 1251, 1256, 1262, 1266, 1273, 1280, 
    1288, 1296, 1302, 1308, 1315, 1322, 1338, 1344, 1350, 1356, 1360, 1364, 1368, 1374, 
    1380, 1387, 1394, 1402, 1410, 1417, 1421, 1447, 1467, 1486, 1510, 1523, 1536, 1547, 
    1557, 1569, 1581, 1591, 1600, 1612, 1624, 1634, 1643, 1654, 1665, 1674, 1682, 1688, 
    1698, 1704, 1714, 1720, 1730, 1740, 1746, 1756, 1771, 1786, 1800, 1814, 1823, 1831, 
    1838, 1843, 1853, 1862, 1868, 1875, 1882, 1889, 1894, 1901, 1908, 1918, 1927, 1933, 
    1941, 1949, 1960, 1970, 1976, 1984, 1992, 2003, 2013, 2027, 2041, 2054, 2067, 2075, 
    2081, 2088, 2094, 2103, 2114, 2118, 2123, 2128, 2134, 2138, 2144, 2148, 2155, 2164, 
    2176, 2183, 2191, 2199, 2207, 2215, 2223, 2240, 2251, 2264, 2281, 2286, 2293, 2309, 
    2319, 2324, 2332, 2338, 2344, 2356, 2368, 2372, 2377, 2382, 2388, 2392, 2399, 2403, 
    2408, 2412, 2418, 2425, 2430, 2435, 2441, 2447, 2451, 2457, 2463, 2470, 2477, 2484, 
    2491, 2499, 2507, 2516, 2525, 2532, 2540, 2548, 2554, 2560, 2568, 2575, 2582, 2588, 
    2595, 2601, 2606, 2613, 2619, 2624, 2630, 2636, 2641, 2646, 2653, 2659, 2664, 2668, 
    2674, 2680, 2686, 2696, 2702, 2712, 2718, 2728, 2734, 2744, 2748, 2755, 2762, 2770, 
    2778, 2784, 2790, 2797, 2804, 2811, 2819, 2827, 2833, 2839, 2846, 2853, 2860, 2866, 
    2871, 2878, 2885, 2893, 2901, 2907, 2913, 2920, 2927, 2932, 2936, 2943, 2947, 2955, 
    2962, 2968, 2974, 2982, 2989, 2993, 3000, 3007, 3013, 3020, 3026, 3034, 3042, 3049, 
    3057, 3065, 3073, 3081, 3088, 3095, 3102, 3109, 3115, 3122, 3129, 3137, 3143, 3150, 
    3156, 3163, 3169, 3176, 3182, 3189, 3196, 3203, 3209, 3217, 3224, 3231, 3238, 3245, 
    3251, 3258, 3264, 3274, 3280, 3290, 3296, 3306, 3312, 3322, 3327, 3334, 3339, 3346, 
    3352, 3365, 3378, 3389, 3399, 3411, 3423, 3433, 3442, 3454, 3466, 3476, 3485, 3496, 
    3507, 3516, 3524, 3530, 3540, 3546, 3556, 3562, 3572, 3578, 3588, 3603, 3618, 3632, 
    3646, 3659, 3672, 3680, 3693, 3706, 3713, 3718, 3728, 3737, 3743, 3750, 3757, 3764, 
    3769, 3776, 3783, 3793, 3802, 3814, 3828, 3842, 3855, 3868, 3880, 3892, 3899, 3911, 
    3923, 3929, 3936, 3943, 3951, 3959, 3965, 3971, 3978, 3985, 3989, 3993, 3998, 4004, 
    4012, 4018, 4023, 4030, 4035, 4044, 4055, 4064, 4075, 4086, 4099, 4110, 4123, 4129, 
    4135, 4142, 4149, 4156, 4161, 4167, 4173, 4180, 4187, 4194, 4200, 4205, 4210, 4218, 
    4225, 4231, 4237, 4245, 4252, 4258, 4266, 4272, 4280, 4286, 4294, 4302, 4309, 4315, 
    4321, 4329, 4336, 4342, 4349, 4354, 4361, 4366, 4373, 4379, 4385, 4393, 4399, 4404, 
    4411, 4416, 4428, 4440, 4452, 4464, 4476, 4488, 4499, 4510, 4521, 4532, 4543, 4553, 
    4564, 4575, 4586, 4597, 4608, 4618, 4630, 4642, 4654, 4666, 4678, 4690, 4697, 4704, 
    4715, 4726, 4737, 4748, 4759, 4769, 4780, 4791, 4802, 4813, 4824, 4834, 4840, 4846, 
    4853, 4860, 4870, 4880, 4890, 4900, 4910, 4919, 4926, 4933, 4940, 4947, 4953, 4965, 
    4977, 4988, 5000, 5012, 5024, 5036, 5048, 5060, 5066, 5078, 5090, 5102, 5114, 5126, 
    5138, 5145, 5152, 5162, 5172, 5182, 5192, 5202, 5212, 5222, 5231, 5237, 5243, 5249, 
    5260, 5271, 5282, 5293, 5299, 5305, 5311, 5317, 5323, 5329, 5335, 5342, 5349, 5359, 
    5369, 5379, 5389, 5399, 5408, 5419, 5430, 5441, 5452, 5463, 5474, 5485, 5495, 5502, 
    5509, 5520, 5531, 5542, 5553, 5564, 5574, 5585, 5596, 5607, 5618, 5629, 5639, 5650, 
    5661, 5672, 5683, 5694, 5705, 5716, 5726, 5733, 5740, 5751, 5762, 5773, 5784, 5795, 
    5805, 5816, 5827, 5838, 5849, 5860, 5870, 5881, 5892, 5903, 5914, 5925, 5936, 5947, 
    5957, 5968, 5979, 5990, 6001, 6012, 6023, 6034, 6044, 6054, 6064, 6074, 6084, 6094, 
    6103, 6114, 6125, 6136, 6147, 6158, 6169, 6180, 6190, 6200, 6210, 6220, 6230, 6240, 
    6249, 6255, 6262, 6269, 6277, 6285, 6291, 6298, 6305, 6311, 6317, 6325, 6333, 6340, 
    6347, 6355, 6363, 6371, 6380, 6389, 6398, 6407, 6417, 6427, 6437, 6447, 6455, 6464, 
    6473, 6482, 6491, 6501, 6511, 6521, 6531, 6537, 6543, 6551, 6559, 6567, 6575, 6582, 
    6589, 6599, 6609, 6619, 6629, 6638, 6647, 6655, 6663, 6669, 6675, 6683, 6691, 6698, 
    6706, 6714, 6721, 6731, 6741, 6750, 6760, 6769, 6781, 6793, 6805, 6817, 6829, 6840, 
    6852, 6864, 6876, 6888, 6900, 6911, 6923, 6935, 6947, 6959, 6971, 6982, 6994, 7006, 
    7018, 7030, 7042, 7053, 7064, 7079, 7090, 7105, 7115, 7129, 7140, 7157, 7178, 7193, 
    7204, 7221, 7242, 7257, 7267, 7283, 7303, 7317, 7327, 7341, 7351, 7365, 7374, 7387, 
    7403, 7423, 7439, 7459, 7474, 7493, 7501, 7510, 7523, 7532, 7545, 7557, 7565, 7574, 
    7587, 7596, 7609, 7621, 7629, 7638, 7653, 7672, 7685, 7694, 7709, 7728, 7741, 7753, 
    7760, 7768, 7780, 7788, 7800, 7811, 7819, 7833, 7851, 7863, 7871, 7885, 7903, 7915, 
    7923, 7937, 7955, 7967, 7974, 7987, 8004, 8015, 8026, 8043, 8064, 8079, 8092, 8109, 
    8120, 8137, 8158, 8173, 8186, 8203, 8213, 8229, 8249, 8263, 8275, 8291, 8301, 8317, 
    8337, 8351, 8361, 8377, 8397, 8411, 8420, 8435, 8454, 8467, 8477, 8493, 8513, 8527, 
    8537, 8553, 8573, 8587, 8595, 8607, 8615, 8627, 8634, 8645, 8653, 8667, 8685, 8697, 
    8705, 8719, 8737, 8749, 8756, 8769, 8786, 8797, 8805, 8819, 8837, 8849, 8857, 8871, 
    8889, 8901, 8908, 8921, 8938, 8949, 8960, 8977, 8998, 9013, 9026, 9043, 9054, 9071, 
    9092, 9107, 9120, 9137, 9147, 9163, 9183, 9197, 9209, 9225, 9235, 9251, 9271, 9285, 
    9295, 9311, 9331, 9345, 9354, 9369, 9388, 9401, 9411, 9427, 9447, 9461, 9471, 9487, 
    9507, 9521, 9529, 9543, 9561, 9573, 9581, 9595, 9613, 9625, 9632, 9645, 9662, 9673, 
    9681, 9699, 9711, 9728, 9749, 9757, 9775, 9787, 9804, 9825, 9832, 9849, 9860, 9876, 
    9896, 9907, 9924, 9945, 9960, 9973, 9990, 10001, 10018, 10039, 10054, 10067, 10084, 10094, 
    10110, 10130, 10144, 10156, 10172, 10182, 10198, 10218, 10232, 10242, 10258, 10278, 10292, 10301, 
    10316, 10335, 10348, 10358, 10374, 10394, 10408, 10418, 10434, 10454, 10468, 10476, 10490, 10508, 
    10520, 10528, 10542, 10560, 10572, 10579, 10592, 10609, 10620, 10628, 10646, 10658, 10675, 10696, 
    10704, 10722, 10734, 10751, 10772, 10779, 10796, 10807, 10823, 10843, 10855, 10863, 10875, 10883, 
    10895, 10903, 10915, 10921, 10927, 10934, 10941, 10952, 10963, 10974, 10985, 10996, 11006, 11017, 
    11028, 11039, 11050, 11061, 11071, 11078, 11085, 11096, 11107, 11118, 11129, 11140, 11150, 11161, 
    11172, 11183, 11194, 11205, 11215, 11221, 11235, 11249, 11263, 11277, 11289, 11301, 11313, 11325, 
    11337, 11349, 11355, 11362, 11369, 11378, 11387, 11399, 11411, 11423, 11435, 11445, 11455, 11465, 
    11475, 11485, 11494, 11500, 11514, 11528, 11542, 11556, 11568, 11580, 11592, 11604, 11616, 11628, 
    11634, 11641, 11648, 11657, 11666, 11678, 11690, 11702, 11714, 11724, 11734, 11744, 11754, 11764, 
    11773, 11779, 11787, 11795, 11807, 11819, 11831, 11843, 11855, 11867, 11878, 11889, 11899, 11906, 
    11915, 11923, 11931, 11938, 11944, 11951, 11959, 11967, 11977, 11987, 11997, 12007, 12017, 12027, 
    12037, 12046, 12051, 12062, 12073, 12078, 12089, 12100, 12106, 12113, 12127, 12141, 12155, 12169, 
    12181, 12193, 12205, 12217, 12229, 12241, 12247, 12254, 12261, 12268, 12275, 12284, 12293, 12305, 
    12317, 12329, 12341, 12351, 12361, 12371, 12381, 12391, 12400, 12406, 12412, 12422, 12432, 12442, 
    12452, 12458, 12464, 12473, 12480, 12489, 12498, 12507, 12516, 12524, 12532, 12539, 12546, 12553, 
    12560, 12567, 12574, 12580, 12586, 12592, 12603, 12614, 12625, 12636, 12642, 12655, 12668, 12681, 
    12694, 12707, 12719, 12732, 12745, 12758, 12771, 12784, 12796, 12809, 12822, 12835, 12848, 12861, 
    12873, 12886, 12899, 12912, 12925, 12938, 12950, 12957, 12966, 12975, 12983, 12990, 12999, 13008, 
    13016, 13025, 13034, 13042, 13049, 13058, 13067, 13075, 13084, 13093, 13101, 13112, 13123, 13134, 
    13145, 13156, 13166, 13178, 13190, 13202, 13214, 13226, 13238, 13250, 13261, 13273, 13285, 13297, 
    13309, 13321, 13333, 13345, 13356, 13371, 13386, 13399, 13412, 13427, 13442, 13455, 13468, 13483, 
    13498, 13513, 13528, 13541, 13554, 13567, 13580, 13595, 13610, 13623, 13636, 13650, 13664, 13677, 
    13690, 13703, 13715, 13728, 13741, 13753, 13764, 13775, 13786, 13797, 13808, 13818, 13834, 13850, 
    13866, 13882, 13896, 13910, 13924, 13938, 13951, 13964, 13977, 13990, 14003, 14016, 14029, 14041, 
    14054, 14067, 14080, 14093, 14106, 14119, 14132, 14144, 14158, 14172, 14185, 14199, 14213, 14226, 
    14240, 14254, 14267, 14280, 14293, 14306, 14319, 14332, 14345, 14358, 14370, 14383, 14396, 14409, 
    14422, 14435, 14448, 14461, 14473, 14485, 14497, 14509, 14521, 14533, 14545, 14557, 14568, 14581, 
    14594, 14607, 14620, 14633, 14646, 14659, 14671, 14683, 14695, 14707, 14719, 14731, 14743, 14755, 
    14766, 14779, 14792, 14804, 14817, 14830, 14842, 14855, 14868, 14880, 14892, 14904, 14916, 14928, 
    14940, 14952, 14964, 14975, 14987, 14999, 15011, 15023, 15035, 15047, 15059, 15070, 15083, 15096, 
    15108, 15116, 15125, 15134, 15142, 15151, 15160, 15169, 15178, 15188, 15197, 15207, 15216, 15226, 
    15236, 15245, 15255, 15265, 15274, 15287, 15300, 15313, 15326, 15339, 15351, 15364, 15377, 15390, 
    15403, 15416, 15428, 15440, 15452, 15464, 15476, 15488, 15500, 15512, 15523, 15535, 15547, 15559, 
    15571, 15583, 15595, 15607, 15618, 15630, 15642, 15653, 15665, 15677, 15689, 15701, 15713, 15725, 
    15737, 15748, 15760, 15772, 15784, 15796, 15808, 15820, 15832, 15843, 15852, 15862, 15872, 15881, 
    15891, 15901, 15913, 15925, 15937, 15949, 15961, 15973, 15985, 15996, 16008, 16020, 16032, 16044, 
    16056, 16068, 16080, 16091, 16104, 16117, 16129, 16139, 16149, 16158, 16167, 16176, 16184, 16196, 
    16208, 16220, 16232, 16244, 16256, 16267, 16278, 16289, 16300, 16311, 16322, 16333, 16343, 16354, 
    16365, 16376, 16387, 16398, 16409, 16420, 16430, 16441, 16452, 16463, 16474, 16485, 16496, 16507, 
    16517, 16528, 16539, 16549, 16560, 16571, 16582, 16593, 16604, 16615, 16626, 16636, 16647, 16658, 
    16669, 16680, 16691, 16702, 16713, 16723, 16730, 16737, 16744, 16751, 16761, 16771, 16781, 16791, 
    16801, 16811, 16821, 16830, 16837, 16844, 16851, 16858, 16869, 16880, 16891, 16902, 16913, 16924, 
    16935, 16945, 16956, 16967, 16978, 16989, 17000, 17011, 17022, 17032, 17042, 17052, 17062, 17072, 
    17082, 17092, 17102, 17111, 17121, 17135, 17145, 17159, 17168, 17181, 17197, 17217, 17233, 17253, 
    17268, 17287, 17295, 17304, 17317, 17326, 17339, 17351, 17359, 17368, 17381, 17390, 17403, 17415, 
    17423, 17432, 17447, 17466, 17479, 17488, 17503, 17522, 17535, 17547, 17554, 17562, 17574, 17582, 
    17594, 17605, 17613, 17627, 17645, 17657, 17665, 17679, 17697, 17709, 17717, 17731, 17749, 17761, 
    17768, 17781, 17798, 17809, 17819, 17835, 17855, 17869, 17879, 17895, 17915, 17929, 17938, 17953, 
    17972, 17985, 17995, 18011, 18031, 18045, 18055, 18071, 18091, 18105, 18113, 18125, 18133, 18145, 
    18152, 18163, 18171, 18185, 18203, 18215, 18223, 18237, 18255, 18267, 18274, 18287, 18304, 18315, 
    18323, 18337, 18355, 18367, 18375, 18389, 18407, 18419, 18426, 18439, 18456, 18467, 18477, 18493, 
    18513, 18527, 18537, 18553, 18573, 18587, 18596, 18611, 18630, 18643, 18653, 18669, 18689, 18703, 
    18713, 18729, 18749, 18763, 18771, 18785, 18803, 18815, 18823, 18837, 18855, 18867, 18874, 18887, 
    18904, 18915, 18923, 18941, 18953, 18970, 18991, 18999, 19017, 19029, 19046, 19067, 19074, 19091, 
    19102, 19118, 19138, 19148, 19164, 19184, 19198, 19208, 19224, 19244, 19258, 19267, 19282, 19301, 
    19314, 19324, 19340, 19360, 19374, 19384, 19400, 19420, 19434, 19442, 19456, 19474, 19486, 19494, 
    19508, 19526, 19538, 19545, 19558, 19575, 19586, 19594, 19612, 19624, 19641, 19662, 19670, 19688, 
    19700, 19717, 19738, 19745, 19762, 19773, 19789, 19809, 19821, 19829, 19841, 19849, 19861, 19869, 
    19881, 19887, 19893, 19899, 19911, 19923, 19934, 19946, 19958, 19970, 19982, 19994, 20006, 20012, 
    20024, 20036, 20048, 20060, 20072, 20084, 20091, 20098, 20108, 20118, 20128, 20138, 20148, 20158, 
    20168, 20177, 20183, 20189, 20195, 20201, 20213, 20219, 20231, 20237, 20249, 20255, 20261, 20273, 
    20279, 20291, 20297, 20309, 20316, 20323, 20331, 20339, 20347, 20355, 20362, 20369, 20376, 20383, 
    20391, 20399, 20407, 20415, 20422, 20429, 20437, 20445, 20452, 20460, 20468, 20475, 20485, 20495, 
    20505, 20515, 20525, 20534, 20541, 20548, 20555, 20562, 20569, 20576, 20584, 20592, 20599, 20607, 
    20615, 20622, 20630, 20638, 20645, 20653, 20661, 20668, 20672, 20676, 20682, 20691, 20700, 20709, 
    20717, 20725, 20733, 20742, 20751, 20760, 20768, 20778, 20786, 20794, 20800, 20808, 20816, 20824, 
    20832, 20840, 20844, 20850, 20856, 20864, 20872, 20880, 20888, 20896, 20902, 20908, 20915, 20923, 
    20929, 20938, 20947, 20956, 20964, 20972, 20980, 20988, 20996, 21004, 21010, 21016, 21022, 21030, 
    21038, 21046, 21052, 21057, 21078, 21104, 21112, 21124, 21132, 21144, 21156, 21164, 21176, 21187, 
    21197, 21206, 21216, 21224, 21236, 21247, 21256, 21264, 21273, 21282, 21291, 21299, 21311, 21322, 
    21332, 21341, 21351, 21359, 21368, 21381, 21393, 21404, 21414, 21425, 21434, 21443, 21456, 21468, 
    21479, 21489, 21500, 21509, 21516, 21527, 21537, 21546, 21554, 21563, 21576, 21583, 21594, 21607, 
    21615, 21623, 21631, 21639, 21645, 21652, 21659, 21667, 21673, 21679, 21690, 21699, 21710, 21724, 
    21735, 21746, 21755, 21766, 21776, 21795, 21808, 21823, 21830, 21839, 21857, 21869, 21876, 21890, 
    21904, 21910, 21917, 21924, 21932, 21938, 21947, 21953, 21959, 21968, 21975, 21982, 21989, 21995, 
    22003, 22011, 22019, 22027, 22035, 22043, 22051, 22059, 22069, 22078, 22086, 22095, 22103, 22110, 
    22119, 22127, 22134, 22141, 22150, 22158, 22165, 22173, 22181, 22188, 22195, 22204, 22212, 22219, 
    22225, 22233, 22241, 22249, 22258, 22266, 22275, 22283, 22291, 22297, 22306, 22315, 22323, 22331, 
    22339, 22348, 22356, 22363, 22372, 22381, 22390, 22398, 22406, 22414, 22421, 22428, 22434, 22440, 
    22450, 22459, 22467, 22475, 22485, 22494, 22500, 22509, 22518, 22526, 22535, 22543, 22553, 22563, 
    22572, 22582, 22592, 22602, 22611, 22620, 22629, 22638, 22646, 22655, 22664, 22674, 22682, 22691, 
    22699, 22708, 22716, 22725, 22733, 22742, 22751, 22760, 22768, 22777, 22786, 22795, 22804, 22812, 
    22821, 22829, 22838, 22846, 22855, 22862, 22871, 22878, 22887, 22895, 22903, 22915, 22923, 22935, 
    22943, 22955, 22966, 22976, 22985, 22993, 23005, 23016, 23025, 23033, 23042, 23051, 23060, 23068, 
    23080, 23091, 23101, 23110, 23118, 23125, 23136, 23146, 23155, 23163, 23170, 23179, 23188, 23197, 
    23205, 23215, 23223, 23231, 23239, 23249, 23257, 23264, 23273, 23280, 23286, 23295, 23301, 23310, 
    23318, 23326, 23334, 23342, 23350, 23358, 23367, 23375, 23382, 23389, 23396, 23406, 23415, 23423, 
    23431, 23441, 23450, 23458, 23466, 23474, 23484, 23493, 23501, 23509, 23519, 23528, 23536, 23545, 
    23552, 23561, 23568, 23577, 23585, 23593, 23603, 23611, 23618, 23627, 23634, 23640, 23646, 23654, 
    23659, 23668, 23675, 23682, 23690, 23699, 23706, 23714, 23722, 23740, 23756, 23761, 23766, 23773, 
    23780, 23783, 23788, 23794, 23798, 23804, 23813, 23819, 23828, 23834, 23841, 23849, 23853, 23862, 
    23870, 23885, 23896, 23901, 23907, 23913, 23918, 23923, 23929, 23937, 23944, 23950, 23955, 23960, 
    23981, 24001, 24008, 24019, 24026, 24033, 24040, 24047, 24054, 24061, 24067, 24075, 24086, 24098, 
    24104, 24112, 24122, 24134, 24141, 24148, 24155, 24162, 24177, 24184, 24191, 24197, 24202, 24207, 
    24212, 24217, 24225, 24230, 24239, 24245, 24250, 24257, 24264, 24269, 24274, 24279, 24287, 24292, 
    24299, 24310, 24317, 24324, 24331, 24338, 24344, 24350, 24358, 24365, 24372, 24379, 24387, 24392, 
    24398, 24404, 24414, 24426, 24436, 24448, 24456, 24462, 24467, 24473, 24479, 24484, 24489, 0
  };

  const char *Strs =
    "PHI\000INLINEASM\000PROLOG_LABEL\000EH_LABEL\000GC_LABEL\000KILL\000EXT"
    "RACT_SUBREG\000INSERT_SUBREG\000IMPLICIT_DEF\000SUBREG_TO_REG\000COPY_T"
    "O_REGCLASS\000DBG_VALUE\000REG_SEQUENCE\000COPY\000ADCSri\000ADCSrr\000"
    "ADCSrsi\000ADCSrsr\000ADCri\000ADCrr\000ADCrsi\000ADCrsr\000ADDSri\000A"
    "DDSrr\000ADDSrsi\000ADDSrsr\000ADDri\000ADDrr\000ADDrsi\000ADDrsr\000AD"
    "JCALLSTACKDOWN\000ADJCALLSTACKUP\000ADR\000ANDri\000ANDrr\000ANDrsi\000"
    "ANDrsr\000ATOMIC_CMP_SWAP_I16\000ATOMIC_CMP_SWAP_I32\000ATOMIC_CMP_SWAP"
    "_I8\000ATOMIC_LOAD_ADD_I16\000ATOMIC_LOAD_ADD_I32\000ATOMIC_LOAD_ADD_I8"
    "\000ATOMIC_LOAD_AND_I16\000ATOMIC_LOAD_AND_I32\000ATOMIC_LOAD_AND_I8\000"
    "ATOMIC_LOAD_MAX_I16\000ATOMIC_LOAD_MAX_I32\000ATOMIC_LOAD_MAX_I8\000ATO"
    "MIC_LOAD_MIN_I16\000ATOMIC_LOAD_MIN_I32\000ATOMIC_LOAD_MIN_I8\000ATOMIC"
    "_LOAD_NAND_I16\000ATOMIC_LOAD_NAND_I32\000ATOMIC_LOAD_NAND_I8\000ATOMIC"
    "_LOAD_OR_I16\000ATOMIC_LOAD_OR_I32\000ATOMIC_LOAD_OR_I8\000ATOMIC_LOAD_"
    "SUB_I16\000ATOMIC_LOAD_SUB_I32\000ATOMIC_LOAD_SUB_I8\000ATOMIC_LOAD_UMA"
    "X_I16\000ATOMIC_LOAD_UMAX_I32\000ATOMIC_LOAD_UMAX_I8\000ATOMIC_LOAD_UMI"
    "N_I16\000ATOMIC_LOAD_UMIN_I32\000ATOMIC_LOAD_UMIN_I8\000ATOMIC_LOAD_XOR"
    "_I16\000ATOMIC_LOAD_XOR_I32\000ATOMIC_LOAD_XOR_I8\000ATOMIC_SWAP_I16\000"
    "ATOMIC_SWAP_I32\000ATOMIC_SWAP_I8\000B\000BCCZi64\000BCCi64\000BFC\000B"
    "FI\000BFI4p\000BICri\000BICrr\000BICrsi\000BICrsr\000BKPT\000BL\000BLX\000"
    "BLX_pred\000BLXi\000BLXr9\000BLXr9_pred\000BL_pred\000BLr9\000BLr9_pred"
    "\000BMOVPCRX_CALL\000BMOVPCRXr9_CALL\000BR_JTadd\000BR_JTm\000BR_JTr\000"
    "BX\000BXJ\000BX_CALL\000BX_RET\000BX_pred\000BXr9_CALL\000Bcc\000CDP\000"
    "CDP2\000CLREX\000CLZ\000CMNzri\000CMNzrr\000CMNzrsi\000CMNzrsr\000CMPri"
    "\000CMPrr\000CMPrsi\000CMPrsr\000CONSTPOOL_ENTRY\000CPS1p\000CPS2p\000C"
    "PS3p\000DBG\000DMB\000DSB\000EORri\000EORrr\000EORrsi\000EORrsr\000FCON"
    "STD\000FCONSTS\000FMSTAT\000ISB\000Int_eh_sjlj_dispatchsetup\000Int_eh_"
    "sjlj_longjmp\000Int_eh_sjlj_setjmp\000Int_eh_sjlj_setjmp_nofp\000LDC2L_"
    "OFFSET\000LDC2L_OPTION\000LDC2L_POST\000LDC2L_PRE\000LDC2_OFFSET\000LDC"
    "2_OPTION\000LDC2_POST\000LDC2_PRE\000LDCL_OFFSET\000LDCL_OPTION\000LDCL"
    "_POST\000LDCL_PRE\000LDC_OFFSET\000LDC_OPTION\000LDC_POST\000LDC_PRE\000"
    "LDMDA\000LDMDA_UPD\000LDMDB\000LDMDB_UPD\000LDMIA\000LDMIA_RET\000LDMIA"
    "_UPD\000LDMIB\000LDMIB_UPD\000LDRBT_POST_IMM\000LDRBT_POST_REG\000LDRB_"
    "POST_IMM\000LDRB_POST_REG\000LDRB_PRE\000LDRBi12\000LDRBrs\000LDRD\000L"
    "DRD_POST\000LDRD_PRE\000LDREX\000LDREXB\000LDREXD\000LDREXH\000LDRH\000"
    "LDRHTi\000LDRHTr\000LDRH_POST\000LDRH_PRE\000LDRSB\000LDRSBTi\000LDRSBT"
    "r\000LDRSB_POST\000LDRSB_PRE\000LDRSH\000LDRSHTi\000LDRSHTr\000LDRSH_PO"
    "ST\000LDRSH_PRE\000LDRT_POST_IMM\000LDRT_POST_REG\000LDR_POST_IMM\000LD"
    "R_POST_REG\000LDR_PRE\000LDRcp\000LDRi12\000LDRrs\000LEApcrel\000LEApcr"
    "elJT\000MCR\000MCR2\000MCRR\000MCRR2\000MLA\000MLAv5\000MLS\000MOVCCi\000"
    "MOVCCi16\000MOVCCi32imm\000MOVCCr\000MOVCCsi\000MOVCCsr\000MOVPCLR\000M"
    "OVPCRX\000MOVTi16\000MOVTi16_ga_pcrel\000MOV_ga_dyn\000MOV_ga_pcrel\000"
    "MOV_ga_pcrel_ldr\000MOVi\000MOVi16\000MOVi16_ga_pcrel\000MOVi32imm\000M"
    "OVr\000MOVr_TC\000MOVsi\000MOVsr\000MOVsra_flag\000MOVsrl_flag\000MRC\000"
    "MRC2\000MRRC\000MRRC2\000MRS\000MRSsys\000MSR\000MSRi\000MUL\000MULv5\000"
    "MVNCCi\000MVNi\000MVNr\000MVNsi\000MVNsr\000NOP\000ORRri\000ORRrr\000OR"
    "Rrsi\000ORRrsr\000PICADD\000PICLDR\000PICLDRB\000PICLDRH\000PICLDRSB\000"
    "PICLDRSH\000PICSTR\000PICSTRB\000PICSTRH\000PKHBT\000PKHTB\000PLDWi12\000"
    "PLDWrs\000PLDi12\000PLDrs\000PLIi12\000PLIrs\000QADD\000QADD16\000QADD8"
    "\000QASX\000QDADD\000QDSUB\000QSAX\000QSUB\000QSUB16\000QSUB8\000RBIT\000"
    "REV\000REV16\000REVSH\000RFEDA\000RFEDA_UPD\000RFEDB\000RFEDB_UPD\000RF"
    "EIA\000RFEIA_UPD\000RFEIB\000RFEIB_UPD\000RRX\000RSBSri\000RSBSrr\000RS"
    "BSrsi\000RSBSrsr\000RSBri\000RSBrr\000RSBrsi\000RSBrsr\000RSCSri\000RSC"
    "Srsi\000RSCSrsr\000RSCri\000RSCrr\000RSCrsi\000RSCrsr\000SADD16\000SADD"
    "8\000SASX\000SBCSri\000SBCSrr\000SBCSrsi\000SBCSrsr\000SBCri\000SBCrr\000"
    "SBCrsi\000SBCrsr\000SBFX\000SEL\000SETEND\000SEV\000SHADD16\000SHADD8\000"
    "SHASX\000SHSAX\000SHSUB16\000SHSUB8\000SMC\000SMLABB\000SMLABT\000SMLAD"
    "\000SMLADX\000SMLAL\000SMLALBB\000SMLALBT\000SMLALD\000SMLALDX\000SMLAL"
    "TB\000SMLALTT\000SMLALv5\000SMLATB\000SMLATT\000SMLAWB\000SMLAWT\000SML"
    "SD\000SMLSDX\000SMLSLD\000SMLSLDX\000SMMLA\000SMMLAR\000SMMLS\000SMMLSR"
    "\000SMMUL\000SMMULR\000SMUAD\000SMUADX\000SMULBB\000SMULBT\000SMULL\000"
    "SMULLv5\000SMULTB\000SMULTT\000SMULWB\000SMULWT\000SMUSD\000SMUSDX\000S"
    "RSDA\000SRSDA_UPD\000SRSDB\000SRSDB_UPD\000SRSIA\000SRSIA_UPD\000SRSIB\000"
    "SRSIB_UPD\000SSAT\000SSAT16\000SSAX\000SSUB16\000SSUB8\000STC2L_OFFSET\000"
    "STC2L_OPTION\000STC2L_POST\000STC2L_PRE\000STC2_OFFSET\000STC2_OPTION\000"
    "STC2_POST\000STC2_PRE\000STCL_OFFSET\000STCL_OPTION\000STCL_POST\000STC"
    "L_PRE\000STC_OFFSET\000STC_OPTION\000STC_POST\000STC_PRE\000STMDA\000ST"
    "MDA_UPD\000STMDB\000STMDB_UPD\000STMIA\000STMIA_UPD\000STMIB\000STMIB_U"
    "PD\000STRBT_POST_IMM\000STRBT_POST_REG\000STRB_POST_IMM\000STRB_POST_RE"
    "G\000STRB_PRE_IMM\000STRB_PRE_REG\000STRBi12\000STRBi_preidx\000STRBr_p"
    "reidx\000STRBrs\000STRD\000STRD_POST\000STRD_PRE\000STREX\000STREXB\000"
    "STREXD\000STREXH\000STRH\000STRHTi\000STRHTr\000STRH_POST\000STRH_PRE\000"
    "STRH_preidx\000STRT_POST_IMM\000STRT_POST_REG\000STR_POST_IMM\000STR_PO"
    "ST_REG\000STR_PRE_IMM\000STR_PRE_REG\000STRi12\000STRi_preidx\000STRr_p"
    "reidx\000STRrs\000SUBSri\000SUBSrr\000SUBSrsi\000SUBSrsr\000SUBri\000SU"
    "Brr\000SUBrsi\000SUBrsr\000SVC\000SWP\000SWPB\000SXTAB\000SXTAB16\000SX"
    "TAH\000SXTB\000SXTB16\000SXTH\000TAILJMPd\000TAILJMPdND\000TAILJMPr\000"
    "TAILJMPrND\000TCRETURNdi\000TCRETURNdiND\000TCRETURNri\000TCRETURNriND\000"
    "TEQri\000TEQrr\000TEQrsi\000TEQrsr\000TPsoft\000TRAP\000TSTri\000TSTrr\000"
    "TSTrsi\000TSTrsr\000UADD16\000UADD8\000UASX\000UBFX\000UHADD16\000UHADD"
    "8\000UHASX\000UHSAX\000UHSUB16\000UHSUB8\000UMAAL\000UMAALv5\000UMLAL\000"
    "UMLALv5\000UMULL\000UMULLv5\000UQADD16\000UQADD8\000UQASX\000UQSAX\000U"
    "QSUB16\000UQSUB8\000USAD8\000USADA8\000USAT\000USAT16\000USAX\000USUB16"
    "\000USUB8\000UXTAB\000UXTAB16\000UXTAH\000UXTB\000UXTB16\000UXTH\000VAB"
    "ALsv2i64\000VABALsv4i32\000VABALsv8i16\000VABALuv2i64\000VABALuv4i32\000"
    "VABALuv8i16\000VABAsv16i8\000VABAsv2i32\000VABAsv4i16\000VABAsv4i32\000"
    "VABAsv8i16\000VABAsv8i8\000VABAuv16i8\000VABAuv2i32\000VABAuv4i16\000VA"
    "BAuv4i32\000VABAuv8i16\000VABAuv8i8\000VABDLsv2i64\000VABDLsv4i32\000VA"
    "BDLsv8i16\000VABDLuv2i64\000VABDLuv4i32\000VABDLuv8i16\000VABDfd\000VAB"
    "Dfq\000VABDsv16i8\000VABDsv2i32\000VABDsv4i16\000VABDsv4i32\000VABDsv8i"
    "16\000VABDsv8i8\000VABDuv16i8\000VABDuv2i32\000VABDuv4i16\000VABDuv4i32"
    "\000VABDuv8i16\000VABDuv8i8\000VABSD\000VABSS\000VABSfd\000VABSfq\000VA"
    "BSv16i8\000VABSv2i32\000VABSv4i16\000VABSv4i32\000VABSv8i16\000VABSv8i8"
    "\000VACGEd\000VACGEq\000VACGTd\000VACGTq\000VADDD\000VADDHNv2i32\000VAD"
    "DHNv4i16\000VADDHNv8i8\000VADDLsv2i64\000VADDLsv4i32\000VADDLsv8i16\000"
    "VADDLuv2i64\000VADDLuv4i32\000VADDLuv8i16\000VADDS\000VADDWsv2i64\000VA"
    "DDWsv4i32\000VADDWsv8i16\000VADDWuv2i64\000VADDWuv4i32\000VADDWuv8i16\000"
    "VADDfd\000VADDfq\000VADDv16i8\000VADDv1i64\000VADDv2i32\000VADDv2i64\000"
    "VADDv4i16\000VADDv4i32\000VADDv8i16\000VADDv8i8\000VANDd\000VANDq\000VB"
    "ICd\000VBICiv2i32\000VBICiv4i16\000VBICiv4i32\000VBICiv8i16\000VBICq\000"
    "VBIFd\000VBIFq\000VBITd\000VBITq\000VBSLd\000VBSLq\000VCEQfd\000VCEQfq\000"
    "VCEQv16i8\000VCEQv2i32\000VCEQv4i16\000VCEQv4i32\000VCEQv8i16\000VCEQv8"
    "i8\000VCEQzv16i8\000VCEQzv2f32\000VCEQzv2i32\000VCEQzv4f32\000VCEQzv4i1"
    "6\000VCEQzv4i32\000VCEQzv8i16\000VCEQzv8i8\000VCGEfd\000VCGEfq\000VCGEs"
    "v16i8\000VCGEsv2i32\000VCGEsv4i16\000VCGEsv4i32\000VCGEsv8i16\000VCGEsv"
    "8i8\000VCGEuv16i8\000VCGEuv2i32\000VCGEuv4i16\000VCGEuv4i32\000VCGEuv8i"
    "16\000VCGEuv8i8\000VCGEzv16i8\000VCGEzv2f32\000VCGEzv2i32\000VCGEzv4f32"
    "\000VCGEzv4i16\000VCGEzv4i32\000VCGEzv8i16\000VCGEzv8i8\000VCGTfd\000VC"
    "GTfq\000VCGTsv16i8\000VCGTsv2i32\000VCGTsv4i16\000VCGTsv4i32\000VCGTsv8"
    "i16\000VCGTsv8i8\000VCGTuv16i8\000VCGTuv2i32\000VCGTuv4i16\000VCGTuv4i3"
    "2\000VCGTuv8i16\000VCGTuv8i8\000VCGTzv16i8\000VCGTzv2f32\000VCGTzv2i32\000"
    "VCGTzv4f32\000VCGTzv4i16\000VCGTzv4i32\000VCGTzv8i16\000VCGTzv8i8\000VC"
    "LEzv16i8\000VCLEzv2f32\000VCLEzv2i32\000VCLEzv4f32\000VCLEzv4i16\000VCL"
    "Ezv4i32\000VCLEzv8i16\000VCLEzv8i8\000VCLSv16i8\000VCLSv2i32\000VCLSv4i"
    "16\000VCLSv4i32\000VCLSv8i16\000VCLSv8i8\000VCLTzv16i8\000VCLTzv2f32\000"
    "VCLTzv2i32\000VCLTzv4f32\000VCLTzv4i16\000VCLTzv4i32\000VCLTzv8i16\000V"
    "CLTzv8i8\000VCLZv16i8\000VCLZv2i32\000VCLZv4i16\000VCLZv4i32\000VCLZv8i"
    "16\000VCLZv8i8\000VCMPD\000VCMPED\000VCMPES\000VCMPEZD\000VCMPEZS\000VC"
    "MPS\000VCMPZD\000VCMPZS\000VCNTd\000VCNTq\000VCVTBHS\000VCVTBSH\000VCVT"
    "DS\000VCVTSD\000VCVTTHS\000VCVTTSH\000VCVTf2h\000VCVTf2sd\000VCVTf2sq\000"
    "VCVTf2ud\000VCVTf2uq\000VCVTf2xsd\000VCVTf2xsq\000VCVTf2xud\000VCVTf2xu"
    "q\000VCVTh2f\000VCVTs2fd\000VCVTs2fq\000VCVTu2fd\000VCVTu2fq\000VCVTxs2"
    "fd\000VCVTxs2fq\000VCVTxu2fd\000VCVTxu2fq\000VDIVD\000VDIVS\000VDUP16d\000"
    "VDUP16q\000VDUP32d\000VDUP32q\000VDUP8d\000VDUP8q\000VDUPLN16d\000VDUPL"
    "N16q\000VDUPLN32d\000VDUPLN32q\000VDUPLN8d\000VDUPLN8q\000VDUPfdf\000VD"
    "UPfqf\000VEORd\000VEORq\000VEXTd16\000VEXTd32\000VEXTd8\000VEXTq16\000V"
    "EXTq32\000VEXTq8\000VGETLNi32\000VGETLNs16\000VGETLNs8\000VGETLNu16\000"
    "VGETLNu8\000VHADDsv16i8\000VHADDsv2i32\000VHADDsv4i16\000VHADDsv4i32\000"
    "VHADDsv8i16\000VHADDsv8i8\000VHADDuv16i8\000VHADDuv2i32\000VHADDuv4i16\000"
    "VHADDuv4i32\000VHADDuv8i16\000VHADDuv8i8\000VHSUBsv16i8\000VHSUBsv2i32\000"
    "VHSUBsv4i16\000VHSUBsv4i32\000VHSUBsv8i16\000VHSUBsv8i8\000VHSUBuv16i8\000"
    "VHSUBuv2i32\000VHSUBuv4i16\000VHSUBuv4i32\000VHSUBuv8i16\000VHSUBuv8i8\000"
    "VLD1DUPd16\000VLD1DUPd16_UPD\000VLD1DUPd32\000VLD1DUPd32_UPD\000VLD1DUP"
    "d8\000VLD1DUPd8_UPD\000VLD1DUPq16\000VLD1DUPq16Pseudo\000VLD1DUPq16Pseu"
    "do_UPD\000VLD1DUPq16_UPD\000VLD1DUPq32\000VLD1DUPq32Pseudo\000VLD1DUPq3"
    "2Pseudo_UPD\000VLD1DUPq32_UPD\000VLD1DUPq8\000VLD1DUPq8Pseudo\000VLD1DU"
    "Pq8Pseudo_UPD\000VLD1DUPq8_UPD\000VLD1LNd16\000VLD1LNd16_UPD\000VLD1LNd"
    "32\000VLD1LNd32_UPD\000VLD1LNd8\000VLD1LNd8_UPD\000VLD1LNq16Pseudo\000V"
    "LD1LNq16Pseudo_UPD\000VLD1LNq32Pseudo\000VLD1LNq32Pseudo_UPD\000VLD1LNq"
    "8Pseudo\000VLD1LNq8Pseudo_UPD\000VLD1d16\000VLD1d16Q\000VLD1d16Q_UPD\000"
    "VLD1d16T\000VLD1d16T_UPD\000VLD1d16_UPD\000VLD1d32\000VLD1d32Q\000VLD1d"
    "32Q_UPD\000VLD1d32T\000VLD1d32T_UPD\000VLD1d32_UPD\000VLD1d64\000VLD1d6"
    "4Q\000VLD1d64QPseudo\000VLD1d64QPseudo_UPD\000VLD1d64Q_UPD\000VLD1d64T\000"
    "VLD1d64TPseudo\000VLD1d64TPseudo_UPD\000VLD1d64T_UPD\000VLD1d64_UPD\000"
    "VLD1d8\000VLD1d8Q\000VLD1d8Q_UPD\000VLD1d8T\000VLD1d8T_UPD\000VLD1d8_UP"
    "D\000VLD1q16\000VLD1q16Pseudo\000VLD1q16Pseudo_UPD\000VLD1q16_UPD\000VL"
    "D1q32\000VLD1q32Pseudo\000VLD1q32Pseudo_UPD\000VLD1q32_UPD\000VLD1q64\000"
    "VLD1q64Pseudo\000VLD1q64Pseudo_UPD\000VLD1q64_UPD\000VLD1q8\000VLD1q8Ps"
    "eudo\000VLD1q8Pseudo_UPD\000VLD1q8_UPD\000VLD2DUPd16\000VLD2DUPd16Pseud"
    "o\000VLD2DUPd16Pseudo_UPD\000VLD2DUPd16_UPD\000VLD2DUPd16x2\000VLD2DUPd"
    "16x2_UPD\000VLD2DUPd32\000VLD2DUPd32Pseudo\000VLD2DUPd32Pseudo_UPD\000V"
    "LD2DUPd32_UPD\000VLD2DUPd32x2\000VLD2DUPd32x2_UPD\000VLD2DUPd8\000VLD2D"
    "UPd8Pseudo\000VLD2DUPd8Pseudo_UPD\000VLD2DUPd8_UPD\000VLD2DUPd8x2\000VL"
    "D2DUPd8x2_UPD\000VLD2LNd16\000VLD2LNd16Pseudo\000VLD2LNd16Pseudo_UPD\000"
    "VLD2LNd16_UPD\000VLD2LNd32\000VLD2LNd32Pseudo\000VLD2LNd32Pseudo_UPD\000"
    "VLD2LNd32_UPD\000VLD2LNd8\000VLD2LNd8Pseudo\000VLD2LNd8Pseudo_UPD\000VL"
    "D2LNd8_UPD\000VLD2LNq16\000VLD2LNq16Pseudo\000VLD2LNq16Pseudo_UPD\000VL"
    "D2LNq16_UPD\000VLD2LNq32\000VLD2LNq32Pseudo\000VLD2LNq32Pseudo_UPD\000V"
    "LD2LNq32_UPD\000VLD2b16\000VLD2b16_UPD\000VLD2b32\000VLD2b32_UPD\000VLD"
    "2b8\000VLD2b8_UPD\000VLD2d16\000VLD2d16Pseudo\000VLD2d16Pseudo_UPD\000V"
    "LD2d16_UPD\000VLD2d32\000VLD2d32Pseudo\000VLD2d32Pseudo_UPD\000VLD2d32_"
    "UPD\000VLD2d8\000VLD2d8Pseudo\000VLD2d8Pseudo_UPD\000VLD2d8_UPD\000VLD2"
    "q16\000VLD2q16Pseudo\000VLD2q16Pseudo_UPD\000VLD2q16_UPD\000VLD2q32\000"
    "VLD2q32Pseudo\000VLD2q32Pseudo_UPD\000VLD2q32_UPD\000VLD2q8\000VLD2q8Ps"
    "eudo\000VLD2q8Pseudo_UPD\000VLD2q8_UPD\000VLD3DUPd16\000VLD3DUPd16Pseud"
    "o\000VLD3DUPd16Pseudo_UPD\000VLD3DUPd16_UPD\000VLD3DUPd16x2\000VLD3DUPd"
    "16x2_UPD\000VLD3DUPd32\000VLD3DUPd32Pseudo\000VLD3DUPd32Pseudo_UPD\000V"
    "LD3DUPd32_UPD\000VLD3DUPd32x2\000VLD3DUPd32x2_UPD\000VLD3DUPd8\000VLD3D"
    "UPd8Pseudo\000VLD3DUPd8Pseudo_UPD\000VLD3DUPd8_UPD\000VLD3DUPd8x2\000VL"
    "D3DUPd8x2_UPD\000VLD3LNd16\000VLD3LNd16Pseudo\000VLD3LNd16Pseudo_UPD\000"
    "VLD3LNd16_UPD\000VLD3LNd32\000VLD3LNd32Pseudo\000VLD3LNd32Pseudo_UPD\000"
    "VLD3LNd32_UPD\000VLD3LNd8\000VLD3LNd8Pseudo\000VLD3LNd8Pseudo_UPD\000VL"
    "D3LNd8_UPD\000VLD3LNq16\000VLD3LNq16Pseudo\000VLD3LNq16Pseudo_UPD\000VL"
    "D3LNq16_UPD\000VLD3LNq32\000VLD3LNq32Pseudo\000VLD3LNq32Pseudo_UPD\000V"
    "LD3LNq32_UPD\000VLD3d16\000VLD3d16Pseudo\000VLD3d16Pseudo_UPD\000VLD3d1"
    "6_UPD\000VLD3d32\000VLD3d32Pseudo\000VLD3d32Pseudo_UPD\000VLD3d32_UPD\000"
    "VLD3d8\000VLD3d8Pseudo\000VLD3d8Pseudo_UPD\000VLD3d8_UPD\000VLD3q16\000"
    "VLD3q16Pseudo_UPD\000VLD3q16_UPD\000VLD3q16oddPseudo\000VLD3q16oddPseud"
    "o_UPD\000VLD3q32\000VLD3q32Pseudo_UPD\000VLD3q32_UPD\000VLD3q32oddPseud"
    "o\000VLD3q32oddPseudo_UPD\000VLD3q8\000VLD3q8Pseudo_UPD\000VLD3q8_UPD\000"
    "VLD3q8oddPseudo\000VLD3q8oddPseudo_UPD\000VLD4DUPd16\000VLD4DUPd16Pseud"
    "o\000VLD4DUPd16Pseudo_UPD\000VLD4DUPd16_UPD\000VLD4DUPd16x2\000VLD4DUPd"
    "16x2_UPD\000VLD4DUPd32\000VLD4DUPd32Pseudo\000VLD4DUPd32Pseudo_UPD\000V"
    "LD4DUPd32_UPD\000VLD4DUPd32x2\000VLD4DUPd32x2_UPD\000VLD4DUPd8\000VLD4D"
    "UPd8Pseudo\000VLD4DUPd8Pseudo_UPD\000VLD4DUPd8_UPD\000VLD4DUPd8x2\000VL"
    "D4DUPd8x2_UPD\000VLD4LNd16\000VLD4LNd16Pseudo\000VLD4LNd16Pseudo_UPD\000"
    "VLD4LNd16_UPD\000VLD4LNd32\000VLD4LNd32Pseudo\000VLD4LNd32Pseudo_UPD\000"
    "VLD4LNd32_UPD\000VLD4LNd8\000VLD4LNd8Pseudo\000VLD4LNd8Pseudo_UPD\000VL"
    "D4LNd8_UPD\000VLD4LNq16\000VLD4LNq16Pseudo\000VLD4LNq16Pseudo_UPD\000VL"
    "D4LNq16_UPD\000VLD4LNq32\000VLD4LNq32Pseudo\000VLD4LNq32Pseudo_UPD\000V"
    "LD4LNq32_UPD\000VLD4d16\000VLD4d16Pseudo\000VLD4d16Pseudo_UPD\000VLD4d1"
    "6_UPD\000VLD4d32\000VLD4d32Pseudo\000VLD4d32Pseudo_UPD\000VLD4d32_UPD\000"
    "VLD4d8\000VLD4d8Pseudo\000VLD4d8Pseudo_UPD\000VLD4d8_UPD\000VLD4q16\000"
    "VLD4q16Pseudo_UPD\000VLD4q16_UPD\000VLD4q16oddPseudo\000VLD4q16oddPseud"
    "o_UPD\000VLD4q32\000VLD4q32Pseudo_UPD\000VLD4q32_UPD\000VLD4q32oddPseud"
    "o\000VLD4q32oddPseudo_UPD\000VLD4q8\000VLD4q8Pseudo_UPD\000VLD4q8_UPD\000"
    "VLD4q8oddPseudo\000VLD4q8oddPseudo_UPD\000VLDMDDB_UPD\000VLDMDIA\000VLD"
    "MDIA_UPD\000VLDMQIA\000VLDMSDB_UPD\000VLDMSIA\000VLDMSIA_UPD\000VLDRD\000"
    "VLDRS\000VMAXfd\000VMAXfq\000VMAXsv16i8\000VMAXsv2i32\000VMAXsv4i16\000"
    "VMAXsv4i32\000VMAXsv8i16\000VMAXsv8i8\000VMAXuv16i8\000VMAXuv2i32\000VM"
    "AXuv4i16\000VMAXuv4i32\000VMAXuv8i16\000VMAXuv8i8\000VMINfd\000VMINfq\000"
    "VMINsv16i8\000VMINsv2i32\000VMINsv4i16\000VMINsv4i32\000VMINsv8i16\000V"
    "MINsv8i8\000VMINuv16i8\000VMINuv2i32\000VMINuv4i16\000VMINuv4i32\000VMI"
    "Nuv8i16\000VMINuv8i8\000VMLAD\000VMLALslsv2i32\000VMLALslsv4i16\000VMLA"
    "Lsluv2i32\000VMLALsluv4i16\000VMLALsv2i64\000VMLALsv4i32\000VMLALsv8i16"
    "\000VMLALuv2i64\000VMLALuv4i32\000VMLALuv8i16\000VMLAS\000VMLAfd\000VML"
    "Afq\000VMLAslfd\000VMLAslfq\000VMLAslv2i32\000VMLAslv4i16\000VMLAslv4i3"
    "2\000VMLAslv8i16\000VMLAv16i8\000VMLAv2i32\000VMLAv4i16\000VMLAv4i32\000"
    "VMLAv8i16\000VMLAv8i8\000VMLSD\000VMLSLslsv2i32\000VMLSLslsv4i16\000VML"
    "SLsluv2i32\000VMLSLsluv4i16\000VMLSLsv2i64\000VMLSLsv4i32\000VMLSLsv8i1"
    "6\000VMLSLuv2i64\000VMLSLuv4i32\000VMLSLuv8i16\000VMLSS\000VMLSfd\000VM"
    "LSfq\000VMLSslfd\000VMLSslfq\000VMLSslv2i32\000VMLSslv4i16\000VMLSslv4i"
    "32\000VMLSslv8i16\000VMLSv16i8\000VMLSv2i32\000VMLSv4i16\000VMLSv4i32\000"
    "VMLSv8i16\000VMLSv8i8\000VMOVD\000VMOVDRR\000VMOVDcc\000VMOVLsv2i64\000"
    "VMOVLsv4i32\000VMOVLsv8i16\000VMOVLuv2i64\000VMOVLuv4i32\000VMOVLuv8i16"
    "\000VMOVNv2i32\000VMOVNv4i16\000VMOVNv8i8\000VMOVQQ\000VMOVQQQQ\000VMOV"
    "RRD\000VMOVRRS\000VMOVRS\000VMOVS\000VMOVSR\000VMOVSRR\000VMOVScc\000VM"
    "OVv16i8\000VMOVv1i64\000VMOVv2i32\000VMOVv2i64\000VMOVv4i16\000VMOVv4i3"
    "2\000VMOVv8i16\000VMOVv8i8\000VMRS\000VMRS_FPEXC\000VMRS_FPSID\000VMSR\000"
    "VMSR_FPEXC\000VMSR_FPSID\000VMULD\000VMULLp\000VMULLslsv2i32\000VMULLsl"
    "sv4i16\000VMULLsluv2i32\000VMULLsluv4i16\000VMULLsv2i64\000VMULLsv4i32\000"
    "VMULLsv8i16\000VMULLuv2i64\000VMULLuv4i32\000VMULLuv8i16\000VMULS\000VM"
    "ULfd\000VMULfq\000VMULpd\000VMULpq\000VMULslfd\000VMULslfq\000VMULslv2i"
    "32\000VMULslv4i16\000VMULslv4i32\000VMULslv8i16\000VMULv16i8\000VMULv2i"
    "32\000VMULv4i16\000VMULv4i32\000VMULv8i16\000VMULv8i8\000VMVNd\000VMVNq"
    "\000VMVNv2i32\000VMVNv4i16\000VMVNv4i32\000VMVNv8i16\000VNEGD\000VNEGS\000"
    "VNEGf32q\000VNEGfd\000VNEGs16d\000VNEGs16q\000VNEGs32d\000VNEGs32q\000V"
    "NEGs8d\000VNEGs8q\000VNMLAD\000VNMLAS\000VNMLSD\000VNMLSS\000VNMULD\000"
    "VNMULS\000VORNd\000VORNq\000VORRd\000VORRiv2i32\000VORRiv4i16\000VORRiv"
    "4i32\000VORRiv8i16\000VORRq\000VPADALsv16i8\000VPADALsv2i32\000VPADALsv"
    "4i16\000VPADALsv4i32\000VPADALsv8i16\000VPADALsv8i8\000VPADALuv16i8\000"
    "VPADALuv2i32\000VPADALuv4i16\000VPADALuv4i32\000VPADALuv8i16\000VPADALu"
    "v8i8\000VPADDLsv16i8\000VPADDLsv2i32\000VPADDLsv4i16\000VPADDLsv4i32\000"
    "VPADDLsv8i16\000VPADDLsv8i8\000VPADDLuv16i8\000VPADDLuv2i32\000VPADDLuv"
    "4i16\000VPADDLuv4i32\000VPADDLuv8i16\000VPADDLuv8i8\000VPADDf\000VPADDi"
    "16\000VPADDi32\000VPADDi8\000VPMAXf\000VPMAXs16\000VPMAXs32\000VPMAXs8\000"
    "VPMAXu16\000VPMAXu32\000VPMAXu8\000VPMINf\000VPMINs16\000VPMINs32\000VP"
    "MINs8\000VPMINu16\000VPMINu32\000VPMINu8\000VQABSv16i8\000VQABSv2i32\000"
    "VQABSv4i16\000VQABSv4i32\000VQABSv8i16\000VQABSv8i8\000VQADDsv16i8\000V"
    "QADDsv1i64\000VQADDsv2i32\000VQADDsv2i64\000VQADDsv4i16\000VQADDsv4i32\000"
    "VQADDsv8i16\000VQADDsv8i8\000VQADDuv16i8\000VQADDuv1i64\000VQADDuv2i32\000"
    "VQADDuv2i64\000VQADDuv4i16\000VQADDuv4i32\000VQADDuv8i16\000VQADDuv8i8\000"
    "VQDMLALslv2i32\000VQDMLALslv4i16\000VQDMLALv2i64\000VQDMLALv4i32\000VQD"
    "MLSLslv2i32\000VQDMLSLslv4i16\000VQDMLSLv2i64\000VQDMLSLv4i32\000VQDMUL"
    "Hslv2i32\000VQDMULHslv4i16\000VQDMULHslv4i32\000VQDMULHslv8i16\000VQDMU"
    "LHv2i32\000VQDMULHv4i16\000VQDMULHv4i32\000VQDMULHv8i16\000VQDMULLslv2i"
    "32\000VQDMULLslv4i16\000VQDMULLv2i64\000VQDMULLv4i32\000VQMOVNsuv2i32\000"
    "VQMOVNsuv4i16\000VQMOVNsuv8i8\000VQMOVNsv2i32\000VQMOVNsv4i16\000VQMOVN"
    "sv8i8\000VQMOVNuv2i32\000VQMOVNuv4i16\000VQMOVNuv8i8\000VQNEGv16i8\000V"
    "QNEGv2i32\000VQNEGv4i16\000VQNEGv4i32\000VQNEGv8i16\000VQNEGv8i8\000VQR"
    "DMULHslv2i32\000VQRDMULHslv4i16\000VQRDMULHslv4i32\000VQRDMULHslv8i16\000"
    "VQRDMULHv2i32\000VQRDMULHv4i16\000VQRDMULHv4i32\000VQRDMULHv8i16\000VQR"
    "SHLsv16i8\000VQRSHLsv1i64\000VQRSHLsv2i32\000VQRSHLsv2i64\000VQRSHLsv4i"
    "16\000VQRSHLsv4i32\000VQRSHLsv8i16\000VQRSHLsv8i8\000VQRSHLuv16i8\000VQ"
    "RSHLuv1i64\000VQRSHLuv2i32\000VQRSHLuv2i64\000VQRSHLuv4i16\000VQRSHLuv4"
    "i32\000VQRSHLuv8i16\000VQRSHLuv8i8\000VQRSHRNsv2i32\000VQRSHRNsv4i16\000"
    "VQRSHRNsv8i8\000VQRSHRNuv2i32\000VQRSHRNuv4i16\000VQRSHRNuv8i8\000VQRSH"
    "RUNv2i32\000VQRSHRUNv4i16\000VQRSHRUNv8i8\000VQSHLsiv16i8\000VQSHLsiv1i"
    "64\000VQSHLsiv2i32\000VQSHLsiv2i64\000VQSHLsiv4i16\000VQSHLsiv4i32\000V"
    "QSHLsiv8i16\000VQSHLsiv8i8\000VQSHLsuv16i8\000VQSHLsuv1i64\000VQSHLsuv2"
    "i32\000VQSHLsuv2i64\000VQSHLsuv4i16\000VQSHLsuv4i32\000VQSHLsuv8i16\000"
    "VQSHLsuv8i8\000VQSHLsv16i8\000VQSHLsv1i64\000VQSHLsv2i32\000VQSHLsv2i64"
    "\000VQSHLsv4i16\000VQSHLsv4i32\000VQSHLsv8i16\000VQSHLsv8i8\000VQSHLuiv"
    "16i8\000VQSHLuiv1i64\000VQSHLuiv2i32\000VQSHLuiv2i64\000VQSHLuiv4i16\000"
    "VQSHLuiv4i32\000VQSHLuiv8i16\000VQSHLuiv8i8\000VQSHLuv16i8\000VQSHLuv1i"
    "64\000VQSHLuv2i32\000VQSHLuv2i64\000VQSHLuv4i16\000VQSHLuv4i32\000VQSHL"
    "uv8i16\000VQSHLuv8i8\000VQSHRNsv2i32\000VQSHRNsv4i16\000VQSHRNsv8i8\000"
    "VQSHRNuv2i32\000VQSHRNuv4i16\000VQSHRNuv8i8\000VQSHRUNv2i32\000VQSHRUNv"
    "4i16\000VQSHRUNv8i8\000VQSUBsv16i8\000VQSUBsv1i64\000VQSUBsv2i32\000VQS"
    "UBsv2i64\000VQSUBsv4i16\000VQSUBsv4i32\000VQSUBsv8i16\000VQSUBsv8i8\000"
    "VQSUBuv16i8\000VQSUBuv1i64\000VQSUBuv2i32\000VQSUBuv2i64\000VQSUBuv4i16"
    "\000VQSUBuv4i32\000VQSUBuv8i16\000VQSUBuv8i8\000VRADDHNv2i32\000VRADDHN"
    "v4i16\000VRADDHNv8i8\000VRECPEd\000VRECPEfd\000VRECPEfq\000VRECPEq\000V"
    "RECPSfd\000VRECPSfq\000VREV16d8\000VREV16q8\000VREV32d16\000VREV32d8\000"
    "VREV32q16\000VREV32q8\000VREV64d16\000VREV64d32\000VREV64d8\000VREV64q1"
    "6\000VREV64q32\000VREV64q8\000VRHADDsv16i8\000VRHADDsv2i32\000VRHADDsv4"
    "i16\000VRHADDsv4i32\000VRHADDsv8i16\000VRHADDsv8i8\000VRHADDuv16i8\000V"
    "RHADDuv2i32\000VRHADDuv4i16\000VRHADDuv4i32\000VRHADDuv8i16\000VRHADDuv"
    "8i8\000VRSHLsv16i8\000VRSHLsv1i64\000VRSHLsv2i32\000VRSHLsv2i64\000VRSH"
    "Lsv4i16\000VRSHLsv4i32\000VRSHLsv8i16\000VRSHLsv8i8\000VRSHLuv16i8\000V"
    "RSHLuv1i64\000VRSHLuv2i32\000VRSHLuv2i64\000VRSHLuv4i16\000VRSHLuv4i32\000"
    "VRSHLuv8i16\000VRSHLuv8i8\000VRSHRNv2i32\000VRSHRNv4i16\000VRSHRNv8i8\000"
    "VRSHRsv16i8\000VRSHRsv1i64\000VRSHRsv2i32\000VRSHRsv2i64\000VRSHRsv4i16"
    "\000VRSHRsv4i32\000VRSHRsv8i16\000VRSHRsv8i8\000VRSHRuv16i8\000VRSHRuv1"
    "i64\000VRSHRuv2i32\000VRSHRuv2i64\000VRSHRuv4i16\000VRSHRuv4i32\000VRSH"
    "Ruv8i16\000VRSHRuv8i8\000VRSQRTEd\000VRSQRTEfd\000VRSQRTEfq\000VRSQRTEq"
    "\000VRSQRTSfd\000VRSQRTSfq\000VRSRAsv16i8\000VRSRAsv1i64\000VRSRAsv2i32"
    "\000VRSRAsv2i64\000VRSRAsv4i16\000VRSRAsv4i32\000VRSRAsv8i16\000VRSRAsv"
    "8i8\000VRSRAuv16i8\000VRSRAuv1i64\000VRSRAuv2i32\000VRSRAuv2i64\000VRSR"
    "Auv4i16\000VRSRAuv4i32\000VRSRAuv8i16\000VRSRAuv8i8\000VRSUBHNv2i32\000"
    "VRSUBHNv4i16\000VRSUBHNv8i8\000VSETLNi16\000VSETLNi32\000VSETLNi8\000VS"
    "HLLi16\000VSHLLi32\000VSHLLi8\000VSHLLsv2i64\000VSHLLsv4i32\000VSHLLsv8"
    "i16\000VSHLLuv2i64\000VSHLLuv4i32\000VSHLLuv8i16\000VSHLiv16i8\000VSHLi"
    "v1i64\000VSHLiv2i32\000VSHLiv2i64\000VSHLiv4i16\000VSHLiv4i32\000VSHLiv"
    "8i16\000VSHLiv8i8\000VSHLsv16i8\000VSHLsv1i64\000VSHLsv2i32\000VSHLsv2i"
    "64\000VSHLsv4i16\000VSHLsv4i32\000VSHLsv8i16\000VSHLsv8i8\000VSHLuv16i8"
    "\000VSHLuv1i64\000VSHLuv2i32\000VSHLuv2i64\000VSHLuv4i16\000VSHLuv4i32\000"
    "VSHLuv8i16\000VSHLuv8i8\000VSHRNv2i32\000VSHRNv4i16\000VSHRNv8i8\000VSH"
    "Rsv16i8\000VSHRsv1i64\000VSHRsv2i32\000VSHRsv2i64\000VSHRsv4i16\000VSHR"
    "sv4i32\000VSHRsv8i16\000VSHRsv8i8\000VSHRuv16i8\000VSHRuv1i64\000VSHRuv"
    "2i32\000VSHRuv2i64\000VSHRuv4i16\000VSHRuv4i32\000VSHRuv8i16\000VSHRuv8"
    "i8\000VSHTOD\000VSHTOS\000VSITOD\000VSITOS\000VSLIv16i8\000VSLIv1i64\000"
    "VSLIv2i32\000VSLIv2i64\000VSLIv4i16\000VSLIv4i32\000VSLIv8i16\000VSLIv8"
    "i8\000VSLTOD\000VSLTOS\000VSQRTD\000VSQRTS\000VSRAsv16i8\000VSRAsv1i64\000"
    "VSRAsv2i32\000VSRAsv2i64\000VSRAsv4i16\000VSRAsv4i32\000VSRAsv8i16\000V"
    "SRAsv8i8\000VSRAuv16i8\000VSRAuv1i64\000VSRAuv2i32\000VSRAuv2i64\000VSR"
    "Auv4i16\000VSRAuv4i32\000VSRAuv8i16\000VSRAuv8i8\000VSRIv16i8\000VSRIv1"
    "i64\000VSRIv2i32\000VSRIv2i64\000VSRIv4i16\000VSRIv4i32\000VSRIv8i16\000"
    "VSRIv8i8\000VST1LNd16\000VST1LNd16_UPD\000VST1LNd32\000VST1LNd32_UPD\000"
    "VST1LNd8\000VST1LNd8_UPD\000VST1LNq16Pseudo\000VST1LNq16Pseudo_UPD\000V"
    "ST1LNq32Pseudo\000VST1LNq32Pseudo_UPD\000VST1LNq8Pseudo\000VST1LNq8Pseu"
    "do_UPD\000VST1d16\000VST1d16Q\000VST1d16Q_UPD\000VST1d16T\000VST1d16T_U"
    "PD\000VST1d16_UPD\000VST1d32\000VST1d32Q\000VST1d32Q_UPD\000VST1d32T\000"
    "VST1d32T_UPD\000VST1d32_UPD\000VST1d64\000VST1d64Q\000VST1d64QPseudo\000"
    "VST1d64QPseudo_UPD\000VST1d64Q_UPD\000VST1d64T\000VST1d64TPseudo\000VST"
    "1d64TPseudo_UPD\000VST1d64T_UPD\000VST1d64_UPD\000VST1d8\000VST1d8Q\000"
    "VST1d8Q_UPD\000VST1d8T\000VST1d8T_UPD\000VST1d8_UPD\000VST1q16\000VST1q"
    "16Pseudo\000VST1q16Pseudo_UPD\000VST1q16_UPD\000VST1q32\000VST1q32Pseud"
    "o\000VST1q32Pseudo_UPD\000VST1q32_UPD\000VST1q64\000VST1q64Pseudo\000VS"
    "T1q64Pseudo_UPD\000VST1q64_UPD\000VST1q8\000VST1q8Pseudo\000VST1q8Pseud"
    "o_UPD\000VST1q8_UPD\000VST2LNd16\000VST2LNd16Pseudo\000VST2LNd16Pseudo_"
    "UPD\000VST2LNd16_UPD\000VST2LNd32\000VST2LNd32Pseudo\000VST2LNd32Pseudo"
    "_UPD\000VST2LNd32_UPD\000VST2LNd8\000VST2LNd8Pseudo\000VST2LNd8Pseudo_U"
    "PD\000VST2LNd8_UPD\000VST2LNq16\000VST2LNq16Pseudo\000VST2LNq16Pseudo_U"
    "PD\000VST2LNq16_UPD\000VST2LNq32\000VST2LNq32Pseudo\000VST2LNq32Pseudo_"
    "UPD\000VST2LNq32_UPD\000VST2b16\000VST2b16_UPD\000VST2b32\000VST2b32_UP"
    "D\000VST2b8\000VST2b8_UPD\000VST2d16\000VST2d16Pseudo\000VST2d16Pseudo_"
    "UPD\000VST2d16_UPD\000VST2d32\000VST2d32Pseudo\000VST2d32Pseudo_UPD\000"
    "VST2d32_UPD\000VST2d8\000VST2d8Pseudo\000VST2d8Pseudo_UPD\000VST2d8_UPD"
    "\000VST2q16\000VST2q16Pseudo\000VST2q16Pseudo_UPD\000VST2q16_UPD\000VST"
    "2q32\000VST2q32Pseudo\000VST2q32Pseudo_UPD\000VST2q32_UPD\000VST2q8\000"
    "VST2q8Pseudo\000VST2q8Pseudo_UPD\000VST2q8_UPD\000VST3LNd16\000VST3LNd1"
    "6Pseudo\000VST3LNd16Pseudo_UPD\000VST3LNd16_UPD\000VST3LNd32\000VST3LNd"
    "32Pseudo\000VST3LNd32Pseudo_UPD\000VST3LNd32_UPD\000VST3LNd8\000VST3LNd"
    "8Pseudo\000VST3LNd8Pseudo_UPD\000VST3LNd8_UPD\000VST3LNq16\000VST3LNq16"
    "Pseudo\000VST3LNq16Pseudo_UPD\000VST3LNq16_UPD\000VST3LNq32\000VST3LNq3"
    "2Pseudo\000VST3LNq32Pseudo_UPD\000VST3LNq32_UPD\000VST3d16\000VST3d16Ps"
    "eudo\000VST3d16Pseudo_UPD\000VST3d16_UPD\000VST3d32\000VST3d32Pseudo\000"
    "VST3d32Pseudo_UPD\000VST3d32_UPD\000VST3d8\000VST3d8Pseudo\000VST3d8Pse"
    "udo_UPD\000VST3d8_UPD\000VST3q16\000VST3q16Pseudo_UPD\000VST3q16_UPD\000"
    "VST3q16oddPseudo\000VST3q16oddPseudo_UPD\000VST3q32\000VST3q32Pseudo_UP"
    "D\000VST3q32_UPD\000VST3q32oddPseudo\000VST3q32oddPseudo_UPD\000VST3q8\000"
    "VST3q8Pseudo_UPD\000VST3q8_UPD\000VST3q8oddPseudo\000VST3q8oddPseudo_UP"
    "D\000VST4LNd16\000VST4LNd16Pseudo\000VST4LNd16Pseudo_UPD\000VST4LNd16_U"
    "PD\000VST4LNd32\000VST4LNd32Pseudo\000VST4LNd32Pseudo_UPD\000VST4LNd32_"
    "UPD\000VST4LNd8\000VST4LNd8Pseudo\000VST4LNd8Pseudo_UPD\000VST4LNd8_UPD"
    "\000VST4LNq16\000VST4LNq16Pseudo\000VST4LNq16Pseudo_UPD\000VST4LNq16_UP"
    "D\000VST4LNq32\000VST4LNq32Pseudo\000VST4LNq32Pseudo_UPD\000VST4LNq32_U"
    "PD\000VST4d16\000VST4d16Pseudo\000VST4d16Pseudo_UPD\000VST4d16_UPD\000V"
    "ST4d32\000VST4d32Pseudo\000VST4d32Pseudo_UPD\000VST4d32_UPD\000VST4d8\000"
    "VST4d8Pseudo\000VST4d8Pseudo_UPD\000VST4d8_UPD\000VST4q16\000VST4q16Pse"
    "udo_UPD\000VST4q16_UPD\000VST4q16oddPseudo\000VST4q16oddPseudo_UPD\000V"
    "ST4q32\000VST4q32Pseudo_UPD\000VST4q32_UPD\000VST4q32oddPseudo\000VST4q"
    "32oddPseudo_UPD\000VST4q8\000VST4q8Pseudo_UPD\000VST4q8_UPD\000VST4q8od"
    "dPseudo\000VST4q8oddPseudo_UPD\000VSTMDDB_UPD\000VSTMDIA\000VSTMDIA_UPD"
    "\000VSTMQIA\000VSTMSDB_UPD\000VSTMSIA\000VSTMSIA_UPD\000VSTRD\000VSTRS\000"
    "VSUBD\000VSUBHNv2i32\000VSUBHNv4i16\000VSUBHNv8i8\000VSUBLsv2i64\000VSU"
    "BLsv4i32\000VSUBLsv8i16\000VSUBLuv2i64\000VSUBLuv4i32\000VSUBLuv8i16\000"
    "VSUBS\000VSUBWsv2i64\000VSUBWsv4i32\000VSUBWsv8i16\000VSUBWuv2i64\000VS"
    "UBWuv4i32\000VSUBWuv8i16\000VSUBfd\000VSUBfq\000VSUBv16i8\000VSUBv1i64\000"
    "VSUBv2i32\000VSUBv2i64\000VSUBv4i16\000VSUBv4i32\000VSUBv8i16\000VSUBv8"
    "i8\000VSWPd\000VSWPq\000VTBL1\000VTBL2\000VTBL2Pseudo\000VTBL3\000VTBL3"
    "Pseudo\000VTBL4\000VTBL4Pseudo\000VTBX1\000VTBX2\000VTBX2Pseudo\000VTBX"
    "3\000VTBX3Pseudo\000VTBX4\000VTBX4Pseudo\000VTOSHD\000VTOSHS\000VTOSIRD"
    "\000VTOSIRS\000VTOSIZD\000VTOSIZS\000VTOSLD\000VTOSLS\000VTOUHD\000VTOU"
    "HS\000VTOUIRD\000VTOUIRS\000VTOUIZD\000VTOUIZS\000VTOULD\000VTOULS\000V"
    "TRNd16\000VTRNd32\000VTRNd8\000VTRNq16\000VTRNq32\000VTRNq8\000VTSTv16i"
    "8\000VTSTv2i32\000VTSTv4i16\000VTSTv4i32\000VTSTv8i16\000VTSTv8i8\000VU"
    "HTOD\000VUHTOS\000VUITOD\000VUITOS\000VULTOD\000VULTOS\000VUZPd16\000VU"
    "ZPd32\000VUZPd8\000VUZPq16\000VUZPq32\000VUZPq8\000VZIPd16\000VZIPd32\000"
    "VZIPd8\000VZIPq16\000VZIPq32\000VZIPq8\000WFE\000WFI\000YIELD\000t2ADCS"
    "ri\000t2ADCSrr\000t2ADCSrs\000t2ADCri\000t2ADCrr\000t2ADCrs\000t2ADDSri"
    "\000t2ADDSrr\000t2ADDSrs\000t2ADDri\000t2ADDri12\000t2ADDrr\000t2ADDrs\000"
    "t2ADR\000t2ANDri\000t2ANDrr\000t2ANDrs\000t2ASRri\000t2ASRrr\000t2B\000"
    "t2BFC\000t2BFI\000t2BFI4p\000t2BICri\000t2BICrr\000t2BICrs\000t2BR_JT\000"
    "t2BXJ\000t2Bcc\000t2CDP2\000t2CLREX\000t2CLZ\000t2CMNzri\000t2CMNzrr\000"
    "t2CMNzrs\000t2CMPri\000t2CMPrr\000t2CMPrs\000t2CPS1p\000t2CPS2p\000t2CP"
    "S3p\000t2DBG\000t2DMB\000t2DSB\000t2EORri\000t2EORrr\000t2EORrs\000t2IS"
    "B\000t2IT\000t2Int_eh_sjlj_setjmp\000t2Int_eh_sjlj_setjmp_nofp\000t2LDM"
    "DB\000t2LDMDB_UPD\000t2LDMIA\000t2LDMIA_RET\000t2LDMIA_UPD\000t2LDRBT\000"
    "t2LDRB_POST\000t2LDRB_PRE\000t2LDRBi12\000t2LDRBi8\000t2LDRBpci\000t2LD"
    "RBs\000t2LDRD_POST\000t2LDRD_PRE\000t2LDRDi8\000t2LDREX\000t2LDREXB\000"
    "t2LDREXD\000t2LDREXH\000t2LDRHT\000t2LDRH_POST\000t2LDRH_PRE\000t2LDRHi"
    "12\000t2LDRHi8\000t2LDRHpci\000t2LDRHs\000t2LDRSBT\000t2LDRSB_POST\000t"
    "2LDRSB_PRE\000t2LDRSBi12\000t2LDRSBi8\000t2LDRSBpci\000t2LDRSBs\000t2LD"
    "RSHT\000t2LDRSH_POST\000t2LDRSH_PRE\000t2LDRSHi12\000t2LDRSHi8\000t2LDR"
    "SHpci\000t2LDRSHs\000t2LDRT\000t2LDR_POST\000t2LDR_PRE\000t2LDRi12\000t"
    "2LDRi8\000t2LDRpci\000t2LDRpci_pic\000t2LDRs\000t2LEApcrel\000t2LEApcre"
    "lJT\000t2LSLri\000t2LSLrr\000t2LSRri\000t2LSRrr\000t2MCR\000t2MCR2\000t"
    "2MCRR\000t2MCRR2\000t2MLA\000t2MLS\000t2MOVCCasr\000t2MOVCCi\000t2MOVCC"
    "i16\000t2MOVCCi32imm\000t2MOVCClsl\000t2MOVCClsr\000t2MOVCCr\000t2MOVCC"
    "ror\000t2MOVTi16\000t2MOVTi16_ga_pcrel\000t2MOV_ga_dyn\000t2MOV_ga_pcre"
    "l\000t2MOVi\000t2MOVi16\000t2MOVi16_ga_pcrel\000t2MOVi32imm\000t2MOVr\000"
    "t2MOVsra_flag\000t2MOVsrl_flag\000t2MRC\000t2MRC2\000t2MRRC\000t2MRRC2\000"
    "t2MRS\000t2MRSsys\000t2MSR\000t2MUL\000t2MVNCCi\000t2MVNi\000t2MVNr\000"
    "t2MVNs\000t2NOP\000t2ORNri\000t2ORNrr\000t2ORNrs\000t2ORRri\000t2ORRrr\000"
    "t2ORRrs\000t2PKHBT\000t2PKHTB\000t2PLDWi12\000t2PLDWi8\000t2PLDWs\000t2"
    "PLDi12\000t2PLDi8\000t2PLDs\000t2PLIi12\000t2PLIi8\000t2PLIs\000t2QADD\000"
    "t2QADD16\000t2QADD8\000t2QASX\000t2QDADD\000t2QDSUB\000t2QSAX\000t2QSUB"
    "\000t2QSUB16\000t2QSUB8\000t2RBIT\000t2REV\000t2REV16\000t2REVSH\000t2R"
    "FEDB\000t2RFEDBW\000t2RFEIA\000t2RFEIAW\000t2RORri\000t2RORrr\000t2RRX\000"
    "t2RSBSri\000t2RSBSrs\000t2RSBri\000t2RSBrr\000t2RSBrs\000t2SADD16\000t2"
    "SADD8\000t2SASX\000t2SBCSri\000t2SBCSrr\000t2SBCSrs\000t2SBCri\000t2SBC"
    "rr\000t2SBCrs\000t2SBFX\000t2SDIV\000t2SEL\000t2SEV\000t2SHADD16\000t2S"
    "HADD8\000t2SHASX\000t2SHSAX\000t2SHSUB16\000t2SHSUB8\000t2SMC\000t2SMLA"
    "BB\000t2SMLABT\000t2SMLAD\000t2SMLADX\000t2SMLAL\000t2SMLALBB\000t2SMLA"
    "LBT\000t2SMLALD\000t2SMLALDX\000t2SMLALTB\000t2SMLALTT\000t2SMLATB\000t"
    "2SMLATT\000t2SMLAWB\000t2SMLAWT\000t2SMLSD\000t2SMLSDX\000t2SMLSLD\000t"
    "2SMLSLDX\000t2SMMLA\000t2SMMLAR\000t2SMMLS\000t2SMMLSR\000t2SMMUL\000t2"
    "SMMULR\000t2SMUAD\000t2SMUADX\000t2SMULBB\000t2SMULBT\000t2SMULL\000t2S"
    "MULTB\000t2SMULTT\000t2SMULWB\000t2SMULWT\000t2SMUSD\000t2SMUSDX\000t2S"
    "RSDB\000t2SRSDBW\000t2SRSIA\000t2SRSIAW\000t2SSAT\000t2SSAT16\000t2SSAX"
    "\000t2SSUB16\000t2SSUB8\000t2STMDB\000t2STMDB_UPD\000t2STMIA\000t2STMIA"
    "_UPD\000t2STRBT\000t2STRB_POST\000t2STRB_PRE\000t2STRBi12\000t2STRBi8\000"
    "t2STRBs\000t2STRD_POST\000t2STRD_PRE\000t2STRDi8\000t2STREX\000t2STREXB"
    "\000t2STREXD\000t2STREXH\000t2STRHT\000t2STRH_POST\000t2STRH_PRE\000t2S"
    "TRHi12\000t2STRHi8\000t2STRHs\000t2STRT\000t2STR_POST\000t2STR_PRE\000t"
    "2STRi12\000t2STRi8\000t2STRs\000t2SUBSri\000t2SUBSrr\000t2SUBSrs\000t2S"
    "UBri\000t2SUBri12\000t2SUBrr\000t2SUBrs\000t2SXTAB\000t2SXTAB16\000t2SX"
    "TAH\000t2SXTB\000t2SXTB16\000t2SXTH\000t2TBB\000t2TBB_JT\000t2TBH\000t2"
    "TBH_JT\000t2TEQri\000t2TEQrr\000t2TEQrs\000t2TSTri\000t2TSTrr\000t2TSTr"
    "s\000t2UADD16\000t2UADD8\000t2UASX\000t2UBFX\000t2UDIV\000t2UHADD16\000"
    "t2UHADD8\000t2UHASX\000t2UHSAX\000t2UHSUB16\000t2UHSUB8\000t2UMAAL\000t"
    "2UMLAL\000t2UMULL\000t2UQADD16\000t2UQADD8\000t2UQASX\000t2UQSAX\000t2U"
    "QSUB16\000t2UQSUB8\000t2USAD8\000t2USADA8\000t2USAT\000t2USAT16\000t2US"
    "AX\000t2USUB16\000t2USUB8\000t2UXTAB\000t2UXTAB16\000t2UXTAH\000t2UXTB\000"
    "t2UXTB16\000t2UXTH\000t2WFE\000t2WFI\000t2YIELD\000tADC\000tADDhirr\000"
    "tADDi3\000tADDi8\000tADDrSP\000tADDrSPi\000tADDrr\000tADDspi\000tADDspr"
    "\000tADJCALLSTACKDOWN\000tADJCALLSTACKUP\000tADR\000tAND\000tASRri\000t"
    "ASRrr\000tB\000tBIC\000tBKPT\000tBL\000tBLXi\000tBLXi_r9\000tBLXr\000tB"
    "LXr_r9\000tBLr9\000tBRIND\000tBR_JTr\000tBX\000tBX_CALL\000tBX_RET\000t"
    "BX_RET_vararg\000tBXr9_CALL\000tBcc\000tBfar\000tCBNZ\000tCBZ\000tCDP\000"
    "tCMNz\000tCMPhir\000tCMPi8\000tCMPr\000tCPS\000tEOR\000tInt_eh_sjlj_lon"
    "gjmp\000tInt_eh_sjlj_setjmp\000tLDMIA\000tLDMIA_UPD\000tLDRBi\000tLDRBr"
    "\000tLDRHi\000tLDRHr\000tLDRSB\000tLDRSH\000tLDRi\000tLDRpci\000tLDRpci"
    "DIS\000tLDRpci_pic\000tLDRr\000tLDRspi\000tLEApcrel\000tLEApcrelJT\000t"
    "LSLri\000tLSLrr\000tLSRri\000tLSRrr\000tMOVCCr_pseudo\000tMOVSr\000tMOV"
    "i8\000tMOVr\000tMUL\000tMVN\000tNOP\000tORR\000tPICADD\000tPOP\000tPOP_"
    "RET\000tPUSH\000tREV\000tREV16\000tREVSH\000tROR\000tRSB\000tSBC\000tSE"
    "TEND\000tSEV\000tSTMIA\000tSTMIA_UPD\000tSTRBi\000tSTRBr\000tSTRHi\000t"
    "STRHr\000tSTRi\000tSTRr\000tSTRspi\000tSUBi3\000tSUBi8\000tSUBrr\000tSU"
    "Bspi\000tSVC\000tSXTB\000tSXTH\000tTAILJMPd\000tTAILJMPdND\000tTAILJMPr"
    "\000tTAILJMPrND\000tTPsoft\000tTRAP\000tTST\000tUXTB\000tUXTH\000tWFE\000"
    "tWFI\000tYIELD\000";
  return Strs+InstAsmOffset[Opcode];
}

#endif

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

namespace { // Register classes
  enum RegClass {
    RC_CCR,
    RC_DPR,
    RC_DPR_8,
    RC_DPR_VFP2,
    RC_GPR,
    RC_GPRnopc,
    RC_QPR,
    RC_QPR_8,
    RC_QPR_VFP2,
    RC_QQPR,
    RC_QQPR_VFP2,
    RC_QQQQPR,
    RC_SPR,
    RC_SPR_8,
    RC_hGPR,
    RC_rGPR,
    RC_tGPR,
    RC_tcGPR
  };
} // end anonymous namespace

static bool regIsInRegisterClass(unsigned RegClass, unsigned Reg) {
  switch (RegClass) {
  default: break;
  case RC_CCR:
    if (Reg == ARM::CPSR)
      return true;
    break;
  case RC_DPR:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
    case ARM::D8:
    case ARM::D9:
    case ARM::D10:
    case ARM::D11:
    case ARM::D12:
    case ARM::D13:
    case ARM::D14:
    case ARM::D15:
    case ARM::D16:
    case ARM::D17:
    case ARM::D18:
    case ARM::D19:
    case ARM::D20:
    case ARM::D21:
    case ARM::D22:
    case ARM::D23:
    case ARM::D24:
    case ARM::D25:
    case ARM::D26:
    case ARM::D27:
    case ARM::D28:
    case ARM::D29:
    case ARM::D30:
    case ARM::D31:
      return true;
    }
    break;
  case RC_DPR_8:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
      return true;
    }
    break;
  case RC_DPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::D0:
    case ARM::D1:
    case ARM::D2:
    case ARM::D3:
    case ARM::D4:
    case ARM::D5:
    case ARM::D6:
    case ARM::D7:
    case ARM::D8:
    case ARM::D9:
    case ARM::D10:
    case ARM::D11:
    case ARM::D12:
    case ARM::D13:
    case ARM::D14:
    case ARM::D15:
      return true;
    }
    break;
  case RC_GPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
    case ARM::PC:
      return true;
    }
    break;
  case RC_GPRnopc:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
      return true;
    }
    break;
  case RC_QPR:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
    case ARM::Q4:
    case ARM::Q5:
    case ARM::Q6:
    case ARM::Q7:
    case ARM::Q8:
    case ARM::Q9:
    case ARM::Q10:
    case ARM::Q11:
    case ARM::Q12:
    case ARM::Q13:
    case ARM::Q14:
    case ARM::Q15:
      return true;
    }
    break;
  case RC_QPR_8:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
      return true;
    }
    break;
  case RC_QPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::Q0:
    case ARM::Q1:
    case ARM::Q2:
    case ARM::Q3:
    case ARM::Q4:
    case ARM::Q5:
    case ARM::Q6:
    case ARM::Q7:
      return true;
    }
    break;
  case RC_QQPR:
    switch (Reg) {
    default: break;
    case ARM::QQ0:
    case ARM::QQ1:
    case ARM::QQ2:
    case ARM::QQ3:
    case ARM::QQ4:
    case ARM::QQ5:
    case ARM::QQ6:
    case ARM::QQ7:
      return true;
    }
    break;
  case RC_QQPR_VFP2:
    switch (Reg) {
    default: break;
    case ARM::QQ0:
    case ARM::QQ1:
    case ARM::QQ2:
    case ARM::QQ3:
      return true;
    }
    break;
  case RC_QQQQPR:
    switch (Reg) {
    default: break;
    case ARM::QQQQ0:
    case ARM::QQQQ1:
    case ARM::QQQQ2:
    case ARM::QQQQ3:
      return true;
    }
    break;
  case RC_SPR:
    switch (Reg) {
    default: break;
    case ARM::S0:
    case ARM::S1:
    case ARM::S2:
    case ARM::S3:
    case ARM::S4:
    case ARM::S5:
    case ARM::S6:
    case ARM::S7:
    case ARM::S8:
    case ARM::S9:
    case ARM::S10:
    case ARM::S11:
    case ARM::S12:
    case ARM::S13:
    case ARM::S14:
    case ARM::S15:
    case ARM::S16:
    case ARM::S17:
    case ARM::S18:
    case ARM::S19:
    case ARM::S20:
    case ARM::S21:
    case ARM::S22:
    case ARM::S23:
    case ARM::S24:
    case ARM::S25:
    case ARM::S26:
    case ARM::S27:
    case ARM::S28:
    case ARM::S29:
    case ARM::S30:
    case ARM::S31:
      return true;
    }
    break;
  case RC_SPR_8:
    switch (Reg) {
    default: break;
    case ARM::S0:
    case ARM::S1:
    case ARM::S2:
    case ARM::S3:
    case ARM::S4:
    case ARM::S5:
    case ARM::S6:
    case ARM::S7:
    case ARM::S8:
    case ARM::S9:
    case ARM::S10:
    case ARM::S11:
    case ARM::S12:
    case ARM::S13:
    case ARM::S14:
    case ARM::S15:
      return true;
    }
    break;
  case RC_hGPR:
    switch (Reg) {
    default: break;
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::SP:
    case ARM::LR:
    case ARM::PC:
      return true;
    }
    break;
  case RC_rGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
    case ARM::R8:
    case ARM::R9:
    case ARM::R10:
    case ARM::R11:
    case ARM::R12:
    case ARM::LR:
      return true;
    }
    break;
  case RC_tGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R4:
    case ARM::R5:
    case ARM::R6:
    case ARM::R7:
      return true;
    }
    break;
  case RC_tcGPR:
    switch (Reg) {
    default: break;
    case ARM::R0:
    case ARM::R1:
    case ARM::R2:
    case ARM::R3:
    case ARM::R9:
    case ARM::R12:
      return true;
    }
    break;
  }

  return false;
}

static unsigned getMapOperandNumber(const SmallVectorImpl<std::pair<StringRef, unsigned> > &OpMap,
                                    StringRef Name) {
  for (SmallVectorImpl<std::pair<StringRef, unsigned> >::const_iterator
         I = OpMap.begin(), E = OpMap.end(); I != E; ++I)
    if (I->first == Name)
      return I->second;
  assert(false && "Operand not in map!");
  return 0;
}

bool ARMInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  StringRef AsmString;
  SmallVector<std::pair<StringRef, unsigned>, 4> OpMap;
  switch (MI->getOpcode()) {
  default: return false;
  case ARM::DMB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (DMB 15)
      AsmString = "dmb";
      break;
    }
    return false;
  case ARM::DSB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (DSB 15)
      AsmString = "dsb";
      break;
    }
    return false;
  case ARM::ISB:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).getImm() == 15) {
      // (ISB 15)
      AsmString = "isb";
      break;
    }
    return false;
  }

  std::pair<StringRef, StringRef> ASM = AsmString.split(' ');
  OS << '\t' << ASM.first;
  if (!ASM.second.empty()) {
    OS << '\t';
    for (StringRef::iterator
         I = ASM.second.begin(), E = ASM.second.end(); I != E; ) {
      if (*I == '$') {
        StringRef::iterator Start = ++I;
        while (I != E &&
               ((*I >= 'a' && *I <= 'z') ||
                (*I >= 'A' && *I <= 'Z') ||
                (*I >= '0' && *I <= '9') ||
                *I == '_'))
          ++I;
        StringRef Name(Start, I - Start);
        printOperand(MI, getMapOperandNumber(OpMap, Name), OS);
      } else {
        OS << *I++;
      }
    }
  }

  return true;
}

#endif // PRINT_ALIAS_INSTR
