/*===- TableGen'erated file ---------------------------------------*- C -*-===*
 *
 * ARM Disassembler
 *
 * Automatically generated file, do not edit!
 *
 *===----------------------------------------------------------------------===*/
#include "llvm/MC/MCInst.h"
#include "llvm/Support/DataTypes.h"
#include <assert.h>

namespace llvm {


static uint32_t fieldFromInstruction32(uint32_t insn, unsigned startBit, unsigned numBits)
{
  assert(startBit + numBits <= 32 && "Instruction field out of bounds!");

  uint32_t fieldMask;

  if (numBits == 32)
    fieldMask = (uint32_t)-1;
  else
    fieldMask = ((1 << numBits) - 1) << startBit;

  return (insn & fieldMask) >> startBit;
}

static bool decodeARMInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{27-26} ...
  switch (fieldFromInstruction32(insn, 26, 2)) {
  case 0:
    // Check Inst{25-24} ...
    switch (fieldFromInstruction32(insn, 24, 2)) {
    case 0:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction32(insn, 21, 3)) {
        case 0:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(34);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ANDrr
          }
          else
            {
              MI.setOpcode(35);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ANDrsi
            }
          break;
        case 1:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(125);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // EORrr
          }
          else
            {
              MI.setOpcode(126);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // EORrsi
            }
          break;
        case 2:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(440);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // SUBrr
          }
          else
            {
              MI.setOpcode(441);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SUBrsi
            }
          break;
        case 3:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(295);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // RSBrr
          }
          else
            {
              MI.setOpcode(296);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // RSBrsi
            }
          break;
        case 4:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(27);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ADDrr
          }
          else
            {
              MI.setOpcode(28);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ADDrsi
            }
          break;
        case 5:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(19);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ADCrr
          }
          else
            {
              MI.setOpcode(20);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ADCrsi
            }
          break;
        case 6:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(313);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // SBCrr
          }
          else
            {
              MI.setOpcode(314);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SBCrsi
            }
          break;
        case 7:
          // Check Inst{11-5} for singleton decoding...
          if (fieldFromInstruction32(insn, 5, 7) == 0) {
            MI.setOpcode(302);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // RSCrr
          }
          else
            {
              MI.setOpcode(303);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // RSCrsi
            }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{23-21} ...
          switch (fieldFromInstruction32(insn, 21, 3)) {
          case 0:
            {
              MI.setOpcode(36);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ANDrsr
            }
          case 1:
            {
              MI.setOpcode(127);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // EORrsr
            }
          case 2:
            {
              MI.setOpcode(442);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SUBrsr
            }
          case 3:
            {
              MI.setOpcode(297);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // RSBrsr
            }
          case 4:
            {
              MI.setOpcode(29);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ADDrsr
            }
          case 5:
            {
              MI.setOpcode(21);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ADCrsr
            }
          case 6:
            {
              MI.setOpcode(315);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SBCrsr
            }
          case 7:
            {
              MI.setOpcode(304);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
              if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // RSCrsr
            }
          }
          break;
        case 1:
          // Check Inst{6-5} ...
          switch (fieldFromInstruction32(insn, 5, 2)) {
          case 0:
            // Check Inst{23-21} ...
            switch (fieldFromInstruction32(insn, 21, 3)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 0) {
                MI.setOpcode(238);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MUL
              }
              break;
            case 1:
              {
                MI.setOpcode(204);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MLA
              }
            case 2:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction32(insn, 20, 1) == 0) {
                MI.setOpcode(480);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UMAAL
              }
              break;
            case 3:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction32(insn, 20, 1) == 0) {
                MI.setOpcode(206);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MLS
              }
              break;
            case 4:
              {
                MI.setOpcode(484);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UMULL
              }
            case 5:
              {
                MI.setOpcode(482);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UMLAL
              }
            case 6:
              {
                MI.setOpcode(357);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMULL
              }
            case 7:
              {
                MI.setOpcode(331);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMLAL
              }
            }
            break;
          case 1:
            // Check Inst{21-20} ...
            switch (fieldFromInstruction32(insn, 20, 2)) {
            case 0:
              {
                MI.setOpcode(422);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 9);
                tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                if (!DecodeAddrMode3Offset(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // STRH_POST
              }
            case 1:
              {
                MI.setOpcode(178);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 9);
                tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                if (!DecodeAddrMode3Offset(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // LDRH_POST
              }
            case 2:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 0) {
                  MI.setOpcode(421);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                  if (!DecodePostIdxReg(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // STRHTr
                }
                break;
              case 1:
                {
                  MI.setOpcode(420);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // STRHTi
                }
              }
              break;
            case 3:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 0) {
                  MI.setOpcode(177);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                  if (!DecodePostIdxReg(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRHTr
                }
                break;
              case 1:
                {
                  MI.setOpcode(176);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRHTi
                }
              }
              break;
            }
            break;
          case 2:
            // Check Inst{21-20} ...
            switch (fieldFromInstruction32(insn, 20, 2)) {
            case 0:
              {
                MI.setOpcode(169);
                if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
                return true; // LDRD_POST
              }
            case 1:
              {
                MI.setOpcode(183);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 9);
                tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                if (!DecodeAddrMode3Offset(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // LDRSB_POST
              }
            case 3:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 0) {
                  MI.setOpcode(182);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                  if (!DecodePostIdxReg(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRSBTr
                }
                break;
              case 1:
                {
                  MI.setOpcode(181);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRSBTi
                }
              }
              break;
            }
            break;
          case 3:
            // Check Inst{21-20} ...
            switch (fieldFromInstruction32(insn, 20, 2)) {
            case 0:
              {
                MI.setOpcode(413);
                if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
                return true; // STRD_POST
              }
            case 1:
              {
                MI.setOpcode(188);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 9);
                tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                if (!DecodeAddrMode3Offset(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // LDRSH_POST
              }
            case 3:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                // Check Inst{11-8} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 0) {
                  MI.setOpcode(187);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 4);
                  if (!DecodePostIdxReg(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRSHTr
                }
                break;
              case 1:
                {
                  MI.setOpcode(186);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRSHTi
                }
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21} ...
      switch (fieldFromInstruction32(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{4-0} ...
              switch (fieldFromInstruction32(insn, 0, 5)) {
              case 0:
                // Check Inst{17-16} ...
                switch (fieldFromInstruction32(insn, 16, 2)) {
                case 0:
                  // Check Inst{31-28} for singleton decoding...
                  if (fieldFromInstruction32(insn, 28, 4) == 15) {
                    MI.setOpcode(119);
                    if (!DecodeCPSInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // CPS2p
                  }
                  break;
                case 1:
                  // Check Inst{31-28} && Inst{19-18} && Inst{15-10} && Inst{8-6} for singleton decoding...
                  if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 18, 2) == 0 && fieldFromInstruction32(insn, 10, 6) == 0 && fieldFromInstruction32(insn, 6, 3) == 0) {
                    MI.setOpcode(318);
                    tmp = fieldFromInstruction32(insn, 9, 1);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // SETEND
                  }
                  break;
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{4} ...
              switch (fieldFromInstruction32(insn, 4, 1)) {
              case 0:
                // Check Inst{7-6} ...
                switch (fieldFromInstruction32(insn, 6, 2)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction32(insn, 16, 4) == 15) {
                    MI.setOpcode(234);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // MRS
                  }
                  break;
                case 2:
                  {
                    MI.setOpcode(327);
                    if (!DecodeSMLAInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // SMLABB
                  }
                case 3:
                  {
                    MI.setOpcode(328);
                    if (!DecodeSMLAInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // SMLABT
                  }
                }
                break;
              case 1:
                // Check Inst{11-6} ...
                switch (fieldFromInstruction32(insn, 6, 6)) {
                case 1:
                  {
                    MI.setOpcode(267);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // QADD
                  }
                case 2:
                  {
                    MI.setOpcode(444);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SWP
                  }
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{17-16} ...
              switch (fieldFromInstruction32(insn, 16, 2)) {
              case 2:
                // Check Inst{31-28} ...
                switch (fieldFromInstruction32(insn, 28, 4)) {
                case 15:
                  // Check Inst{19-18} && Inst{8-6} for singleton decoding...
                  if (fieldFromInstruction32(insn, 18, 2) == 0 && fieldFromInstruction32(insn, 6, 3) == 0) {
                    MI.setOpcode(118);
                    if (!DecodeCPSInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // CPS1p
                  }
                  else
                    {
                      MI.setOpcode(120);
                      if (!DecodeCPSInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // CPS3p
                    }
                  break;
                }
                break;
              }
              break;
              break;
              break;
            case 1:
              // Check Inst{7-6} ...
              switch (fieldFromInstruction32(insn, 6, 2)) {
              case 2:
                // Check Inst{4-4} for singleton decoding...
                if (fieldFromInstruction32(insn, 4, 1) == 0) {
                  MI.setOpcode(339);
                  if (!DecodeSMLAInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // SMLATB
                }
                break;
              case 3:
                // Check Inst{4-4} for singleton decoding...
                if (fieldFromInstruction32(insn, 4, 1) == 0) {
                  MI.setOpcode(340);
                  if (!DecodeSMLAInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // SMLATT
                }
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{4} ...
            switch (fieldFromInstruction32(insn, 4, 1)) {
            case 0:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction32(insn, 12, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(467);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // TSTrr
                }
                else
                  {
                    MI.setOpcode(468);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // TSTrsi
                  }
                break;
              }
              break;
            case 1:
              // Check Inst{15-12} && Inst{7-7} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 0 && fieldFromInstruction32(insn, 7, 1) == 0) {
                MI.setOpcode(469);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // TSTrsr
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{7-5} ...
              switch (fieldFromInstruction32(insn, 5, 3)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(235);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // MRSsys
                }
                break;
              case 4:
                {
                  MI.setOpcode(332);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMLALBB
                }
              case 5:
                {
                  MI.setOpcode(336);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMLALTB
                }
              case 6:
                {
                  MI.setOpcode(333);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMLALBT
                }
              case 7:
                {
                  MI.setOpcode(337);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMLALTT
                }
              }
              break;
            case 1:
              // Check Inst{15-12} ...
              switch (fieldFromInstruction32(insn, 12, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(114);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // CMPrr
                }
                else
                  {
                    MI.setOpcode(115);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // CMPrsi
                  }
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8} && Inst{6-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 0 && fieldFromInstruction32(insn, 5, 2) == 2) {
                  MI.setOpcode(271);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // QDADD
                }
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 0) {
                  MI.setOpcode(116);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                  if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // CMPrsr
                }
                break;
              }
              break;
            case 1:
              // Check Inst{20-20} && Inst{11-8} && Inst{6-5} for singleton decoding...
              if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 8, 4) == 0 && fieldFromInstruction32(insn, 5, 2) == 0) {
                MI.setOpcode(445);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SWPB
              }
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(247);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // ORRrr
            }
            else
              {
                MI.setOpcode(248);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // ORRrsi
              }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              {
                MI.setOpcode(249);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // ORRrsr
              }
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8} && Inst{6-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0) {
                  MI.setOpcode(415);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // STREX
                }
                break;
              case 1:
                // Check Inst{11-8} && Inst{6-5} && Inst{3-0} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 15) {
                  MI.setOpcode(171);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDREX
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 3:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{11-5} for singleton decoding...
            if (fieldFromInstruction32(insn, 5, 7) == 0) {
              MI.setOpcode(80);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // BICrr
            }
            else
              {
                MI.setOpcode(81);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // BICrsi
              }
            break;
          case 1:
            // Check Inst{7} ...
            switch (fieldFromInstruction32(insn, 7, 1)) {
            case 0:
              {
                MI.setOpcode(82);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // BICrsr
              }
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{11-8} && Inst{6-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0) {
                  MI.setOpcode(416);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // STREXB
                }
                break;
              case 1:
                // Check Inst{11-8} && Inst{6-5} && Inst{3-0} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 15) {
                  MI.setOpcode(172);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDREXB
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(419);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // STRH
            }
          case 1:
            {
              MI.setOpcode(175);
              if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRH
            }
          }
          break;
        case 13:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(168);
              if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRD
            }
          case 1:
            {
              MI.setOpcode(180);
              if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRSB
            }
          }
          break;
        case 15:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(412);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // STRD
            }
          case 1:
            {
              MI.setOpcode(185);
              if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRSH
            }
          }
          break;
        }
        break;
        break;
      case 1:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{23} ...
          switch (fieldFromInstruction32(insn, 23, 1)) {
          case 0:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{7-5} ...
              switch (fieldFromInstruction32(insn, 5, 3)) {
              case 0:
                // Check Inst{15-8} for singleton decoding...
                if (fieldFromInstruction32(insn, 8, 8) == 240) {
                  MI.setOpcode(236);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeMSRMask(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // MSR
                }
                break;
              case 1:
                // Check Inst{22-22} && Inst{19-8} for singleton decoding...
                if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 8, 12) == 4095) {
                  MI.setOpcode(99);
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // BXJ
                }
                break;
              case 4:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  {
                    MI.setOpcode(341);
                    if (!DecodeSMLAInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // SMLAWB
                  }
                case 1:
                  {
                    MI.setOpcode(355);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMULBB
                  }
                }
                break;
              case 5:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  {
                    MI.setOpcode(361);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMULWB
                  }
                case 1:
                  {
                    MI.setOpcode(359);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMULTB
                  }
                }
                break;
              case 6:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  {
                    MI.setOpcode(342);
                    if (!DecodeSMLAInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // SMLAWT
                  }
                case 1:
                  {
                    MI.setOpcode(356);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMULBT
                  }
                }
                break;
              case 7:
                // Check Inst{22} ...
                switch (fieldFromInstruction32(insn, 22, 1)) {
                case 0:
                  {
                    MI.setOpcode(362);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMULWT
                  }
                case 1:
                  {
                    MI.setOpcode(360);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMULTT
                  }
                }
                break;
              }
              break;
            case 1:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 0:
                // Check Inst{15-12} ...
                switch (fieldFromInstruction32(insn, 12, 4)) {
                case 0:
                  // Check Inst{11-5} for singleton decoding...
                  if (fieldFromInstruction32(insn, 5, 7) == 0) {
                    MI.setOpcode(461);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // TEQrr
                  }
                  else
                    {
                      MI.setOpcode(462);
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                      if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // TEQrsi
                    }
                  break;
                }
                break;
              case 1:
                // Check Inst{15-12} ...
                switch (fieldFromInstruction32(insn, 12, 4)) {
                case 0:
                  // Check Inst{11-5} for singleton decoding...
                  if (fieldFromInstruction32(insn, 5, 7) == 0) {
                    MI.setOpcode(110);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // CMNzrr
                  }
                  else
                    {
                      MI.setOpcode(111);
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                      if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // CMNzrsi
                    }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 1:
            // Check Inst{22} ...
            switch (fieldFromInstruction32(insn, 22, 1)) {
            case 0:
              // Check Inst{20-5} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction32(insn, 5, 16) == 1920 && fieldFromInstruction32(insn, 0, 4) == 14) {
                MI.setOpcode(213);
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MOVPCLR
              }
              else
                // Check Inst{11-5} ...
                switch (fieldFromInstruction32(insn, 5, 7)) {
                case 0:
                  // Check Inst{19-16} for singleton decoding...
                  if (fieldFromInstruction32(insn, 16, 4) == 0) {
                    MI.setOpcode(224);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 20, 1);
                    if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // MOVr
                  }
                  else
                    {
                      MI.setOpcode(225);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodetcGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodetcGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 20, 1);
                      if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // MOVr_TC
                    }
                  break;
                default:
                  break; // fallthrough
                }
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(226);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                  if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // MOVsi
                }
                break;
              break;
            case 1:
              // Check Inst{19-16} ...
              switch (fieldFromInstruction32(insn, 16, 4)) {
              case 0:
                // Check Inst{11-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 5, 7) == 0) {
                  MI.setOpcode(242);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 20, 1);
                  if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // MVNr
                }
                else
                  {
                    MI.setOpcode(243);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
                    if (!DecodeSORegImmOperand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 20, 1);
                    if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // MVNsi
                  }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{23-22} ...
            switch (fieldFromInstruction32(insn, 22, 2)) {
            case 0:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{6-5} ...
                switch (fieldFromInstruction32(insn, 5, 2)) {
                case 0:
                  // Check Inst{19-8} ...
                  switch (fieldFromInstruction32(insn, 8, 12)) {
                  case 4095:
                    // Check Inst{3-0} for singleton decoding...
                    if (fieldFromInstruction32(insn, 0, 4) == 14) {
                      MI.setOpcode(101);
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // BX_RET
                    }
                    else
                      // Check Inst{31-28} for singleton decoding...
                      if (fieldFromInstruction32(insn, 28, 4) == 14) {
                        MI.setOpcode(98);
                        tmp = fieldFromInstruction32(insn, 0, 4);
                        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        return true; // BX
                      }
                      else
                        {
                          MI.setOpcode(102);
                          tmp = fieldFromInstruction32(insn, 0, 4);
                          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                          tmp = fieldFromInstruction32(insn, 28, 4);
                          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                          return true; // BX_pred
                        }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{19-8} ...
                  switch (fieldFromInstruction32(insn, 8, 12)) {
                  case 4095:
                    // Check Inst{31-28} for singleton decoding...
                    if (fieldFromInstruction32(insn, 28, 4) == 14) {
                      MI.setOpcode(85);
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      return true; // BLX
                    }
                    else
                      {
                        MI.setOpcode(86);
                        tmp = fieldFromInstruction32(insn, 0, 4);
                        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 28, 4);
                        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                        return true; // BLX_pred
                      }
                    break;
                  }
                  break;
                case 2:
                  // Check Inst{11-8} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 4) == 0) {
                    MI.setOpcode(274);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // QSUB
                  }
                  break;
                case 3:
                  {
                    MI.setOpcode(83);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 8, 12) << 4);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // BKPT
                  }
                }
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 0) {
                  MI.setOpcode(463);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                  if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // TEQrsr
                }
                break;
              }
              break;
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{6-5} ...
                switch (fieldFromInstruction32(insn, 5, 2)) {
                case 0:
                  // Check Inst{19-16} && Inst{11-8} for singleton decoding...
                  if (fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 8, 4) == 15) {
                    MI.setOpcode(108);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // CLZ
                  }
                  break;
                case 2:
                  // Check Inst{11-8} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 4) == 0) {
                    MI.setOpcode(272);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // QDSUB
                  }
                  break;
                case 3:
                  // Check Inst{19-8} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 12) == 0) {
                    MI.setOpcode(326);
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMC
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 0) {
                  MI.setOpcode(112);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                  if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // CMNzrsr
                }
                break;
              }
              break;
            case 2:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(227);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MOVsr
              }
              break;
            case 3:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 0) {
                MI.setOpcode(244);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 2) << 5);
                tmp |= (fieldFromInstruction32(insn, 8, 4) << 8);
                if (!DecodeSORegRegOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MVNsr
              }
              break;
            }
            break;
          case 1:
            // Check Inst{6-5} ...
            switch (fieldFromInstruction32(insn, 5, 2)) {
            case 0:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                // Check Inst{23-22} ...
                switch (fieldFromInstruction32(insn, 22, 2)) {
                case 2:
                  // Check Inst{11-8} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 4) == 15) {
                    MI.setOpcode(417);
                    if (!DecodeDoubleRegStore(MI, insn, Address, Decoder)) return false;
                    return true; // STREXD
                  }
                  break;
                case 3:
                  // Check Inst{11-8} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 4) == 15) {
                    MI.setOpcode(418);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // STREXH
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{23-22} ...
                switch (fieldFromInstruction32(insn, 22, 2)) {
                case 2:
                  // Check Inst{11-8} && Inst{3-0} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
                    MI.setOpcode(173);
                    if (!DecodeDoubleRegLoad(MI, insn, Address, Decoder)) return false;
                    return true; // LDREXD
                  }
                  break;
                case 3:
                  // Check Inst{11-8} && Inst{3-0} for singleton decoding...
                  if (fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
                    MI.setOpcode(174);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeAddrMode7Operand(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // LDREXH
                  }
                  break;
                }
                break;
              }
              break;
            case 1:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                {
                  MI.setOpcode(423);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // STRH_PRE
                }
              case 1:
                {
                  MI.setOpcode(179);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRH_PRE
                }
              }
              break;
            case 2:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                {
                  MI.setOpcode(170);
                  if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
                  return true; // LDRD_PRE
                }
              case 1:
                {
                  MI.setOpcode(184);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRSB_PRE
                }
              }
              break;
            case 3:
              // Check Inst{20} ...
              switch (fieldFromInstruction32(insn, 20, 1)) {
              case 0:
                {
                  MI.setOpcode(414);
                  if (!DecodeAddrMode3Instruction(MI, insn, Address, Decoder)) return false;
                  return true; // STRD_PRE
                }
              case 1:
                {
                  MI.setOpcode(189);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 8, 4) << 4);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 13);
                  tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // LDRSH_PRE
                }
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21} ...
      switch (fieldFromInstruction32(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          {
            MI.setOpcode(33);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ANDri
          }
        case 1:
          {
            MI.setOpcode(439);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // SUBri
          }
        case 2:
          {
            MI.setOpcode(26);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ADDri
          }
        case 3:
          {
            MI.setOpcode(312);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // SBCri
          }
        default:
          break; // fallthrough
        }
        // Check Inst{20-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 5) == 15) {
          MI.setOpcode(32);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // ADR
        }
        break;
        break;
      case 1:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          {
            MI.setOpcode(124);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // EORri
          }
        case 1:
          {
            MI.setOpcode(294);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // RSBri
          }
        case 2:
          {
            MI.setOpcode(18);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ADCri
          }
        case 3:
          {
            MI.setOpcode(301);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // RSCri
          }
        }
        break;
      }
      break;
    case 3:
      // Check Inst{21} ...
      switch (fieldFromInstruction32(insn, 21, 1)) {
      case 0:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(221);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 12);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // MOVi16
            }
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 0) {
              MI.setOpcode(466);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // TSTri
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(215);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 12);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // MOVTi16
            }
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 0) {
              MI.setOpcode(113);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 12);
              if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // CMPri
            }
            break;
          }
          break;
        case 2:
          {
            MI.setOpcode(246);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // ORRri
          }
        case 3:
          {
            MI.setOpcode(79);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 12);
            if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // BICri
          }
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{15-12} ...
          switch (fieldFromInstruction32(insn, 12, 4)) {
          case 0:
            // Check Inst{22} ...
            switch (fieldFromInstruction32(insn, 22, 1)) {
            case 0:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction32(insn, 20, 1) == 1) {
                MI.setOpcode(460);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 12);
                if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // TEQri
              }
              break;
            case 1:
              // Check Inst{20-20} for singleton decoding...
              if (fieldFromInstruction32(insn, 20, 1) == 1) {
                MI.setOpcode(109);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 12);
                if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // CMNzri
              }
              break;
            }
            break;
          case 15:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{11-0} ...
              switch (fieldFromInstruction32(insn, 0, 12)) {
              case 0:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(245);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // NOP
                }
                break;
              case 1:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(1913);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // YIELD
                }
                break;
              case 2:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(1911);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // WFE
                }
                break;
              case 3:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(1912);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // WFI
                }
                break;
              case 4:
                // Check Inst{22-22} && Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0) {
                  MI.setOpcode(319);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SEV
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{22-22} && Inst{19-16} && Inst{11-4} for singleton decoding...
              if (fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 16, 4) == 0 && fieldFromInstruction32(insn, 4, 8) == 15) {
                MI.setOpcode(121);
                tmp = fieldFromInstruction32(insn, 0, 4);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // DBG
              }
              else
                {
                  MI.setOpcode(237);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeMSRMask(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 12);
                  if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // MSRi
                }
              break;
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{22} ...
            switch (fieldFromInstruction32(insn, 22, 1)) {
            case 0:
              {
                MI.setOpcode(220);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 12);
                if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MOVi
              }
            case 1:
              {
                MI.setOpcode(241);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 12);
                if (!DecodeSOImmOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // MVNi
              }
            }
            break;
          case 15:
            // Check Inst{15-4} ...
            switch (fieldFromInstruction32(insn, 4, 12)) {
            case 2292:
              // Check Inst{31-28} && Inst{22-22} && Inst{20-20} for singleton decoding...
              if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
                MI.setOpcode(1957);
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeMemBarrierOption(MI, tmp, Address, Decoder)) return false;
                return true; // t2DSB
              }
              break;
            case 2293:
              // Check Inst{31-28} && Inst{22-22} && Inst{20-20} for singleton decoding...
              if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1) {
                MI.setOpcode(1956);
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeMemBarrierOption(MI, tmp, Address, Decoder)) return false;
                return true; // t2DMB
              }
              break;
            case 2294:
              // Check Inst{31-28} && Inst{22-22} && Inst{20-20} && Inst{3-0} for singleton decoding...
              if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 22, 1) == 0 && fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(1961);
                return true; // t2ISB
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{22-21} ...
    switch (fieldFromInstruction32(insn, 21, 2)) {
    case 0:
      // Check Inst{25-24} ...
      switch (fieldFromInstruction32(insn, 24, 2)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          {
            MI.setOpcode(427);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // STR_POST_IMM
          }
        case 1:
          {
            MI.setOpcode(192);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDR_POST_IMM
          }
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          {
            MI.setOpcode(431);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // STRi12
          }
        case 1:
          // Check Inst{31-28} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(261);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
            return true; // PLDWi12
          }
          else
            {
              MI.setOpcode(196);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // LDRi12
            }
          break;
        }
        break;
      case 2:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{23-23} && Inst{11-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 8) == 251) {
            MI.setOpcode(317);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // SEL
          }
          else
            // Check Inst{9-4} ...
            switch (fieldFromInstruction32(insn, 4, 6)) {
            case 7:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(450);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SXTB16
                }
                else
                  {
                    MI.setOpcode(447);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 10, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SXTAB16
                  }
                break;
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{6-4} ...
            switch (fieldFromInstruction32(insn, 4, 3)) {
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 1) {
                MI.setOpcode(259);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // PKHBT
              }
              break;
            case 5:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 1) {
                MI.setOpcode(260);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // PKHTB
              }
              break;
            default:
              break; // fallthrough
            }
            {
              MI.setOpcode(428);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // STR_POST_REG
            }
            break;
          break;
        case 1:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction32(insn, 4, 8)) {
          case 241:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(305);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SADD16
            }
            break;
          case 243:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(307);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SASX
            }
            break;
          case 245:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(375);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SSAX
            }
            break;
          case 247:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(376);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SSUB16
            }
            break;
          case 249:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(306);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SADD8
            }
            break;
          case 255:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(377);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SSUB8
            }
            break;
          default:
            break; // fallthrough
          }
          {
            MI.setOpcode(193);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDR_POST_REG
          }
          break;
        }
        break;
      case 3:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            {
              MI.setOpcode(434);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // STRrs
            }
          case 1:
            // Check Inst{7-5} ...
            switch (fieldFromInstruction32(insn, 5, 3)) {
            case 0:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(353);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMUAD
                }
                else
                  {
                    MI.setOpcode(329);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMLAD
                  }
                break;
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(492);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // USAD8
                }
                else
                  {
                    MI.setOpcode(493);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // USADA8
                  }
                break;
              }
              break;
            case 1:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(354);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMUADX
                }
                else
                  {
                    MI.setOpcode(330);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMLADX
                  }
                break;
              }
              break;
            case 2:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(363);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMUSD
                }
                else
                  {
                    MI.setOpcode(343);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMLSD
                  }
                break;
              }
              break;
            case 3:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(364);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMUSDX
                }
                else
                  {
                    MI.setOpcode(344);
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SMLSDX
                  }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(197);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // LDRrs
          }
          else
            // Check Inst{31-28} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(262);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
              return true; // PLDWrs
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{25} ...
        switch (fieldFromInstruction32(insn, 25, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(425);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // STRT_POST_IMM
            }
          case 1:
            {
              MI.setOpcode(190);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRT_POST_IMM
            }
          }
          break;
        case 1:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              {
                MI.setOpcode(426);
                if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
                return true; // STRT_POST_REG
              }
            case 1:
              {
                MI.setOpcode(191);
                if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
                return true; // LDRT_POST_REG
              }
            }
            break;
          case 1:
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                // Check Inst{11-6} ...
                switch (fieldFromInstruction32(insn, 6, 6)) {
                case 60:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction32(insn, 20, 1)) {
                  case 0:
                    {
                      MI.setOpcode(268);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // QADD16
                    }
                  case 1:
                    {
                      MI.setOpcode(320);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SHADD16
                    }
                  }
                  break;
                case 61:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction32(insn, 20, 1)) {
                  case 0:
                    {
                      MI.setOpcode(273);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // QSAX
                    }
                  case 1:
                    {
                      MI.setOpcode(323);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SHSAX
                    }
                  }
                  break;
                case 62:
                  // Check Inst{20} ...
                  switch (fieldFromInstruction32(insn, 20, 1)) {
                  case 0:
                    {
                      MI.setOpcode(269);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // QADD8
                    }
                  case 1:
                    {
                      MI.setOpcode(321);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SHADD8
                    }
                  }
                  break;
                }
                break;
              case 1:
                {
                  MI.setOpcode(373);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 6, 1) << 5);
                  tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SSAT
                }
              }
              break;
            case 1:
              // Check Inst{9-6} ...
              switch (fieldFromInstruction32(insn, 6, 4)) {
              case 1:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{23} ...
                  switch (fieldFromInstruction32(insn, 23, 1)) {
                  case 1:
                    // Check Inst{19-16} for singleton decoding...
                    if (fieldFromInstruction32(insn, 16, 4) == 15) {
                      MI.setOpcode(449);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 10, 2);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SXTB
                    }
                    else
                      {
                        MI.setOpcode(446);
                        tmp = fieldFromInstruction32(insn, 12, 4);
                        if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 16, 4);
                        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 0, 4);
                        if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 10, 2);
                        MI.addOperand(MCOperand::CreateImm(tmp));
                        tmp = fieldFromInstruction32(insn, 28, 4);
                        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                        return true; // SXTAB
                      }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{23} ...
                  switch (fieldFromInstruction32(insn, 23, 1)) {
                  case 1:
                    // Check Inst{19-16} for singleton decoding...
                    if (fieldFromInstruction32(insn, 16, 4) == 15) {
                      MI.setOpcode(451);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 10, 2);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SXTH
                    }
                    else
                      {
                        MI.setOpcode(448);
                        tmp = fieldFromInstruction32(insn, 12, 4);
                        if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 16, 4);
                        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 0, 4);
                        if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 10, 2);
                        MI.addOperand(MCOperand::CreateImm(tmp));
                        tmp = fieldFromInstruction32(insn, 28, 4);
                        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                        return true; // SXTAH
                      }
                    break;
                  }
                  break;
                }
                break;
              case 12:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{23} ...
                  switch (fieldFromInstruction32(insn, 23, 1)) {
                  case 0:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 2) == 3) {
                      MI.setOpcode(270);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // QASX
                    }
                    break;
                  case 1:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 2) == 3) {
                      MI.setOpcode(374);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SSAT16
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{23} ...
                  switch (fieldFromInstruction32(insn, 23, 1)) {
                  case 0:
                    // Check Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 2) == 3) {
                      MI.setOpcode(322);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // SHASX
                    }
                    break;
                  case 1:
                    // Check Inst{19-16} && Inst{11-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 10, 2) == 3) {
                      MI.setOpcode(278);
                      tmp = fieldFromInstruction32(insn, 12, 4);
                      if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 0, 4);
                      if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 28, 4);
                      if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                      return true; // REV
                    }
                    break;
                  }
                  break;
                }
                break;
              case 13:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{23-23} && Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 10, 2) == 3) {
                    MI.setOpcode(275);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // QSUB16
                  }
                  break;
                case 1:
                  // Check Inst{23-23} && Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 10, 2) == 3) {
                    MI.setOpcode(324);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SHSUB16
                  }
                  break;
                }
                break;
              case 14:
                // Check Inst{23-23} && Inst{20-16} && Inst{11-10} for singleton decoding...
                if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 16, 5) == 31 && fieldFromInstruction32(insn, 10, 2) == 3) {
                  MI.setOpcode(279);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // REV16
                }
                break;
              case 15:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{23-23} && Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 10, 2) == 3) {
                    MI.setOpcode(276);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // QSUB8
                  }
                  break;
                case 1:
                  // Check Inst{23-23} && Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 10, 2) == 3) {
                    MI.setOpcode(325);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 0, 4);
                    if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // SHSUB8
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{25} ...
          switch (fieldFromInstruction32(insn, 25, 1)) {
          case 0:
            {
              MI.setOpcode(429);
              if (!DecodeSTRPreImm(MI, insn, Address, Decoder)) return false;
              return true; // STR_PRE_IMM
            }
          case 1:
            // Check Inst{4-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 4, 1) == 0) {
              MI.setOpcode(430);
              if (!DecodeSTRPreReg(MI, insn, Address, Decoder)) return false;
              return true; // STR_PRE_REG
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(194);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDR_PRE
          }
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{6-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 25, 1) == 1 && fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 3) == 5) {
          MI.setOpcode(316);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 7, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // SBFX
        }
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{25-24} ...
      switch (fieldFromInstruction32(insn, 24, 2)) {
      case 0:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          {
            MI.setOpcode(404);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // STRB_POST_IMM
          }
        case 1:
          // Check Inst{31-28} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(265);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
            return true; // PLIi12
          }
          else
            {
              MI.setOpcode(163);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRB_POST_IMM
            }
          break;
        }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          {
            MI.setOpcode(408);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // STRBi12
          }
        case 1:
          // Check Inst{31-28} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(263);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
            return true; // PLDi12
          }
          else
            {
              MI.setOpcode(166);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!DecodeAddrModeImm12Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // LDRBi12
            }
          break;
        }
        break;
      case 2:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{9-4} ...
          switch (fieldFromInstruction32(insn, 4, 6)) {
          case 7:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 1:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(503);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 10, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UXTB16
              }
              else
                {
                  MI.setOpcode(500);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 10, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // UXTAB16
                }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          {
            MI.setOpcode(405);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // STRB_POST_REG
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction32(insn, 23, 1)) {
          case 0:
            // Check Inst{11-4} ...
            switch (fieldFromInstruction32(insn, 4, 8)) {
            case 241:
              {
                MI.setOpcode(470);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UADD16
              }
            case 243:
              {
                MI.setOpcode(472);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UASX
              }
            case 245:
              {
                MI.setOpcode(496);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // USAX
              }
            case 247:
              {
                MI.setOpcode(497);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // USUB16
              }
            case 249:
              {
                MI.setOpcode(471);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UADD8
              }
            case 255:
              {
                MI.setOpcode(498);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // USUB8
              }
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{31-28} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(266);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
            return true; // PLIrs
          }
          else
            {
              MI.setOpcode(164);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRB_POST_REG
            }
          break;
          break;
        }
        break;
      case 3:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            {
              MI.setOpcode(411);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // STRBrs
            }
          case 1:
            // Check Inst{7-5} ...
            switch (fieldFromInstruction32(insn, 5, 3)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(334);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMLALD
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(335);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMLALDX
              }
              break;
            case 2:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(345);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMLSLD
              }
              break;
            case 3:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(346);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMLSLDX
              }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{7-4} ...
          switch (fieldFromInstruction32(insn, 4, 4)) {
          case 1:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(351);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMMUL
              }
              else
                {
                  MI.setOpcode(347);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMMLA
                }
              break;
            }
            break;
          case 3:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(352);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // SMMULR
              }
              else
                {
                  MI.setOpcode(348);
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // SMMLAR
                }
              break;
            }
            break;
          case 13:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(349);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SMMLS
            }
            break;
          case 15:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(350);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // SMMLSR
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(167);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 7) << 5);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
            if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // LDRBrs
          }
          else
            // Check Inst{31-28} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(264);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              if (!DecodeSORegMemOperand(MI, tmp, Address, Decoder)) return false;
              return true; // PLDrs
            }
          break;
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{6-4} ...
        switch (fieldFromInstruction32(insn, 4, 3)) {
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction32(insn, 23, 1)) {
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(76);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 5) << 5);
              if (!DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // BFC
            }
            else
              {
                MI.setOpcode(77);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 5) << 5);
                if (!DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // BFI
              }
            break;
          }
          break;
        }
        break;
        break;
      }
      break;
    case 3:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        // Check Inst{25} ...
        switch (fieldFromInstruction32(insn, 25, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            {
              MI.setOpcode(402);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // STRBT_POST_IMM
            }
          case 1:
            {
              MI.setOpcode(161);
              if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // LDRBT_POST_IMM
            }
          }
          break;
        case 1:
          // Check Inst{11-4} ...
          switch (fieldFromInstruction32(insn, 4, 8)) {
          case 241:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(486);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UQADD16
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(474);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UHADD16
              }
              break;
            }
            break;
          case 243:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                {
                  MI.setOpcode(488);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // UQASX
                }
              case 1:
                {
                  MI.setOpcode(495);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // USAT16
                }
              }
              break;
            case 1:
              // Check Inst{23} ...
              switch (fieldFromInstruction32(insn, 23, 1)) {
              case 0:
                {
                  MI.setOpcode(476);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // UHASX
                }
              case 1:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(277);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // RBIT
                }
                break;
              }
              break;
            }
            break;
          case 245:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(489);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UQSAX
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(477);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UHSAX
              }
              break;
            }
            break;
          case 247:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(490);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UQSUB16
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(478);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UHSUB16
              }
              break;
            }
            break;
          case 249:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(487);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UQADD8
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(475);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UHADD8
              }
              break;
            }
            break;
          case 251:
            // Check Inst{23-23} && Inst{20-16} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 16, 5) == 31) {
              MI.setOpcode(280);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // REVSH
            }
            break;
          case 255:
            // Check Inst{20} ...
            switch (fieldFromInstruction32(insn, 20, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(491);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UQSUB8
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(479);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UHSUB8
              }
              break;
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{20-16} ...
          switch (fieldFromInstruction32(insn, 16, 5)) {
          case 15:
            // Check Inst{23-23} && Inst{9-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 6) == 7) {
              MI.setOpcode(502);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 10, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // UXTB
            }
            break;
          case 31:
            // Check Inst{23-23} && Inst{9-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 6) == 7) {
              MI.setOpcode(504);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 10, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // UXTH
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{4} ...
            switch (fieldFromInstruction32(insn, 4, 1)) {
            case 0:
              {
                MI.setOpcode(403);
                if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
                return true; // STRBT_POST_REG
              }
            case 1:
              // Check Inst{23-23} && Inst{9-5} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 5, 5) == 3) {
                MI.setOpcode(499);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 10, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // UXTAB
              }
              break;
            }
            break;
          case 1:
            // Check Inst{23-23} && Inst{9-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 6) == 7) {
              MI.setOpcode(501);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 10, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // UXTAH
            }
            else
              {
                MI.setOpcode(162);
                if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
                return true; // LDRBT_POST_REG
              }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{23-23} && Inst{5-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 2) == 1) {
            MI.setOpcode(494);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 1) << 5);
            tmp |= (fieldFromInstruction32(insn, 7, 5) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // USAT
          }
          break;
          break;
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{20-0} ...
        switch (fieldFromInstruction32(insn, 0, 21)) {
        case 2088702:
          // Check Inst{31-28} && Inst{25-25} && Inst{23-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 14 && fieldFromInstruction32(insn, 25, 1) == 1 && fieldFromInstruction32(insn, 23, 1) == 1) {
            MI.setOpcode(465);
            return true; // TRAP
          }
          break;
        case 2093087:
          // Check Inst{31-28} && Inst{25-25} && Inst{23-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 25, 1) == 0 && fieldFromInstruction32(insn, 23, 1) == 0) {
            MI.setOpcode(107);
            return true; // CLREX
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20-4} ...
        switch (fieldFromInstruction32(insn, 4, 17)) {
        case 130820:
          // Check Inst{31-28} && Inst{25-25} && Inst{23-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 25, 1) == 0 && fieldFromInstruction32(insn, 23, 1) == 0) {
            MI.setOpcode(123);
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeMemBarrierOption(MI, tmp, Address, Decoder)) return false;
            return true; // DSB
          }
          break;
        case 130821:
          // Check Inst{31-28} && Inst{25-25} && Inst{23-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 25, 1) == 0 && fieldFromInstruction32(insn, 23, 1) == 0) {
            MI.setOpcode(122);
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeMemBarrierOption(MI, tmp, Address, Decoder)) return false;
            return true; // DMB
          }
          break;
        case 130822:
          // Check Inst{31-28} && Inst{25-25} && Inst{23-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 25, 1) == 0 && fieldFromInstruction32(insn, 23, 1) == 0) {
            MI.setOpcode(131);
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeMemBarrierOption(MI, tmp, Address, Decoder)) return false;
            return true; // ISB
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{25} ...
          switch (fieldFromInstruction32(insn, 25, 1)) {
          case 0:
            {
              MI.setOpcode(406);
              if (!DecodeSTRPreImm(MI, insn, Address, Decoder)) return false;
              return true; // STRB_PRE_IMM
            }
          case 1:
            // Check Inst{4-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 4, 1) == 0) {
              MI.setOpcode(407);
              if (!DecodeSTRPreReg(MI, insn, Address, Decoder)) return false;
              return true; // STRB_PRE_REG
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(165);
            if (!DecodeAddrMode2IdxInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDRB_PRE
          }
        default:
          break; // fallthrough
        }
        // Check Inst{25-25} && Inst{23-23} && Inst{6-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 25, 1) == 1 && fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 4, 3) == 5) {
          MI.setOpcode(473);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 7, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // UBFX
        }
        break;
        break;
        break;
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{25} ...
    switch (fieldFromInstruction32(insn, 25, 1)) {
    case 0:
      // Check Inst{24-20} ...
      switch (fieldFromInstruction32(insn, 20, 5)) {
      case 0:
        {
          MI.setOpcode(394);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // STMDA
        }
      case 1:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(281);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEDA
        }
        else
          {
            MI.setOpcode(152);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // LDMDA
          }
        break;
      case 2:
        {
          MI.setOpcode(395);
          if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STMDA_UPD
        }
      case 3:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(282);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEDA_UPD
        }
        else
          {
            MI.setOpcode(153);
            if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDMDA_UPD
          }
        break;
      case 4:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(365);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSDA
        }
        break;
      case 6:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(366);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSDA_UPD
        }
        break;
      case 8:
        {
          MI.setOpcode(398);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // STMIA
        }
      case 9:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(285);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEIA
        }
        else
          {
            MI.setOpcode(156);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // LDMIA
          }
        break;
      case 10:
        {
          MI.setOpcode(399);
          if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STMIA_UPD
        }
      case 11:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(286);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEIA_UPD
        }
        else
          {
            MI.setOpcode(158);
            if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDMIA_UPD
          }
        break;
      case 12:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(369);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSIA
        }
        break;
      case 14:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(370);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSIA_UPD
        }
        break;
      case 16:
        {
          MI.setOpcode(396);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // STMDB
        }
      case 17:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(283);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEDB
        }
        else
          {
            MI.setOpcode(154);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // LDMDB
          }
        break;
      case 18:
        {
          MI.setOpcode(397);
          if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STMDB_UPD
        }
      case 19:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(284);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEDB_UPD
        }
        else
          {
            MI.setOpcode(155);
            if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDMDB_UPD
          }
        break;
      case 20:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(367);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSDB
        }
        break;
      case 22:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(368);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSDB_UPD
        }
        break;
      case 24:
        {
          MI.setOpcode(400);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 16);
          if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // STMIB
        }
      case 25:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(287);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEIB
        }
        else
          {
            MI.setOpcode(159);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // LDMIB
          }
        break;
      case 26:
        {
          MI.setOpcode(401);
          if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STMIB_UPD
        }
      case 27:
        // Check Inst{31-28} && Inst{15-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 0, 16) == 2560) {
          MI.setOpcode(288);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // RFEIB_UPD
        }
        else
          {
            MI.setOpcode(160);
            if (!DecodeMemMultipleWritebackInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDMIB_UPD
          }
        break;
      case 28:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(371);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSIB
        }
        break;
      case 30:
        // Check Inst{31-28} && Inst{19-5} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15 && fieldFromInstruction32(insn, 5, 15) == 26664) {
          MI.setOpcode(372);
          tmp = fieldFromInstruction32(insn, 0, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // SRSIB_UPD
        }
        break;
      }
      break;
    case 1:
      // Check Inst{24} ...
      switch (fieldFromInstruction32(insn, 24, 1)) {
      case 0:
        {
          MI.setOpcode(104);
          if (!DecodeBranchImmInstruction(MI, insn, Address, Decoder)) return false;
          return true; // Bcc
        }
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 14) {
          MI.setOpcode(84);
          tmp = fieldFromInstruction32(insn, 0, 24);
          if (!DecodeBLTargetOperand(MI, tmp, Address, Decoder)) return false;
          return true; // BL
        }
        else
          {
            MI.setOpcode(90);
            tmp = fieldFromInstruction32(insn, 0, 24);
            if (!DecodeBLTargetOperand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // BL_pred
          }
        break;
      default:
        break; // fallthrough
      }
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(87);
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 0, 24) << 1);
        tmp |= (fieldFromInstruction32(insn, 24, 1) << 0);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // BLXi
      }
      break;
      break;
    }
    break;
  case 3:
    // Check Inst{25-24} ...
    switch (fieldFromInstruction32(insn, 24, 2)) {
    case 0:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction32(insn, 20, 4)) {
      case 4:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(203);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 4, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // MCRR2
        }
        else
          {
            MI.setOpcode(202);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // MCRR
          }
        break;
      case 5:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(233);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 4, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // MRRC2
        }
        else
          {
            MI.setOpcode(232);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 4, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // MRRC
          }
        break;
      }
      break;
    case 2:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(106);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // CDP2
        }
        else
          {
            MI.setOpcode(105);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // CDP
          }
        break;
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          // Check Inst{31-28} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(201);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // MCR2
          }
          else
            {
              MI.setOpcode(200);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 21, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // MCR
            }
          break;
        case 1:
          // Check Inst{31-28} for singleton decoding...
          if (fieldFromInstruction32(insn, 28, 4) == 15) {
            MI.setOpcode(231);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // MRC2
          }
          else
            {
              MI.setOpcode(230);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 21, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 16, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // MRC
            }
          break;
        }
        break;
      }
      break;
    case 3:
      {
        MI.setOpcode(443);
        tmp = fieldFromInstruction32(insn, 0, 24);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
        return true; // SVC
      }
    }
    break;
  }

  return false;
}

static bool decodeCommonInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{22-20} ...
  switch (fieldFromInstruction32(insn, 20, 3)) {
  case 0:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(383);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STC2_OPTION
        }
        else
          {
            MI.setOpcode(391);
            if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
            return true; // STC_OPTION
          }
        break;
      }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(382);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // STC2_OFFSET
      }
      else
        {
          MI.setOpcode(390);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STC_OFFSET
        }
      break;
    }
    break;
  case 1:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(141);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDC2_OPTION
        }
        else
          {
            MI.setOpcode(149);
            if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDC_OPTION
          }
        break;
      }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(140);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // LDC2_OFFSET
      }
      else
        {
          MI.setOpcode(148);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDC_OFFSET
        }
      break;
    }
    break;
  case 2:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(384);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // STC2_POST
      }
      else
        {
          MI.setOpcode(392);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STC_POST
        }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(385);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // STC2_PRE
      }
      else
        {
          MI.setOpcode(393);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STC_PRE
        }
      break;
    }
    break;
  case 3:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(142);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // LDC2_POST
      }
      else
        {
          MI.setOpcode(150);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDC_POST
        }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(143);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // LDC2_PRE
      }
      else
        {
          MI.setOpcode(151);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDC_PRE
        }
      break;
    }
    break;
  case 4:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(379);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STC2L_OPTION
        }
        else
          {
            MI.setOpcode(387);
            if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
            return true; // STCL_OPTION
          }
        break;
      }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(378);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // STC2L_OFFSET
      }
      else
        {
          MI.setOpcode(386);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STCL_OFFSET
        }
      break;
    }
    break;
  case 5:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 1:
        // Check Inst{31-28} for singleton decoding...
        if (fieldFromInstruction32(insn, 28, 4) == 15) {
          MI.setOpcode(137);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDC2L_OPTION
        }
        else
          {
            MI.setOpcode(145);
            if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
            return true; // LDCL_OPTION
          }
        break;
      }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(136);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // LDC2L_OFFSET
      }
      else
        {
          MI.setOpcode(144);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDCL_OFFSET
        }
      break;
    }
    break;
  case 6:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(380);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // STC2L_POST
      }
      else
        {
          MI.setOpcode(388);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STCL_POST
        }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(381);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // STC2L_PRE
      }
      else
        {
          MI.setOpcode(389);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // STCL_PRE
        }
      break;
    }
    break;
  case 7:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(138);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // LDC2L_POST
      }
      else
        {
          MI.setOpcode(146);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDCL_POST
        }
      break;
    case 13:
      // Check Inst{31-28} for singleton decoding...
      if (fieldFromInstruction32(insn, 28, 4) == 15) {
        MI.setOpcode(139);
        if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
        return true; // LDC2L_PRE
      }
      else
        {
          MI.setOpcode(147);
          if (!DecodeCopMemInstruction(MI, insn, Address, Decoder)) return false;
          return true; // LDCL_PRE
        }
      break;
    }
    break;
  }

  return false;
}

static bool decodeNEONDataInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{4} ...
  switch (fieldFromInstruction32(insn, 4, 1)) {
  case 0:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(754);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDsv8i8
            }
          case 1:
            {
              MI.setOpcode(749);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(563);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDLsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(760);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDuv8i8
            }
          case 1:
            {
              MI.setOpcode(755);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(566);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDLuv8i16
          }
          break;
        }
        break;
      case 1:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1451);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDsv8i8
            }
          case 1:
            {
              MI.setOpcode(1446);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(570);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDWsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1457);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDuv8i8
            }
          case 1:
            {
              MI.setOpcode(1452);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(573);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDWuv8i16
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(766);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBsv8i8
            }
          case 1:
            {
              MI.setOpcode(761);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1828);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBLsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(772);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBuv8i8
            }
          case 1:
            {
              MI.setOpcode(767);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1831);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBLuv8i16
          }
          break;
        }
        break;
      case 3:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(643);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTsv8i8
            }
          case 1:
            {
              MI.setOpcode(638);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1835);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBWsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(649);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTuv8i8
            }
          case 1:
            {
              MI.setOpcode(644);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1838);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBWuv8i16
          }
          break;
        }
        break;
      case 4:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1545);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv8i8
            }
          case 1:
            {
              MI.setOpcode(1538);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(560);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDHNv8i8
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1553);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv8i8
            }
          case 1:
            {
              MI.setOpcode(1546);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1427);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VRADDHNv8i8
          }
          break;
        }
        break;
      case 5:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1465);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv8i8
            }
          case 1:
            {
              MI.setOpcode(1458);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(507);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABALsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1473);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv8i8
            }
          case 1:
            {
              MI.setOpcode(1466);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(510);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABALuv8i16
          }
          break;
        }
        break;
      case 6:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1061);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXsv8i8
            }
          case 1:
            {
              MI.setOpcode(1056);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1825);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBHNv8i8
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1067);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXuv8i8
            }
          case 1:
            {
              MI.setOpcode(1062);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1517);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VRSUBHNv8i8
          }
          break;
        }
        break;
      case 7:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(536);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDsv8i8
            }
          case 1:
            {
              MI.setOpcode(531);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDsv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(525);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABDLsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(542);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDuv8i8
            }
          case 1:
            {
              MI.setOpcode(537);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDuv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(528);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABDLuv8i16
          }
          break;
        }
        break;
      case 8:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(583);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv8i8
            }
          case 1:
            {
              MI.setOpcode(576);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv16i8
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1089);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMLALsv8i16
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1848);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv8i8
            }
          case 1:
            {
              MI.setOpcode(1841);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv16i8
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1092);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMLALuv8i16
          }
          break;
        }
        break;
      case 9:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            {
              MI.setOpcode(1107);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLAv8i8
            }
          case 486:
            {
              MI.setOpcode(1133);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSv8i8
            }
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            {
              MI.setOpcode(1102);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLAv16i8
            }
          case 486:
            {
              MI.setOpcode(1128);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSv16i8
            }
          }
          break;
        }
        break;
      case 10:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1259);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VPMAXs8
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1115);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMLSLsv8i16
          }
          break;
        case 486:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1262);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VPMAXu8
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1118);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMLSLuv8i16
          }
          break;
        }
        break;
      case 12:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1177);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMULLsv8i16
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1180);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMULLuv8i16
          }
          break;
        }
        break;
      case 13:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            {
              MI.setOpcode(574);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDfd
            }
          case 486:
            {
              MI.setOpcode(1252);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VPADDf
            }
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 9) == 484) {
            MI.setOpcode(575);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDfq
          }
          break;
        }
        break;
      case 14:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(598);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCEQfd
            }
          case 1:
            {
              MI.setOpcode(599);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCEQfq
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1170);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMULLp
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(614);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGEfd
            }
          case 1:
            {
              MI.setOpcode(615);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGEfq
            }
          }
          break;
        }
        break;
      case 15:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            {
              MI.setOpcode(1054);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXfd
            }
          case 486:
            {
              MI.setOpcode(1256);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VPMAXf
            }
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 9) == 484) {
            MI.setOpcode(1055);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMAXfq
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(751);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDsv4i16
            }
          case 1:
            {
              MI.setOpcode(753);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(562);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDLsv4i32
            }
          case 1:
            {
              MI.setOpcode(1099);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLAslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(757);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDuv4i16
            }
          case 1:
            {
              MI.setOpcode(759);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(565);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDLuv4i32
            }
          case 1:
            {
              MI.setOpcode(1101);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLAslv8i16
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1448);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDsv4i16
            }
          case 1:
            {
              MI.setOpcode(1450);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(569);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDWsv4i32
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1454);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDuv4i16
            }
          case 1:
            {
              MI.setOpcode(1456);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(572);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VADDWuv4i32
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(763);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBsv4i16
            }
          case 1:
            {
              MI.setOpcode(765);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1827);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBLsv4i32
            }
          case 1:
            {
              MI.setOpcode(1084);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLALslsv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(769);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBuv4i16
            }
          case 1:
            {
              MI.setOpcode(771);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1830);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBLuv4i32
            }
          case 1:
            {
              MI.setOpcode(1086);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLALsluv4i16
            }
          }
          break;
        }
        break;
      case 3:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(640);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTsv4i16
            }
          case 1:
            {
              MI.setOpcode(642);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1834);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBWsv4i32
            }
          case 1:
            {
              MI.setOpcode(1293);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMLALslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(646);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTuv4i16
            }
          case 1:
            {
              MI.setOpcode(648);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1837);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBWuv4i32
          }
          break;
        }
        break;
      case 4:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1542);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv4i16
            }
          case 1:
            {
              MI.setOpcode(1544);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(559);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDHNv4i16
            }
          case 1:
            {
              MI.setOpcode(1125);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1550);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv4i16
            }
          case 1:
            {
              MI.setOpcode(1552);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1426);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRADDHNv4i16
            }
          case 1:
            {
              MI.setOpcode(1127);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSslv8i16
            }
          }
          break;
        }
        break;
      case 5:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1462);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv4i16
            }
          case 1:
            {
              MI.setOpcode(1464);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(506);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABALsv4i32
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1470);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv4i16
            }
          case 1:
            {
              MI.setOpcode(1472);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(509);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABALuv4i32
          }
          break;
        }
        break;
      case 6:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1058);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXsv4i16
            }
          case 1:
            {
              MI.setOpcode(1060);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1824);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBHNv4i16
            }
          case 1:
            {
              MI.setOpcode(1110);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSLslsv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1064);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXuv4i16
            }
          case 1:
            {
              MI.setOpcode(1066);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1516);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSUBHNv4i16
            }
          case 1:
            {
              MI.setOpcode(1112);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSLsluv4i16
            }
          }
          break;
        }
        break;
      case 7:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(533);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDsv4i16
            }
          case 1:
            {
              MI.setOpcode(535);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDsv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(524);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDLsv4i32
            }
          case 1:
            {
              MI.setOpcode(1297);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMLSLslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(539);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDuv4i16
            }
          case 1:
            {
              MI.setOpcode(541);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDuv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(527);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABDLuv4i32
          }
          break;
        }
        break;
      case 8:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(580);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv4i16
            }
          case 1:
            {
              MI.setOpcode(582);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1088);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLALsv4i32
            }
          case 1:
            {
              MI.setOpcode(1189);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1845);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv4i16
            }
          case 1:
            {
              MI.setOpcode(1847);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv8i16
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1091);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLALuv4i32
            }
          case 1:
            {
              MI.setOpcode(1191);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULslv8i16
            }
          }
          break;
        }
        break;
      case 9:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1104);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLAv4i16
            }
          case 1:
            {
              MI.setOpcode(1106);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLAv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1295);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VQDMLALv4i32
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1130);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSv4i16
            }
          case 1:
            {
              MI.setOpcode(1132);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSv8i16
            }
          }
          break;
        }
        break;
      case 10:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1257);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VPMAXs16
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1114);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSLsv4i32
            }
          case 1:
            {
              MI.setOpcode(1172);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULLslsv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1260);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VPMAXu16
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1117);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSLuv4i32
            }
          case 1:
            {
              MI.setOpcode(1174);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULLsluv4i16
            }
          }
          break;
        }
        break;
      case 11:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1305);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMULHv4i16
            }
          case 1:
            {
              MI.setOpcode(1307);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMULHv8i16
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1299);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMLSLv4i32
            }
          case 1:
            {
              MI.setOpcode(1309);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMULLslv4i16
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1332);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQRDMULHv4i16
            }
          case 1:
            {
              MI.setOpcode(1334);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQRDMULHv8i16
            }
          }
          break;
        }
        break;
      case 12:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            {
              MI.setOpcode(1176);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULLsv4i32
            }
          case 487:
            {
              MI.setOpcode(1179);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULLuv4i32
            }
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            {
              MI.setOpcode(1301);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMULHslv4i16
            }
          case 487:
            {
              MI.setOpcode(1303);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMULHslv8i16
            }
          }
          break;
        }
        break;
      case 13:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 9) == 485) {
            MI.setOpcode(1311);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VQDMULLv4i32
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            {
              MI.setOpcode(1328);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQRDMULHslv4i16
            }
          case 487:
            {
              MI.setOpcode(1330);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 3);
              if (!DecodeDPR_8RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 3, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQRDMULHslv8i16
            }
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(750);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDsv2i32
            }
          case 1:
            {
              MI.setOpcode(752);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(561);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDLsv2i64
            }
          case 1:
            {
              MI.setOpcode(1098);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLAslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(756);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDuv2i32
            }
          case 1:
            {
              MI.setOpcode(758);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHADDuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(564);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDLuv2i64
            }
          case 1:
            {
              MI.setOpcode(1100);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLAslv4i32
            }
          }
          break;
        }
        break;
      case 1:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1447);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDsv2i32
            }
          case 1:
            {
              MI.setOpcode(1449);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(568);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDWsv2i64
            }
          case 1:
            {
              MI.setOpcode(1096);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLAslfd
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1453);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDuv2i32
            }
          case 1:
            {
              MI.setOpcode(1455);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRHADDuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(571);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDWuv2i64
            }
          case 1:
            {
              MI.setOpcode(1097);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLAslfq
            }
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(762);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBsv2i32
            }
          case 1:
            {
              MI.setOpcode(764);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1826);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBLsv2i64
            }
          case 1:
            {
              MI.setOpcode(1083);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLALslsv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(768);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBuv2i32
            }
          case 1:
            {
              MI.setOpcode(770);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VHSUBuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1829);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBLuv2i64
            }
          case 1:
            {
              MI.setOpcode(1085);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLALsluv2i32
            }
          }
          break;
        }
        break;
      case 3:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(639);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTsv2i32
            }
          case 1:
            {
              MI.setOpcode(641);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1833);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBWsv2i64
            }
          case 1:
            {
              MI.setOpcode(1292);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMLALslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(645);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTuv2i32
            }
          case 1:
            {
              MI.setOpcode(647);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCGTuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1836);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBWuv2i64
          }
          break;
        }
        break;
      case 4:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1540);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv2i32
            }
          case 1:
            {
              MI.setOpcode(1543);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(558);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDHNv2i32
            }
          case 1:
            {
              MI.setOpcode(1124);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1548);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv2i32
            }
          case 1:
            {
              MI.setOpcode(1551);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1425);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRADDHNv2i32
            }
          case 1:
            {
              MI.setOpcode(1126);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSslv4i32
            }
          }
          break;
        }
        break;
      case 5:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1460);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv2i32
            }
          case 1:
            {
              MI.setOpcode(1463);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(505);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABALsv2i64
            }
          case 1:
            {
              MI.setOpcode(1122);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSslfd
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1468);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv2i32
            }
          case 1:
            {
              MI.setOpcode(1471);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(508);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABALuv2i64
            }
          case 1:
            {
              MI.setOpcode(1123);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSslfq
            }
          }
          break;
        }
        break;
      case 6:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1057);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXsv2i32
            }
          case 1:
            {
              MI.setOpcode(1059);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1823);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBHNv2i32
            }
          case 1:
            {
              MI.setOpcode(1109);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSLslsv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1063);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXuv2i32
            }
          case 1:
            {
              MI.setOpcode(1065);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMAXuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1515);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSUBHNv2i32
            }
          case 1:
            {
              MI.setOpcode(1111);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMLSLsluv2i32
            }
          }
          break;
        }
        break;
      case 7:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(532);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDsv2i32
            }
          case 1:
            {
              MI.setOpcode(534);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDsv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(523);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDLsv2i64
            }
          case 1:
            {
              MI.setOpcode(1296);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMLSLslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(538);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDuv2i32
            }
          case 1:
            {
              MI.setOpcode(540);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDuv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(526);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VABDLuv2i64
          }
          break;
        }
        break;
      case 8:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(578);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv2i32
            }
          case 1:
            {
              MI.setOpcode(581);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1087);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLALsv2i64
            }
          case 1:
            {
              MI.setOpcode(1188);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1843);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv2i32
            }
          case 1:
            {
              MI.setOpcode(1846);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1090);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLALuv2i64
            }
          case 1:
            {
              MI.setOpcode(1190);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULslv4i32
            }
          }
          break;
        }
        break;
      case 9:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1103);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLAv2i32
            }
          case 1:
            {
              MI.setOpcode(1105);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLAv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1294);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMLALv2i64
            }
          case 1:
            {
              MI.setOpcode(1186);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULslfd
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1129);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSv2i32
            }
          case 1:
            {
              MI.setOpcode(1131);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSv4i32
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 1) {
            MI.setOpcode(1187);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VMULslfq
          }
          break;
        }
        break;
      case 10:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1258);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VPMAXs32
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1113);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSLsv2i64
            }
          case 1:
            {
              MI.setOpcode(1171);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULLslsv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(1261);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VPMAXu32
          }
          break;
        case 487:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1116);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSLuv2i64
            }
          case 1:
            {
              MI.setOpcode(1173);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VMULLsluv2i32
            }
          }
          break;
        }
        break;
      case 11:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1304);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMULHv2i32
            }
          case 1:
            {
              MI.setOpcode(1306);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMULHv4i32
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1298);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMLSLv2i64
            }
          case 1:
            {
              MI.setOpcode(1308);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMULLslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1331);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQRDMULHv2i32
            }
          case 1:
            {
              MI.setOpcode(1333);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQRDMULHv4i32
            }
          }
          break;
        }
        break;
      case 12:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            {
              MI.setOpcode(1175);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULLsv2i64
            }
          case 487:
            {
              MI.setOpcode(1178);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULLuv2i64
            }
          }
          break;
        case 1:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 485:
            {
              MI.setOpcode(1300);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMULHslv2i32
            }
          case 487:
            {
              MI.setOpcode(1302);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQDMULHslv4i32
            }
          }
          break;
        }
        break;
      case 13:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 484:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1839);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBfd
            }
          case 1:
            {
              MI.setOpcode(1840);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBfq
            }
          }
          break;
        case 485:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1310);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VQDMULLv2i64
            }
          case 1:
            {
              MI.setOpcode(1327);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQRDMULHslv2i32
            }
          }
          break;
        case 486:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(529);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDfd
            }
          case 1:
            {
              MI.setOpcode(530);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VABDfq
            }
          }
          break;
        case 487:
          // Check Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 6, 1) == 1) {
            MI.setOpcode(1329);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeDPR_VFP2RegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VQRDMULHslv4i32
          }
          break;
        }
        break;
      case 14:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 9) == 486) {
            MI.setOpcode(636);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VCGTfd
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 9) == 486) {
            MI.setOpcode(637);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VCGTfq
          }
          break;
        }
        break;
      case 15:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 484:
            {
              MI.setOpcode(1068);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMINfd
            }
          case 486:
            {
              MI.setOpcode(1263);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VPMINf
            }
          }
          break;
        case 1:
          // Check Inst{31-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 9) == 484) {
            MI.setOpcode(1069);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // VMINfq
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 484:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 4:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1539);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv1i64
            }
          case 1:
            {
              MI.setOpcode(1541);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLsv2i64
            }
          }
          break;
        case 5:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1459);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv1i64
            }
          case 1:
            {
              MI.setOpcode(1461);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLsv2i64
            }
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(577);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv1i64
            }
          case 1:
            {
              MI.setOpcode(579);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VADDv2i64
            }
          }
          break;
        }
        break;
      case 485:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{9-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 8, 2) == 0) {
            MI.setOpcode(739);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 10, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VEXTd32
          }
          else
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 0) {
              MI.setOpcode(738);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 9, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VEXTd16
            }
            else
              {
                MI.setOpcode(740);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VEXTd8
              }
          break;
        case 1:
          // Check Inst{9-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 8, 2) == 0) {
            MI.setOpcode(742);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 10, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VEXTq32
          }
          else
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 0) {
              MI.setOpcode(741);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 9, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VEXTq16
            }
            else
              {
                MI.setOpcode(743);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 8, 4);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VEXTq8
              }
          break;
        }
        break;
      case 486:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 4:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1547);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv1i64
            }
          case 1:
            {
              MI.setOpcode(1549);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSHLuv2i64
            }
          }
          break;
        case 5:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1467);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv1i64
            }
          case 1:
            {
              MI.setOpcode(1469);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSHLuv2i64
            }
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1842);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv1i64
            }
          case 1:
            {
              MI.setOpcode(1844);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VSUBv2i64
            }
          }
          break;
        }
        break;
      case 487:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 0:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1442);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV64d8
              }
            case 1:
              {
                MI.setOpcode(1445);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV64q8
              }
            case 2:
              {
                MI.setOpcode(1437);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV32d8
              }
            case 3:
              {
                MI.setOpcode(1439);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV32q8
              }
            }
            break;
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(657);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv8i8
              }
            case 1:
              {
                MI.setOpcode(650);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv16i8
              }
            case 2:
              {
                MI.setOpcode(635);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv8i8
              }
            case 3:
              {
                MI.setOpcode(628);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv16i8
              }
            }
            break;
          case 2:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1849);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VSWPd
              }
            case 1:
              {
                MI.setOpcode(1850);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VSWPq
              }
            case 2:
              {
                MI.setOpcode(1883);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTRNd8
              }
            case 3:
              {
                MI.setOpcode(1886);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTRNq8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1440);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV64d16
              }
            case 1:
              {
                MI.setOpcode(1443);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV64q16
              }
            case 2:
              {
                MI.setOpcode(1436);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV32d16
              }
            case 3:
              {
                MI.setOpcode(1438);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV32q16
              }
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(654);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv4i16
              }
            case 1:
              {
                MI.setOpcode(656);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv8i16
              }
            case 2:
              {
                MI.setOpcode(632);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv4i16
              }
            case 3:
              {
                MI.setOpcode(634);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 2:
              {
                MI.setOpcode(1881);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTRNd16
              }
            case 3:
              {
                MI.setOpcode(1884);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTRNq16
              }
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1441);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV64d32
              }
            case 1:
              {
                MI.setOpcode(1444);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV64q32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(652);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv2i32
              }
            case 1:
              {
                MI.setOpcode(655);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv4i32
              }
            case 2:
              {
                MI.setOpcode(630);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv2i32
              }
            case 3:
              {
                MI.setOpcode(633);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv4i32
              }
            }
            break;
          case 10:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 2:
              {
                MI.setOpcode(1882);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTRNd32
              }
            case 3:
              {
                MI.setOpcode(1885);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTRNq32
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1434);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV16d8
              }
            case 1:
              {
                MI.setOpcode(1435);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VREV16q8
              }
            }
            break;
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(613);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv8i8
              }
            case 1:
              {
                MI.setOpcode(606);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv16i8
              }
            case 2:
              {
                MI.setOpcode(665);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv8i8
              }
            case 3:
              {
                MI.setOpcode(658);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv16i8
              }
            }
            break;
          case 2:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1901);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VUZPd8
              }
            case 1:
              {
                MI.setOpcode(1904);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VUZPq8
              }
            case 2:
              {
                MI.setOpcode(1907);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VZIPd8
              }
            case 3:
              {
                MI.setOpcode(1910);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VZIPq8
              }
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(610);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv4i16
              }
            case 1:
              {
                MI.setOpcode(612);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv8i16
              }
            case 2:
              {
                MI.setOpcode(662);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv4i16
              }
            case 3:
              {
                MI.setOpcode(664);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1899);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VUZPd16
              }
            case 1:
              {
                MI.setOpcode(1902);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VUZPq16
              }
            case 2:
              {
                MI.setOpcode(1905);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VZIPd16
              }
            case 3:
              {
                MI.setOpcode(1908);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VZIPq16
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(608);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv2i32
              }
            case 1:
              {
                MI.setOpcode(611);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv4i32
              }
            case 2:
              {
                MI.setOpcode(660);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv2i32
              }
            case 3:
              {
                MI.setOpcode(663);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv4i32
              }
            }
            break;
          case 10:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1900);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VUZPd32
              }
            case 1:
              {
                MI.setOpcode(1903);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VUZPq32
              }
            case 2:
              {
                MI.setOpcode(1906);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VZIPd32
              }
            case 3:
              {
                MI.setOpcode(1909);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VZIPq32
              }
            }
            break;
          }
          break;
        case 2:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1245);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLsv8i8
              }
            case 1:
              {
                MI.setOpcode(1240);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLsv16i8
              }
            case 2:
              {
                MI.setOpcode(1251);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLuv8i8
              }
            case 3:
              {
                MI.setOpcode(1246);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(679);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv8i8
              }
            case 1:
              {
                MI.setOpcode(672);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv16i8
              }
            }
            break;
          case 2:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1145);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMOVNv8i8
              }
            case 1:
              {
                MI.setOpcode(1314);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNsuv8i8
              }
            case 2:
              {
                MI.setOpcode(1317);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNsv8i8
              }
            case 3:
              {
                MI.setOpcode(1320);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNuv8i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1242);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLsv4i16
              }
            case 1:
              {
                MI.setOpcode(1244);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLsv8i16
              }
            case 2:
              {
                MI.setOpcode(1248);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLuv4i16
              }
            case 3:
              {
                MI.setOpcode(1250);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLuv8i16
              }
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(676);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv4i16
              }
            case 1:
              {
                MI.setOpcode(678);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1144);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMOVNv4i16
              }
            case 1:
              {
                MI.setOpcode(1313);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNsuv4i16
              }
            case 2:
              {
                MI.setOpcode(1316);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNsv4i16
              }
            case 3:
              {
                MI.setOpcode(1319);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNuv4i16
              }
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1241);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLsv2i32
              }
            case 1:
              {
                MI.setOpcode(1243);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLsv4i32
              }
            case 2:
              {
                MI.setOpcode(1247);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLuv2i32
              }
            case 3:
              {
                MI.setOpcode(1249);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADDLuv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(674);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv2i32
              }
            case 1:
              {
                MI.setOpcode(677);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv4i32
              }
            }
            break;
          case 10:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1143);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMOVNv2i32
              }
            case 1:
              {
                MI.setOpcode(1312);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNsuv2i32
              }
            case 2:
              {
                MI.setOpcode(1315);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNsv2i32
              }
            case 3:
              {
                MI.setOpcode(1318);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQMOVNuv2i32
              }
            }
            break;
          }
          break;
        case 3:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 1:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(552);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSv8i8
              }
            case 1:
              {
                MI.setOpcode(547);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSv16i8
              }
            case 2:
              {
                MI.setOpcode(1212);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGs8d
              }
            case 3:
              {
                MI.setOpcode(1213);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGs8q
              }
            }
            break;
          case 2:
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(1523);
              if (!DecodeVSHLMaxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VSHLLi8
            }
            break;
          case 5:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(549);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSv4i16
              }
            case 1:
              {
                MI.setOpcode(551);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSv8i16
              }
            case 2:
              {
                MI.setOpcode(1208);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGs16d
              }
            case 3:
              {
                MI.setOpcode(1209);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGs16q
              }
            }
            break;
          case 6:
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(1521);
              if (!DecodeVSHLMaxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VSHLLi16
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(548);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSv2i32
              }
            case 1:
              {
                MI.setOpcode(550);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSv4i32
              }
            case 2:
              {
                MI.setOpcode(1210);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGs32d
              }
            case 3:
              {
                MI.setOpcode(1211);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGs32q
              }
            }
            break;
          case 10:
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(1522);
              if (!DecodeVSHLMaxInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VSHLLi32
            }
            break;
          }
          break;
        case 4:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(671);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLSv8i8
              }
            case 1:
              {
                MI.setOpcode(666);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLSv16i8
              }
            case 2:
              {
                MI.setOpcode(685);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLZv8i8
              }
            case 3:
              {
                MI.setOpcode(680);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLZv16i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(668);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLSv4i16
              }
            case 1:
              {
                MI.setOpcode(670);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLSv8i16
              }
            case 2:
              {
                MI.setOpcode(682);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLZv4i16
              }
            case 3:
              {
                MI.setOpcode(684);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLZv8i16
              }
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(667);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLSv2i32
              }
            case 1:
              {
                MI.setOpcode(669);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLSv4i32
              }
            case 2:
              {
                MI.setOpcode(681);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLZv2i32
              }
            case 3:
              {
                MI.setOpcode(683);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLZv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(651);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv2f32
              }
            case 1:
              {
                MI.setOpcode(653);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGTzv4f32
              }
            case 2:
              {
                MI.setOpcode(629);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv2f32
              }
            case 3:
              {
                MI.setOpcode(631);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEzv4f32
              }
            }
            break;
          case 11:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1428);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRECPEd
              }
            case 1:
              {
                MI.setOpcode(1431);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRECPEq
              }
            case 2:
              {
                MI.setOpcode(1493);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRSQRTEd
              }
            case 3:
              {
                MI.setOpcode(1496);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRSQRTEq
              }
            }
            break;
          }
          break;
        case 5:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              {
                MI.setOpcode(694);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCNTd
              }
            case 9:
              {
                MI.setOpcode(607);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv2f32
              }
            case 11:
              {
                MI.setOpcode(1429);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRECPEfd
              }
            }
            break;
          case 1:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              {
                MI.setOpcode(695);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCNTq
              }
            case 9:
              {
                MI.setOpcode(609);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQzv4f32
              }
            case 11:
              {
                MI.setOpcode(1430);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRECPEfq
              }
            }
            break;
          case 2:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              {
                MI.setOpcode(1198);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMVNd
              }
            case 9:
              {
                MI.setOpcode(659);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv2f32
              }
            case 11:
              {
                MI.setOpcode(1494);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRSQRTEfd
              }
            }
            break;
          case 3:
            // Check Inst{19-16} ...
            switch (fieldFromInstruction32(insn, 16, 4)) {
            case 0:
              {
                MI.setOpcode(1199);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMVNq
              }
            case 9:
              {
                MI.setOpcode(661);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLEzv4f32
              }
            case 11:
              {
                MI.setOpcode(1495);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VRSQRTEfq
              }
            }
            break;
          }
          break;
        case 6:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1233);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALsv8i8
              }
            case 1:
              {
                MI.setOpcode(1228);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALsv16i8
              }
            case 2:
              {
                MI.setOpcode(1239);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALuv8i8
              }
            case 3:
              {
                MI.setOpcode(1234);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALuv16i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1230);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALsv4i16
              }
            case 1:
              {
                MI.setOpcode(1232);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALsv8i16
              }
            case 2:
              {
                MI.setOpcode(1236);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALuv4i16
              }
            case 3:
              {
                MI.setOpcode(1238);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALuv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(702);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCVTf2h
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1229);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALsv2i32
              }
            case 1:
              {
                MI.setOpcode(1231);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALsv4i32
              }
            case 2:
              {
                MI.setOpcode(1235);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALuv2i32
              }
            case 3:
              {
                MI.setOpcode(1237);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPADALuv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(673);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv2f32
              }
            case 1:
              {
                MI.setOpcode(675);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCLTzv4f32
              }
            }
            break;
          case 11:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(712);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTs2fd
              }
            case 1:
              {
                MI.setOpcode(713);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTs2fq
              }
            case 2:
              {
                MI.setOpcode(714);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTu2fd
              }
            case 3:
              {
                MI.setOpcode(715);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTu2fq
              }
            }
            break;
          }
          break;
        case 7:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1275);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQABSv8i8
              }
            case 1:
              {
                MI.setOpcode(1270);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQABSv16i8
              }
            case 2:
              {
                MI.setOpcode(1326);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQNEGv8i8
              }
            case 3:
              {
                MI.setOpcode(1321);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQNEGv16i8
              }
            }
            break;
          case 4:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1272);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQABSv4i16
              }
            case 1:
              {
                MI.setOpcode(1274);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQABSv8i16
              }
            case 2:
              {
                MI.setOpcode(1323);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQNEGv4i16
              }
            case 3:
              {
                MI.setOpcode(1325);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQNEGv8i16
              }
            }
            break;
          case 6:
            // Check Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(711);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VCVTh2f
            }
            break;
          case 8:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(1271);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQABSv2i32
              }
            case 1:
              {
                MI.setOpcode(1273);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQABSv4i32
              }
            case 2:
              {
                MI.setOpcode(1322);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQNEGv2i32
              }
            case 3:
              {
                MI.setOpcode(1324);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQNEGv4i32
              }
            }
            break;
          case 9:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(545);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSfd
              }
            case 1:
              {
                MI.setOpcode(546);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABSfq
              }
            case 2:
              {
                MI.setOpcode(1207);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGfd
              }
            case 3:
              {
                MI.setOpcode(1206);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VNEGf32q
              }
            }
            break;
          case 11:
            // Check Inst{7-6} ...
            switch (fieldFromInstruction32(insn, 6, 2)) {
            case 0:
              {
                MI.setOpcode(703);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTf2sd
              }
            case 1:
              {
                MI.setOpcode(704);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTf2sq
              }
            case 2:
              {
                MI.setOpcode(705);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTf2ud
              }
            case 3:
              {
                MI.setOpcode(706);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCVTf2uq
              }
            }
            break;
          }
          break;
        case 8:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1851);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBL1
            }
          case 1:
            {
              MI.setOpcode(1858);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBX1
            }
          }
          break;
        case 9:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1852);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBL2
            }
          case 1:
            {
              MI.setOpcode(1859);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBX2
            }
          }
          break;
        case 10:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1854);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBL3
            }
          case 1:
            {
              MI.setOpcode(1861);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBX3
            }
          }
          break;
        case 11:
          // Check Inst{6} ...
          switch (fieldFromInstruction32(insn, 6, 1)) {
          case 0:
            {
              MI.setOpcode(1856);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBL4
            }
          case 1:
            {
              MI.setOpcode(1863);
              if (!DecodeTBLInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VTBX4
            }
          }
          break;
        case 12:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{16} ...
            switch (fieldFromInstruction32(insn, 16, 1)) {
            case 0:
              // Check Inst{17} ...
              switch (fieldFromInstruction32(insn, 17, 1)) {
              case 0:
                // Check Inst{18-18} for singleton decoding...
                if (fieldFromInstruction32(insn, 18, 1) == 1) {
                  MI.setOpcode(730);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 19, 1);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // VDUPLN32d
                }
                break;
              case 1:
                {
                  MI.setOpcode(728);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 18, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // VDUPLN16d
                }
              }
              break;
            case 1:
              {
                MI.setOpcode(732);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 17, 3);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VDUPLN8d
              }
            }
            break;
          case 1:
            // Check Inst{16} ...
            switch (fieldFromInstruction32(insn, 16, 1)) {
            case 0:
              // Check Inst{17} ...
              switch (fieldFromInstruction32(insn, 17, 1)) {
              case 0:
                // Check Inst{18-18} for singleton decoding...
                if (fieldFromInstruction32(insn, 18, 1) == 1) {
                  MI.setOpcode(731);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 19, 1);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // VDUPLN32q
                }
                break;
              case 1:
                {
                  MI.setOpcode(729);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 18, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // VDUPLN16q
                }
              }
              break;
            case 1:
              {
                MI.setOpcode(733);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 17, 3);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VDUPLN8q
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1283);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv8i8
              }
            case 243:
              {
                MI.setOpcode(1291);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1280);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv4i16
              }
            case 243:
              {
                MI.setOpcode(1288);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1278);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv2i32
              }
            case 243:
              {
                MI.setOpcode(1286);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1277);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv1i64
              }
            case 243:
              {
                MI.setOpcode(1285);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv1i64
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(584);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VANDd
              }
            case 243:
              {
                MI.setOpcode(736);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VEORd
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(586);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBICd
              }
            case 243:
              {
                MI.setOpcode(596);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBSLd
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1222);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VORRd
              }
            case 243:
              {
                MI.setOpcode(594);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBITd
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1220);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VORNd
              }
            case 243:
              {
                MI.setOpcode(592);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBIFd
              }
            }
            break;
          }
          break;
        case 2:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1416);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv8i8
              }
            case 243:
              {
                MI.setOpcode(1424);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1413);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv4i16
              }
            case 243:
              {
                MI.setOpcode(1421);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1411);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv2i32
              }
            case 243:
              {
                MI.setOpcode(1419);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1410);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv1i64
              }
            case 243:
              {
                MI.setOpcode(1418);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv1i64
              }
            }
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(621);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEsv8i8
              }
            case 243:
              {
                MI.setOpcode(627);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(618);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEsv4i16
              }
            case 243:
              {
                MI.setOpcode(624);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(617);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEsv2i32
              }
            case 243:
              {
                MI.setOpcode(623);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEuv2i32
              }
            }
            break;
          }
          break;
        case 4:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1383);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv8i8
              }
            case 243:
              {
                MI.setOpcode(1399);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1380);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv4i16
              }
            case 243:
              {
                MI.setOpcode(1396);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1378);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv2i32
              }
            case 243:
              {
                MI.setOpcode(1394);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1377);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv1i64
              }
            case 243:
              {
                MI.setOpcode(1393);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv1i64
              }
            }
            break;
          }
          break;
        case 5:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1342);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv8i8
              }
            case 243:
              {
                MI.setOpcode(1350);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1339);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv4i16
              }
            case 243:
              {
                MI.setOpcode(1347);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1337);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv2i32
              }
            case 243:
              {
                MI.setOpcode(1345);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv2i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1336);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv1i64
              }
            case 243:
              {
                MI.setOpcode(1344);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv1i64
              }
            }
            break;
          }
          break;
        case 6:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1075);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINsv8i8
              }
            case 243:
              {
                MI.setOpcode(1081);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1072);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINsv4i16
              }
            case 243:
              {
                MI.setOpcode(1078);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1071);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINsv2i32
              }
            case 243:
              {
                MI.setOpcode(1077);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINuv2i32
              }
            }
            break;
          }
          break;
        case 7:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(516);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAsv8i8
              }
            case 243:
              {
                MI.setOpcode(522);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAuv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(513);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAsv4i16
              }
            case 243:
              {
                MI.setOpcode(519);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAuv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(512);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAsv2i32
              }
            case 243:
              {
                MI.setOpcode(518);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAuv2i32
              }
            }
            break;
          }
          break;
        case 8:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1892);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTSTv8i8
              }
            case 243:
              {
                MI.setOpcode(605);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQv8i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1889);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTSTv4i16
              }
            case 243:
              {
                MI.setOpcode(602);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQv4i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1888);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTSTv2i32
              }
            case 243:
              {
                MI.setOpcode(601);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQv2i32
              }
            }
            break;
          }
          break;
        case 9:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1197);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMULv8i8
              }
            case 243:
              {
                MI.setOpcode(1184);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMULpd
              }
            }
            break;
          case 1:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1194);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULv4i16
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1193);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULv2i32
            }
            break;
          }
          break;
        case 10:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1266);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPMINs8
              }
            case 243:
              {
                MI.setOpcode(1269);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPMINu8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1264);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPMINs16
              }
            case 243:
              {
                MI.setOpcode(1267);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPMINu16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1265);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPMINs32
              }
            case 243:
              {
                MI.setOpcode(1268);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VPMINu32
              }
            }
            break;
          }
          break;
        case 11:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1255);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VPADDi8
            }
            break;
          case 1:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1253);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VPADDi16
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1254);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VPADDi32
            }
            break;
          }
          break;
        case 13:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1094);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMLAfd
              }
            case 243:
              {
                MI.setOpcode(1182);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMULfd
              }
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1120);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSfd
            }
            break;
          }
          break;
        case 14:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(553);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VACGEd
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(555);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VACGTd
            }
            break;
          }
          break;
        case 15:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1432);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRECPSfd
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1497);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSQRTSfd
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-25} ...
          switch (fieldFromInstruction32(insn, 25, 7)) {
          case 121:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction32(insn, 8, 4)) {
            case 0:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1564);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1572);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1561);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRsv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1569);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1559);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSHRsv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1567);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSHRuv2i32
                  }
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1596);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1604);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1593);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAsv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1601);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1591);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRAsv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1599);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRAuv2i32
                  }
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1484);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1492);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1481);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRsv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1489);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1479);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSHRsv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1487);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSHRuv2i32
                  }
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1506);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1514);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1503);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAsv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1511);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1501);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSRAsv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1509);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSRAuv2i32
                  }
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1612);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRIv8i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1609);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRIv4i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1607);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                  return true; // VSRIv2i32
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1537);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSHLiv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1584);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSLIv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1534);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSHLiv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1581);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSLIv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1532);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VSHLiv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1579);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VSLIv2i32
                  }
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1375);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLsuv8i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1372);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLsuv4i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1370);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // VQSHLsuv2i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1367);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLsiv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1391);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLuiv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1364);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLsiv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1388);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLuiv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1362);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLsiv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1386);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLuiv2i32
                  }
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1556);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRNv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1408);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQSHRUNv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1555);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRNv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1407);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQSHRUNv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1554);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSHRNv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1406);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VQSHRUNv2i32
                  }
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1402);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQSHRNsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1405);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQSHRNuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1401);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQSHRNsv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1404);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQSHRNuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1400);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VQSHRNsv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1403);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VQSHRNuv2i32
                  }
                }
                break;
              }
              break;
            case 10:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19} ...
                    switch (fieldFromInstruction32(insn, 19, 1)) {
                    case 1:
                      // Check Inst{18-16} for singleton decoding...
                      if (fieldFromInstruction32(insn, 16, 3) == 0) {
                        MI.setOpcode(1139);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        return true; // VMOVLsv8i16
                      }
                      else
                        {
                          MI.setOpcode(1526);
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                          if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                          tmp = fieldFromInstruction32(insn, 16, 3);
                          MI.addOperand(MCOperand::CreateImm(tmp));
                          return true; // VSHLLsv8i16
                        }
                      break;
                    }
                    break;
                  case 1:
                    // Check Inst{19} ...
                    switch (fieldFromInstruction32(insn, 19, 1)) {
                    case 1:
                      // Check Inst{18-16} for singleton decoding...
                      if (fieldFromInstruction32(insn, 16, 3) == 0) {
                        MI.setOpcode(1142);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        return true; // VMOVLuv8i16
                      }
                      else
                        {
                          MI.setOpcode(1529);
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                          if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                          tmp = 0;
                          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                          tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                          tmp = fieldFromInstruction32(insn, 16, 3);
                          MI.addOperand(MCOperand::CreateImm(tmp));
                          return true; // VSHLLuv8i16
                        }
                      break;
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-16} for singleton decoding...
                    if (fieldFromInstruction32(insn, 16, 4) == 0) {
                      MI.setOpcode(1138);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      return true; // VMOVLsv4i32
                    }
                    else
                      {
                        MI.setOpcode(1525);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 16, 4);
                        MI.addOperand(MCOperand::CreateImm(tmp));
                        return true; // VSHLLsv4i32
                      }
                    break;
                  case 1:
                    // Check Inst{19-16} for singleton decoding...
                    if (fieldFromInstruction32(insn, 16, 4) == 0) {
                      MI.setOpcode(1141);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      return true; // VMOVLuv4i32
                    }
                    else
                      {
                        MI.setOpcode(1528);
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                        if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = 0;
                        tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                        tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                        tmp = fieldFromInstruction32(insn, 16, 4);
                        MI.addOperand(MCOperand::CreateImm(tmp));
                        return true; // VSHLLuv4i32
                      }
                    break;
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  // Check Inst{20-16} for singleton decoding...
                  if (fieldFromInstruction32(insn, 16, 5) == 0) {
                    MI.setOpcode(1137);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    return true; // VMOVLsv2i64
                  }
                  else
                    {
                      MI.setOpcode(1524);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 5);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSHLLsv2i64
                    }
                  break;
                case 1:
                  // Check Inst{20-16} for singleton decoding...
                  if (fieldFromInstruction32(insn, 16, 5) == 0) {
                    MI.setOpcode(1140);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    return true; // VMOVLuv2i64
                  }
                  else
                    {
                      MI.setOpcode(1527);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 5);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSHLLuv2i64
                    }
                  break;
                }
                break;
              }
              break;
            case 14:
              // Check Inst{5} ...
              switch (fieldFromInstruction32(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} for singleton decoding...
                if (fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1162);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMOVv8i8
                }
                break;
              case 1:
                // Check Inst{21-19} for singleton decoding...
                if (fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1156);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMOVv1i64
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                {
                  MI.setOpcode(716);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTxs2fd
                }
              case 1:
                {
                  MI.setOpcode(718);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTxu2fd
                }
              }
              break;
              break;
            case 15:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                {
                  MI.setOpcode(707);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTf2xsd
                }
              case 1:
                {
                  MI.setOpcode(709);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTf2xud
                }
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1159);
                    if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // VMOVv4i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1223);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VORRiv2i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(1224);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VORRiv4i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                {
                  MI.setOpcode(1157);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMOVv2i32
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1201);
                    if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // VMVNv4i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    {
                      MI.setOpcode(587);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VBICiv2i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(588);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VBICiv4i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                {
                  MI.setOpcode(1200);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMVNv2i32
                }
                break;
              }
              break;
            }
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1558);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSHRsv1i64
              }
            case 243:
              {
                MI.setOpcode(1566);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSHRuv1i64
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1590);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSRAsv1i64
              }
            case 243:
              {
                MI.setOpcode(1598);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSRAuv1i64
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1478);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSHRsv1i64
              }
            case 243:
              {
                MI.setOpcode(1486);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSHRuv1i64
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1500);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSRAsv1i64
              }
            case 243:
              {
                MI.setOpcode(1508);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSRAuv1i64
              }
            }
            break;
          case 4:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1606);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 6);
              if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
              return true; // VSRIv1i64
            }
            break;
          case 5:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1531);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VSHLiv1i64
              }
            case 243:
              {
                MI.setOpcode(1578);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VSLIv1i64
              }
            }
            break;
          case 6:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1369);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 6);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQSHLsuv1i64
            }
            break;
          case 7:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1361);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VQSHLsiv1i64
              }
            case 243:
              {
                MI.setOpcode(1385);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VQSHLuiv1i64
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{23} ...
      switch (fieldFromInstruction32(insn, 23, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1276);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv16i8
              }
            case 243:
              {
                MI.setOpcode(1284);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1282);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv8i16
              }
            case 243:
              {
                MI.setOpcode(1290);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1281);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv4i32
              }
            case 243:
              {
                MI.setOpcode(1289);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1279);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDsv2i64
              }
            case 243:
              {
                MI.setOpcode(1287);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQADDuv2i64
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(585);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VANDq
              }
            case 243:
              {
                MI.setOpcode(737);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VEORq
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(591);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBICq
              }
            case 243:
              {
                MI.setOpcode(597);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBSLq
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1227);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VORRq
              }
            case 243:
              {
                MI.setOpcode(595);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBITq
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1221);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VORNq
              }
            case 243:
              {
                MI.setOpcode(593);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VBIFq
              }
            }
            break;
          }
          break;
        case 2:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1409);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv16i8
              }
            case 243:
              {
                MI.setOpcode(1417);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1415);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv8i16
              }
            case 243:
              {
                MI.setOpcode(1423);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1414);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv4i32
              }
            case 243:
              {
                MI.setOpcode(1422);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1412);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBsv2i64
              }
            case 243:
              {
                MI.setOpcode(1420);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSUBuv2i64
              }
            }
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(616);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEsv16i8
              }
            case 243:
              {
                MI.setOpcode(622);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(620);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEsv8i16
              }
            case 243:
              {
                MI.setOpcode(626);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(619);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEsv4i32
              }
            case 243:
              {
                MI.setOpcode(625);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCGEuv4i32
              }
            }
            break;
          }
          break;
        case 4:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1376);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv16i8
              }
            case 243:
              {
                MI.setOpcode(1392);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1382);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv8i16
              }
            case 243:
              {
                MI.setOpcode(1398);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1381);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv4i32
              }
            case 243:
              {
                MI.setOpcode(1397);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1379);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLsv2i64
              }
            case 243:
              {
                MI.setOpcode(1395);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQSHLuv2i64
              }
            }
            break;
          }
          break;
        case 5:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1335);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv16i8
              }
            case 243:
              {
                MI.setOpcode(1343);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1341);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv8i16
              }
            case 243:
              {
                MI.setOpcode(1349);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1340);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv4i32
              }
            case 243:
              {
                MI.setOpcode(1348);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv4i32
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1338);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLsv2i64
              }
            case 243:
              {
                MI.setOpcode(1346);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VQRSHLuv2i64
              }
            }
            break;
          }
          break;
        case 6:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1070);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINsv16i8
              }
            case 243:
              {
                MI.setOpcode(1076);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1074);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINsv8i16
              }
            case 243:
              {
                MI.setOpcode(1080);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1073);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINsv4i32
              }
            case 243:
              {
                MI.setOpcode(1079);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMINuv4i32
              }
            }
            break;
          }
          break;
        case 7:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(511);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAsv16i8
              }
            case 243:
              {
                MI.setOpcode(517);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAuv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(515);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAsv8i16
              }
            case 243:
              {
                MI.setOpcode(521);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAuv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(514);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAsv4i32
              }
            case 243:
              {
                MI.setOpcode(520);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VABAuv4i32
              }
            }
            break;
          }
          break;
        case 8:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1887);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTSTv16i8
              }
            case 243:
              {
                MI.setOpcode(600);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQv16i8
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1891);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTSTv8i16
              }
            case 243:
              {
                MI.setOpcode(604);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQv8i16
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1890);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VTSTv4i32
              }
            case 243:
              {
                MI.setOpcode(603);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VCEQv4i32
              }
            }
            break;
          }
          break;
        case 9:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1192);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMULv16i8
              }
            case 243:
              {
                MI.setOpcode(1185);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMULpq
              }
            }
            break;
          case 1:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1196);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULv8i16
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1195);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMULv4i32
            }
            break;
          }
          break;
        case 13:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1095);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMLAfq
              }
            case 243:
              {
                MI.setOpcode(1183);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // VMULfq
              }
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1121);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSfq
            }
            break;
          }
          break;
        case 14:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(554);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VACGEq
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(556);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VACGTq
            }
            break;
          }
          break;
        case 15:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1433);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRECPSfq
            }
            break;
          case 2:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 242) {
              MI.setOpcode(1498);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // VRSQRTSfq
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-25} ...
          switch (fieldFromInstruction32(insn, 25, 7)) {
          case 121:
            // Check Inst{11-8} ...
            switch (fieldFromInstruction32(insn, 8, 4)) {
            case 0:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1557);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1565);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1563);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRsv8i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1571);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSHRuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1562);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSHRsv4i32
                  }
                case 1:
                  {
                    MI.setOpcode(1570);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSHRuv4i32
                  }
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1589);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1597);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1595);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAsv8i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1603);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VSRAuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1594);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRAsv4i32
                  }
                case 1:
                  {
                    MI.setOpcode(1602);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRAuv4i32
                  }
                }
                break;
              }
              break;
            case 2:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1477);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1485);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1483);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRsv8i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1491);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1482);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSHRsv4i32
                  }
                case 1:
                  {
                    MI.setOpcode(1490);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSHRuv4i32
                  }
                }
                break;
              }
              break;
            case 3:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1499);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAsv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1507);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAuv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1505);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAsv8i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1513);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSRAuv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1504);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSRAsv4i32
                  }
                case 1:
                  {
                    MI.setOpcode(1512);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSRAuv4i32
                  }
                }
                break;
              }
              break;
            case 4:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1605);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRIv16i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1611);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VSRIv8i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1610);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                  return true; // VSRIv4i32
                }
                break;
              }
              break;
            case 5:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1530);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSHLiv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1577);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSLIv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1536);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSHLiv8i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1583);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VSLIv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1535);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VSHLiv4i32
                  }
                case 1:
                  {
                    MI.setOpcode(1582);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VSLIv4i32
                  }
                }
                break;
              }
              break;
            case 6:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24-24} && Inst{19-19} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1 && fieldFromInstruction32(insn, 19, 1) == 1) {
                    MI.setOpcode(1368);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 3);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLsuv16i8
                  }
                  break;
                case 1:
                  // Check Inst{24-24} for singleton decoding...
                  if (fieldFromInstruction32(insn, 24, 1) == 1) {
                    MI.setOpcode(1374);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLsuv8i16
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24-24} for singleton decoding...
                if (fieldFromInstruction32(insn, 24, 1) == 1) {
                  MI.setOpcode(1373);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // VQSHLsuv4i32
                }
                break;
              }
              break;
            case 7:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1360);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLsiv16i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1384);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLuiv16i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1366);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLsiv8i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1390);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      MI.addOperand(MCOperand::CreateImm(tmp));
                      return true; // VQSHLuiv8i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1365);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLsiv4i32
                  }
                case 1:
                  {
                    MI.setOpcode(1389);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // VQSHLuiv4i32
                  }
                }
                break;
              }
              break;
            case 8:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1476);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRNv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1359);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQRSHRUNv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1475);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VRSHRNv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1358);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQRSHRUNv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1474);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VRSHRNv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1357);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VQRSHRUNv2i32
                  }
                }
                break;
              }
              break;
            case 9:
              // Check Inst{21} ...
              switch (fieldFromInstruction32(insn, 21, 1)) {
              case 0:
                // Check Inst{20} ...
                switch (fieldFromInstruction32(insn, 20, 1)) {
                case 0:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1353);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQRSHRNsv8i8
                    }
                    break;
                  case 1:
                    // Check Inst{19-19} for singleton decoding...
                    if (fieldFromInstruction32(insn, 19, 1) == 1) {
                      MI.setOpcode(1356);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 3);
                      if (!DecodeShiftRight8Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQRSHRNuv8i8
                    }
                    break;
                  }
                  break;
                case 1:
                  // Check Inst{24} ...
                  switch (fieldFromInstruction32(insn, 24, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1352);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQRSHRNsv4i16
                    }
                  case 1:
                    {
                      MI.setOpcode(1355);
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                      if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = 0;
                      tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                      tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                      if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                      tmp = fieldFromInstruction32(insn, 16, 4);
                      if (!DecodeShiftRight16Imm(MI, tmp, Address, Decoder)) return false;
                      return true; // VQRSHRNuv4i16
                    }
                  }
                  break;
                }
                break;
              case 1:
                // Check Inst{24} ...
                switch (fieldFromInstruction32(insn, 24, 1)) {
                case 0:
                  {
                    MI.setOpcode(1351);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VQRSHRNsv2i32
                  }
                case 1:
                  {
                    MI.setOpcode(1354);
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                    if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                    tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                    if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 5);
                    if (!DecodeShiftRight32Imm(MI, tmp, Address, Decoder)) return false;
                    return true; // VQRSHRNuv2i32
                  }
                }
                break;
              }
              break;
            case 14:
              // Check Inst{5} ...
              switch (fieldFromInstruction32(insn, 5, 1)) {
              case 0:
                // Check Inst{21-19} for singleton decoding...
                if (fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1155);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMOVv16i8
                }
                break;
              case 1:
                // Check Inst{21-19} for singleton decoding...
                if (fieldFromInstruction32(insn, 19, 3) == 0) {
                  MI.setOpcode(1158);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMOVv2i64
                }
                break;
              default:
                break; // fallthrough
              }
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                {
                  MI.setOpcode(717);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTxs2fq
                }
              case 1:
                {
                  MI.setOpcode(719);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTxu2fq
                }
              }
              break;
              break;
            case 15:
              // Check Inst{24} ...
              switch (fieldFromInstruction32(insn, 24, 1)) {
              case 0:
                {
                  MI.setOpcode(708);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTf2xsq
                }
              case 1:
                {
                  MI.setOpcode(710);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                  tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                  if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 6);
                  if (!DecodeVCVTImmOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // VCVTf2xuq
                }
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1161);
                    if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // VMOVv8i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    {
                      MI.setOpcode(1225);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VORRiv4i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(1226);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VORRiv8i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                {
                  MI.setOpcode(1160);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMOVv4i32
                }
                break;
              }
              break;
            case 1:
              // Check Inst{21-19} ...
              switch (fieldFromInstruction32(insn, 19, 3)) {
              case 0:
                // Check Inst{8} ...
                switch (fieldFromInstruction32(insn, 8, 1)) {
                case 0:
                  // Check Inst{11-10} for singleton decoding...
                  if (fieldFromInstruction32(insn, 10, 2) == 2) {
                    MI.setOpcode(1203);
                    if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                    return true; // VMVNv8i16
                  }
                  break;
                case 1:
                  // Check Inst{11} ...
                  switch (fieldFromInstruction32(insn, 11, 1)) {
                  case 0:
                    {
                      MI.setOpcode(589);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VBICiv4i32
                    }
                  case 1:
                    // Check Inst{10-10} for singleton decoding...
                    if (fieldFromInstruction32(insn, 10, 1) == 0) {
                      MI.setOpcode(590);
                      if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                      return true; // VBICiv8i16
                    }
                    break;
                  }
                  break;
                default:
                  break; // fallthrough
                }
                {
                  MI.setOpcode(1202);
                  if (!DecodeNEONModImmInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VMVNv4i32
                }
                break;
              }
              break;
            }
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 0:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1560);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSHRsv2i64
              }
            case 243:
              {
                MI.setOpcode(1568);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSHRuv2i64
              }
            }
            break;
          case 1:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1592);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSRAsv2i64
              }
            case 243:
              {
                MI.setOpcode(1600);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VSRAuv2i64
              }
            }
            break;
          case 2:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1480);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSHRsv2i64
              }
            case 243:
              {
                MI.setOpcode(1488);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSHRuv2i64
              }
            }
            break;
          case 3:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1502);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSRAsv2i64
              }
            case 243:
              {
                MI.setOpcode(1510);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
                return true; // VRSRAuv2i64
              }
            }
            break;
          case 4:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1608);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 6);
              if (!DecodeShiftRight64Imm(MI, tmp, Address, Decoder)) return false;
              return true; // VSRIv2i64
            }
            break;
          case 5:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1533);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VSHLiv2i64
              }
            case 243:
              {
                MI.setOpcode(1580);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VSLIv2i64
              }
            }
            break;
          case 6:
            // Check Inst{31-24} for singleton decoding...
            if (fieldFromInstruction32(insn, 24, 8) == 243) {
              MI.setOpcode(1371);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 6);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VQSHLsuv2i64
            }
            break;
          case 7:
            // Check Inst{31-24} ...
            switch (fieldFromInstruction32(insn, 24, 8)) {
            case 242:
              {
                MI.setOpcode(1363);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VQSHLsiv2i64
              }
            case 243:
              {
                MI.setOpcode(1387);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 6);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VQSHLuiv2i64
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return false;
}

static bool decodeNEONDupInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{27-22} ...
  switch (fieldFromInstruction32(insn, 22, 6)) {
  case 56:
    // Check Inst{5-0} ...
    switch (fieldFromInstruction32(insn, 0, 6)) {
    case 16:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{11-8} && Inst{6-6} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(1519);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 21, 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSETLNi32
        }
        break;
      case 1:
        // Check Inst{11-8} && Inst{6-6} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(744);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 21, 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VGETLNi32
        }
        break;
      }
      break;
    case 48:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{11-8} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11) {
          MI.setOpcode(1518);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 6, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 21, 1) << 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSETLNi16
        }
        break;
      case 1:
        // Check Inst{11-8} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11) {
          MI.setOpcode(745);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 6, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 21, 1) << 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VGETLNs16
        }
        break;
      }
      break;
    }
    break;
  case 57:
    // Check Inst{20} ...
    switch (fieldFromInstruction32(insn, 20, 1)) {
    case 0:
      // Check Inst{11-8} && Inst{4-0} for singleton decoding...
      if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 5) == 16) {
        MI.setOpcode(1520);
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction32(insn, 12, 4);
        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 5, 2) << 0);
        tmp |= (fieldFromInstruction32(insn, 21, 1) << 2);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
        return true; // VSETLNi8
      }
      break;
    case 1:
      // Check Inst{11-8} && Inst{4-0} for singleton decoding...
      if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 5) == 16) {
        MI.setOpcode(746);
        tmp = fieldFromInstruction32(insn, 12, 4);
        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 5, 2) << 0);
        tmp |= (fieldFromInstruction32(insn, 21, 1) << 2);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
        return true; // VGETLNs8
      }
      break;
    }
    break;
  case 58:
    // Check Inst{5-0} ...
    switch (fieldFromInstruction32(insn, 0, 6)) {
    case 16:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{11-8} && Inst{6-6} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(724);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VDUP32d
        }
        break;
      case 2:
        // Check Inst{11-8} && Inst{6-6} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
          MI.setOpcode(725);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VDUP32q
        }
        break;
      }
      break;
    case 48:
      // Check Inst{20} ...
      switch (fieldFromInstruction32(insn, 20, 1)) {
      case 0:
        // Check Inst{21} ...
        switch (fieldFromInstruction32(insn, 21, 1)) {
        case 0:
          // Check Inst{11-8} && Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(722);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VDUP16d
          }
          break;
        case 1:
          // Check Inst{11-8} && Inst{6-6} for singleton decoding...
          if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 6, 1) == 0) {
            MI.setOpcode(723);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VDUP16q
          }
          break;
        }
        break;
      case 1:
        // Check Inst{11-8} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11) {
          MI.setOpcode(747);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 6, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 21, 1) << 1);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VGETLNu16
        }
        break;
      }
      break;
    }
    break;
  case 59:
    // Check Inst{20} ...
    switch (fieldFromInstruction32(insn, 20, 1)) {
    case 0:
      // Check Inst{21} ...
      switch (fieldFromInstruction32(insn, 21, 1)) {
      case 0:
        // Check Inst{11-8} && Inst{6-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 7) == 16) {
          MI.setOpcode(726);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VDUP8d
        }
        break;
      case 1:
        // Check Inst{11-8} && Inst{6-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 7) == 16) {
          MI.setOpcode(727);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeQPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VDUP8q
        }
        break;
      }
      break;
    case 1:
      // Check Inst{11-8} && Inst{4-0} for singleton decoding...
      if (fieldFromInstruction32(insn, 8, 4) == 11 && fieldFromInstruction32(insn, 0, 5) == 16) {
        MI.setOpcode(748);
        tmp = fieldFromInstruction32(insn, 12, 4);
        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
        tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
        if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = 0;
        tmp |= (fieldFromInstruction32(insn, 5, 2) << 0);
        tmp |= (fieldFromInstruction32(insn, 21, 1) << 2);
        MI.addOperand(MCOperand::CreateImm(tmp));
        tmp = fieldFromInstruction32(insn, 28, 4);
        if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
        return true; // VGETLNu8
      }
      break;
    }
    break;
  }

  return false;
}

static bool decodeNEONLoadStoreInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{11-8} ...
  switch (fieldFromInstruction32(insn, 8, 4)) {
  case 0:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1794);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST4d8
          }
          else
            {
              MI.setOpcode(1797);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST4d8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1786);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST4d16
          }
          else
            {
              MI.setOpcode(1789);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST4d16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1790);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST4d32
          }
          else
            {
              MI.setOpcode(1793);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST4d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1617);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST1LNd8
          }
          else
            {
              MI.setOpcode(1618);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST1LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1026);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD4d8
          }
          else
            {
              MI.setOpcode(1029);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4d8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1018);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD4d16
          }
          else
            {
              MI.setOpcode(1021);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4d16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1022);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD4d32
          }
          else
            {
              MI.setOpcode(1025);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(795);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD1LNd8
          }
          else
            {
              MI.setOpcode(796);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD1LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1808);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST4q8
          }
          else
            {
              MI.setOpcode(1810);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST4q8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1798);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST4q16
          }
          else
            {
              MI.setOpcode(1800);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST4q16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1803);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST4q32
          }
          else
            {
              MI.setOpcode(1805);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST4q32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(1677);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // VST2LNd8
        }
        else
          {
            MI.setOpcode(1680);
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST2LNd8_UPD
          }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1040);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD4q8
          }
          else
            {
              MI.setOpcode(1042);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4q8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1030);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD4q16
          }
          else
            {
              MI.setOpcode(1032);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4q16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1035);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD4q32
          }
          else
            {
              MI.setOpcode(1037);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4q32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(873);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // VLD2LNd8
        }
        else
          {
            MI.setOpcode(876);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD2LNd8_UPD
          }
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1648);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST1d8Q
          }
          else
            {
              MI.setOpcode(1649);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d8Q_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1626);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST1d16Q
          }
          else
            {
              MI.setOpcode(1627);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d16Q_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1632);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST1d32Q
          }
          else
            {
              MI.setOpcode(1633);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d32Q_UPD
            }
          break;
        case 3:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1638);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST1d64Q
          }
          else
            {
              MI.setOpcode(1641);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d64Q_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1727);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST3LNd8
          }
          else
            {
              MI.setOpcode(1730);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST3LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(826);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1d8Q
          }
          else
            {
              MI.setOpcode(827);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d8Q_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(804);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1d16Q
          }
          else
            {
              MI.setOpcode(805);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d16Q_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(810);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1d32Q
          }
          else
            {
              MI.setOpcode(811);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d32Q_UPD
            }
          break;
        case 3:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(816);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1d64Q
          }
          else
            {
              MI.setOpcode(819);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d64Q_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(941);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD3LNd8
          }
          else
            {
              MI.setOpcode(944);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 5, 3);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD3LNd8_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 3:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1715);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST2q8
          }
          else
            {
              MI.setOpcode(1718);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2q8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1707);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST2q16
          }
          else
            {
              MI.setOpcode(1710);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2q16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1711);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST2q32
          }
          else
            {
              MI.setOpcode(1714);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2q32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(1774);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // VST4LNd8
        }
        else
          {
            MI.setOpcode(1777);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST4LNd8_UPD
          }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction32(insn, 6, 2)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(911);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2q8
          }
          else
            {
              MI.setOpcode(914);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2q8_UPD
            }
          break;
        case 1:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(903);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2q16
          }
          else
            {
              MI.setOpcode(906);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2q16_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(907);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2q32
          }
          else
            {
              MI.setOpcode(910);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2q32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{3-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 0, 4) == 15) {
          MI.setOpcode(1006);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
          if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // VLD4LNd8
        }
        else
          {
            MI.setOpcode(1009);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD4LNd8_UPD
          }
        break;
      }
      break;
    }
    break;
  case 4:
    // Check Inst{21-20} ...
    switch (fieldFromInstruction32(insn, 20, 2)) {
    case 0:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-5} ...
        switch (fieldFromInstruction32(insn, 5, 3)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1747);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST3d8
          }
          else
            {
              MI.setOpcode(1750);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST3d8_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1739);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST3d16
          }
          else
            {
              MI.setOpcode(1742);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST3d16_UPD
            }
          break;
        case 4:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1743);
            if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VST3d32
          }
          else
            {
              MI.setOpcode(1746);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST3d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{5} ...
        switch (fieldFromInstruction32(insn, 5, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1613);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 5);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST1LNd16
          }
          else
            {
              MI.setOpcode(1614);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 5);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST1LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{31-23} ...
      switch (fieldFromInstruction32(insn, 23, 9)) {
      case 488:
        // Check Inst{7-5} ...
        switch (fieldFromInstruction32(insn, 5, 3)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(961);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3d8
          }
          else
            {
              MI.setOpcode(964);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3d8_UPD
            }
          break;
        case 2:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(953);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3d16
          }
          else
            {
              MI.setOpcode(956);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3d16_UPD
            }
          break;
        case 4:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(957);
            if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3d32
          }
          else
            {
              MI.setOpcode(960);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3d32_UPD
            }
          break;
        }
        break;
      case 489:
        // Check Inst{5} ...
        switch (fieldFromInstruction32(insn, 5, 1)) {
        case 0:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(791);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD1LNd16
          }
          else
            {
              MI.setOpcode(792);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD1LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 5:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1761);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST3q8
            }
            else
              {
                MI.setOpcode(1763);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST3q8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1751);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST3q16
            }
            else
              {
                MI.setOpcode(1753);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST3q16_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1756);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST3q32
            }
            else
              {
                MI.setOpcode(1758);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST3q32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1669);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST2LNd16
          }
          else
            {
              MI.setOpcode(1672);
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST2LNd16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(975);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3q8
            }
            else
              {
                MI.setOpcode(977);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD3q8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(965);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3q16
            }
            else
              {
                MI.setOpcode(967);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD3q16_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(970);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3q32
            }
            else
              {
                MI.setOpcode(972);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD3q32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(865);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD2LNd16
          }
          else
            {
              MI.setOpcode(868);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD2LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1681);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST2LNq16
          }
          else
            {
              MI.setOpcode(1684);
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST2LNq16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(877);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD2LNq16
          }
          else
            {
              MI.setOpcode(880);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD2LNq16_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 6:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1650);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d8T
            }
            else
              {
                MI.setOpcode(1651);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d8T_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1628);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d16T
            }
            else
              {
                MI.setOpcode(1629);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d16T_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1634);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d32T
            }
            else
              {
                MI.setOpcode(1635);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d32T_UPD
              }
            break;
          case 3:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1642);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d64T
            }
            else
              {
                MI.setOpcode(1645);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d64T_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1719);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST3LNd16
            }
            else
              {
                MI.setOpcode(1722);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 6, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VST3LNd16_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(828);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d8T
            }
            else
              {
                MI.setOpcode(829);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d8T_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(806);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d16T
            }
            else
              {
                MI.setOpcode(807);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d16T_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(812);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d32T
            }
            else
              {
                MI.setOpcode(813);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d32T_UPD
              }
            break;
          case 3:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(820);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d64T
            }
            else
              {
                MI.setOpcode(823);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d64T_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{4} ...
          switch (fieldFromInstruction32(insn, 4, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(933);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD3LNd16
            }
            else
              {
                MI.setOpcode(936);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 6, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VLD3LNd16_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1731);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST3LNq16
            }
            else
              {
                MI.setOpcode(1734);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 6, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VST3LNq16_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{4} ...
        switch (fieldFromInstruction32(insn, 4, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(945);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD3LNq16
            }
            else
              {
                MI.setOpcode(948);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 6, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VLD3LNq16_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 7:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1647);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d8
            }
            else
              {
                MI.setOpcode(1652);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1625);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d16
            }
            else
              {
                MI.setOpcode(1630);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d16_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1631);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d32
            }
            else
              {
                MI.setOpcode(1636);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d32_UPD
              }
            break;
          case 3:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1637);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1d64
            }
            else
              {
                MI.setOpcode(1646);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1d64_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1766);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST4LNd16
          }
          else
            {
              MI.setOpcode(1769);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST4LNd16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7-6} ...
          switch (fieldFromInstruction32(insn, 6, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(825);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d8
            }
            else
              {
                MI.setOpcode(830);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(803);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d16
            }
            else
              {
                MI.setOpcode(808);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d16_UPD
              }
            break;
          case 2:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(809);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d32
            }
            else
              {
                MI.setOpcode(814);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d32_UPD
              }
            break;
          case 3:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(815);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1d64
            }
            else
              {
                MI.setOpcode(824);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1d64_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(998);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD4LNd16
          }
          else
            {
              MI.setOpcode(1001);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD4LNd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1778);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST4LNq16
          }
          else
            {
              MI.setOpcode(1781);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST4LNq16_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1010);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 6, 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD4LNq16
          }
          else
            {
              MI.setOpcode(1013);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 6, 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD4LNq16_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 8:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1703);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2d8
            }
            else
              {
                MI.setOpcode(1706);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST2d8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1699);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2d32
            }
            else
              {
                MI.setOpcode(1702);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST2d32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1615);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 7, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST1LNd32
          }
          else
            {
              MI.setOpcode(1616);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST1LNd32_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(899);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2d8
            }
            else
              {
                MI.setOpcode(902);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD2d8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(895);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2d32
            }
            else
              {
                MI.setOpcode(898);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD2d32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(793);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 7, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD1LNd32
          }
          else
            {
              MI.setOpcode(794);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD1LNd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 488:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1695);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2d16
            }
            else
              {
                MI.setOpcode(1698);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST2d16_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 488:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(891);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2d16
            }
            else
              {
                MI.setOpcode(894);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD2d16_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 9:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1693);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2b8
            }
            else
              {
                MI.setOpcode(1694);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST2b8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1691);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2b32
            }
            else
              {
                MI.setOpcode(1692);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST2b32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1673);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST2LNd32
            }
            else
              {
                MI.setOpcode(1676);
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VST2LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(889);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2b8
            }
            else
              {
                MI.setOpcode(890);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD2b8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(887);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2b32
            }
            else
              {
                MI.setOpcode(888);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD2b32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(869);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD2LNd32
            }
            else
              {
                MI.setOpcode(872);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VLD2LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1689);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST2b16
            }
            else
              {
                MI.setOpcode(1690);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST2b16_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1685);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST2LNq32
            }
            else
              {
                MI.setOpcode(1688);
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VST2LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(885);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2b16
            }
            else
              {
                MI.setOpcode(886);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD2b16_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5} ...
          switch (fieldFromInstruction32(insn, 5, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(881);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD2LNq32
            }
            else
              {
                MI.setOpcode(884);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 4, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VLD2LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 10:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1665);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1q8
            }
            else
              {
                MI.setOpcode(1668);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1q8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1657);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1q32
            }
            else
              {
                MI.setOpcode(1660);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1q32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1723);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST3LNd32
            }
            else
              {
                MI.setOpcode(1726);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VST3LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(843);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1q8
            }
            else
              {
                MI.setOpcode(846);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1q8_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(835);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1q32
            }
            else
              {
                MI.setOpcode(838);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1q32_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(937);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD3LNd32
            }
            else
              {
                MI.setOpcode(940);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VLD3LNd32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1653);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1q16
            }
            else
              {
                MI.setOpcode(1656);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1q16_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1661);
              if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VST1q64
            }
            else
              {
                MI.setOpcode(1664);
                if (!DecodeVSTInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VST1q64_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(1735);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST3LNq32
            }
            else
              {
                MI.setOpcode(1738);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VST3LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 488:
          // Check Inst{7} ...
          switch (fieldFromInstruction32(insn, 7, 1)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(831);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1q16
            }
            else
              {
                MI.setOpcode(834);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1q16_UPD
              }
            break;
          case 1:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(839);
              if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1q64
            }
            else
              {
                MI.setOpcode(842);
                if (!DecodeVLDInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD1q64_UPD
              }
            break;
          }
          break;
        case 489:
          // Check Inst{5-4} ...
          switch (fieldFromInstruction32(insn, 4, 2)) {
          case 0:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(949);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD3LNq32
            }
            else
              {
                MI.setOpcode(952);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 7, 1);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // VLD3LNq32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 11:
    // Check Inst{6} ...
    switch (fieldFromInstruction32(insn, 6, 1)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1770);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 7, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST4LNd32
          }
          else
            {
              MI.setOpcode(1773);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST4LNd32_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1002);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 7, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD4LNd32
          }
          else
            {
              MI.setOpcode(1005);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD4LNd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 0:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1782);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 7, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VST4LNq32
          }
          else
            {
              MI.setOpcode(1785);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VST4LNq32_UPD
            }
          break;
        }
        break;
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1014);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 7, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // VLD4LNq32
          }
          else
            {
              MI.setOpcode(1017);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeAddrMode6Operand(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 7, 1);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // VLD4LNq32_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 12:
    // Check Inst{7-5} ...
    switch (fieldFromInstruction32(insn, 5, 3)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(777);
            if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1DUPd8
          }
          else
            {
              MI.setOpcode(778);
              if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1DUPd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(787);
            if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1DUPq8
          }
          else
            {
              MI.setOpcode(790);
              if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1DUPq8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(773);
            if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1DUPd16
          }
          else
            {
              MI.setOpcode(774);
              if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1DUPd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(779);
            if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1DUPq16
          }
          else
            {
              MI.setOpcode(782);
              if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1DUPq16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(775);
            if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1DUPd32
          }
          else
            {
              MI.setOpcode(776);
              if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1DUPd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 5:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(783);
            if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD1DUPq32
          }
          else
            {
              MI.setOpcode(786);
              if (!DecodeVLD1DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD1DUPq32_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 13:
    // Check Inst{7-5} ...
    switch (fieldFromInstruction32(insn, 5, 3)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(859);
            if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2DUPd8
          }
          else
            {
              MI.setOpcode(862);
              if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2DUPd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(863);
            if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2DUPd8x2
          }
          else
            {
              MI.setOpcode(864);
              if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2DUPd8x2_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(847);
            if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2DUPd16
          }
          else
            {
              MI.setOpcode(850);
              if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2DUPd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(851);
            if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2DUPd16x2
          }
          else
            {
              MI.setOpcode(852);
              if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2DUPd16x2_UPD
            }
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(853);
            if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2DUPd32
          }
          else
            {
              MI.setOpcode(856);
              if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2DUPd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 5:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(857);
            if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD2DUPd32x2
          }
          else
            {
              MI.setOpcode(858);
              if (!DecodeVLD2DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD2DUPd32x2_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 14:
    // Check Inst{7-5} ...
    switch (fieldFromInstruction32(insn, 5, 3)) {
    case 0:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(927);
            if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3DUPd8
          }
          else
            {
              MI.setOpcode(930);
              if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3DUPd8_UPD
            }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(931);
            if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3DUPd8x2
          }
          else
            {
              MI.setOpcode(932);
              if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3DUPd8x2_UPD
            }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(915);
            if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3DUPd16
          }
          else
            {
              MI.setOpcode(918);
              if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3DUPd16_UPD
            }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(919);
            if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3DUPd16x2
          }
          else
            {
              MI.setOpcode(920);
              if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3DUPd16x2_UPD
            }
          break;
        }
        break;
      }
      break;
    case 4:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(921);
            if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3DUPd32
          }
          else
            {
              MI.setOpcode(924);
              if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3DUPd32_UPD
            }
          break;
        }
        break;
      }
      break;
    case 5:
      // Check Inst{21-20} ...
      switch (fieldFromInstruction32(insn, 20, 2)) {
      case 2:
        // Check Inst{31-23} ...
        switch (fieldFromInstruction32(insn, 23, 9)) {
        case 489:
          // Check Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(925);
            if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
            return true; // VLD3DUPd32x2
          }
          else
            {
              MI.setOpcode(926);
              if (!DecodeVLD3DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD3DUPd32x2_UPD
            }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 15:
    // Check Inst{5} ...
    switch (fieldFromInstruction32(insn, 5, 1)) {
    case 0:
      // Check Inst{7} ...
      switch (fieldFromInstruction32(insn, 7, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(992);
                if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD4DUPd8
              }
              else
                {
                  MI.setOpcode(995);
                  if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VLD4DUPd8_UPD
                }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(980);
                if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD4DUPd16
              }
              else
                {
                  MI.setOpcode(983);
                  if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VLD4DUPd16_UPD
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction32(insn, 20, 2)) {
        case 2:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(986);
              if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4DUPd32
            }
            else
              {
                MI.setOpcode(989);
                if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD4DUPd32_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{7} ...
      switch (fieldFromInstruction32(insn, 7, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(996);
                if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD4DUPd8x2
              }
              else
                {
                  MI.setOpcode(997);
                  if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VLD4DUPd8x2_UPD
                }
              break;
            }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 2:
            // Check Inst{31-23} ...
            switch (fieldFromInstruction32(insn, 23, 9)) {
            case 489:
              // Check Inst{3-0} for singleton decoding...
              if (fieldFromInstruction32(insn, 0, 4) == 15) {
                MI.setOpcode(984);
                if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD4DUPd16x2
              }
              else
                {
                  MI.setOpcode(985);
                  if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                  return true; // VLD4DUPd16x2_UPD
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{21-20} ...
        switch (fieldFromInstruction32(insn, 20, 2)) {
        case 2:
          // Check Inst{31-23} ...
          switch (fieldFromInstruction32(insn, 23, 9)) {
          case 489:
            // Check Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 0, 4) == 15) {
              MI.setOpcode(990);
              if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
              return true; // VLD4DUPd32x2
            }
            else
              {
                MI.setOpcode(991);
                if (!DecodeVLD4DupInstruction(MI, insn, Address, Decoder)) return false;
                return true; // VLD4DUPd32x2_UPD
              }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return false;
}


static uint16_t fieldFromInstruction16(uint16_t insn, unsigned startBit, unsigned numBits)
{
  assert(startBit + numBits <= 16 && "Instruction field out of bounds!");

  uint16_t fieldMask;

  if (numBits == 16)
    fieldMask = (uint16_t)-1;
  else
    fieldMask = ((1 << numBits) - 1) << startBit;

  return (insn & fieldMask) >> startBit;
}

static bool decodeThumbInstruction16(MCInst &MI, uint16_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{15-12} ...
  switch (fieldFromInstruction16(insn, 12, 4)) {
  case 0:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      // Check Inst{10-6} for singleton decoding...
      if (fieldFromInstruction16(insn, 6, 5) == 0) {
        MI.setOpcode(2318);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        return true; // tMOVSr
      }
      else
        {
          MI.setOpcode(2313);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 6, 5);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // tLSLri
        }
      break;
    case 1:
      {
        MI.setOpcode(2315);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 6, 5);
        if (!DecodeThumbSRImm(MI, tmp, Address, Decoder)) return false;
        return true; // tLSRri
      }
    }
    break;
  case 1:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2266);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 6, 5);
        if (!DecodeThumbSRImm(MI, tmp, Address, Decoder)) return false;
        return true; // tASRri
      }
    case 1:
      // Check Inst{10-9} ...
      switch (fieldFromInstruction16(insn, 9, 2)) {
      case 0:
        {
          MI.setOpcode(2259);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 6, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // tADDrr
        }
      case 1:
        {
          MI.setOpcode(2348);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 6, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // tSUBrr
        }
      case 2:
        {
          MI.setOpcode(2255);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 6, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // tADDi3
        }
      case 3:
        {
          MI.setOpcode(2346);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 6, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // tSUBi3
        }
      }
      break;
    }
    break;
  case 2:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2319);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tMOVi8
      }
    case 1:
      {
        MI.setOpcode(2291);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tCMPi8
      }
    }
    break;
  case 3:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2256);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tADDi8
      }
    case 1:
      {
        MI.setOpcode(2347);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tSUBi8
      }
    }
    break;
  case 4:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      // Check Inst{10-8} ...
      switch (fieldFromInstruction16(insn, 8, 3)) {
      case 0:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          {
            MI.setOpcode(2265);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tAND
          }
        case 1:
          {
            MI.setOpcode(2294);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tEOR
          }
        case 2:
          {
            MI.setOpcode(2314);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tLSLrr
          }
        case 3:
          {
            MI.setOpcode(2316);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tLSRrr
          }
        }
        break;
      case 1:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          {
            MI.setOpcode(2267);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tASRrr
          }
        case 1:
          {
            MI.setOpcode(2253);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tADC
          }
        case 2:
          {
            MI.setOpcode(2334);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tSBC
          }
        case 3:
          {
            MI.setOpcode(2332);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tROR
          }
        }
        break;
      case 2:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          {
            MI.setOpcode(2359);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tTST
          }
        case 1:
          {
            MI.setOpcode(2333);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tRSB
          }
        case 2:
          {
            MI.setOpcode(2292);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tCMPr
          }
        case 3:
          {
            MI.setOpcode(2289);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tCMNz
          }
        }
        break;
      case 3:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          {
            MI.setOpcode(2324);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tORR
          }
        case 1:
          {
            MI.setOpcode(2321);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tMUL
          }
        case 2:
          {
            MI.setOpcode(2269);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tBIC
          }
        case 3:
          {
            MI.setOpcode(2322);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tMVN
          }
        }
        break;
      case 4:
        // Check Inst{6-3} for singleton decoding...
        if (fieldFromInstruction16(insn, 3, 4) == 13) {
          MI.setOpcode(2257);
          if (!DecodeThumbAddSPReg(MI, insn, Address, Decoder)) return false;
          return true; // tADDrSP
        }
        else
          // Check Inst{7-7} && Inst{2-0} for singleton decoding...
          if (fieldFromInstruction16(insn, 7, 1) == 1 && fieldFromInstruction16(insn, 0, 3) == 5) {
            MI.setOpcode(2261);
            if (!DecodeThumbAddSPReg(MI, insn, Address, Decoder)) return false;
            return true; // tADDspr
          }
          else
            {
              MI.setOpcode(2254);
              tmp = 0;
              tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
              tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
              tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction16(insn, 3, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // tADDhirr
            }
        break;
      case 5:
        {
          MI.setOpcode(2290);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
          tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // tCMPhir
        }
      case 6:
        {
          MI.setOpcode(2320);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 3) << 0);
          tmp |= (fieldFromInstruction16(insn, 7, 1) << 3);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 3, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // tMOVr
        }
      case 7:
        // Check Inst{7} ...
        switch (fieldFromInstruction16(insn, 7, 1)) {
        case 0:
          // Check Inst{2-0} for singleton decoding...
          if (fieldFromInstruction16(insn, 0, 3) == 0) {
            MI.setOpcode(2279);
            tmp = fieldFromInstruction16(insn, 3, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tBX
          }
          break;
        case 1:
          // Check Inst{2-0} for singleton decoding...
          if (fieldFromInstruction16(insn, 0, 3) == 0) {
            MI.setOpcode(2274);
            tmp = fieldFromInstruction16(insn, 3, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tBLXr
          }
          break;
        }
        break;
      }
      break;
    case 1:
      {
        MI.setOpcode(2307);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!DecodeThumbAddrModePC(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRpciDIS
      }
    }
    break;
  case 5:
    // Check Inst{11-9} ...
    switch (fieldFromInstruction16(insn, 9, 3)) {
    case 0:
      {
        MI.setOpcode(2344);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!DecodeThumbAddrModeRR(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRr
      }
    case 1:
      {
        MI.setOpcode(2342);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!DecodeThumbAddrModeRR(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRHr
      }
    case 2:
      {
        MI.setOpcode(2340);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!DecodeThumbAddrModeRR(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRBr
      }
    case 3:
      {
        MI.setOpcode(2303);
        tmp = fieldFromInstruction16(insn, 3, 6);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tLDRSB
      }
    case 4:
      {
        MI.setOpcode(2309);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!DecodeThumbAddrModeRR(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRr
      }
    case 5:
      {
        MI.setOpcode(2302);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!DecodeThumbAddrModeRR(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRHr
      }
    case 6:
      {
        MI.setOpcode(2300);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 6);
        if (!DecodeThumbAddrModeRR(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRBr
      }
    case 7:
      {
        MI.setOpcode(2304);
        tmp = fieldFromInstruction16(insn, 3, 6);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tLDRSH
      }
    }
    break;
  case 6:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2343);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!DecodeThumbAddrModeIS(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRi
      }
    case 1:
      {
        MI.setOpcode(2305);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!DecodeThumbAddrModeIS(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRi
      }
    }
    break;
  case 7:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2339);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!DecodeThumbAddrModeIS(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRBi
      }
    case 1:
      {
        MI.setOpcode(2299);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!DecodeThumbAddrModeIS(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRBi
      }
    }
    break;
  case 8:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2341);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!DecodeThumbAddrModeIS(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRHi
      }
    case 1:
      {
        MI.setOpcode(2301);
        tmp = fieldFromInstruction16(insn, 0, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 3, 8);
        if (!DecodeThumbAddrModeIS(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRHi
      }
    }
    break;
  case 9:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2345);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!DecodeThumbAddrModeSP(MI, tmp, Address, Decoder)) return false;
        return true; // tSTRspi
      }
    case 1:
      {
        MI.setOpcode(2310);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!DecodeThumbAddrModeSP(MI, tmp, Address, Decoder)) return false;
        return true; // tLDRspi
      }
    }
    break;
  case 10:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2264);
        if (!DecodeThumbAddSpecialReg(MI, insn, Address, Decoder)) return false;
        return true; // tADR
      }
    case 1:
      {
        MI.setOpcode(2258);
        if (!DecodeThumbAddSpecialReg(MI, insn, Address, Decoder)) return false;
        return true; // tADDrSPi
      }
    }
    break;
  case 11:
    // Check Inst{11-10} ...
    switch (fieldFromInstruction16(insn, 10, 2)) {
    case 0:
      // Check Inst{8} ...
      switch (fieldFromInstruction16(insn, 8, 1)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction16(insn, 7, 1)) {
        case 0:
          // Check Inst{9} ...
          switch (fieldFromInstruction16(insn, 9, 1)) {
          case 0:
            {
              MI.setOpcode(2260);
              if (!DecodeThumbAddSPImm(MI, insn, Address, Decoder)) return false;
              return true; // tADDspi
            }
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction16(insn, 6, 1)) {
            case 0:
              {
                MI.setOpcode(2352);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // tSXTH
              }
            case 1:
              {
                MI.setOpcode(2351);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // tSXTB
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{9} ...
          switch (fieldFromInstruction16(insn, 9, 1)) {
          case 0:
            {
              MI.setOpcode(2349);
              if (!DecodeThumbAddSPImm(MI, insn, Address, Decoder)) return false;
              return true; // tSUBspi
            }
          case 1:
            // Check Inst{6} ...
            switch (fieldFromInstruction16(insn, 6, 1)) {
            case 0:
              {
                MI.setOpcode(2361);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // tUXTH
              }
            case 1:
              {
                MI.setOpcode(2360);
                tmp = fieldFromInstruction16(insn, 0, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction16(insn, 3, 3);
                if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                return true; // tUXTB
              }
            }
            break;
          }
          break;
        }
        break;
      case 1:
        {
          MI.setOpcode(2287);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 3, 5) << 0);
          tmp |= (fieldFromInstruction16(insn, 9, 1) << 5);
          if (!DecodeThumbCmpBROperand(MI, tmp, Address, Decoder)) return false;
          return true; // tCBZ
        }
      }
      break;
    case 1:
      // Check Inst{9} ...
      switch (fieldFromInstruction16(insn, 9, 1)) {
      case 0:
        {
          MI.setOpcode(2328);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction16(insn, 8, 1) << 14);
          if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // tPUSH
        }
      case 1:
        // Check Inst{8-5} ...
        switch (fieldFromInstruction16(insn, 5, 4)) {
        case 2:
          // Check Inst{4-4} && Inst{2-0} for singleton decoding...
          if (fieldFromInstruction16(insn, 4, 1) == 1 && fieldFromInstruction16(insn, 0, 3) == 0) {
            MI.setOpcode(2335);
            tmp = fieldFromInstruction16(insn, 3, 1);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // tSETEND
          }
          break;
        case 3:
          // Check Inst{3-3} for singleton decoding...
          if (fieldFromInstruction16(insn, 3, 1) == 0) {
            MI.setOpcode(2293);
            if (!DecodeThumbCPS(MI, insn, Address, Decoder)) return false;
            return true; // tCPS
          }
          break;
        }
        break;
      }
      break;
    case 2:
      // Check Inst{8} ...
      switch (fieldFromInstruction16(insn, 8, 1)) {
      case 0:
        // Check Inst{7-6} ...
        switch (fieldFromInstruction16(insn, 6, 2)) {
        case 0:
          // Check Inst{9-9} for singleton decoding...
          if (fieldFromInstruction16(insn, 9, 1) == 1) {
            MI.setOpcode(2329);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tREV
          }
          break;
        case 1:
          // Check Inst{9-9} for singleton decoding...
          if (fieldFromInstruction16(insn, 9, 1) == 1) {
            MI.setOpcode(2330);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tREV16
          }
          break;
        case 3:
          // Check Inst{9-9} for singleton decoding...
          if (fieldFromInstruction16(insn, 9, 1) == 1) {
            MI.setOpcode(2331);
            tmp = fieldFromInstruction16(insn, 0, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction16(insn, 3, 3);
            if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // tREVSH
          }
          break;
        }
        break;
      case 1:
        {
          MI.setOpcode(2286);
          tmp = fieldFromInstruction16(insn, 0, 3);
          if (!DecodetGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 3, 5) << 0);
          tmp |= (fieldFromInstruction16(insn, 9, 1) << 5);
          if (!DecodeThumbCmpBROperand(MI, tmp, Address, Decoder)) return false;
          return true; // tCBNZ
        }
      }
      break;
    case 3:
      // Check Inst{9} ...
      switch (fieldFromInstruction16(insn, 9, 1)) {
      case 0:
        {
          MI.setOpcode(2326);
          tmp = 0;
          tmp |= (fieldFromInstruction16(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction16(insn, 8, 1) << 15);
          if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // tPOP
        }
      case 1:
        // Check Inst{8} ...
        switch (fieldFromInstruction16(insn, 8, 1)) {
        case 0:
          {
            MI.setOpcode(2270);
            tmp = fieldFromInstruction16(insn, 0, 8);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // tBKPT
          }
        case 1:
          // Check Inst{7-0} ...
          switch (fieldFromInstruction16(insn, 0, 8)) {
          case 0:
            {
              MI.setOpcode(2323);
              return true; // tNOP
            }
          case 16:
            {
              MI.setOpcode(2364);
              return true; // tYIELD
            }
          case 32:
            {
              MI.setOpcode(2362);
              return true; // tWFE
            }
          case 48:
            {
              MI.setOpcode(2363);
              return true; // tWFI
            }
          case 64:
            {
              MI.setOpcode(2336);
              return true; // tSEV
            }
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 12:
    // Check Inst{11} ...
    switch (fieldFromInstruction16(insn, 11, 1)) {
    case 0:
      {
        MI.setOpcode(2337);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
        return true; // tSTMIA
      }
    case 1:
      {
        MI.setOpcode(2297);
        tmp = fieldFromInstruction16(insn, 8, 3);
        if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
        tmp = fieldFromInstruction16(insn, 0, 8);
        if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
        return true; // tLDMIA
      }
    }
    break;
  case 13:
    // Check Inst{11-0} for singleton decoding...
    if (fieldFromInstruction16(insn, 0, 12) == 3838) {
      MI.setOpcode(2358);
      return true; // tTRAP
    }
    else
      // Check Inst{11-8} for singleton decoding...
      if (fieldFromInstruction16(insn, 8, 4) == 15) {
        MI.setOpcode(2350);
        tmp = fieldFromInstruction16(insn, 0, 8);
        MI.addOperand(MCOperand::CreateImm(tmp));
        return true; // tSVC
      }
      else
        {
          MI.setOpcode(2284);
          tmp = fieldFromInstruction16(insn, 0, 8);
          if (!DecodeThumbBCCTargetOperand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction16(insn, 8, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // tBcc
        }
    break;
  case 14:
    // Check Inst{11-11} for singleton decoding...
    if (fieldFromInstruction16(insn, 11, 1) == 0) {
      MI.setOpcode(2268);
      tmp = fieldFromInstruction16(insn, 0, 11);
      if (!DecodeThumbBROperand(MI, tmp, Address, Decoder)) return false;
      return true; // tB
    }
    break;
  }

  return false;
}

static bool decodeThumbInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{15-11} ...
  switch (fieldFromInstruction32(insn, 11, 5)) {
  case 29:
    // Check Inst{31-27} && Inst{0-0} for singleton decoding...
    if (fieldFromInstruction32(insn, 27, 5) == 30 && fieldFromInstruction32(insn, 0, 1) == 0) {
      MI.setOpcode(2272);
      tmp = 0;
      tmp |= (fieldFromInstruction32(insn, 1, 10) << 1);
      tmp |= (fieldFromInstruction32(insn, 16, 10) << 11);
      if (!DecodeThumbBLXOffset(MI, tmp, Address, Decoder)) return false;
      return true; // tBLXi
    }
    break;
  case 31:
    // Check Inst{31-27} for singleton decoding...
    if (fieldFromInstruction32(insn, 27, 5) == 30) {
      MI.setOpcode(2271);
      tmp = 0;
      tmp |= (fieldFromInstruction32(insn, 0, 11) << 0);
      tmp |= (fieldFromInstruction32(insn, 16, 11) << 11);
      if (!DecodeThumbBLTargetOperand(MI, tmp, Address, Decoder)) return false;
      return true; // tBL
    }
    break;
  }

  return false;
}

static bool decodeThumb2Instruction16(MCInst &MI, uint16_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{15-8} for singleton decoding...
  if (fieldFromInstruction16(insn, 8, 8) == 191) {
    MI.setOpcode(1962);
    tmp = fieldFromInstruction16(insn, 4, 4);
    MI.addOperand(MCOperand::CreateImm(tmp));
    tmp = fieldFromInstruction16(insn, 0, 4);
    MI.addOperand(MCOperand::CreateImm(tmp));
    return true; // t2IT
  }

  return false;
}

static bool decodeThumb2Instruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{31-27} ...
  switch (fieldFromInstruction32(insn, 27, 5)) {
  case 29:
    // Check Inst{26-24} ...
    switch (fieldFromInstruction32(insn, 24, 3)) {
    case 0:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          {
            MI.setOpcode(2156);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2SRSDB
          }
        case 1:
          {
            MI.setOpcode(2167);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2STMIA
          }
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{15-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2088);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2RFEDB
          }
          break;
        case 1:
          {
            MI.setOpcode(1967);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDMIA
          }
        }
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          {
            MI.setOpcode(2157);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2SRSDBW
          }
        case 1:
          {
            MI.setOpcode(2168);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2STMIA_UPD
          }
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{15-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2089);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2RFEDBW
          }
          break;
        case 1:
          {
            MI.setOpcode(1969);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDMIA_UPD
          }
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{23-23} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 0, 4) == 0) {
            MI.setOpcode(2178);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2STREX
          }
          break;
        case 4:
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2179);
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2STREXB
          }
          break;
        case 5:
          // Check Inst{23-23} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2181);
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2STREXH
          }
          break;
        case 7:
          // Check Inst{23-23} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1) {
            MI.setOpcode(2180);
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2STREXD
          }
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 0:
            // Check Inst{23-23} && Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2207);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2TBB
            }
            break;
          case 15:
            // Check Inst{23-23} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0 && fieldFromInstruction32(insn, 0, 4) == 0) {
              MI.setOpcode(1980);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDREX
            }
            break;
          }
          break;
        case 1:
          // Check Inst{23-23} && Inst{15-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 8, 8) == 240) {
            MI.setOpcode(2209);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2TBH
          }
          break;
        case 4:
          // Check Inst{23-23} && Inst{11-8} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1981);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDREXB
          }
          break;
        case 5:
          // Check Inst{23-23} && Inst{11-8} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15 && fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1983);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDREXH
          }
          break;
        case 7:
          // Check Inst{23-23} && Inst{3-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 23, 1) == 1 && fieldFromInstruction32(insn, 0, 4) == 15) {
            MI.setOpcode(1982);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDREXD
          }
          break;
        }
        break;
      case 6:
        {
          MI.setOpcode(2175);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeT2Imm8S4(MI, tmp, Address, Decoder)) return false;
          return true; // t2STRD_POST
        }
      case 7:
        {
          MI.setOpcode(1977);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeT2Imm8S4(MI, tmp, Address, Decoder)) return false;
          return true; // t2LDRD_POST
        }
      }
      break;
    case 1:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          {
            MI.setOpcode(2165);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2STMDB
          }
        case 1:
          {
            MI.setOpcode(2158);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2SRSIA
          }
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          {
            MI.setOpcode(1965);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDMDB
          }
        case 1:
          // Check Inst{15-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2090);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2RFEIA
          }
          break;
        }
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          {
            MI.setOpcode(2166);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2STMDB_UPD
          }
        case 1:
          {
            MI.setOpcode(2159);
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2SRSIAW
          }
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          {
            MI.setOpcode(1966);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 16);
            if (!DecodeRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDMDB_UPD
          }
        case 1:
          // Check Inst{15-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 16) == 49152) {
            MI.setOpcode(2091);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2RFEIAW
          }
          break;
        }
        break;
      case 4:
        {
          MI.setOpcode(2177);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeT2AddrModeImm8s4(MI, tmp, Address, Decoder)) return false;
          return true; // t2STRDi8
        }
      case 5:
        {
          MI.setOpcode(1979);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeT2AddrModeImm8s4(MI, tmp, Address, Decoder)) return false;
          return true; // t2LDRDi8
        }
      case 6:
        {
          MI.setOpcode(2176);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeT2Imm8S4(MI, tmp, Address, Decoder)) return false;
          return true; // t2STRD_PRE
        }
      case 7:
        {
          MI.setOpcode(1978);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeT2Imm8S4(MI, tmp, Address, Decoder)) return false;
          return true; // t2LDRD_PRE
        }
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction32(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(2215);
          return true; // t2TSTrr
        }
        else
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2216);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2TSTrs
          }
          else
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(1929);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2ANDrr
            }
            else
              {
                MI.setOpcode(1930);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // t2ANDrs
              }
        break;
      case 1:
        // Check Inst{14-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(1938);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2BICrr
        }
        else
          {
            MI.setOpcode(1939);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2BICrs
          }
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction32(insn, 12, 3)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction32(insn, 16, 4) == 15) {
              MI.setOpcode(2041);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2MOVr
            }
            else
              {
                MI.setOpcode(2061);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // t2ORRrr
              }
            break;
          }
          break;
        case 3:
          // Check Inst{19-16} && Inst{14-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15 && fieldFromInstruction32(insn, 12, 3) == 0) {
            MI.setOpcode(2094);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2RRX
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2015);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LSLri
          }
          break;
        case 1:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2017);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            if (!DecodeThumbSRImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LSRri
          }
          break;
        case 2:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(1931);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            if (!DecodeThumbSRImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2ASRri
          }
          break;
        case 3:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2092);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2RORri
          }
          break;
        default:
          break; // fallthrough
        }
        {
          MI.setOpcode(2062);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
          tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2ORRrs
        }
        break;
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{14-12} ...
          switch (fieldFromInstruction32(insn, 12, 3)) {
          case 0:
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction32(insn, 16, 4) == 15) {
              MI.setOpcode(2054);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2MVNr
            }
            else
              {
                MI.setOpcode(2058);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // t2ORNrr
              }
            break;
          }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2055);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
          tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2MVNs
        }
        else
          {
            MI.setOpcode(2059);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2ORNrs
          }
        break;
        break;
      case 4:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(2212);
          return true; // t2TEQrr
        }
        else
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2213);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2TEQrs
          }
          else
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(1959);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2EORrr
            }
            else
              {
                MI.setOpcode(1960);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // t2EORrs
              }
        break;
      case 6:
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0) {
            MI.setOpcode(2063);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2PKHBT
          }
          break;
        case 2:
          // Check Inst{20-20} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0) {
            MI.setOpcode(2064);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2PKHTB
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction32(insn, 21, 3)) {
      case 0:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(1947);
          return true; // t2CMNzrr
        }
        else
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(1948);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2CMNzrs
          }
          else
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(1925);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2ADDrr
            }
            else
              {
                MI.setOpcode(1926);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // t2ADDrs
              }
        break;
      case 2:
        // Check Inst{14-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(1918);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2ADCrr
        }
        else
          {
            MI.setOpcode(1919);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2ADCrs
          }
        break;
      case 3:
        // Check Inst{14-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2107);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2SBCrr
        }
        else
          {
            MI.setOpcode(2108);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2SBCrs
          }
        break;
      case 5:
        // Check Inst{20-20} && Inst{14-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 4, 11) == 240) {
          MI.setOpcode(1950);
          return true; // t2CMPrr
        }
        else
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(1951);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2CMPrs
          }
          else
            // Check Inst{14-12} && Inst{7-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
              MI.setOpcode(2199);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2SUBrr
            }
            else
              {
                MI.setOpcode(2200);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 20, 1);
                if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
                return true; // t2SUBrs
              }
        break;
      case 6:
        // Check Inst{14-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2098);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2RSBrr
        }
        else
          {
            MI.setOpcode(2099);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 4, 4) << 5);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 9);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2RSBrs
          }
        break;
      }
      break;
    case 4:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction32(insn, 20, 4)) {
      case 4:
        {
          MI.setOpcode(2021);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 4, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2MCRR
        }
      case 5:
        {
          MI.setOpcode(2046);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 4, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2MRRC
        }
      }
      break;
    case 6:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        {
          MI.setOpcode(2288);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // tCDP
        }
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          {
            MI.setOpcode(2019);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2MCR
          }
        case 1:
          {
            MI.setOpcode(2044);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2MRC
          }
        }
        break;
      }
      break;
    }
    break;
  case 30:
    // Check Inst{15} ...
    switch (fieldFromInstruction32(insn, 15, 1)) {
    case 0:
      // Check Inst{25-24} ...
      switch (fieldFromInstruction32(insn, 24, 2)) {
      case 0:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction32(insn, 21, 3)) {
        case 0:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2214);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            return true; // t2TSTri
          }
          else
            {
              MI.setOpcode(1928);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2ANDri
            }
          break;
        case 1:
          {
            MI.setOpcode(1937);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2BICri
          }
        case 2:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2037);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2MOVi
          }
          else
            {
              MI.setOpcode(2060);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2ORRri
            }
          break;
        case 3:
          // Check Inst{19-16} for singleton decoding...
          if (fieldFromInstruction32(insn, 16, 4) == 15) {
            MI.setOpcode(2053);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2MVNi
          }
          else
            {
              MI.setOpcode(2057);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2ORNri
            }
          break;
        case 4:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(2211);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            return true; // t2TEQri
          }
          else
            {
              MI.setOpcode(1958);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2EORri
            }
          break;
        }
        break;
      case 1:
        // Check Inst{23-21} ...
        switch (fieldFromInstruction32(insn, 21, 3)) {
        case 0:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(1946);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            return true; // t2CMNzri
          }
          else
            {
              MI.setOpcode(1923);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2ADDri
            }
          break;
        case 2:
          {
            MI.setOpcode(1917);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2ADCri
          }
        case 3:
          {
            MI.setOpcode(2106);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2SBCri
          }
        case 5:
          // Check Inst{20-20} && Inst{11-8} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 1 && fieldFromInstruction32(insn, 8, 4) == 15) {
            MI.setOpcode(1949);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            return true; // t2CMPri
          }
          else
            {
              MI.setOpcode(2197);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 20, 1);
              if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
              return true; // t2SUBri
            }
          break;
        case 6:
          {
            MI.setOpcode(2097);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
            tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
            if (!DecodeT2SOImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2RSBri
          }
        }
        break;
      case 2:
        // Check Inst{22} ...
        switch (fieldFromInstruction32(insn, 22, 1)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{21} ...
            switch (fieldFromInstruction32(insn, 21, 1)) {
            case 0:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 0) {
                MI.setOpcode(1924);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
                tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2ADDri12
              }
              break;
            case 1:
              // Check Inst{23-23} for singleton decoding...
              if (fieldFromInstruction32(insn, 23, 1) == 1) {
                MI.setOpcode(2198);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
                tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2SUBri12
              }
              break;
            default:
              break; // fallthrough
            }
            // Check Inst{19-16} for singleton decoding...
            if (fieldFromInstruction32(insn, 16, 4) == 15) {
              MI.setOpcode(1927);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 21, 1) << 12);
              tmp |= (fieldFromInstruction32(insn, 23, 1) << 12);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // t2ADR
            }
            break;
            break;
          }
          break;
        case 1:
          // Check Inst{23} ...
          switch (fieldFromInstruction32(insn, 23, 1)) {
          case 0:
            // Check Inst{21-20} for singleton decoding...
            if (fieldFromInstruction32(insn, 20, 2) == 0) {
              MI.setOpcode(2038);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 12);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // t2MOVi16
            }
            break;
          case 1:
            // Check Inst{21-20} for singleton decoding...
            if (fieldFromInstruction32(insn, 20, 2) == 0) {
              MI.setOpcode(2033);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 8);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 12);
              tmp |= (fieldFromInstruction32(insn, 26, 1) << 11);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // t2MOVTi16
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{23-22} ...
        switch (fieldFromInstruction32(insn, 22, 2)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{21-21} && Inst{14-12} && Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 21, 1) == 1 && fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(2161);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SSAT16
            }
            else
              {
                MI.setOpcode(2160);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                tmp |= (fieldFromInstruction32(insn, 21, 1) << 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2SSAT
              }
            break;
          }
          break;
        case 1:
          // Check Inst{21-20} ...
          switch (fieldFromInstruction32(insn, 20, 2)) {
          case 0:
            {
              MI.setOpcode(2109);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 0, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // t2SBFX
            }
          case 2:
            // Check Inst{5} ...
            switch (fieldFromInstruction32(insn, 5, 1)) {
            case 0:
              // Check Inst{26} ...
              switch (fieldFromInstruction32(insn, 26, 1)) {
              case 0:
                // Check Inst{19-16} for singleton decoding...
                if (fieldFromInstruction32(insn, 16, 4) == 15) {
                  MI.setOpcode(1934);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 5) << 5);
                  tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                  tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                  if (!DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // t2BFC
                }
                else
                  {
                    MI.setOpcode(1935);
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 8, 4);
                    if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 16, 4);
                    if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = 0;
                    tmp |= (fieldFromInstruction32(insn, 0, 5) << 5);
                    tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                    tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                    if (!DecodeBitfieldMaskOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // t2BFI
                  }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{21-21} && Inst{14-12} && Inst{7-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 21, 1) == 1 && fieldFromInstruction32(insn, 12, 3) == 0 && fieldFromInstruction32(insn, 6, 2) == 0) {
              MI.setOpcode(2240);
              tmp = fieldFromInstruction32(insn, 0, 5);
              MI.addOperand(MCOperand::CreateImm(tmp));
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2USAT16
            }
            else
              {
                MI.setOpcode(2239);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
                tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
                tmp |= (fieldFromInstruction32(insn, 21, 1) << 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2USAT
              }
            break;
          }
          break;
        case 3:
          // Check Inst{21-20} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 2) == 0) {
            MI.setOpcode(2220);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 6, 2) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 3) << 2);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 5);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2UBFX
          }
          break;
        }
        break;
      }
      break;
    case 1:
      // Check Inst{12} ...
      switch (fieldFromInstruction32(insn, 12, 1)) {
      case 0:
        // Check Inst{14} ...
        switch (fieldFromInstruction32(insn, 14, 1)) {
        case 0:
          // Check Inst{26-16} ...
          switch (fieldFromInstruction32(insn, 16, 11)) {
          case 943:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{4-0} ...
              switch (fieldFromInstruction32(insn, 0, 5)) {
              case 0:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                  MI.setOpcode(2056);
                  return true; // t2NOP
                }
                else
                  {
                    MI.setOpcode(1953);
                    tmp = fieldFromInstruction32(insn, 9, 2);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    tmp = fieldFromInstruction32(insn, 5, 3);
                    MI.addOperand(MCOperand::CreateImm(tmp));
                    return true; // t2CPS2p
                  }
                break;
              case 1:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                  MI.setOpcode(2252);
                  return true; // t2YIELD
                }
                break;
              case 2:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                  MI.setOpcode(2250);
                  return true; // t2WFE
                }
                break;
              case 3:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                  MI.setOpcode(2251);
                  return true; // t2WFI
                }
                break;
              case 4:
                // Check Inst{10-9} && Inst{7-5} for singleton decoding...
                if (fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                  MI.setOpcode(2112);
                  return true; // t2SEV
                }
                break;
              }
              break;
            case 1:
              // Check Inst{10-9} && Inst{7-5} for singleton decoding...
              if (fieldFromInstruction32(insn, 9, 2) == 0 && fieldFromInstruction32(insn, 5, 3) == 0) {
                MI.setOpcode(1952);
                tmp = fieldFromInstruction32(insn, 0, 5);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2CPS1p
              }
              else
                {
                  MI.setOpcode(1954);
                  tmp = fieldFromInstruction32(insn, 9, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 5, 3);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  tmp = fieldFromInstruction32(insn, 0, 5);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2CPS3p
                }
              break;
            }
            break;
          case 959:
            // Check Inst{13-13} && Inst{11-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 13, 1) == 0 && fieldFromInstruction32(insn, 0, 12) == 3887) {
              MI.setOpcode(1944);
              return true; // t2CLREX
            }
            break;
          case 1007:
            {
              MI.setOpcode(2048);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2MRS
            }
          case 1023:
            {
              MI.setOpcode(2049);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2MRSsys
            }
          default:
            break; // fallthrough
          }
          // Check Inst{26-20} ...
          switch (fieldFromInstruction32(insn, 20, 7)) {
          case 58:
            // Check Inst{10-4} for singleton decoding...
            if (fieldFromInstruction32(insn, 4, 7) == 15) {
              MI.setOpcode(1955);
              tmp = fieldFromInstruction32(insn, 0, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // t2DBG
            }
            break;
          case 60:
            {
              MI.setOpcode(1941);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2BXJ
            }
          case 127:
            // Check Inst{13-13} for singleton decoding...
            if (fieldFromInstruction32(insn, 13, 1) == 0) {
              MI.setOpcode(2119);
              tmp = fieldFromInstruction32(insn, 16, 4);
              MI.addOperand(MCOperand::CreateImm(tmp));
              return true; // t2SMC
            }
            break;
          default:
            break; // fallthrough
          }
          // Check Inst{26-21} && Inst{13-13} for singleton decoding...
          if (fieldFromInstruction32(insn, 21, 6) == 28 && fieldFromInstruction32(insn, 13, 1) == 0) {
            MI.setOpcode(2050);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 8, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 20, 1) << 4);
            if (!DecodeMSRMask(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2MSR
          }
          else
            {
              MI.setOpcode(1942);
              if (!DecodeThumb2BCCInstruction(MI, insn, Address, Decoder)) return false;
              return true; // t2Bcc
            }
          break;
          break;
          break;
        }
        break;
      case 1:
        // Check Inst{14-14} for singleton decoding...
        if (fieldFromInstruction32(insn, 14, 1) == 0) {
          MI.setOpcode(1933);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 11) << 0);
          tmp |= (fieldFromInstruction32(insn, 11, 1) << 18);
          tmp |= (fieldFromInstruction32(insn, 13, 1) << 17);
          tmp |= (fieldFromInstruction32(insn, 16, 6) << 11);
          tmp |= (fieldFromInstruction32(insn, 26, 1) << 19);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2B
        }
        break;
      }
      break;
    }
    break;
  case 31:
    // Check Inst{26-24} ...
    switch (fieldFromInstruction32(insn, 24, 3)) {
    case 0:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 0:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2174);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 2);
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 6);
              if (!DecodeT2AddrModeSOReg(MI, tmp, Address, Decoder)) return false;
              return true; // t2STRBs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2170);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2STRB_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if (fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2169);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2STRBT
              }
              else
                {
                  MI.setOpcode(2173);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2STRBi8
                }
              break;
            case 1:
              {
                MI.setOpcode(2171);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2STRB_PRE
              }
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(2172);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2STRBi12
          }
        }
        break;
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(2070);
                if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
                return true; // t2PLDs
              }
              else
                {
                  MI.setOpcode(1976);
                  if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
                  return true; // t2LDRBs
                }
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(1971);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRB_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction32(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(2069);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2PLDi8
                }
                break;
              case 1:
                {
                  MI.setOpcode(1970);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2LDRBT
                }
              default:
                break; // fallthrough
              }
              {
                MI.setOpcode(1974);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRBi8
              }
              break;
            case 1:
              {
                MI.setOpcode(1972);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRB_PRE
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2068);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2PLDi12
          }
          else
            {
              MI.setOpcode(1973);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRBi12
            }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(1975);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2LDRBpci
        }
        break;
        break;
      case 2:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2187);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 2);
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 6);
              if (!DecodeT2AddrModeSOReg(MI, tmp, Address, Decoder)) return false;
              return true; // t2STRHs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2183);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2STRH_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if (fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2182);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2STRHT
              }
              else
                {
                  MI.setOpcode(2186);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2STRHi8
                }
              break;
            case 1:
              {
                MI.setOpcode(2184);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2STRH_PRE
              }
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(2185);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2STRHi12
          }
        }
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(2067);
                if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
                return true; // t2PLDWs
              }
              else
                {
                  MI.setOpcode(1990);
                  if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
                  return true; // t2LDRHs
                }
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(1985);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRH_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction32(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(2066);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2PLDWi8
                }
                break;
              case 1:
                {
                  MI.setOpcode(1984);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2LDRHT
                }
              default:
                break; // fallthrough
              }
              {
                MI.setOpcode(1988);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRHi8
              }
              break;
            case 1:
              {
                MI.setOpcode(1986);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRH_PRE
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2065);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2PLDWi12
          }
          else
            {
              MI.setOpcode(1987);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRHi12
            }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(1989);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2LDRHpci
        }
        break;
        break;
      case 4:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2193);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 2);
              tmp |= (fieldFromInstruction32(insn, 4, 2) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 6);
              if (!DecodeT2AddrModeSOReg(MI, tmp, Address, Decoder)) return false;
              return true; // t2STRs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2189);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2STR_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if (fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2188);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2STRT
              }
              else
                {
                  MI.setOpcode(2192);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2STRi8
                }
              break;
            case 1:
              {
                MI.setOpcode(2190);
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 16, 4);
                if (!DecodeGPRnopcRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2STR_PRE
              }
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(2191);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2STRi12
          }
        }
        break;
      case 5:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2012);
              if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
              return true; // t2LDRs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(2006);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDR_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if (fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(2005);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRT
              }
              else
                {
                  MI.setOpcode(2009);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2LDRi8
                }
              break;
            case 1:
              {
                MI.setOpcode(2007);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDR_PRE
              }
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(2008);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDRi12
          }
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2010);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2LDRpci
        }
        break;
        break;
      }
      break;
    case 1:
      // Check Inst{22-20} ...
      switch (fieldFromInstruction32(insn, 20, 3)) {
      case 1:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} ...
            switch (fieldFromInstruction32(insn, 6, 4)) {
            case 0:
              // Check Inst{15-12} for singleton decoding...
              if (fieldFromInstruction32(insn, 12, 4) == 15) {
                MI.setOpcode(2073);
                if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
                return true; // t2PLIs
              }
              else
                {
                  MI.setOpcode(1997);
                  if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
                  return true; // t2LDRSBs
                }
              break;
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(1992);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRSB_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9} ...
              switch (fieldFromInstruction32(insn, 9, 1)) {
              case 0:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(2072);
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2PLIi8
                }
                break;
              case 1:
                {
                  MI.setOpcode(1991);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2LDRSBT
                }
              default:
                break; // fallthrough
              }
              {
                MI.setOpcode(1995);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRSBi8
              }
              break;
            case 1:
              {
                MI.setOpcode(1993);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRSB_PRE
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2071);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2PLIi12
          }
          else
            {
              MI.setOpcode(1994);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
              if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRSBi12
            }
          break;
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(1996);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2LDRSBpci
        }
        break;
        break;
      case 3:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{11-10} ...
          switch (fieldFromInstruction32(insn, 10, 2)) {
          case 0:
            // Check Inst{9-6} for singleton decoding...
            if (fieldFromInstruction32(insn, 6, 4) == 0) {
              MI.setOpcode(2004);
              if (!DecodeT2LoadShift(MI, insn, Address, Decoder)) return false;
              return true; // t2LDRSHs
            }
            break;
          case 2:
            // Check Inst{8-8} for singleton decoding...
            if (fieldFromInstruction32(insn, 8, 1) == 1) {
              MI.setOpcode(1999);
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
              tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
              if (!DecodeT2Imm8(MI, tmp, Address, Decoder)) return false;
              return true; // t2LDRSH_POST
            }
            break;
          case 3:
            // Check Inst{8} ...
            switch (fieldFromInstruction32(insn, 8, 1)) {
            case 0:
              // Check Inst{9-9} for singleton decoding...
              if (fieldFromInstruction32(insn, 9, 1) == 1) {
                MI.setOpcode(1998);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRSHT
              }
              else
                {
                  MI.setOpcode(2002);
                  tmp = fieldFromInstruction32(insn, 12, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = 0;
                  tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                  tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                  tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
                  if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                  return true; // t2LDRSHi8
                }
              break;
            case 1:
              {
                MI.setOpcode(2000);
                tmp = fieldFromInstruction32(insn, 12, 4);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
                tmp |= (fieldFromInstruction32(insn, 9, 1) << 8);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeT2AddrModeImm8(MI, tmp, Address, Decoder)) return false;
                return true; // t2LDRSH_PRE
              }
            }
            break;
          }
          break;
        case 1:
          {
            MI.setOpcode(2001);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 12) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 13);
            if (!DecodeT2AddrModeImm12(MI, tmp, Address, Decoder)) return false;
            return true; // t2LDRSHi12
          }
        default:
          break; // fallthrough
        }
        // Check Inst{19-16} for singleton decoding...
        if (fieldFromInstruction32(insn, 16, 4) == 15) {
          MI.setOpcode(2003);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 12);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2LDRSHpci
        }
        break;
        break;
      }
      break;
    case 2:
      // Check Inst{23-21} ...
      switch (fieldFromInstruction32(insn, 21, 3)) {
      case 0:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12} && Inst{6-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 3) == 0) {
            MI.setOpcode(2016);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LSLrr
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2206);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2SXTH
              }
              else
                {
                  MI.setOpcode(2203);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2SXTAH
                }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2249);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2UXTH
              }
              else
                {
                  MI.setOpcode(2246);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2UXTAH
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12} && Inst{6-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 3) == 0) {
            MI.setOpcode(2018);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2LSRrr
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2205);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2SXTB16
              }
              else
                {
                  MI.setOpcode(2202);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2SXTAB16
                }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2248);
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2UXTB16
              }
              else
                {
                  MI.setOpcode(2245);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2UXTAB16
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 2:
        // Check Inst{7} ...
        switch (fieldFromInstruction32(insn, 7, 1)) {
        case 0:
          // Check Inst{15-12} && Inst{6-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 3) == 0) {
            MI.setOpcode(1932);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 20, 1);
            if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
            return true; // t2ASRrr
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2204);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2SXTB
              }
              else
                {
                  MI.setOpcode(2201);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2SXTAB
                }
              break;
            }
            break;
          case 1:
            // Check Inst{15-12} ...
            switch (fieldFromInstruction32(insn, 12, 4)) {
            case 15:
              // Check Inst{19-16} for singleton decoding...
              if (fieldFromInstruction32(insn, 16, 4) == 15) {
                MI.setOpcode(2247);
                tmp = fieldFromInstruction32(insn, 8, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 0, 4);
                if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 4, 2);
                MI.addOperand(MCOperand::CreateImm(tmp));
                return true; // t2UXTB
              }
              else
                {
                  MI.setOpcode(2244);
                  tmp = fieldFromInstruction32(insn, 8, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 16, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 0, 4);
                  if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                  tmp = fieldFromInstruction32(insn, 4, 2);
                  MI.addOperand(MCOperand::CreateImm(tmp));
                  return true; // t2UXTAB
                }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 3:
        // Check Inst{15-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2093);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 1);
          if (!DecodeCCOutOperand(MI, tmp, Address, Decoder)) return false;
          return true; // t2RORrr
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2101);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2100);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SADD16
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2076);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2075);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QADD16
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2114);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SHADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2113);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SHADD16
            }
            break;
          }
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2218);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2217);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UADD16
            }
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2232);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UQADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2231);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UQADD16
            }
            break;
          }
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2223);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UHADD8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2222);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UHADD16
            }
            break;
          }
          break;
        case 8:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2074);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QADD
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2085);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2REV
            }
            break;
          }
          break;
        case 9:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2078);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QDADD
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2086);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2REV16
            }
            break;
          }
          break;
        case 10:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2081);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QSUB
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2084);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2RBIT
            }
            break;
          }
          break;
        case 11:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2079);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QDSUB
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2087);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2REVSH
            }
            break;
          }
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2102);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SASX
          }
          break;
        case 1:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2077);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2QASX
          }
          break;
        case 2:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2115);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SHASX
          }
          break;
        case 4:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2219);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UASX
          }
          break;
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2233);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UQASX
          }
          break;
        case 6:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2224);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UHASX
          }
          break;
        case 8:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2111);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SEL
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(1945);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2CLZ
            }
            break;
          }
          break;
        }
        break;
      case 6:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2164);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2163);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SSUB16
            }
            break;
          }
          break;
        case 1:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2083);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2082);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2QSUB16
            }
            break;
          }
          break;
        case 2:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2118);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SHSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2117);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SHSUB16
            }
            break;
          }
          break;
        case 4:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2243);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2USUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2242);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2USUB16
            }
            break;
          }
          break;
        case 5:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2236);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UQSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2235);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UQSUB16
            }
            break;
          }
          break;
        case 6:
          // Check Inst{20} ...
          switch (fieldFromInstruction32(insn, 20, 1)) {
          case 0:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2227);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UHSUB8
            }
            break;
          case 1:
            // Check Inst{15-12} for singleton decoding...
            if (fieldFromInstruction32(insn, 12, 4) == 15) {
              MI.setOpcode(2226);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2UHSUB16
            }
            break;
          }
          break;
        }
        break;
      case 7:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2162);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SSAX
          }
          break;
        case 1:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2080);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2QSAX
          }
          break;
        case 2:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2116);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SHSAX
          }
          break;
        case 4:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2241);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2USAX
          }
          break;
        case 5:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2234);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UQSAX
          }
          break;
        case 6:
          // Check Inst{20-20} && Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 20, 1) == 0 && fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2225);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UHSAX
          }
          break;
        }
        break;
      }
      break;
    case 3:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction32(insn, 20, 4)) {
      case 0:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2051);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2MUL
          }
          else
            {
              MI.setOpcode(2023);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2MLA
            }
          break;
        case 1:
          {
            MI.setOpcode(2024);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2MLS
          }
        }
        break;
      case 1:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2147);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMULBB
          }
          else
            {
              MI.setOpcode(2120);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLABB
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2148);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMULBT
          }
          else
            {
              MI.setOpcode(2121);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLABT
            }
          break;
        case 2:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2150);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMULTB
          }
          else
            {
              MI.setOpcode(2131);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLATB
            }
          break;
        case 3:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2151);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMULTT
          }
          else
            {
              MI.setOpcode(2132);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLATT
            }
          break;
        }
        break;
      case 2:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2145);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMUAD
          }
          else
            {
              MI.setOpcode(2122);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLAD
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2146);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMUADX
          }
          else
            {
              MI.setOpcode(2123);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLADX
            }
          break;
        }
        break;
      case 3:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2152);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMULWB
          }
          else
            {
              MI.setOpcode(2133);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLAWB
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2153);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMULWT
          }
          else
            {
              MI.setOpcode(2134);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLAWT
            }
          break;
        }
        break;
      case 4:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2154);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMUSD
          }
          else
            {
              MI.setOpcode(2135);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLSD
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2155);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMUSDX
          }
          else
            {
              MI.setOpcode(2136);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMLSDX
            }
          break;
        }
        break;
      case 5:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2143);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMMUL
          }
          else
            {
              MI.setOpcode(2139);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMMLA
            }
          break;
        case 1:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2144);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMMULR
          }
          else
            {
              MI.setOpcode(2140);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2SMMLAR
            }
          break;
        }
        break;
      case 6:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          {
            MI.setOpcode(2141);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMMLS
          }
        case 1:
          {
            MI.setOpcode(2142);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMMLSR
          }
        }
        break;
      case 7:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          // Check Inst{15-12} for singleton decoding...
          if (fieldFromInstruction32(insn, 12, 4) == 15) {
            MI.setOpcode(2237);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2USAD8
          }
          else
            {
              MI.setOpcode(2238);
              tmp = fieldFromInstruction32(insn, 8, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 16, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 0, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              return true; // t2USADA8
            }
          break;
        }
        break;
      case 8:
        // Check Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2149);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // t2SMULL
        }
        break;
      case 9:
        // Check Inst{15-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 4) == 15) {
          MI.setOpcode(2110);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // t2SDIV
        }
        break;
      case 10:
        // Check Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 4, 4) == 0) {
          MI.setOpcode(2230);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // t2UMULL
        }
        break;
      case 11:
        // Check Inst{15-12} && Inst{7-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 12, 4) == 15 && fieldFromInstruction32(insn, 4, 4) == 15) {
          MI.setOpcode(2221);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          return true; // t2UDIV
        }
        break;
      case 12:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          {
            MI.setOpcode(2124);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLAL
          }
        case 8:
          {
            MI.setOpcode(2125);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLALBB
          }
        case 9:
          {
            MI.setOpcode(2126);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLALBT
          }
        case 10:
          {
            MI.setOpcode(2129);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLALTB
          }
        case 11:
          {
            MI.setOpcode(2130);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLALTT
          }
        case 12:
          {
            MI.setOpcode(2127);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLALD
          }
        case 13:
          {
            MI.setOpcode(2128);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLALDX
          }
        }
        break;
      case 13:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 12:
          {
            MI.setOpcode(2137);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLSLD
          }
        case 13:
          {
            MI.setOpcode(2138);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2SMLSLDX
          }
        }
        break;
      case 14:
        // Check Inst{7-4} ...
        switch (fieldFromInstruction32(insn, 4, 4)) {
        case 0:
          {
            MI.setOpcode(2229);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UMLAL
          }
        case 6:
          {
            MI.setOpcode(2228);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 0, 4);
            if (!DecoderGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            return true; // t2UMAAL
          }
        }
        break;
      }
      break;
    case 4:
      // Check Inst{23-20} ...
      switch (fieldFromInstruction32(insn, 20, 4)) {
      case 4:
        {
          MI.setOpcode(2022);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 4, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2MCRR2
        }
      case 5:
        {
          MI.setOpcode(2047);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 4, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2MRRC2
        }
      }
      break;
    case 6:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        {
          MI.setOpcode(1943);
          tmp = fieldFromInstruction32(insn, 8, 4);
          if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 20, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 12, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 16, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 0, 4);
          MI.addOperand(MCOperand::CreateImm(tmp));
          tmp = fieldFromInstruction32(insn, 5, 3);
          MI.addOperand(MCOperand::CreateImm(tmp));
          return true; // t2CDP2
        }
      case 1:
        // Check Inst{20} ...
        switch (fieldFromInstruction32(insn, 20, 1)) {
        case 0:
          {
            MI.setOpcode(2020);
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2MCR2
          }
        case 1:
          {
            MI.setOpcode(2045);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 8, 4);
            if (!DecodeCoprocessor(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 21, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 16, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 0, 4);
            MI.addOperand(MCOperand::CreateImm(tmp));
            tmp = fieldFromInstruction32(insn, 5, 3);
            MI.addOperand(MCOperand::CreateImm(tmp));
            return true; // t2MRC2
          }
        }
        break;
      }
      break;
    }
    break;
  }

  return false;
}

static bool decodeVFPInstruction32(MCInst &MI, uint32_t insn, uint64_t Address, const void *Decoder) {
  unsigned tmp = 0;
  (void)tmp;
  // Check Inst{21-20} ...
  switch (fieldFromInstruction32(insn, 20, 2)) {
  case 0:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22} && Inst{7-6} && Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1153);
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMOVSRR
          }
          break;
        case 1:
          {
            MI.setOpcode(1818);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
            if (!DecodeSPRRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSTMSIA
          }
        }
        break;
      case 11:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22} && Inst{7-6} && Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1135);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMOVDRR
          }
          break;
        case 1:
          {
            MI.setOpcode(1814);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
            if (!DecodeDPRRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSTMDIA
          }
        }
        break;
      }
      break;
    case 13:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        {
          MI.setOpcode(1821);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
          if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeAddrMode5Operand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSTRS
        }
      case 11:
        {
          MI.setOpcode(1820);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeAddrMode5Operand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSTRD
        }
      }
      break;
    case 14:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              {
                MI.setOpcode(1093);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // VMLAS
              }
            case 1:
              {
                MI.setOpcode(721);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
                if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // VDIVS
              }
            }
            break;
          case 11:
            // Check Inst{23} ...
            switch (fieldFromInstruction32(insn, 23, 1)) {
            case 0:
              {
                MI.setOpcode(1082);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // VMLAD
              }
            case 1:
              {
                MI.setOpcode(720);
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
                tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = 0;
                tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
                tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
                if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                tmp = fieldFromInstruction32(insn, 28, 4);
                if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                return true; // VDIVD
              }
            }
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1119);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSS
            }
            break;
          case 11:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1108);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VMLSD
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23-22} && Inst{11-8} && Inst{6-5} && Inst{3-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 22, 2) == 0 && fieldFromInstruction32(insn, 8, 4) == 10 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 0) {
          MI.setOpcode(1152);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
          if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VMOVSR
        }
        break;
      }
      break;
    }
    break;
  case 1:
    // Check Inst{27-24} ...
    switch (fieldFromInstruction32(insn, 24, 4)) {
    case 12:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22} && Inst{7-6} && Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1149);
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMOVRRS
          }
          break;
        case 1:
          {
            MI.setOpcode(1050);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
            if (!DecodeSPRRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VLDMSIA
          }
        }
        break;
      case 11:
        // Check Inst{23} ...
        switch (fieldFromInstruction32(insn, 23, 1)) {
        case 0:
          // Check Inst{22-22} && Inst{7-6} && Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 6, 2) == 0 && fieldFromInstruction32(insn, 4, 1) == 1) {
            MI.setOpcode(1148);
            tmp = fieldFromInstruction32(insn, 12, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMOVRRD
          }
          break;
        case 1:
          {
            MI.setOpcode(1046);
            tmp = fieldFromInstruction32(insn, 16, 4);
            if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
            if (!DecodeDPRRegListOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VLDMDIA
          }
        }
        break;
      }
      break;
    case 13:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        {
          MI.setOpcode(1053);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
          if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeAddrMode5Operand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VLDRS
        }
      case 11:
        {
          MI.setOpcode(1052);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 23, 1) << 8);
          if (!DecodeAddrMode5Operand(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VLDRD
        }
      }
      break;
    case 14:
      // Check Inst{4} ...
      switch (fieldFromInstruction32(insn, 4, 1)) {
      case 0:
        // Check Inst{6} ...
        switch (fieldFromInstruction32(insn, 6, 1)) {
        case 0:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1217);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VNMLSS
            }
            break;
          case 11:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1216);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VNMLSD
            }
            break;
          }
          break;
        case 1:
          // Check Inst{11-8} ...
          switch (fieldFromInstruction32(insn, 8, 4)) {
          case 10:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1215);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
              if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VNMLAS
            }
            break;
          case 11:
            // Check Inst{23-23} for singleton decoding...
            if (fieldFromInstruction32(insn, 23, 1) == 0) {
              MI.setOpcode(1214);
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
              tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = 0;
              tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
              tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
              if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VNMLAD
            }
            break;
          }
          break;
        }
        break;
      case 1:
        // Check Inst{23-22} && Inst{11-8} && Inst{6-5} && Inst{3-0} for singleton decoding...
        if (fieldFromInstruction32(insn, 22, 2) == 0 && fieldFromInstruction32(insn, 8, 4) == 10 && fieldFromInstruction32(insn, 5, 2) == 0 && fieldFromInstruction32(insn, 0, 4) == 0) {
          MI.setOpcode(1150);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
          tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
          if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VMOVRS
        }
        break;
      }
      break;
    }
    break;
  case 2:
    // Check Inst{27-23} ...
    switch (fieldFromInstruction32(insn, 23, 5)) {
    case 25:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        {
          MI.setOpcode(1819);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!DecodeSPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSTMSIA_UPD
        }
      case 11:
        {
          MI.setOpcode(1815);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!DecodeDPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSTMDIA_UPD
        }
      }
      break;
    case 26:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        {
          MI.setOpcode(1817);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!DecodeSPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSTMSDB_UPD
        }
      case 11:
        {
          MI.setOpcode(1813);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!DecodeDPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VSTMDDB_UPD
        }
      }
      break;
    case 28:
      // Check Inst{6} ...
      switch (fieldFromInstruction32(insn, 6, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1181);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMULS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1169);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMULD
          }
          break;
        }
        break;
      case 1:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1219);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VNMULS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1218);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VNMULD
          }
          break;
        }
        break;
      }
      break;
    case 29:
      // Check Inst{19-16} ...
      switch (fieldFromInstruction32(insn, 16, 4)) {
      case 0:
        // Check Inst{22-22} && Inst{11-7} && Inst{4-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 7, 5) == 20 && fieldFromInstruction32(insn, 4, 1) == 1) {
          MI.setOpcode(1168);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VMSR_FPSID
        }
        break;
      case 1:
        // Check Inst{22-22} && Inst{11-7} && Inst{4-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 7, 5) == 20 && fieldFromInstruction32(insn, 4, 1) == 1) {
          MI.setOpcode(1166);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VMSR
        }
        break;
      case 8:
        // Check Inst{22-22} && Inst{11-7} && Inst{4-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 7, 5) == 20 && fieldFromInstruction32(insn, 4, 1) == 1) {
          MI.setOpcode(1167);
          tmp = fieldFromInstruction32(insn, 12, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VMSR_FPEXC
        }
        break;
      }
      break;
    }
    break;
  case 3:
    // Check Inst{27-23} ...
    switch (fieldFromInstruction32(insn, 23, 5)) {
    case 25:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        {
          MI.setOpcode(1051);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!DecodeSPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VLDMSIA_UPD
        }
      case 11:
        {
          MI.setOpcode(1047);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!DecodeDPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VLDMDIA_UPD
        }
      }
      break;
    case 26:
      // Check Inst{11-8} ...
      switch (fieldFromInstruction32(insn, 8, 4)) {
      case 10:
        {
          MI.setOpcode(1049);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 9);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 8);
          if (!DecodeSPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VLDMSDB_UPD
        }
      case 11:
        {
          MI.setOpcode(1045);
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 16, 4);
          if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 8) << 0);
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 8);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 12);
          if (!DecodeDPRRegListOperand(MI, tmp, Address, Decoder)) return false;
          return true; // VLDMDDB_UPD
        }
      }
      break;
    case 28:
      // Check Inst{6} ...
      switch (fieldFromInstruction32(insn, 6, 1)) {
      case 0:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(567);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VADDS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(557);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VADDD
          }
          break;
        }
        break;
      case 1:
        // Check Inst{11-8} ...
        switch (fieldFromInstruction32(insn, 8, 4)) {
        case 10:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1832);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 0);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 1);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBS
          }
          break;
        case 11:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1822);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 7, 1) << 4);
            tmp |= (fieldFromInstruction32(insn, 16, 4) << 0);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSUBD
          }
          break;
        }
        break;
      }
      break;
    case 29:
      // Check Inst{11-6} ...
      switch (fieldFromInstruction32(insn, 6, 6)) {
      case 40:
        // Check Inst{5-4} ...
        switch (fieldFromInstruction32(insn, 4, 2)) {
        case 0:
          {
            MI.setOpcode(129);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 19);
            tmp |= (fieldFromInstruction32(insn, 16, 3) << 23);
            tmp |= (fieldFromInstruction32(insn, 19, 1) << 31);
            if (!DecodeVFPfpImm(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // FCONSTS
          }
        case 1:
          // Check Inst{19-16} ...
          switch (fieldFromInstruction32(insn, 16, 4)) {
          case 0:
            // Check Inst{22-22} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 0, 4) == 0) {
              MI.setOpcode(1165);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VMRS_FPSID
            }
            break;
          case 1:
            // Check Inst{3-0} ...
            switch (fieldFromInstruction32(insn, 0, 4)) {
            case 0:
              // Check Inst{22} ...
              switch (fieldFromInstruction32(insn, 22, 1)) {
              case 1:
                // Check Inst{15-12} for singleton decoding...
                if (fieldFromInstruction32(insn, 12, 4) == 15) {
                  MI.setOpcode(130);
                  tmp = fieldFromInstruction32(insn, 28, 4);
                  if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                  return true; // FMSTAT
                }
                else
                  {
                    MI.setOpcode(1163);
                    tmp = fieldFromInstruction32(insn, 12, 4);
                    if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
                    tmp = fieldFromInstruction32(insn, 28, 4);
                    if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
                    return true; // VMRS
                  }
                break;
              }
              break;
            }
            break;
          case 8:
            // Check Inst{22-22} && Inst{3-0} for singleton decoding...
            if (fieldFromInstruction32(insn, 22, 1) == 1 && fieldFromInstruction32(insn, 0, 4) == 0) {
              MI.setOpcode(1164);
              tmp = fieldFromInstruction32(insn, 12, 4);
              if (!DecodeGPRRegisterClass(MI, tmp, Address, Decoder)) return false;
              tmp = fieldFromInstruction32(insn, 28, 4);
              if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
              return true; // VMRS_FPEXC
            }
            break;
          }
          break;
        }
        break;
      case 41:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1151);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMOVS
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1205);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VNEGS
          }
          break;
        case 2:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(697);
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCVTBSH
          }
          break;
        case 3:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(696);
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCVTBHS
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(691);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPS
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(693);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPZS
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1896);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VUITOS
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1876);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOUIRS
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1868);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOSIRS
          }
          break;
        }
        break;
      case 43:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(544);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VABSS
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1588);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSQRTS
          }
          break;
        case 2:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(701);
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCVTTSH
          }
          break;
        case 3:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(700);
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCVTTHS
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(688);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPES
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(690);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPEZS
          }
          break;
        case 7:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(698);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCVTDS
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1576);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSITOS
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1878);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOUIZS
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1870);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOSIZS
          }
          break;
        }
        break;
      case 44:
        // Check Inst{5-4} for singleton decoding...
        if (fieldFromInstruction32(insn, 4, 2) == 0) {
          MI.setOpcode(128);
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
          tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
          if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
          tmp = 0;
          tmp |= (fieldFromInstruction32(insn, 0, 4) << 19);
          tmp |= (fieldFromInstruction32(insn, 16, 3) << 23);
          tmp |= (fieldFromInstruction32(insn, 19, 1) << 31);
          if (!DecodeVFPfpImm(MI, tmp, Address, Decoder)) return false;
          tmp = fieldFromInstruction32(insn, 28, 4);
          if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
          return true; // FCONSTD
        }
        break;
      case 45:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1134);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VMOVD
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1204);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VNEGD
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(686);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPD
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(692);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPZD
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1895);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VUITOD
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1875);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOUIRD
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1867);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOSIRD
          }
          break;
        }
        break;
      case 47:
        // Check Inst{19-16} ...
        switch (fieldFromInstruction32(insn, 16, 4)) {
        case 0:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(543);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VABSD
          }
          break;
        case 1:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1587);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSQRTD
          }
          break;
        case 4:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(687);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPED
          }
          break;
        case 5:
          // Check Inst{5-0} for singleton decoding...
          if (fieldFromInstruction32(insn, 0, 6) == 0) {
            MI.setOpcode(689);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCMPEZD
          }
          break;
        case 7:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(699);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VCVTSD
          }
          break;
        case 8:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1575);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VSITOD
          }
          break;
        case 12:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1877);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOUIZD
          }
          break;
        case 13:
          // Check Inst{4-4} for singleton decoding...
          if (fieldFromInstruction32(insn, 4, 1) == 0) {
            MI.setOpcode(1869);
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 12, 4) << 1);
            tmp |= (fieldFromInstruction32(insn, 22, 1) << 0);
            if (!DecodeSPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = 0;
            tmp |= (fieldFromInstruction32(insn, 0, 4) << 0);
            tmp |= (fieldFromInstruction32(insn, 5, 1) << 4);
            if (!DecodeDPRRegisterClass(MI, tmp, Address, Decoder)) return false;
            tmp = fieldFromInstruction32(insn, 28, 4);
            if (!DecodePredicateOperand(MI, tmp, Address, Decoder)) return false;
            return true; // VTOSIZD
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  }

  return false;
}


} // End llvm namespace 
