//===-- VerilogWriter.cpp -----------------------------------------*- C++ -*-===//
//
// This file is distributed under the LegUp license. See LICENSE for details.
//
//===----------------------------------------------------------------------===//
//
// Implements VerilogWriter class
//
//===----------------------------------------------------------------------===//

#include "VerilogWriter.h"
#include "Allocation.h"
#include "LegupPass.h"
#include "GenerateRTL.h"
#include "utils.h"
#include "Ram.h"
#include <vector>
#include <iostream>
#include <fstream>

using namespace llvm;
using namespace legup;

//extern std::set<Function*> AcceleratedFcts;
namespace legup {

void VerilogWriter::print() {
    Out << getFileHeader();

	if (LEGUP_CONFIG->numAccelerators() > 0) {
		//print Top Module for each accelerated function
        for (std::set<const Function*>::const_iterator
                it=AcceleratedFcts.begin(); it != AcceleratedFcts.end(); ++it)
        {
				printTop(*it);
		}
	}
	else {
		printTop(NULL);
	}

    printMemoryController();

    for (Allocation::const_rtl_iterator i = alloc->rtl_begin(), e =
            alloc->rtl_end(); i != e; ++i) {
        printRTL(*i);
    }

    // TODO: don't print if we don't have rams
    //if (rams.empty()) return;
    printRAMModule();

    printPLLModule();
    printClkFollowerModule();
    printMultipumpModule();
    printDE2();
    printDE4();
    printHex();

	//don't print test bench for hybrid flow
	if (LEGUP_CONFIG->numAccelerators() == 0) {
	    printVerilogTestbench();
	}
}



void VerilogWriter::printBlankDefaultCase(std::string indent) {
    Out << indent << "default:" << "\n";
    Out << indent << "begin" << "\n";
    Out << indent << "\t// quartus issues a warning if we have no default case"
        << "\n";
    Out << indent << "end" << "\n";
}

void VerilogWriter::printPLLModule() {

    Out <<
    "// megafunction wizard: %ALTPLL%\n" <<
    "// GENERATION: STANDARD\n" <<
    "// VERSION: WM1.0\n" <<
    "// MODULE: altpll \n" <<
    "\n" <<
    "// ============================================================\n" <<
    "// File Name: pll.v\n" <<
    "// Megafunction Name(s):\n" <<
    "// 			altpll\n" <<
    "//\n" <<
    "// Simulation Library Files(s):\n" <<
    "// 			altera_mf\n" <<
    "// ============================================================\n" <<
    "// ************************************************************\n" <<
    "// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!\n" <<
    "//\n" <<
    "// 10.1 Build 197 01/19/2011 SP 1 SJ Full Version\n" <<
    "// ************************************************************\n" <<
    "\n" <<
    "\n" <<
    "//Copyright (C) 1991-2011 Altera Corporation\n" <<
    "//Your use of Altera Corporation's design tools, logic functions \n" <<
    "//and other software and tools, and its AMPP partner logic \n" <<
    "//functions, and any output files from any of the foregoing \n" <<
    "//(including device programming or simulation files), and any \n" <<
    "//associated documentation or information are expressly subject \n" <<
    "//to the terms and conditions of the Altera Program License \n" <<
    "//Subscription Agreement, Altera MegaCore Function License \n" <<
    "//Agreement, or other applicable license agreement, including, \n" <<
    "//without limitation, that your use is for the sole purpose of \n" <<
    "//programming logic devices manufactured by Altera and sold by \n" <<
    "//Altera or its authorized distributors.  Please refer to the \n" <<
    "//applicable agreement for further details.\n" <<
    "\n" <<
    "\n" <<
    "// synopsys translate_off\n" <<
    "`timescale 1 ns / 1 ns\n" <<
    "// synopsys translate_on\n" <<
    "module pll (\n" <<
    "inclk0,\n" <<
    "c0,\n" <<
    "c1);\n" <<
    "\n" <<
    "input	  inclk0;\n" <<
    "output	  c0;\n" <<
    "output	  c1;\n" <<
    "\n" <<
    "wire [5:0] sub_wire0;\n" <<
    "wire [0:0] sub_wire5 = 1'h0;\n" <<
    "wire [1:1] sub_wire2 = sub_wire0[1:1];\n" <<
    "wire [0:0] sub_wire1 = sub_wire0[0:0];\n" <<
    "wire  c0 = sub_wire1;\n" <<
    "wire  c1 = sub_wire2;\n" <<
    "wire  sub_wire3 = inclk0;\n" <<
    "wire [1:0] sub_wire4 = {sub_wire5, sub_wire3};\n" <<
    "\n" <<
    "altpll	altpll_component (\n" <<
    ".inclk (sub_wire4),\n" <<
    ".clk (sub_wire0),\n" <<
    ".activeclock (),\n" <<
    ".areset (1'b0),\n" <<
    ".clkbad (),\n" <<
    ".clkena ({6{1'b1}}),\n" <<
    ".clkloss (),\n" <<
    ".clkswitch (1'b0),\n" <<
    ".configupdate (1'b0),\n" <<
    ".enable0 (),\n" <<
    ".enable1 (),\n" <<
    ".extclk (),\n" <<
    ".extclkena ({4{1'b1}}),\n" <<
    ".fbin (1'b1),\n" <<
    ".fbmimicbidir (),\n" <<
    ".fbout (),\n" <<
    ".fref (),\n" <<
    ".icdrclk (),\n" <<
    ".locked (),\n" <<
    ".pfdena (1'b1),\n" <<
    ".phasecounterselect ({4{1'b1}}),\n" <<
    ".phasedone (),\n" <<
    ".phasestep (1'b1),\n" <<
    ".phaseupdown (1'b1),\n" <<
    ".pllena (1'b1),\n" <<
    ".scanaclr (1'b0),\n" <<
    ".scanclk (1'b0),\n" <<
    ".scanclkena (1'b1),\n" <<
    ".scandata (1'b0),\n" <<
    ".scandataout (),\n" <<
    ".scandone (),\n" <<
    ".scanread (1'b0),\n" <<
    ".scanwrite (1'b0),\n" <<
    ".sclkout0 (),\n" <<
    ".sclkout1 (),\n" <<
    ".vcooverrange (),\n" <<
    ".vcounderrange ());\n" <<
    "defparam\n" <<
    "altpll_component.clk0_divide_by = 1,\n" <<
    "altpll_component.clk0_duty_cycle = 50,\n" <<
    "altpll_component.clk0_multiply_by = 1,\n" <<
    "altpll_component.clk0_phase_shift = \"0\",\n" <<
    "altpll_component.clk1_divide_by = 1,\n" <<
    "altpll_component.clk1_duty_cycle = 50,\n" <<
    "altpll_component.clk1_multiply_by = 2,\n" <<
    "altpll_component.clk1_phase_shift = \"0\",\n" <<
    "altpll_component.compensate_clock = \"CLK0\",\n" <<
    "altpll_component.inclk0_input_frequency = 20000,\n" <<
    "altpll_component.intended_device_family = \"Cyclone II\",\n" <<
    "altpll_component.lpm_hint = \"CBX_MODULE_PREFIX=pll\",\n" <<
    "altpll_component.lpm_type = \"altpll\",\n" <<
    "altpll_component.operation_mode = \"NORMAL\",\n" <<
    "altpll_component.port_activeclock = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_areset = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkbad0 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkbad1 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkloss = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkswitch = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_configupdate = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_fbin = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_inclk0 = \"PORT_USED\",\n" <<
    "altpll_component.port_inclk1 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_locked = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_pfdena = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_phasecounterselect = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_phasedone = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_phasestep = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_phaseupdown = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_pllena = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scanaclr = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scanclk = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scanclkena = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scandata = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scandataout = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scandone = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scanread = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_scanwrite = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clk0 = \"PORT_USED\",\n" <<
    "altpll_component.port_clk1 = \"PORT_USED\",\n" <<
    "altpll_component.port_clk2 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clk3 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clk4 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clk5 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkena0 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkena1 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkena2 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkena3 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkena4 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_clkena5 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_extclk0 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_extclk1 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_extclk2 = \"PORT_UNUSED\",\n" <<
    "altpll_component.port_extclk3 = \"PORT_UNUSED\";\n" <<
    "\n" <<
    "\n" <<
    "endmodule\n" <<
    "\n" <<
    "// ============================================================\n" <<
    "// CNX file retrieval info\n" <<
    "// ============================================================\n" <<
    "// Retrieval info: PRIVATE: ACTIVECLK_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH STRING \"1.000\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH_FEATURE_ENABLED STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH_FREQ_UNIT STRING \"MHz\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH_PRESET STRING \"Low\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH_USE_AUTO STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH_USE_CUSTOM STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: BANDWIDTH_USE_PRESET STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: CLKBAD_SWITCHOVER_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: CLKLOSS_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: CLKSWITCH_CHECK STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: CNX_NO_COMPENSATE_RADIO STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: CREATE_CLKBAD_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: CREATE_INCLK1_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: CUR_DEDICATED_CLK STRING \"c0\"\n" <<
    "// Retrieval info: PRIVATE: CUR_FBIN_CLK STRING \"c0\"\n" <<
    "// Retrieval info: PRIVATE: DEVICE_SPEED_GRADE STRING \"6\"\n" <<
    "// Retrieval info: PRIVATE: DIV_FACTOR0 NUMERIC \"1\"\n" <<
    "// Retrieval info: PRIVATE: DIV_FACTOR1 NUMERIC \"1\"\n" <<
    "// Retrieval info: PRIVATE: DUTY_CYCLE0 STRING \"50.00000000\"\n" <<
    "// Retrieval info: PRIVATE: DUTY_CYCLE1 STRING \"50.00000000\"\n" <<
    "// Retrieval info: PRIVATE: EFF_OUTPUT_FREQ_VALUE0 STRING \"100.000000\"\n" <<
    "// Retrieval info: PRIVATE: EFF_OUTPUT_FREQ_VALUE1 STRING \"200.000000\"\n" <<
    "// Retrieval info: PRIVATE: EXPLICIT_SWITCHOVER_COUNTER STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: EXT_FEEDBACK_RADIO STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: GLOCKED_COUNTER_EDIT_CHANGED STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: GLOCKED_FEATURE_ENABLED STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: GLOCKED_MODE_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: GLOCK_COUNTER_EDIT NUMERIC \"1048575\"\n" <<
    "// Retrieval info: PRIVATE: HAS_MANUAL_SWITCHOVER STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: INCLK0_FREQ_EDIT STRING \"50.000\"\n" <<
    "// Retrieval info: PRIVATE: INCLK0_FREQ_UNIT_COMBO STRING \"MHz\"\n" <<
    "// Retrieval info: PRIVATE: INCLK1_FREQ_EDIT STRING \"100.000\"\n" <<
    "// Retrieval info: PRIVATE: INCLK1_FREQ_EDIT_CHANGED STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: INCLK1_FREQ_UNIT_CHANGED STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: INCLK1_FREQ_UNIT_COMBO STRING \"MHz\"\n" <<
    "// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING \"Cyclone II\"\n" <<
    "// Retrieval info: PRIVATE: INT_FEEDBACK__MODE_RADIO STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: LOCKED_OUTPUT_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: LONG_SCAN_RADIO STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: LVDS_MODE_DATA_RATE STRING \"Not Available\"\n" <<
    "// Retrieval info: PRIVATE: LVDS_MODE_DATA_RATE_DIRTY NUMERIC \"0\"\n" <<
    "// Retrieval info: PRIVATE: LVDS_PHASE_SHIFT_UNIT0 STRING \"deg\"\n" <<
    "// Retrieval info: PRIVATE: LVDS_PHASE_SHIFT_UNIT1 STRING \"deg\"\n" <<
    "// Retrieval info: PRIVATE: MIG_DEVICE_SPEED_GRADE STRING \"Any\"\n" <<
    "// Retrieval info: PRIVATE: MIRROR_CLK0 STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: MIRROR_CLK1 STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: MULT_FACTOR0 NUMERIC \"4\"\n" <<
    "// Retrieval info: PRIVATE: MULT_FACTOR1 NUMERIC \"1\"\n" <<
    "// Retrieval info: PRIVATE: NORMAL_MODE_RADIO STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: OUTPUT_FREQ0 STRING \"100.00000000\"\n" <<
    "// Retrieval info: PRIVATE: OUTPUT_FREQ1 STRING \"200.00000000\"\n" <<
    "// Retrieval info: PRIVATE: OUTPUT_FREQ_MODE0 STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: OUTPUT_FREQ_MODE1 STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: OUTPUT_FREQ_UNIT0 STRING \"MHz\"\n" <<
    "// Retrieval info: PRIVATE: OUTPUT_FREQ_UNIT1 STRING \"MHz\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_RECONFIG_FEATURE_ENABLED STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_RECONFIG_INPUTS_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_SHIFT0 STRING \"0.00000000\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_SHIFT1 STRING \"0.00000000\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_SHIFT_STEP_ENABLED_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_SHIFT_UNIT0 STRING \"deg\"\n" <<
    "// Retrieval info: PRIVATE: PHASE_SHIFT_UNIT1 STRING \"deg\"\n" <<
    "// Retrieval info: PRIVATE: PLL_ADVANCED_PARAM_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_ARESET_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_AUTOPLL_CHECK NUMERIC \"1\"\n" <<
    "// Retrieval info: PRIVATE: PLL_ENA_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_ENHPLL_CHECK NUMERIC \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_FASTPLL_CHECK NUMERIC \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_FBMIMIC_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_LVDS_PLL_CHECK NUMERIC \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_PFDENA_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: PLL_TARGET_HARCOPY_CHECK NUMERIC \"0\"\n" <<
    "// Retrieval info: PRIVATE: PRIMARY_CLK_COMBO STRING \"inclk0\"\n" <<
    "// Retrieval info: PRIVATE: RECONFIG_FILE STRING \"pll.mif\"\n" <<
    "// Retrieval info: PRIVATE: SACN_INPUTS_CHECK STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: SCAN_FEATURE_ENABLED STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: SELF_RESET_LOCK_LOSS STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: SHORT_SCAN_RADIO STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: SPREAD_FEATURE_ENABLED STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: SPREAD_FREQ STRING \"50.000\"\n" <<
    "// Retrieval info: PRIVATE: SPREAD_FREQ_UNIT STRING \"KHz\"\n" <<
    "// Retrieval info: PRIVATE: SPREAD_PERCENT STRING \"0.500\"\n" <<
    "// Retrieval info: PRIVATE: SPREAD_USE STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: SRC_SYNCH_COMP_RADIO STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: STICKY_CLK0 STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: STICKY_CLK1 STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: SWITCHOVER_COUNT_EDIT NUMERIC \"1\"\n" <<
    "// Retrieval info: PRIVATE: SWITCHOVER_FEATURE_ENABLED STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: USE_CLK0 STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: USE_CLK1 STRING \"1\"\n" <<
    "// Retrieval info: PRIVATE: USE_CLKENA0 STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: USE_CLKENA1 STRING \"0\"\n" <<
    "// Retrieval info: PRIVATE: USE_MIL_SPEED_GRADE NUMERIC \"0\"\n" <<
    "// Retrieval info: PRIVATE: ZERO_DELAY_RADIO STRING \"0\"\n" <<
    "// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all\n" <<
    "// Retrieval info: CONSTANT: CLK0_DIVIDE_BY NUMERIC \"1\"\n" <<
    "// Retrieval info: CONSTANT: CLK0_DUTY_CYCLE NUMERIC \"50\"\n" <<
    "// Retrieval info: CONSTANT: CLK0_MULTIPLY_BY NUMERIC \"2\"\n" <<
    "// Retrieval info: CONSTANT: CLK0_PHASE_SHIFT STRING \"0\"\n" <<
    "// Retrieval info: CONSTANT: CLK1_DIVIDE_BY NUMERIC \"1\"\n" <<
    "// Retrieval info: CONSTANT: CLK1_DUTY_CYCLE NUMERIC \"50\"\n" <<
    "// Retrieval info: CONSTANT: CLK1_MULTIPLY_BY NUMERIC \"4\"\n" <<
    "// Retrieval info: CONSTANT: CLK1_PHASE_SHIFT STRING \"0\"\n" <<
    "// Retrieval info: CONSTANT: COMPENSATE_CLOCK STRING \"CLK0\"\n" <<
    "// Retrieval info: CONSTANT: INCLK0_INPUT_FREQUENCY NUMERIC \"20000\"\n" <<
    "// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING \"Cyclone II\"\n" <<
    "// Retrieval info: CONSTANT: LPM_TYPE STRING \"altpll\"\n" <<
    "// Retrieval info: CONSTANT: OPERATION_MODE STRING \"NORMAL\"\n" <<
    "// Retrieval info: CONSTANT: PORT_ACTIVECLOCK STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_ARESET STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_CLKBAD0 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_CLKBAD1 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_CLKLOSS STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_CLKSWITCH STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_CONFIGUPDATE STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_FBIN STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_INCLK0 STRING \"PORT_USED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_INCLK1 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_LOCKED STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_PFDENA STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_PHASECOUNTERSELECT STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_PHASEDONE STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_PHASESTEP STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_PHASEUPDOWN STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_PLLENA STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANACLR STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANCLK STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANCLKENA STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANDATA STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANDATAOUT STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANDONE STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANREAD STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_SCANWRITE STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clk0 STRING \"PORT_USED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clk1 STRING \"PORT_USED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clk2 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clk3 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clk4 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clk5 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clkena0 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clkena1 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clkena2 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clkena3 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clkena4 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_clkena5 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_extclk0 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_extclk1 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_extclk2 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: CONSTANT: PORT_extclk3 STRING \"PORT_UNUSED\"\n" <<
    "// Retrieval info: USED_PORT: @clk 0 0 6 0 OUTPUT_CLK_EXT VCC \"@clk[5..0]\"\n" <<
    "// Retrieval info: USED_PORT: @extclk 0 0 4 0 OUTPUT_CLK_EXT VCC \"@extclk[3..0]\"\n" <<
    "// Retrieval info: USED_PORT: c0 0 0 0 0 OUTPUT_CLK_EXT VCC \"c0\"\n" <<
    "// Retrieval info: USED_PORT: c1 0 0 0 0 OUTPUT_CLK_EXT VCC \"c1\"\n" <<
    "// Retrieval info: USED_PORT: inclk0 0 0 0 0 INPUT_CLK_EXT GND \"inclk0\"\n" <<
    "// Retrieval info: CONNECT: @inclk 0 0 1 1 GND 0 0 0 0\n" <<
    "// Retrieval info: CONNECT: @inclk 0 0 1 0 inclk0 0 0 0 0\n" <<
    "// Retrieval info: CONNECT: c0 0 0 0 0 @clk 0 0 1 0\n" <<
    "// Retrieval info: CONNECT: c1 0 0 0 0 @clk 0 0 1 1\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll.v TRUE\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll.ppf TRUE\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll.inc FALSE\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll.cmp FALSE\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll.bsf FALSE\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll_inst.v TRUE\n" <<
    "// Retrieval info: GEN_FILE: TYPE_NORMAL pll_bb.v TRUE\n" <<
    "// Retrieval info: LIB_FILE: altera_mf\n" <<
    "// Retrieval info: CBX_MODULE_PREFIX: ON\n";
}

void VerilogWriter::printClkFollowerModule() {
    Out << "// see XAPP706\n" <<
    "// the clock follower avoids hold-time violations by generating a signal\n" <<
    "// from a register clocked by clk2x that follows clk1x\n" <<
    "module clock_follower (reset, clk1x, clk2x, clk1x_follower);\n" <<
        "input clk1x, clk2x, reset;\n" <<
        "output reg clk1x_follower;\n" <<
        "reg toggle, tog_1;\n" <<
    "\n" <<
        "always @(posedge clk1x or posedge reset)\n" <<
            "if (reset)\n" <<
                "toggle <= 0;\n" <<
            "else\n" <<
                "toggle <= ~toggle;\n" <<
    "\n" <<
        "always @(posedge clk2x)\n" <<
            "tog_1 <= toggle;\n" <<
    "\n" <<
        "always @(posedge clk2x)\n" <<
            "clk1x_follower <= ~(toggle ^ tog_1);\n" <<
    "\n" <<
    "endmodule\n";
}

void VerilogWriter::printMultipumpModule() {
    // multiplier is clocked at 2x the system clock
    unsigned lpm_pipeline = 2 *
        LEGUP_CONFIG->getParameterInt("MULTIPLIER_PIPELINE_STAGES");

    Out << "module multipump (\n" <<
    "clk,\n" <<
    "clk2x,\n" <<
    "clk1x_follower,\n" <<
    "inA,\n" <<
    "inB,\n" <<
    "outAxB,\n" <<
    "inC,\n" <<
    "inD,\n" <<
    "clken,\n" <<
    "outCxD);\n" <<
    "\n" <<
    "parameter size = 32;\n" <<
    "parameter sign = \"UNSIGNED\";\n" <<
    "\n" <<
    "input	   clk, clk2x, clk1x_follower, clken;\n" <<
    "input	   [size-1:0] inA, inB, inC, inD;\n" <<
    "output reg [size*2-1:0] outAxB, outCxD;\n" <<
    "\n" <<
    "wire [size*2-1:0] dsp_out;\n" <<
    "reg [size*2-1:0]  resultAB_reg, resultCD_reg;\n" <<
    "\n" <<
    "\n" <<
    "always @(*) begin\n" <<
    "outCxD = resultCD_reg;\n" <<
    "outAxB = resultAB_reg;\n" <<
    "end\n" <<
    "\n" <<
    "\n" <<
    "reg [size*2-1:0] dsp_out_fast;\n" <<
    "\n" <<
    "\n" <<
    "\n" <<
    "always @(posedge clk2x) begin\n" <<
    "dsp_out_fast <= dsp_out;\n" <<
    "end\n" <<
    "\n" <<
    "\n" <<
    "// the C x D result is ready\n" <<
    "always @(*) begin\n" <<
    "resultCD_reg <= dsp_out;\n" <<
    "end\n" <<
    "\n" <<
    "// the A x B result is ready\n" <<
    "always @(*) begin\n" <<
    "resultAB_reg <= dsp_out_fast;\n" <<
    "end\n" <<
    "\n" <<
    "\n" <<
    "\n" <<
    "wire      mux_sel;\n" <<
    "\n" <<
    "\n" <<
    "assign mux_sel = ~clk1x_follower;\n" <<
    "\n" <<
    "reg       [size-1:0]  dataa;\n" <<
    "reg       [size-1:0]  datab;\n" <<
    "wire      [size-1:0]  dataa_wire;\n" <<
    "wire      [size-1:0]  datab_wire;\n" <<
    "assign dataa_wire = dataa;\n" <<
    "assign datab_wire = datab;\n" <<
    "\n" <<
    "always @(*)\n" <<
    "begin\n" <<
    "if (mux_sel == 0) \n" <<
    "begin\n" <<
    "dataa = inA;\n" <<
    "datab = inB;\n" <<
    "end\n" <<
    "else \n" <<
    "begin\n" <<
    "dataa = inC;\n" <<
    "datab = inD;\n" <<
    "end\n" <<
    "end\n" <<
    "\n" <<
    "\n" <<
    "\n" <<
    "// DSP multiplier - has two pipeline stages, so both inputs and outputs\n" <<
    "// are registered\n" <<
    "lpm_mult	lpm_mult_component (\n";
    if (lpm_pipeline == 0) {
        Out << ".clock (),\n";
    } else {
        Out << ".clock (clk2x),\n";
    }
    Out << ".dataa (dataa_wire),\n" <<
    ".datab (datab_wire),\n" <<
    ".result (dsp_out),\n" <<
    ".aclr (1'b0),\n" <<
    ".clken (1'b1),\n" <<
    ".sum (1'b0));\n" <<
    "\n" <<
    "defparam\n" <<
    "lpm_mult_component.lpm_hint = \"DEDICATED_MULTIPLIER_CIRCUITRY=YES,MAXIMIZE_SPEED=5\",\n" <<
    "lpm_mult_component.lpm_representation = sign,\n" <<
    "lpm_mult_component.lpm_type = \"LPM_MULT\",\n" <<
    "lpm_mult_component.lpm_pipeline = " << lpm_pipeline << ",\n" <<
    "lpm_mult_component.lpm_widtha = size,\n" <<
    "lpm_mult_component.lpm_widthb = size,\n" <<
    "lpm_mult_component.lpm_widthp = size*2;\n" <<
    "\n" <<
    "\n" <<
    "endmodule\n";
}

void VerilogWriter::printDE4() {
    Out << "module de4 (\n" <<
    "	OSC_50_BANK2,\n" <<
    "    BUTTON,\n" <<
    "    LED,\n" <<
    "	SEG0_D,\n" <<
    "	SEG1_D\n" <<
    ");\n" <<
    "    input OSC_50_BANK2;\n" <<
    "    input [1:0] BUTTON;\n" <<
    "    output [6:0] SEG0_D;\n" <<
    "    output [6:0] SEG1_D;\n" <<
    "    output [7:0] LED;\n" <<
    "\n" <<
    "    de2 de2_inst (\n" <<
    "        .CLOCK_50 (OSC_50_BANK2),\n" <<
    "        .LEDG (LED),\n" <<
    "        .KEY (BUTTON),\n" <<
    "        .SW (),\n" <<
    "        .HEX0 (SEG0_D),\n" <<
    "        .HEX1 (SEG1_D),\n" <<
    "        .HEX2 (),\n" <<
    "        .HEX3 (),\n" <<
    "        .HEX4 (),\n" <<
    "        .HEX5 (),\n" <<
    "        .HEX6 (),\n" <<
    "        .HEX7 ()\n" <<
    "    );\n" <<
    "\n" <<
    "endmodule\n";
}



void VerilogWriter::printDE2() {
    Out << "module de2 (CLOCK_50, KEY, SW, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7, LEDG);\n" <<
    "    input CLOCK_50;\n" <<
    "    output [7:0] LEDG;\n" <<
    "    input [1:0] KEY;\n" <<
    "    input [15:0] SW;\n" <<
    "    output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7;\n" <<
    "\n" <<
    "    wire  clk;\n" <<
    "    wire  clk2x;\n" <<
    "    wire  clk1x_follower;\n" <<
    "    pll pll_inst (\n" <<
    "        .inclk0 (CLOCK_50),\n" <<
    "        .c0 (clk),\n" <<
    "        .c1 (clk2x)\n" <<
    "    );\n" <<
    "\n" <<
    "    wire reset = ~KEY[0];\n" <<
    "    wire go = ~KEY[1];\n" <<
    "\n" <<
    "    wire  start;\n" <<
    "    wire [31:0] return_val;\n" <<
    "    wire  finish;\n" <<
    "\n" <<
    "    reg [31:0] return_val_reg;\n" <<
    "    \n" <<
    "    hex_digits h7( .x(return_val_reg[31:28]), .hex_LEDs(HEX7));\n" <<
    "    hex_digits h6( .x(return_val_reg[27:24]), .hex_LEDs(HEX6));\n" <<
    "    hex_digits h5( .x(return_val_reg[23:20]), .hex_LEDs(HEX5));\n" <<
    "    hex_digits h4( .x(return_val_reg[19:16]), .hex_LEDs(HEX4));\n" <<
    "    hex_digits h3( .x(return_val_reg[15:12]), .hex_LEDs(HEX3));\n" <<
    "    hex_digits h2( .x(return_val_reg[11:8]), .hex_LEDs(HEX2));\n" <<
    "    hex_digits h1( .x(return_val_reg[7:4]), .hex_LEDs(HEX1));\n" <<
    "    hex_digits h0( .x(return_val_reg[3:0]), .hex_LEDs(HEX0));\n" <<
    "\n" <<
    "    clock_follower clock_follower_inst (\n" <<
    "        .reset ( reset ),\n" <<
    "        .clk1x ( clk ),\n" <<
    "        .clk2x ( clk2x ),\n" <<
    "        .clk1x_follower ( clk1x_follower )\n" <<
    "    );\n" <<
    "\n" <<
    "    top top_inst (\n" <<
    "        .clk (clk),\n" <<
    "        .clk2x (clk2x),\n" <<
    "        .clk1x_follower (clk1x_follower),\n" <<
    "        .reset (reset),\n" <<
    "        .start (start),\n" <<
    "        .finish (finish),\n" <<
    "        .return_val (return_val)\n" <<
    "    );\n" <<
    "\n" <<
    "    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,\n" <<
    "                s_DONE = 3'b100;\n" <<
    "\n" <<
    "    // state registers\n" <<
    "    reg [3:0] y_Q, Y_D;\n" <<
    "\n" <<
    "    assign LEDG[3:0] = y_Q;\n" <<
    "\n" <<
    "    // next state\n" <<
    "    always @(*)\n" <<
    "    begin\n" <<
    "        case (y_Q)\n" <<
    "            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;\n" <<
    "\n" <<
    "            s_START: Y_D = s_EXE;\n" <<
    "\n" <<
    "            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;\n" <<
    "\n" <<
    "            s_DONE: Y_D = s_DONE;\n" <<
    "\n" <<
    "            default: Y_D = 3'bxxx;\n" <<
    "        endcase\n" <<
    "    end\n" <<
    "\n" <<
    "    // current state\n" <<
    "    always @(posedge clk)\n" <<
    "    begin\n" <<
    "        if (reset) // synchronous clear\n" <<
    "            y_Q <= s_WAIT;\n" <<
    "        else\n" <<
    "            y_Q <= Y_D;\n" <<
    "    end\n" <<
    "\n" <<
    "    always @(posedge clk)\n" <<
    "        if (y_Q == s_EXE && finish)\n" <<
    "            return_val_reg <= return_val;\n" <<
    "        else if (y_Q == s_DONE)\n" <<
    "            return_val_reg <= return_val_reg;\n" <<
    "        else\n" <<
    "            return_val_reg <= 0;\n" <<
    "\n" <<
    "\n" <<
    "    assign start = (y_Q == s_START);\n" <<
    "endmodule\n" <<
    "\n";
}

void VerilogWriter::printHex() {
    Out << "module hex_digits(x, hex_LEDs);\n" <<
    "    input [3:0] x;\n" <<
    "    output [6:0] hex_LEDs;\n" <<
    "    \n" <<
    "    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |\n" <<
    "                            (~x[3] & x[2] & ~x[1] & ~x[0]) |\n" <<
    "                            (x[3] & x[2] & ~x[1] & x[0]) |\n" <<
    "                            (x[3] & ~x[2] & x[1] & x[0]);\n" <<
    "    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |\n" <<
    "                            (x[3] & x[1] & x[0]) |\n" <<
    "                            (x[3] & x[2] & ~x[0]) |\n" <<
    "                            (x[2] & x[1] & ~x[0]);\n" <<
    "    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |\n" <<
    "                            (x[3] & x[2] & x[1]) |\n" <<
    "                            (~x[3] & ~x[2] & x[1] & ~x[0]);\n" <<
    "    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | \n" <<
    "                            (~x[3] & x[2] & ~x[1] & ~x[0]) | \n" <<
    "                            (x[2] & x[1] & x[0]) | \n" <<
    "                            (x[3] & ~x[2] & x[1] & ~x[0]);\n" <<
    "    assign hex_LEDs[4] = (~x[3] & x[0]) |\n" <<
    "                            (~x[3] & x[2] & ~x[1]) |\n" <<
    "                            (~x[2] & ~x[1] & x[0]);\n" <<
    "    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | \n" <<
    "                            (~x[3] & ~x[2] & x[1]) | \n" <<
    "                            (~x[3] & x[1] & x[0]) | \n" <<
    "                            (x[3] & x[2] & ~x[1] & x[0]);\n" <<
    "    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | \n" <<
    "                            (x[3] & x[2] & ~x[1] & ~x[0]) | \n" <<
    "                            (~x[3] & x[2] & x[1] & x[0]);\n" <<
    "    \n" <<
    "endmodule\n";

}


void VerilogWriter::printRAMModule() {
    RTLModule *m = new RTLModule("ram_one_port");

    m->addParam("width_a", "0");
    m->addParam("widthad_a", "0");
    m->addParam("numwords_a", "0");
    m->addParam("init_file", "\"UNUSED\"");

    RTLSignal *clk  = m->addIn("clk");
    RTLSignal *addr = m->addIn("address", RTLWidth("(widthad_a-1)"));
    RTLSignal *we   = m->addIn("write_enable");
    RTLSignal *data = m->addIn("data", RTLWidth("(width_a-1)"));
    RTLSignal *q   = m->addOut("q", RTLWidth("(width_a-1)"));

    // Altera specific RAM
    RTLModule *a = m->addModule("altsyncram", "altsyncram_component");

    RTLConst *one   = m->addConst("1");
    RTLConst *zero  = m->addConst("0");
    RTLConst *blank = m->addConst("");

    // need this to avoid:
    // # ** Warning: (vsim-3016) div_const.v(111): Port type is incompatible
    // with connection (port 'clk').
    RTLSignal *clk_wire = m->addWire("clk_wire");
    clk_wire->connect(clk);

    a->addIn("wren_a")->connect(we);
    a->addIn("clock0")->connect(clk_wire);
    a->addIn("address_a")->connect(addr);
    a->addIn("data_a")->connect(data);
    a->addOut("q_a")->connect(q);
    a->addIn("aclr0")->connect(zero);
    a->addIn("aclr1")->connect(zero);
    a->addIn("address_b")->connect(one);
    a->addIn("addressstall_a")->connect(zero);
    a->addIn("addressstall_b")->connect(zero);
    RTLSignal *byteena_a = a->addIn("byteena_a");
    a->addIn("byteena_b")->connect(one);
    a->addIn("clock1")->connect(one);
    a->addIn("clocken0")->connect(one);
    a->addIn("clocken1")->connect(one);
    a->addIn("clocken2")->connect(one);
    a->addIn("clocken3")->connect(one);
    a->addIn("data_b")->connect(one);
    a->addOut("eccstatus")->connect(blank);
    a->addOut("q_b")->connect(blank);
    a->addIn("rden_a")->connect(one);
    a->addIn("rden_b")->connect(one);
    a->addIn("wren_b")->connect(zero);

    if (alloc->usesGenericRAMs()) {
        m->addParam("width_be", "0");
        RTLSignal *byteena = m->addIn("byteena", RTLWidth("width_be-1"));
        byteena_a->connect(byteena);
    } else {
         byteena_a->connect(one);
    }

    a->addParam("clock_enable_input_a", "\"BYPASS\"");
    a->addParam("clock_enable_output_a", "\"BYPASS\"");
    a->addParam("init_file", "init_file");
    // the space actually matters for simulation
    if (LEGUP_CONFIG->getDeviceFamily() == "CycloneII") {
        a->addParam("intended_device_family", "\"Cyclone II\"");
    } else if (LEGUP_CONFIG->getDeviceFamily() == "StratixIV") {
        a->addParam("intended_device_family", "\"Stratix IV\"");
    } else {
        llvm_unreachable("Unrecognized device family!");
    }
    a->addParam("lpm_hint", "\"ENABLE_RUNTIME_MOD=NO\"");
    a->addParam("lpm_type", "\"altsyncram\"");
    a->addParam("numwords_a", "numwords_a");
    a->addParam("operation_mode", "\"SINGLE_PORT\"");
    a->addParam("outdata_aclr_a", "\"NONE\"");
    a->addParam("outdata_reg_a", "\"UNREGISTERED\"");
    //a->addParam("outdata_reg_a", "\"CLOCK0\"");
    a->addParam("power_up_uninitialized", "\"FALSE\"");
    //a->addParam("read_during_write_mode_port_a", "\"NEW_DATA_NO_NBE_READ\"");
    a->addParam("widthad_a", "widthad_a");
    a->addParam("width_a", "width_a");
    if (alloc->usesGenericRAMs())
        a->addParam("width_byteena_a", "width_be");
    else
        a->addParam("width_byteena_a", "1");

    // doesn't work on StratixII:
    //"    altsyncram_component.read_during_write_mode_port_a = "DONT_CARE","

    printRTL(m);
    delete m;
}

void VerilogWriter::printMemoryVariables(bool top) {
    std::string outputPrefix, inputPrefix;
    if (!top) {
        outputPrefix = "output reg";
        inputPrefix = "input wire";
    } else {
        outputPrefix = "wire";
        inputPrefix = "wire";
    }

    Out << outputPrefix << " [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] " <<
        "memory_controller" << "_address;\n";
    Out << outputPrefix << " " << "memory_controller" << "_enable;\n";
    Out << outputPrefix << " " << "memory_controller" << "_write_enable;\n";
    Out << inputPrefix << " " << "memory_controller" << "_waitrequest;\n";
    Out << outputPrefix << " [`MEMORY_CONTROLLER_DATA_SIZE-1:0] " <<
        "memory_controller" << "_in;\n";
    if (alloc->usesGenericRAMs())
        Out << outputPrefix << " [1:0] " << "memory_controller" << "_size;\n";
    Out << inputPrefix << " [`MEMORY_CONTROLLER_DATA_SIZE-1:0] " <<
        "memory_controller" << "_out;\n";
    Out << "\n";

}

void VerilogWriter::printVerilogTestbench() {

    RTLModule *m = new RTLModule("main_tb");

    RTLSignal *clk_orig  = m->addReg("clk_orig");
    RTLSignal *clk  = m->addWire("clk");
    RTLSignal *clk2x  = m->addWire("clk2x");
    RTLSignal *clk1x_follower  = m->addWire("clk1x_follower");
    RTLSignal *reset  = m->addReg("reset");
    RTLSignal *start  = m->addReg("start");
    RTLSignal *return_val  = m->addWire("return_val", RTLWidth("31"));
    RTLSignal *finish  = m->addWire("finish");

    // create pll
    /*pll	pll_inst (
        .inclk0 ( clk_orig ), // 50 MHz
        .c0 ( clk ), // 50 MHz
        .c1 ( clk2x ) // 100 MHz
        );
        */
    RTLModule *pll = m->addModule("pll", "pll_inst");
    pll->addIn("inclk0")->connect(clk_orig);
    // must have 1x clock coming from the same PLL as the 2x clock to avoid
    // large clock skew that can cause hold-time violations
    pll->addOut("c0")->connect(clk);
    pll->addOut("c1")->connect(clk2x);

    // create clock follower
    /*
    clock_follower clock_follower_inst (
        .reset ( reset ),
        .clk1x ( clk ),
        .clk2x ( clk2x ),
        .clk1x_follower ( clk1x_follower )
    );
    */
    RTLModule *clock_follower = m->addModule("clock_follower",
            "clock_follower_inst");
    clock_follower->addIn("reset")->connect(reset);
    clock_follower->addIn("clk1x")->connect(clk);
    clock_follower->addIn("clk2x")->connect(clk2x);
    clock_follower->addOut("clk1x_follower")->connect(clk1x_follower);

    RTLModule *t = m->addModule("top", "top_inst");

    t->addIn("clk")->connect(clk);
    t->addIn("clk2x")->connect(clk2x);
    t->addIn("clk1x_follower")->connect(clk1x_follower);
    t->addIn("reset")->connect(reset);
    t->addIn("start")->connect(start);
    t->addOut("finish")->connect(finish);
    t->addOut("return_val")->connect(return_val);

    std::string old_body = m->getBody();
    raw_string_ostream body (old_body);

    body  << 
        "\n" <<
        "initial \n" <<
        "    clk_orig = 0;\n" <<
        "always @(clk_orig)\n" <<
        "    clk_orig <= #10 ~clk_orig;\n" <<
        "\n" <<
        "initial begin\n" <<
        "//$monitor(\"At t=%t clk=%b %b %b %b %d\", $time, clk, reset, " <<
        "start, finish, return_val);\n" <<
        "@(negedge clk);\n" <<
        "reset <= 1;\n" <<
        "@(negedge clk);\n" <<
        "reset <= 0;\n" <<
        "start <= 1;\n" <<
        "\n" <<
        "end\n" <<
        "\n" <<
        "always@(finish) begin\n" <<
        "    if (finish == 1) begin\n" <<
        "        $display(\"At t=%t clk=%b finish=%b return_val=%d\", " <<
        "$time, clk, finish, return_val);\n" <<
        "        $display(\"Cycles: %d\", $time/20+0.5);\n" <<
        "        $finish;\n" <<
        "    end\n" <<
        "end\n";

    m->setBody(body .str());
    printRTL(m);
    delete m;
}

// we should strip the altsyncrams for non-constnat global variables
// when hw/sw partitioning
bool VerilogWriter::stripRAM(const Value *R) {
    // if pure h/w then don't strip anything
    if (LEGUP_CONFIG->numAccelerators() == 0) return false;

    if (const GlobalVariable *G = dyn_cast<GlobalVariable>(R)) {
        // don't strip constant values
        if (!G->isConstant()) {
            return true;
        }
    }
    return false;
}

void VerilogWriter::printMemCtrlModuleHeader() {
    Out << "`timescale 1 ns / 1 ns\n";
    Out << "module memory_controller" << "\n" <<
        "(" << "\n" <<
        "\t" << "clk," << "\n" <<
        "\t" << "memory_controller_address," << "\n" <<
        "\t" << "memory_controller_enable," << "\n" <<
        "\t" << "memory_controller_write_enable," << "\n" <<
        "\t" << "memory_controller_in," << "\n";
    if (alloc->usesGenericRAMs())
        Out <<
        "\t" << "memory_controller_size," << "\n";
    Out <<
        "\t" << "memory_controller_out_reg" << "\n" <<
        ");" << "\n" <<
        "" << "\n";
}

void VerilogWriter::printMemCtrlVariables() {
    Out << "" << "\n" <<
        "input clk;" << "\n" <<
        "input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;"
        << "\n" <<
        "input memory_controller_enable;" << "\n" <<
        "input memory_controller_write_enable;" << "\n";
    if (alloc->usesGenericRAMs()) {
        Out << "input [64-1:0] memory_controller_in;" << "\n" <<
            "input [1:0] memory_controller_size;" << "\n" <<
            "output reg [64-1:0] memory_controller_out_reg;" << "\n" <<
            "reg [64-1:0] memory_controller_out;" << "\n" <<
            "" << "\n";
    } else {
        Out << "input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;"
            << "\n" <<
            "output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] " <<
            "memory_controller_out_reg;" << "\n" <<
            "reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;" <<
            "\n" << "\n";
    }
}

void VerilogWriter::printMemCtrlRAMs() {
    for (Allocation::const_ram_iterator i = alloc->ram_begin(), e = alloc->ram_end();
            i != e; ++i) {
        const RAM *R = *i;
        if (stripRAM(R->getValue())) continue;
        Out << "\n";
        printRamInstance(R);
    }
}

void VerilogWriter::printRamInstance(const RAM *R) {

    std::string name = R->getName();
    unsigned addresswidth = R->getAddrWidth();
    unsigned datawidth = R->getDataWidth();

    if (!LEGUP_CONFIG->getParameterInt("LOCAL_RAMS")) {
        if (alloc->usesGenericRAMs() && R->isStruct()) {
             Out << "reg [8-1:0] " << name << "_byteena;\n";
        }
        Out << "reg [" << addresswidth-1 << ":0] " << name << "_address" << ";\n";
        Out << "reg " << name << "_write_enable" << ";\n";
        Out << "reg [" << datawidth-1 << ":0] " << name << "_in" << ";\n";
        Out << "wire [" << datawidth-1 << ":0] " << name << "_out" << ";\n";
        Out << "\n";
    }

    Out << "// " << getValueStr(R->getValue()) << '\n';
    Out << "ram_one_port " << name << " (" << "\n" <<
        "\t" << ".clk( clk )," << "\n" <<
        "\t" << ".address( " << name << "_address )," << "\n" <<
        "\t" << ".write_enable( " << name << "_write_enable )," << "\n" <<
        "\t" << ".data( " << name << "_in )," << "\n";
    if (alloc->usesGenericRAMs()) {
        if (R->isStruct()) {
            Out << "\t" << ".byteena( " << name << "_byteena )," << "\n";
        } else {
            Out << "\t" << ".byteena( 1'b1 )," << "\n";
        }
    }
    Out << "\t" << ".q( " << name << "_out )" << "\n" << ");\n";

    // parameters
    Out << "defparam " << name << ".width_a = " << datawidth << ";\n";
    Out << "defparam " << name << ".widthad_a = " << addresswidth << ";\n";
    if (R->isStruct()) {
        Out << "defparam " << name << ".width_be = " << 8 << ";\n";
    } else if (alloc->usesGenericRAMs()) {
        Out << "defparam " << name << ".width_be = " << 1 << ";\n";
    }
    Out << "defparam " << name << ".numwords_a = " << R->getElements() << ";\n";

    if (R->getInitializer()) {
        Out << "defparam " << name << ".init_file = ";
        Out << "\"" << R->getMifFileName() << "\";\n";
    }

}

void VerilogWriter::printMemoryController() {

    printMemCtrlModuleHeader();

    printMemCtrlVariables();

    for (Allocation::const_ram_iterator i =
            alloc->ram_begin(), e = alloc->ram_end(); i != e; ++i) {
        const RAM *R = *i;
        R->generateMIF();
    }

    if (LEGUP_CONFIG->getParameterInt("LOCAL_RAMS")) {
        Out << "endmodule " << "\n";
        return;
    }

    printMemCtrlRAMs();

    Out << "wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag = " <<
        "memory_controller_address[" << "`MEMORY_CONTROLLER_ADDR_SIZE-1" << ":"
        << "`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];\n";

    Out << "reg [`MEMORY_CONTROLLER_TAG_SIZE-1:0] prevTag;\n";
    Out << "reg [2:0] prevAddr;\n";
    if (alloc->usesGenericRAMs()) {
        Out << "reg [1:0] prevSize;\n";
    }

    indent0 = std::string(1, '\t');
    indent = std::string(2, '\t');

    Out << "always @(posedge clk)" << "\n";
    Out << "begin" << "\n";
    Out << indent0 << "prevTag <= tag;\n";
    Out << indent0 << "prevAddr <= memory_controller_address[2:0];\n";
    if (alloc->usesGenericRAMs()) {
        Out << indent0 << "prevSize <= memory_controller_size;\n";
    }
    Out << "end" << "\n";

    printRAMSignals();

    Out << "" << "\n" <<
        "endmodule " << "\n";
}

void VerilogWriter::printRAMTag(const RAM *R) {
    if (stripRAM(R->getValue())) return;

    Out << indent0 << "`" << R->getTag() << ":\n";
    Out << indent0 << "begin\n";
    if (!R->isStruct()) {

        /*
       avalon_mem = memory_controller_address[5-1+2:0] + SRAM_offset;
       memory_controller_waitrequest = avalon_waitrequest;
       avalon_read = memory_controller_enable & ~memory_controller_write_enable;
       avalon_write = memory_controller_enable & memory_controller_write_enable;
       avalon_data = memory_controller_in[32-1:0];
       */

        // ignore lower bits if necessary
        int bytes = R->getDataWidth() / 8;
        int ignore = (bytes == 0) ? 0 : (int)log2(bytes);

        //Out << indent << R->getName() << "_address = memory_controller_address[" << R->getAddrWidth() << "-1:0];\n";
        Out << indent << R->getName() <<
            "_address = memory_controller_address[" << R->getAddrWidth() <<
            "-1+" << ignore << ":" << ignore << "];\n";

        Out << indent << R->getName() << "_address = memory_controller_address[" << R->getAddrWidth() << "-1+" << ignore << ":" << ignore << "];\n";

        Out << indent << R->getName() << "_write_enable = memory_controller_write_enable;\n";
        Out << indent << R->getName() << "_in[" << R->getDataWidth() << "-1:0] = memory_controller_in[" << R->getDataWidth() << "-1:0];\n";
    } else {
        Out << indent0 << R->getName() <<
            "_write_enable = memory_controller_write_enable;\n";
        Out << indent0 << R->getName() << "_address = memory_controller_address[" << R->getAddrWidth() + 3 << "-1:3];\n";
        Out << indent << "case(memory_controller_size)\n";

        Out << indent << "\t3:\n";
        Out << indent << "\tbegin\n";
        Out << indent << "\t\t" << R->getName() <<
            "_in[64-1:0] = memory_controller_in[64-1:0];\n";
        Out << indent << "\t\t" << R->getName() << "_byteena = 8'b11111111;\n";
        Out << indent << "\tend\n";


        Out << indent << "\t2:\n";
        Out << indent << "\tbegin\n";
        Out << indent << "\t\tif (memory_controller_address [2:2] == 0)\n";
        Out << indent << "\t\tbegin\n";
        Out << indent << "\t\t\t" << R->getName() <<
            "_in[32-1:0] = memory_controller_in[32-1:0];\n";
        Out << indent << "\t\t\t" << R->getName() <<
            "_byteena = 8'b00001111;\n";
        Out << indent << "\t\tend\n";
        Out << indent << "\t\telse\n";
        Out << indent << "\t\tbegin\n";
        Out << indent << "\t\t\t" << R->getName() <<
            "_in[64-1:32] = memory_controller_in[32-1:0];\n";
        Out << indent << "\t\t\t" << R->getName() <<
            "_byteena = 8'b11110000;\n";
        Out << indent << "\t\tend\n";
        Out << indent << "\tend\n";


        Out << indent << "\t1:\n";
        Out << indent << "\tbegin\n";
        Out << indent << "\t\tcase (memory_controller_address[2:1])\n";
        for (int c = 0; c < 4; c++) {
            Out << indent << "\t\t\t" << c << ":\n";
            Out << indent << "\t\t\tbegin\n";
            Out << indent << "\t\t\t\t" << R->getName() <<
                "_in[" << ((c * 16) + 16) << "-1:" << (c * 16) << "] " <<
                "= memory_controller_in[16-1:0];\n";
            Out << indent << "\t\t\t\t" << R->getName() << "_byteena " <<
                "= 8'd" << (3 << (c * 2)) << ";\n";
            Out << indent << "\t\t\tend\n";
        }
        Out << indent << "\t\tendcase\n";
        Out << indent << "\tend\n";


        Out << indent << "\t0:\n";
        Out << indent << "\t\tcase (memory_controller_address [2:0])\n";
        for (int i = 0; i < 8; i++) {
            Out << indent << "\t\t\t" << i << ":\n";
            Out << indent << "\t\t\tbegin\n";
            Out << indent << "\t\t\t\t" << R->getName() <<
                "_in[" << 8 * (i + 1) << "-1:"<< 8 * i << "] = " <<
                "memory_controller_in[8-1:0];\n";
            Out << indent << "\t\t\t\t" << R->getName() << "_byteena = " <<
                "8'd" << (1 << i) << ";\n";
            Out << indent << "\t\t\tend\n";
        }
        Out << indent << "\tendcase\n";

        Out << indent << "endcase\n";
    }

    // debugging
    //Out << "always @(posedge clk)" << "\n";
    //Out << indent0 << "$display(\"addr:%x\",memory_controller_address);\n";
    /*
       Out << indent << "$display(\"" << R->getName() << "_address" <<
            ": %d we: %d in: %d out: %d\"," <<
       R->getName() << "_address," <<
       R->getName() << "_write_enable," <<
       R->getName() << "_in," <<
       R->getName() << "_out);\n";
       */

    Out << indent0 << "end\n";

}

void VerilogWriter::printRAMTagCase() {

    Out << "case(tag)" << "\n";

    printBlankDefaultCase(indent0);

    for (Allocation::const_ram_iterator ram = alloc->ram_begin(), e =
            alloc->ram_end(); ram != e; ++ram) {
        printRAMTag(*ram);
    }
    Out << "endcase" << "\n";
    Out << "end" << "\n";
}

void VerilogWriter::printRAMSignals() {
    if (alloc->getNumRAMs() == 0) return;

    Out << "always @(*)" << "\n";
    Out << "begin" << "\n";

    for (Allocation::const_ram_iterator i = alloc->ram_begin(), e = alloc->ram_end();
            i != e; ++i) {
        const RAM *R = *i;
        if (stripRAM(R->getValue())) continue;
        if (alloc->usesGenericRAMs() && R->isStruct())
            Out << R->getName() << "_byteena = 0;\n";
        Out << R->getName() << "_address = 0;\n";
        Out << R->getName() << "_write_enable = 0;\n";
        Out << R->getName() << "_in = 0;\n";
    }

    printRAMTagCase();

    // need to steer output based on previous tag
    printPrevTagCase();

    Out << "always @(posedge clk)\n";
    Out << "begin" << "\n";
    Out << "memory_controller_out_reg <= memory_controller_out;\n";
    Out << "end" << "\n";

    // debugging
    /*
       Out << "always @(*)\n" <<
       "$display(\"memory_controller_out=%d prevTag=%d\", " <<
       "memory_controller_out, prevTag);\n";
       */

}

void VerilogWriter::printPrevTagCase() {
    Out << "always @(*)\n";
    Out << "begin" << "\n";
    Out << "memory_controller_out = memory_controller_out_reg;\n";
    Out << "case(prevTag)" << "\n";
    Out << indent << "default:" << "\n";
    Out << indent << "begin" << "\n";
    Out << indent << "\t// keep previous value if prevTag is from processor " <<
        "(in case waitrequest is high)" << "\n";
    Out << indent << "\tmemory_controller_out = memory_controller_out_reg;\n";
    Out << indent << "end" << "\n";
    for (Allocation::const_ram_iterator i = alloc->ram_begin(), e = alloc->ram_end();
            i != e; ++i) {
        const RAM *R = *i;

        if (stripRAM(R->getValue())) continue;
        Out << indent << "`" << R->getTag() << ":\n";
        Out << indent << "begin\n";
        if (!R->isStruct()) {
            Out << indent << "memory_controller_out = " << R->getName() <<
                "_out;\n";

            // ignore lower bits if necessary
            int bytes = R->getDataWidth() / 8;
            int ignore = (bytes == 0) ? 0 : (int)log2(bytes);
            if (ignore > 0) {
                // We do not support reading a single byte from an integer etc.
                // all pointers must be aligned to the word size of the ram
                // NOTE: memory_controller_address can be temporarily wrong
                // (due to being a combination signal) so we check the
                // prevAddr register instead
                Out << indent << "if (prevAddr[" << ignore-1 << ":0] != 0)\n";
                Out << indent << "begin\n";
                Out << indent << "\t$display(\"Error: memory address not " <<
                    "aligned to ram word size!\");\n";
                Out << indent << "\t$finish;\n";
                Out << indent << "end\n";
            }

        } else {
            printPrevAddr(R);
        }
        // check for unaligned addresses
        printAddrAlignmentCheck();
        Out << indent << "end\n";
    }
    Out << "endcase" << "\n";
    Out << "end" << "\n";
}

// prevAddr is the bottom 3 bits of the previous address
void VerilogWriter::printPrevAddr(const RAM *R) {
    Out << indent << "case(prevAddr)\n";

    for (int i = 0; i < 8; i++) {
        int dataSize = 0;
        int prevRamOutLo = 0;
        int prevRamOutHi = 0;
        switch(i) {
            case 0:
                // long long
                dataSize = 64; break;
            case 1:
            case 2:
            case 3:
            case 4:
                // int
                dataSize = 32; break;
            case 5:
            case 6:
                // short
                dataSize = 16; break;
            case 7:
                // byte
                dataSize = 8; break;
            default:
                llvm_unreachable(0);
        }

        prevRamOutLo = i*8;
        prevRamOutHi = i*8 + dataSize;

        Out << indent << "\t" << i << ": " <<
            "memory_controller_out[" << dataSize << "-1:0]"
                " = " << R->getName() << "_out" << "[" << prevRamOutHi << "-1:"
                << prevRamOutLo << "];\n";
    }
    Out << indent << "endcase\n";
}

void VerilogWriter::printAddrAlignmentCheck() {
    Out << indent << "case(prevSize)\n";
    printBlankDefaultCase(indent);
    for (unsigned i = 3; i > 0; --i) {
        Out << indent << "\t" << i << ":\n";
        Out << indent << "\tbegin\n";
        Out << indent << "\t\tif (prevAddr[" << i - 1 << ":0] != 0)\n";
        Out << indent << "\t\tbegin\n";
        Out << indent << "\t\t\t$display(\"Error: " <<
            "memory address not aligned to ram size!\");\n";
        Out << indent << "\t\t\t$finish;\n";
        Out << indent << "\t\tend\n";
        Out << indent << "\tend\n";
    }
    Out << indent << "endcase\n";
}

void VerilogWriter::printTop(const Function * F) {

    for (Allocation::const_define_iterator i = alloc->define_begin(), e =
            alloc->define_end(); i != e; ++i) {
        const std::string name = i->first;
        const std::string value = i->second;
        const std::string comment = alloc->getDefineComment(name);
        if (!comment.empty()) {
            Out << "// " << comment << "\n";
        }

        Out << "`define " << name << " " << value << "\n";
    }


    // print top for hybrid flow
    if (LEGUP_CONFIG->numAccelerators() > 0) {

		printTopHybrid(F, alloc->getDataSize());
		return;
	}

    Out << "\n";
    Out << "// Turn off warning 'ignoring unsupported system task'\n";
    Out << "// altera message_off 10175\n";
    Out << "\n";

    Out << "module top\n" <<
    "\t(\n" <<
    "\t\tclk,\n" <<
    "\t\tclk2x,\n" <<
    "\t\tclk1x_follower,\n" <<
    "\t\treset,\n" <<
    "\t\tstart,\n" <<
    "\t\tfinish,\n" <<
    "\t\treturn_val\n" <<
    "\t);\n";

    Out << "input clk;\n";
    Out << "input clk2x;\n";
    Out << "input clk1x_follower;\n";
    Out << "input reset;\n";
    Out << "input start;\n";
    Out << "output wire finish;\n";
    Out << "output wire [31:0] return_val;\n";


    // instantiate memory controller
    printMemoryVariables(true);

    Out << "assign memory_controller_waitrequest = 0;\n\n";

	printMemoryInstance();


    // avalon

    // instantiate main
        Out << "main main_inst(" << "\n" <<
            "\t" << ".clk( clk )," << "\n" <<
            "\t" << ".clk2x( clk2x )," << "\n" <<
            "\t" << ".clk1x_follower( clk1x_follower )," << "\n" <<
            "\t" << ".reset( reset )," << "\n" <<
            "\t" << ".start( start )," << "\n" <<
            "\t" << ".finish( finish )," << "\n" <<
            "\t" << ".return_val( return_val )," << "\n" <<
            "\t" << ".memory_controller_address( memory_controller_address )," << "\n" <<
            "\t" << ".memory_controller_enable( memory_controller_enable )," << "\n" <<
            "\t" << ".memory_controller_write_enable( memory_controller_write_enable )," << "\n" <<
            "\t" << ".memory_controller_waitrequest( memory_controller_waitrequest )," << "\n" <<
            "\t" << ".memory_controller_in( memory_controller_in )," << "\n";
        if (alloc->usesGenericRAMs())
            Out << "\t" << ".memory_controller_size( memory_controller_size )," << "\n";
        Out << "\t" << ".memory_controller_out( memory_controller_out )" << "\n" <<
            ");\n";

        Out << "\n";
        Out << "endmodule\n";
}

void VerilogWriter::printTopHybrid(const Function * F, unsigned dataSize) {

	//bool isParallel = alloc->isParallelAccel(F);
	bool isParallel = false;

	printMemTag(dataSize, isParallel);

	printAvalonInterface(F->getName(), isParallel);
	
	int AddressBusWidth = getAvalonBusWidth(F);

	printIODeclarations(AddressBusWidth, isParallel);

	std::vector<int> arg_bitwidth;

	bool return64 = printSignalDeclarations(F, arg_bitwidth, isParallel);
	
	int NumParams = F->arg_size();

	printAssignStatements(NumParams, return64, isParallel);

	printArgsReceivers(NumParams, arg_bitwidth);

	printStartDoneSignals();

	printMemorySignals(isParallel);

	bool voidtype = printReturnValSignals(return64, F, isParallel);

	printMemoryInstance();

	printAccelInstance(F, NumParams, voidtype);

	printModelsimSignals(voidtype);

}

std::string VerilogWriter::parseMIPSdisassembly(const char * disassembly, std::string varName) {

	std::string var1, var2, var_addr;
	std::ifstream globals;
	varName.insert(0, "<"); //making into the format in disassembly
	varName.append(">:");

	globals.open(disassembly); //parse mips diassembly to get global variable addresses
	assert (globals);
	while (globals >> var1) { 
		if (var1 == varName) {		
			var_addr = var2;
			//errs () << "\naddress is = " << var_addr << "\n\n";
			break; 
		}
		else {
			globals >> var2;
			if (var2 == varName) {
				var_addr = var1;
				//errs () << "\naddress is = " << var_addr << "\n\n";
				break;
			}
		}
	}
	globals.close();
	return var_addr;
}

void VerilogWriter::printMemTag(unsigned dataSize, bool isParallel) {

    unsigned tag = 2;
//	int size = dataSize;
	const char * dis = NULL;
	std::string Disassembly;
	Disassembly = std::getenv ("LEGUP_ACCELERATOR_FILENAME");
	Disassembly += ".src";
	dis = Disassembly.c_str();
	std::string var_name, var_addr;
	//to print out memory controller tags
	for (Allocation::const_ram_iterator i = alloc->ram_begin(), e = alloc->ram_end(); i != e; ++i) {
	    const RAM *R = *i;
	    Out << "// " << getValueStr(R->getValue()) << '\n';
	    if (stripRAM(R->getValue())) { 	//print memory address only if its a global variable which is not a constant
//				const Value* V = i->first;
//				var = V->getName();
			var_name = R->getName();
			var_addr = parseMIPSdisassembly(dis, var_name);
			//checking if address for the global variable was parsed
			if (var_addr == "") {
				if (std::string::npos != var_name.find("_var")) {
					//errs() << "\nThe variable name has string _var appended! This occurs when there are multiple variables with the same name or when the name of the variable is a reserved key word in Verilog!\n";
					//errs() << "\nRemoving _var and searching again!\n";
					//in this case we search again with _var removed
					size_t pos = var_name.find("_var");
					std::string var;
					var.assign(var_name, 0, pos);
					var_addr = parseMIPSdisassembly(dis, var);
					//if the address still cannot be parsed, then quit
					if (var_addr == "") {
						errs() << "\nError: Address for global variable " << var_name << " not found in MIPS disassembly!\n\n";
						assert(0);
					}
				} else {
					errs() << "\nError: Address for global variable " << var_name << " not found in MIPS disassembly!\n\n";
					assert(0);
				}
			}
			var_name.insert(0, "TAG_g_"); //make it into the proper TAG format
			var_name.append("_a");
			var_addr.insert(0, "32'h");
			Out << "`define " << var_name << " " << var_addr << "\n";
		}
		else {
		    Out << "`define " << R->getTag() << " `MEMORY_CONTROLLER_TAG_SIZE'd" << tag << "\n";
		    tag++;
		    dataSize = std::max(dataSize, R->getDataWidth());
		    Out << "`define " << R->getTagAddrName() << " " << R->getTagAddr() << "\n";
		}
	}

	Out << "`define CPU_ACCEL_PORT 32'h01000000" << "\n";
	if (isParallel) {
		Out << "`define API_ADDR 32'hC5000000" << "\n";
		Out << "`define API_ADDR2 32'hC5000004" << "\n";
	}
//	Out << "`define CPU_ACCEL_ADDR_PORT 32'hf1000000" << "\n";
//	Out << "`define CPU_ACCEL_DATA_PORT 32'hf1000010" << "\n";
//	Out << "`define CPU_ACCEL_SIZE_PORT 32'hf1000018" << "\n\n";

}

void VerilogWriter::printAvalonInterface(std::string ModuleName, bool isParallel) {

	stripInvalidCharacters(ModuleName);
	Out << "`timescale 1 ns / 1 ns" << "\n";
	Out << "module " << ModuleName << "_top\n" << 
	"\t(\n" <<
	"\t\tcsi_clockreset_clk,\n" <<
	"\t\tcsi_clockreset_reset,\n" <<
	"\t\t//Slave interface to talk to processor\n" <<
	"\t\t//Inputs\n" <<
	"\t\tavs_s1_address,\n" <<
	"\t\tavs_s1_read,\n" <<
	"\t\tavs_s1_write,\n" <<
	"\t\tavs_s1_writedata,\n" <<
	"\t\t//Outputs\n" <<
	"\t\t//Memory\n" <<
	"\t\tavs_s1_readdata,\n" <<
	"\t\tavm_ACCEL_readdata,\n" <<
	"\t\tavm_ACCEL_waitrequest,\n" <<
	"\t\tavm_ACCEL_address,\n" <<
	"\t\tavm_ACCEL_writedata,\n" <<
	"\t\tavm_ACCEL_write,\n" <<
	"\t\tavm_ACCEL_read";
	if (isParallel) {
		Out << ",\n"
		"\t\t//API\n" <<
		"\t\tavm_API_readdata,\n" <<
		"\t\tavm_API_waitrequest,\n" <<
		"\t\tavm_API_address,\n" <<
		"\t\tavm_API_writedata,\n" <<
		"\t\tavm_API_write,\n" <<
		"\t\tavm_API_read\n";
	}

/*
	"\t\tavm_ADDR_readdata,\n" <<
	"\t\tavm_ADDR_waitrequest,\n" <<
	"\t\tavm_ADDR_address,\n" <<
	"\t\tavm_ADDR_writedata,\n" <<
	"\t\tavm_ADDR_write,\n" <<
	"\t\tavm_ADDR_read,\n" <<
	"\t\tavm_DATA_waitrequest,\n" <<
	"\t\tavm_SIZE_waitrequest,\n" <<
	"\t\tavm_DATA_address,\n" <<
	"\t\tavm_DATA_writedata,\n" <<
	"\t\tavm_DATA_write,\n" <<
	"\t\tavm_SIZE_address,\n" <<
	"\t\tavm_SIZE_writedata,\n" <<
	"\t\tavm_SIZE_write\n" <<*/
	Out << "\t);\n";
}

	
int VerilogWriter::getAvalonBusWidth(const Function * F) {

	int NumArg32bit = 0;
	int NumArg64bit = 0;
    for (Function::const_arg_iterator it = F->arg_begin(), e = F->arg_end(); it
            != e; ++it) { //get number of 32 bit and 64 bit arguments
		if (const IntegerType *ITy = dyn_cast<IntegerType>(it->getType())) {
			if (ITy->getBitWidth() == 64)
			{
				NumArg64bit++;
			}
			else if (ITy->getBitWidth() <= 32)
			{
				NumArg32bit++;
			}
		}
		else if (dyn_cast<PointerType>(it->getType())) {//if argument is a pointer
			NumArg32bit++;
		}
		else if (dyn_cast<ArrayType>(it->getType())) { //if argument is an array
			NumArg32bit++;
		}
		else {
			assert(0 && "Unsupported Argument for Accelerator\n");	
  			}
	}
	return (ceil(log (NumArg32bit+2*NumArg64bit+3) / log (2))); //define avalon slave address bus width according to number of arguments
}

void VerilogWriter::printIODeclarations(int AddressBusWidth, bool isParallel) {
	Out << "\ninput csi_clockreset_clk;\n" <<
	"input csi_clockreset_reset;\n" <<

	
	"input ["<< AddressBusWidth-1 << ":0]avs_s1_address;\n" <<
	"input avs_s1_read;\n" <<
	"input avs_s1_write;\n" <<

	"input [31:0] avs_s1_writedata;\n"<<
	"output reg [31:0] avs_s1_readdata;\n"<<

	"input [127:0] avm_ACCEL_readdata;\n"<<
	"output [127:0] avm_ACCEL_writedata;\n"<<
	"input avm_ACCEL_waitrequest;\n"<<

	"output wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avm_ACCEL_address;\n"<<
	"output wire avm_ACCEL_write;\n"<<
	"output wire avm_ACCEL_read;\n";

	if (isParallel) {
		Out <<"input [31:0] avm_API_readdata;\n"<<
		"input avm_API_waitrequest;\n"<<
		"output [31:0] avm_API_writedata;\n"<<
		"output wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avm_API_address;\n"<<
		"output wire avm_API_write;\n"<<
		"output wire avm_API_read;\n";
	}

/*
	"input [63:0] avm_ADDR_readdata;\n"<<
	"output [63:0] avm_ADDR_writedata;\n"<<
	"input avm_ADDR_waitrequest;\n"<<

	"output wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avm_ADDR_address;\n"<<
	"output wire avm_ADDR_write;\n"<<
	"output wire avm_ADDR_read;\n"<<

	"input avm_DATA_waitrequest;\n"<<
	"input avm_SIZE_waitrequest;\n"<<
		
	"output wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avm_DATA_address;\n"<<
	"output wire [63:0] avm_DATA_writedata;\n"<<
	"output wire avm_DATA_write;\n"<<

	"output wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] avm_SIZE_address;\n"<<
	"output wire [7:0] avm_SIZE_writedata;\n"<<
	"output wire avm_SIZE_write;\n";*/
}

bool VerilogWriter::printSignalDeclarations(const Function * F,
        std::vector<int> &arg_bitwidth, bool isParallel) {


	const Type* ret = F->getReturnType();
	bool return64 = false;
	Out << "wire finish;\n";
	if (ret->getTypeID() == Type::IntegerTyID) {
        unsigned bitwidth = getBitWidth(ret);
		if (bitwidth == 64) {
			Out << "wire read_data_asserted_hi;\n";	
			return64 = true;
		}

        Out << "wire [" << bitwidth - 1 << ":0] return_val_wire;\n";
        Out << "reg [" << bitwidth - 1 << ":0] return_val;\n";

        assert((bitwidth == 64 || bitwidth == 32 || bitwidth == 16) &&
                "Undefined Return Type!\n");

	}

	Out << "wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address;\n"<<
	"wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_address;\n"<<
	"wire memory_controller_enable;\n"<<
	"wire memory_controller_write_enable;\n"<<
	"wire memory_controller_waitrequest;\n"<<
	"wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in;\n"<<
	"wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out;\n"<<
	"wire [1:0] memory_controller_size;\n"<<
	"wire clk;\n"<<
	"wire reset;\n"<<
	"wire start;\n"<<

	"reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_from_memory;\n"<<
	"wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_to_memory;\n"<<
	"reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data;\n"<<
	"reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sdram_data_reg;\n"<<
	"reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] data_from_memory_reg;\n"<<
	"reg done;\n"<<
	"wire read_data_asserted_lo;\n";

	Out << "reg sdram_data_ready;\n"<<
	"wire flag_to_sdram;\n"<<
	"wire enable;\n"<<
	"wire write_enable;\n"<<
	"wire [8:0] check_for_sdram;\n"<<
	"wire read_status_asserted;\n";
	if (isParallel) {
		Out << "wire api_address;\n"<<
		"reg api_data_ready;\n"<<
		"reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] api_data;\n"<<
		"reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] api_data_reg;\n";
	}
//	"wire start_dly;\n"<<
//	"wire finish_dly;\n"<<
	Out << "reg BRAM_data_ready;\n"<<
	"reg BRAM_data_ready_reg;\n"<<
	"reg sdram_data_ready_reg;\n"<<
	"reg sdram_data_ready_reg_dly;\n"<<
	"reg start_reg;\n"<<
	"reg finish_reg;\n";

	int NumParams = F->arg_size();
	int argIdx = 1;
	int data_size;
	if (NumParams > 0 ) {

		for (Function::const_arg_iterator it = F->arg_begin(), e = F->arg_end(); it != e; ++it) {
			data_size = 31;
			if (const IntegerType *ITy = dyn_cast<IntegerType>(it->getType())) {
				if (ITy->getBitWidth() == 64) //if data type is long long
					data_size = 63;
			}
			arg_bitwidth.push_back(data_size);
			Out << "reg [" << data_size << ":0]ARG" << argIdx << ";\n";
			Out << "reg ARG" << argIdx << "_ready;\n";
			argIdx++;
		}
		Out << "wire parameter_ready;\n\n";
	}

	return return64;

}

void VerilogWriter::printAssignStatements(int NumParams, bool return64, bool isParallel) {

	if (NumParams > 0 ) {

		Out << "assign parameter_ready = ";
		for (int i=1; i<=NumParams; i++) {
			Out << "ARG" << i << "_ready";
			if (i==NumParams) {
				continue;
			}
			Out << " && ";
		}		

		Out << ";\n";
	}

	Out << "assign clk = csi_clockreset_clk;\n"<<
	"assign reset = csi_clockreset_reset;\n";
//	"assign start_dly = start | start_reg;\n"<<
//	"assign finish_dly = finish | finish_reg;\n"<<
	//"assign memory_controller_waitrequest = avm_ACCEL_waitrequest";
	
	if (isParallel) {
		Out << "assign memory_controller_waitrequest = avm_ACCEL_waitrequest || avm_API_waitrequest;\n";
	} else {
		Out << "assign memory_controller_waitrequest = avm_ACCEL_waitrequest;\n";
	}
//	"assign avm_ADDR_address = (start||finish||start_reg||finish_reg)? `CPU_ACCEL_ADDR_PORT+8 : `CPU_ACCEL_ADDR_PORT;\n"<<


	//when stalling
	Out << "assign avm_ACCEL_address = `CPU_ACCEL_PORT;\n";
/*
	"always @ (*)\n"<<
	"begin\n"<<
	"\tcasez ({start_dly, finish_dly, memory_controller_size})\n"<<
	"\t\t4'b0000 : avm_ACCEL_address = `CPU_ACCEL_PORT+16; //case for 8 bit operations\n"<< 
	"\t\t4'b0001 : avm_ACCEL_address = `CPU_ACCEL_PORT+32; //case for 16 bit operations\n"<<  
	"\t\t4'b0011 : avm_ACCEL_address = `CPU_ACCEL_PORT+48; //case for 64 bit operations\n"<<  
	"\t\t4'b01?? : avm_ACCEL_address = `CPU_ACCEL_PORT+80; //case to unstall processor\n"<<
	"\t\t4'b10?? : avm_ACCEL_address = `CPU_ACCEL_PORT+64; //case to stall processor\n"<<    
	"\t\tdefault : avm_ACCEL_address = `CPU_ACCEL_PORT; //case for 32 bit operations\n"<<    
	"\tendcase\n"<<    
	"end\n\n"<<     
*/

	if (!isParallel) {
		//when stalling
		//"assign avm_ADDR_write = enable & write_enable & flag_to_sdram | (start|finish|start_reg|finish_reg);\n"<<
		Out << "assign avm_ACCEL_write = enable & write_enable & flag_to_sdram | start |finish;\n";
		Out << "assign avm_ACCEL_read = enable & ~ write_enable & flag_to_sdram;\n";
	} else {
		//when polling
		Out << "assign avm_ACCEL_write = enable & write_enable & flag_to_sdram & !api_address;\n";
		Out << "assign avm_ACCEL_read = enable & ~ write_enable & flag_to_sdram & !api_address;\n";
	}

	Out << "assign memory_controller_address = memory_address[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];\n"<<
	"assign memory_controller_enable = flag_to_sdram ? 1'b0 : enable;\n"<<
	"assign memory_controller_write_enable = flag_to_sdram ? 1'b0 : write_enable;\n"<<

	"assign start = (avs_s1_address == 2) & (avs_s1_writedata[31:0] == 1) & (avs_s1_write == 1'b1)";
	
	if (NumParams > 0)
		Out << " & parameter_ready;\n";
	else
		Out << ";\n";
		Out << "assign read_data_asserted_lo = (avs_s1_address == 0) & (avs_s1_read == 1'b1) & (done == 1'b1);\n";
	 if (return64) {
		Out <<"assign read_data_asserted_hi = (avs_s1_address == 1) & (avs_s1_read == 1'b1) & (done == 1'b1);\n";
	}
//	Out << "assign sdram_data_ready = (avm_ADDR_read == 1'b1) & (avm_ADDR_waitrequest == 1'b0);\n"<<
	//Out << "assign sdram_data_ready = (avm_ACCEL_read == 1'b1) & (avm_ACCEL_waitrequest == 1'b0);\n"<<
	//decide whether write data goes to avalon or memory controller
	Out << "assign memory_controller_in = flag_to_sdram ? 0 : data_to_memory;\n"<<

	//if doing stall
//	"assign avm_ADDR_writedata = (start||start_reg)? 1 : (finish||finish_reg)? 0 : flag_to_sdram ? memory_controller_address : 0;\n"<<
//	"assign avm_ACCEL_writedata = (start||start_reg)? 1 : (finish||finish_reg)? 0 : flag_to_sdram ? memory_controller_address : 0;\n"<<
//	"assign avm_ACCEL_writedata =  {memory_controller_address, 32'd0, data_to_memory};\n"<<

	"//send address portion\n"<<
	"assign avm_ACCEL_writedata[31:0] = memory_controller_address;\n"<<
	"//send data portion\n"<<
	"assign avm_ACCEL_writedata[95:32] = data_to_memory;\n"<<
	"//send size portion\n"<<
	"assign avm_ACCEL_writedata[96] = (memory_controller_size == 2'b00); //8-bit\n"<<
	"assign avm_ACCEL_writedata[97] = (memory_controller_size == 2'b01); //16-bit\n"<<
	"assign avm_ACCEL_writedata[98] = (memory_controller_size == 2'b11); //64-bit\n"<<
	"//send flush signal (unused for accelerator)\n"<<
	"assign avm_ACCEL_writedata[99] = 1'b0;\n";
	
	if (!isParallel) {
		Out << "//to stall processor\n"<<
		"assign avm_ACCEL_writedata[100] = start? 1'b1: 1'b0;\n"<<
		"//to unstall processor\n"<<
		"assign avm_ACCEL_writedata[101] = finish? 1'b1: 1'b0;\n";
	} else {
		Out << "assign avm_ACCEL_writedata[100] = 1'b0;\n"<<
		"assign avm_ACCEL_writedata[101] = 1'b0;\n";
	}
	
	Out <<"assign avm_ACCEL_writedata[127:102] = 28'd0;\n"<<
	
	//if doing poll
	//assign avm_ADDR_writedata = flag_to_sdram ? memory_controller_address : 0;
//	"assign avm_DATA_writedata = flag_to_sdram ? data_to_memory : 0;\n"<<
//	"assign avm_SIZE_writedata = flag_to_sdram ? memory_controller_size : 0;\n"<<
	"assign check_for_sdram = memory_address[31:23];\n"<<
	"assign flag_to_sdram = (check_for_sdram == `TAG_PROCESSOR);\n";
	if (isParallel) {
		Out <<"assign read_status_asserted = (avs_s1_address == 2) & (avs_s1_read == 1'b1) & (done == 1'b1);\n";
		Out <<"assign api_address = (memory_address == `API_ADDR) || (memory_address == `API_ADDR2);\n";
		Out << "assign avm_API_writedata = 0;\n"<<
	//	"assign avm_API_address = `API_PORT;\n"<<
		"assign avm_API_address = memory_address;\n"<<
		"assign avm_API_write = enable & write_enable & api_address;\n"<<
		"assign avm_API_read = enable & ~ write_enable & api_address;\n";
	}

	//errs() << "\n\nis parallel?" << isParallel << "\n";
}

void VerilogWriter::printArgsReceivers(int NumParams, const std::vector<int>
        &arg_bitwidth) {

	int argIdx = 1;
	int addrIdx = 3;
	int data_size;
	for (int i=0; i<NumParams; i++) {
		data_size = arg_bitwidth[i];
		if (data_size == 31) {
			Out << "\nalways @(posedge clk)\n"<<
			"begin\n"<<
			"\tif (start || reset)\n"<<
			"\tbegin\n"<<
			"\t\tARG"<< argIdx << "_ready <= 1'b0;\n"<<
			"\tend\n"<<
			"\telse if ((avs_s1_address == " << addrIdx << ") & (avs_s1_write))\n"<<
			"\tbegin\n"<<
			"\t\tARG"<< argIdx << "[31:0] <= avs_s1_writedata[31:0];\n"<<
			"\t\tARG"<< argIdx << "_ready <= 1'b1;\n"<<
			"\tend\n"<<
			"end\n";
			addrIdx++;
			argIdx++;
		}
		else if (data_size == 63) {
			Out << "\nalways @(posedge clk)\n"<<
			"begin\n"<<
			"\tif ((avs_s1_address == " << addrIdx << ") & (avs_s1_write))\n"<<
			"\tbegin\n"<<
			"\t\tARG"<< argIdx << "[31:0] <= avs_s1_writedata[31:0];\n"<<
			"\tend\n"<<
			"end\n";
			addrIdx++;

			Out << "\nalways @(posedge clk)\n"<<
			"begin\n"<<
			"\tif (start || reset)\n"<<
			"\tbegin\n"<<
			"\t\tARG"<< argIdx << "_ready <= 1'b0;\n"<<
			"\tend\n"<<
			"\telse if ((avs_s1_address == " << addrIdx << ") & (avs_s1_write))\n"<<
			"\tbegin\n"<<
			"\t\tARG"<< argIdx << "[63:32] <= avs_s1_writedata[31:0];\n"<<
			"\t\tARG"<< argIdx << "_ready <= 1'b1;\n"<<
			"\tend\n"<<
			"end\n";
			addrIdx++;
			argIdx++;
		}
		else { 
			assert(0 && "Parameter data bitwidth undefined!\n");
		}
	}
}

void VerilogWriter::printStartDoneSignals() {

	Out << "\nalways @(posedge clk)\n"<<
	"begin\n"<<
	"\tstart_reg <= start;\n"<<
	"\tfinish_reg <= finish;\n"<<
	"end\n";

	Out << "\n"<<
	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tif (reset || start)\n"<<
	"\t\tdone <= 1'b0;\n"<<
	"\telse if (finish)\n"<<
	"\t\tdone <= 1'b1;\n"<<
	"end\n"<<
	"\n";
}


void VerilogWriter::printMemorySignals(bool isParallel) {

//	Out << "always @(*)\n"<<
	Out << "always @(posedge clk)\n"<<
	"begin\n"<<
	"\tsdram_data_ready <= (avm_ACCEL_read == 1'b1) & (avm_ACCEL_waitrequest == 1'b0);\n"<<
	"end\n";

	if (isParallel) {
		/*
		Out << "always @(*)\n"<<
		"begin\n"<<
		"\tapi_data_ready <= avm_API_read;\n"<<
		"end\n";
		
		Out << "\nalways @(posedge clk)\n"<<
		"begin\n"<<
		"\tif (api_data_ready)\n"<<
		"\t\tapi_data <= avm_API_readdata;\n"<<
		"end\n";
		*/

		Out << "\nalways @(posedge clk)\n"<<
		"begin\n"<<
		"\tif (avm_API_read)\n"<<
		"\t\tapi_data <= avm_API_readdata;\n"<<
		"end\n";

		Out << "\nalways @(posedge clk)\n"<<
		"begin\n"<<
		"\tapi_data_reg <= api_data;\n"<<
		"end\n";
	}

	Out << "\nalways @(posedge clk)\n"<<
	"begin\n"<<
	"\tif (sdram_data_ready)\n"<<
	"\t\tsdram_data <= avm_ACCEL_readdata[63:0];\n"<<
	"end\n\n";

	Out << "//shift register to indicate whether to take data from main memory or block RAM\n"<<
	"parameter MEMORY_ACCESS_LATENCY = 2;\n"<<
	"reg [MEMORY_ACCESS_LATENCY - 1:0] SDRAM_shiftreg;\n"<<
	"reg [MEMORY_ACCESS_LATENCY - 1:0] BRAM_shiftreg;\n"<<
	"reg SDRAM_shiftreg_changed;\n"<<
	"reg BRAM_shiftreg_changed;\n\n";

	if (isParallel) {
		Out << "reg [MEMORY_ACCESS_LATENCY - 1:0] API_shiftreg;\n"<<
		"reg API_shiftreg_changed;\n\n";
	}

	Out << "always @(posedge clk)\n"<<
	"begin\n"<<
	"\tSDRAM_shiftreg_changed <= 1'b0;\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\tbegin\n"<<
	"\t\tSDRAM_shiftreg_changed <= 1'b1;\n"<<
	"\t\tSDRAM_shiftreg <= SDRAM_shiftreg << 1;\n"<<
	"\t\tif (avm_ACCEL_read";
	if (isParallel) {
		Out << " && !api_address";
	}
	Out << ")\n"<<
	"\t\t\tSDRAM_shiftreg[0] <= 1'b1;\n"<<
	"\t\telse\n"<<
	"\t\t\tSDRAM_shiftreg[0] <= 1'b0;\n"<<
	"\tend\n"<<
	"end\n\n"<<

	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tBRAM_shiftreg_changed <= 1'b0;\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\tbegin\n"<<
	"\t\tBRAM_shiftreg_changed <= 1'b1;\n"<<
	"\t\tBRAM_shiftreg <= BRAM_shiftreg << 1;\n"<<
	"\t\tif (memory_controller_enable && !memory_controller_write_enable";
	if (isParallel) {
		Out << " && !api_address";
	}
	Out << ")\n"<<
	"\t\t\tBRAM_shiftreg[0] <= 1'b1;\n"<<
	"\t\telse\n"<<
	"\t\t\tBRAM_shiftreg[0] <= 1'b0;\n"<<
	"\tend\n"<<
	"end\n\n";

	if (isParallel) {
		Out << "always @(posedge clk)\n"<<
		"begin\n"<<
		"\tAPI_shiftreg_changed <= 1'b0;\n"<<
		"\tif (!avm_API_waitrequest)\n"<<
		"\tbegin\n"<<
		"\t\tAPI_shiftreg_changed <= 1'b1;\n"<<
		"\t\tAPI_shiftreg <= API_shiftreg << 1;\n"<<
		"\t\tif (avm_API_read && api_address)\n"<<
		"\t\t\tAPI_shiftreg[0] <= 1'b1;\n"<<
		"\t\telse\n"<<
		"\t\t\tAPI_shiftreg[0] <= 1'b0;\n"<<
		"\tend\n"<<
		"end\n\n";
	}

	Out << "always @(*)\n"<<
	"begin\n"<<
    "\tdata_from_memory = data_from_memory_reg;\n"<<
	"\tif (SDRAM_shiftreg_changed || BRAM_shiftreg_changed";
	if (isParallel) {
		Out << " || API_shiftreg_changed";
	}
	Out << ")\n"<<
	"\tbegin\n"<<
	"\t\tif (SDRAM_shiftreg[MEMORY_ACCESS_LATENCY - 1] == 1'b1)\n"<<
//	"\t\t\tdata_from_memory = sdram_data_reg;\n"<<
	"\t\t\tdata_from_memory = sdram_data;\n"<<
	"\t\telse if (BRAM_shiftreg[MEMORY_ACCESS_LATENCY - 1] == 1'b1)\n"<<
	"\t\t\tdata_from_memory = memory_controller_out;\n";
	if (isParallel) {
		Out << "\t\telse if (API_shiftreg[MEMORY_ACCESS_LATENCY - 1] == 1'b1)\n"<<
		"\t\t\tdata_from_memory = api_data_reg;\n";
	}
	Out << "\t\telse\n"<<
	"\t\t\tdata_from_memory = 0;\n"<<
	"\tend\n"<<
	"end\n\n"<<

	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tdata_from_memory_reg <= data_from_memory;\n"<<
	"end\n\n"<<


	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\t\tsdram_data_reg <= sdram_data;\n"<<
	"\telse\n"<<
	"\t\tsdram_data_reg <= sdram_data_reg;\n"<<
	"end\n\n";

/*
	"always @(posedge clk) \n"<<
	"begin\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\t\tsdram_data_reg <= sdram_data;\n"<<
	"\telse \n"<<
	"\t\tsdram_data_reg <= sdram_data_reg;\n"<<
	"end\n\n"<<

	"always @(posedge clk) \n"<<
	"begin\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\t\tsdram_data_ready_reg <= sdram_data_ready;\n"<<
	"\telse \n"<<
	"\t\tsdram_data_ready_reg <= sdram_data_ready_reg;\n"<<
	"end\n"<<
	"\n"<<

	"always @(posedge clk) \n"<<
	"begin\n"<<
	"\tsdram_data_ready_reg_dly <= sdram_data_ready_reg;\n"<<
	"end\n"<<


	"\n"<<
	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\t\tBRAM_data_ready <= memory_controller_enable;\n"<<
	"\telse\n"<<
	"\t\tBRAM_data_ready <= BRAM_data_ready;\n"<<
	"end\n\n"<<

	//delay another cycle to increase fmax
	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tif (!avm_ACCEL_waitrequest)\n"<<
	"\t\tBRAM_data_ready_reg <= BRAM_data_ready;\n"<<
	"\telse\n"<<
	"\t\tBRAM_data_ready_reg <= BRAM_data_ready_reg;\n"<<
	"end\n\n"<<

	"always @(*) \n"<<
	"begin\n"<<
	"\tcase ({sdram_data_ready_reg_dly, BRAM_data_ready_reg})\n"<<
	"\t\t2'b00: data_from_memory = data_from_memory_reg;\n"<<
	"\t\t2'b10:	data_from_memory = sdram_data_reg;\n"<<
	"\t\t2'b01:	data_from_memory = memory_controller_out;\n"<<
	"\t\tdefault: data_from_memory = 'bX;\n"<<
	"\tendcase\n"<<
	"end\n"<<
	"\n"<<

	"always @(posedge clk)\n"<<
	"begin\n"<<
	"\tdata_from_memory_reg <= data_from_memory;\n"<<
	"end\n\n";
*/
}

bool VerilogWriter::printReturnValSignals(bool return64, const Function * F, bool isParallel) {

	const Type* ret = F->getReturnType();
	//CPU reading from Accelerator
	bool voidtype = true;
	if (ret->getTypeID() != Type::VoidTyID) {
		voidtype = false;
	}
	
	if (!voidtype) {
		Out << "\n"<<
		"always @(posedge clk)\n"<<
		"begin\n"<<
		"\tif (finish)\n"<<
		"\t\treturn_val <= return_val_wire;\n"<<
		"end\n"<<
		"\n\n";
	}


	//If this is a parallel accelerator
	if (isParallel) {
		//print out always block for polling
		Out << "always @(*)\n"<<
		"begin\n";
		Out << "\tif (read_status_asserted) //for polling\n"<<
		"\t\tavs_s1_readdata <= 1;\n";
		//if this is not a void function
		if (!voidtype) {
			//print out signals to return data
			 if (return64) {
				Out << "\telse if (read_data_asserted_lo) //to return data\n"<<
				"\t\tavs_s1_readdata = return_val[31:0];\n";
				Out << "\telse if (read_data_asserted_hi)\n"<<
				"\t\tavs_s1_readdata = return_val[63:32];\n";
			} else {
				Out << "\telse if (read_data_asserted_lo) //to return data\n"<<
				"\t\tavs_s1_readdata = return_val;\n";
			}
		} 
		Out << "\telse\n"<<
		"\t\tavs_s1_readdata = 0;\n"<<
		"end\n\n";
	//if this is a sequential accelerator
	} else {
		//if this is not a void function
		if (!voidtype) {
			//print out always block to return data
			Out << "always @(*)\n"<<
			"begin\n";
			 if (return64) {
				Out << "\tif (read_data_asserted_lo) //to return data\n"<<
				"\t\tavs_s1_readdata = return_val[31:0];\n";
				Out << "\telse if (read_data_asserted_hi)\n"<<
				"\t\tavs_s1_readdata = return_val[63:32];\n";
			} else {
				Out << "\tif (read_data_asserted_lo) //to return data\n"<<
				"\t\tavs_s1_readdata = return_val;\n";
			}
			Out << "\telse\n"<<
			"\t\tavs_s1_readdata = 0;\n"<<
			"end\n\n";
		} 
	}


	return voidtype;
}


void VerilogWriter::printMemoryInstance() {

	Out << "memory_controller memory_controller_inst (" << "\n" <<
	"\t" << ".clk( clk )," << "\n" <<
	"\t" << ".memory_controller_address( memory_controller_address )," << "\n" <<
	"\t" << ".memory_controller_enable( memory_controller_enable )," << "\n" <<
	"\t" << ".memory_controller_write_enable( memory_controller_write_enable )," << "\n" <<
	"\t" << ".memory_controller_in( memory_controller_in )," << "\n";
	if (alloc->usesGenericRAMs()) {
	Out << "\t" << ".memory_controller_size( memory_controller_size )," << "\n";
	}
	Out << "\t" << ".memory_controller_out_reg( memory_controller_out )" << "\n" <<
	");\n\n";

}

void VerilogWriter::printAccelInstance(const Function * F, int NumParams, bool voidtype) {
	//instantiating accelerator module 
/*	Out << F->getName() << " " << F->getName() <<"_inst(" << "\n" <<
	"\t" << ".clk( clk )," << "\n" <<
	"\t" << ".reset( reset )," << "\n" <<
	"\t" << ".start( start )," << "\n" <<
	"\t" << ".finish( finish )," << "\n";
	if (ret->getTypeID() != Type::VoidTyID) {
	Out << "\t" << ".return_val( return_val )," << "\n";
	}
	
	if (NumParams > 0) { 
		argIdx = 1;
		for (Function::arg_iterator i = F->arg_begin(), e = F->arg_end(); i != e; ++i) {
	    	Out << "\t." << i->getName() << "( ARG" << argIdx << " ),\n";
			argIdx++;
		}
	}*/

	//use this format for now until port name changes are fixed
	std::string funcName = F->getName().str();
	stripInvalidCharacters(funcName);
	Out << funcName << " " << funcName <<"_inst(" << "\n" <<
	"\t" << "clk," << "\n" <<
	"\t" << "1'b0," << "//grounding clk2x signal used for multi-pumping\n" <<
	"\t" << "1'b0," << "//grounding clk1x_follower signal used for multi-pumping\n" <<
	"\t" << "reset," << "\n" <<
	"\t" << "start_reg," << "\n" << //only use start_reg for stall mode since one cycle is required to send stall signal to processor at which time if accelerator accesses memory in the first cycle it will cause avalon did not heed error, in poll mode use start
	"\t" << "finish," << "\n";
	if (!voidtype) {
		Out << "\t" << "return_val_wire," << "\n";
	}

	if (NumParams > 0) { 
		int argIdx = 1;
        for (Function::const_arg_iterator i = F->arg_begin(), e = F->arg_end();
                i != e; ++i) {
	    	Out << "\tARG" << argIdx << ",\n";
			argIdx++;
		}
	}

	Out << "\t" << "memory_address," << "\n" <<
	"\t" << "enable," << "\n" <<
	"\t" << "write_enable," << "\n" <<
	"\t" << "memory_controller_waitrequest," << "\n" <<
	"\t" << "data_to_memory," << "\n";
	if (alloc->usesGenericRAMs()) {
		Out << "\t" << "memory_controller_size," << "\n";
	}
	Out << "\t" << "data_from_memory" << "\n" <<
	");\n\n";
}

void VerilogWriter::printModelsimSignals(bool voidtype) {

	//modelsim display statement for time and return value
	Out << "always@(finish) begin\n"<<
	"\tif (finish == 1) begin\n"<<
	"\t\t$display(\"At t=%t clk=%b finish=%b";
	if (!voidtype) 
		Out << " return_val=%d\",";
	else
		Out << "\",";

	Out << " $time, clk, finish";
	if (!voidtype)
		Out << ", return_val_wire);\n";
	else
		Out << ");\n";
			
	Out << "\tend\n"<<
	"end\n\n";
	Out << "endmodule\n\n";
}

void VerilogWriter::printModuleHeader() {
    Out << "`timescale 1 ns / 1 ns\n";
	std::string moduleName = rtl->getName();
	stripInvalidCharacters(moduleName);
    //Out << "module " << rtl->getName() << "\n" <<
    Out << "module " << moduleName << "\n" <<
    "(" << "\n";

    for (RTLModule::const_signal_iterator i = rtl->port_begin(), e =
            rtl->port_end(); i != e; ++i) {
        Out << "\t" << (*i)->getName();
        if (i != rtl->port_end()-1) Out << ",";
        Out << "\n";
    }
    Out << ");" << "\n\n";

    for (RTLModule::const_signal_iterator i = rtl->param_begin(), e =
            rtl->param_end(); i != e; ++i) {
        printDeclaration(*i);
        Out << "\n";
    }

    if (rtl->param_begin() != rtl->param_end()) {
        Out << "\n";
    }

    for (RTLModule::const_signal_iterator i = rtl->port_begin(), e =
            rtl->port_end(); i != e; ++i) {
        printDeclaration(*i);
        Out << "\n";

    }

    for (RTLModule::const_signal_iterator i = rtl->signals_begin(), e =
            rtl->signals_end(); i != e; ++i) {
        printDeclaration(*i);
        Out << "\n";
    }
}

void VerilogWriter::printDeclaration(const RTLSignal *signal) {
    std::string type = signal->getType();
    if (!type.empty()) {
        if (type == "wire" &&
           (signal->getNumConditions() != 0 || signal->getNumDrivers() != 0)) {
            Out << "reg ";
        } else if (type == "output" && signal->getNumConditions() != 0) {
            Out << "output reg ";
        } else {
            Out << type << " ";
        }

    }
    Out << signal->getWidth().str() << " ";
    Out << signal->getName();
    if (!signal->getValue().empty()) {
        Out << " = ";
        printVerilogBitwidthPrefix(signal);
        Out << signal->getValue();
    }

    Out << ";";
}

void VerilogWriter::printRTL(const RTLModule *rtl) {

    this->rtl = rtl;

    printModuleHeader();

    for (RTLModule::const_module_iterator i = rtl->instances_begin(), e =
            rtl->instances_end(); i != e; ++i) {
        Out << "\n";
        printModuleInstance(Out, *i);
    }
    Out << "\n";

    // todo: local rams should be per function, ie:
    //for (RTLModule::const_ram_iterator i = rtl->ram_begin(), e =
    //        rtl->ram_end(); i != e; ++i) {
    if (LEGUP_CONFIG->getParameterInt("LOCAL_RAMS") && rtl->getName() == "main") {
        for (Allocation::const_ram_iterator i = alloc->ram_begin(), e = alloc->ram_end();
                i != e; ++i) {
            const RAM *R = *i;
            Out << "\n";
            printRamInstance(R);
        }
        Out << "\n";
    }

    Out << rtl->getPreamble() << "\n";

    // print unsynthesizable statements ($display, $finish, etc)
    printSignal(rtl->getUnsynthesizableSignal());

    // print signals
    for (RTLModule::const_signal_iterator i = rtl->signals_begin(), e =
            rtl->signals_end(); i != e; ++i) {
        printSignal(*i);
    }

    for (RTLModule::const_signal_iterator i = rtl->port_begin(), e = rtl->port_end();
            i != e; ++i) {
        printSignal(*i);
    }

    Out << rtl->getBody() << "\n";

    Out << "endmodule " << "\n";

}

void VerilogWriter::printModuleInstance(raw_ostream &Out, const RTLModule *mod) {
    Out << mod->getBody() << "\n";
    Out << mod->getName() << " " << mod->getInstName() << " (" << "\n";
    for (RTLModule::const_signal_iterator i = mod->port_begin(), e =
            mod->port_end(); i != e; ++i) {

        const RTLSignal *s = *i;
        const RTLSignal *d = s->getDriver(0);
        assert(d && "Connection doesn't exist!\n");
        Out << "\t." << s->getName() << " (";
        printValue(d);
        Out << ")";
        if (i != mod->port_end()-1) {
            Out << ",";
        }
        Out << "\n";
    }
    Out << ");" << "\n\n";

    for (RTLModule::const_signal_iterator i = mod->param_begin(), e =
            mod->param_end(); i != e; ++i) {
        if (i == mod->param_begin()) {
            Out << "defparam" << "\n\t";
        } else {
            Out << ",\n\t";
        }
        Out << mod->getInstName() << "." << (*i)->getName() << " = " <<
            (*i)->getValue();
        if (i == mod->param_end()-1) {
            Out << ";\n";
        }
    }

}

// recursively check if a signal is driven by a constant ie.
// a = 0;
// note, this would also be a constant:
// main_legup_memset_4_exit_7 = `TAG_main_0_previous_a + 4 * 32'd14;
bool VerilogWriter::isConst(const RTLSignal *sig) {
    if (sig->isConst()) return true;
    if (sig->isOp()) {
        const RTLOp* op = (const RTLOp*)sig;
        for (unsigned i = 0; i < op->getNumOperands(); i++) {
            if (!isConst(op->getOperand(i))) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}

// need this otherwise always block doesn't always trigger ie.
// always(*)
//    a = 0;
// will never trigger and signal 'a' will always be 'X'
void VerilogWriter::printAlwaysTrigger(const RTLSignal *signal, const RTLSignal
        *driver) {
    if (isConst(driver)) {
        Out << "if (reset) begin " << signal->getName()
            << " = 0; end\n";
    }
}

void VerilogWriter::printSignal(const RTLSignal *signal) {
    if (signal->getNumDrivers() == 0) return;

    bool reg = signal->isReg();

    // use non-blocking assignment for sequential logic
    std::string assignOp = "<=";
    if (signal == rtl->getUnsynthesizableSignal()) {
        Out << "/* Unsynthesizable Statements */\n";
        Out << "always @(posedge clk) begin\n";
    } else {
        if (reg) {
            Out << "always @(posedge clk) begin\n";
        } else {
            Out << "always @(*) begin\n";
            // use blocking assignment for combinational logic
            assignOp = "=";
            const RTLSignal *defaultDriver = signal->getDefaultDriver();
            if (defaultDriver) {
                // ie. memory_controller_enable has a default of 0
                Out << signal->getName() << " " << assignOp << " ";
                printValue(defaultDriver);
                Out << ";\n";
            }
        }
    }

    unsigned numConditions = signal->getNumConditions();

    // there is only a single driver
    if (numConditions == 0) {

        printComments(signal->getInst(0));

        const RTLSignal *driver = signal->getDriver(0);
        assert(driver);
        Out << signal->getName() << " " << assignOp << " ";
        printValue(driver);
        Out << ";\n";
        printAlwaysTrigger(signal, driver);
        Out << "end\n";
        return;
    }

    for (unsigned i = 0; i < numConditions; ++i) {
        const RTLSignal *driver = signal->getDriver(i);
        const RTLSignal *condition = signal->getCondition(i);
        assert(driver);
        const Instruction *I = signal->getInst(i);

        printComments(I);

        // don't "else" if the signal is not synthesizable, if it is a reg or
        // if it has a default driver
        bool no_else = (signal == rtl->getUnsynthesizableSignal()) || reg ||
            signal->getDefaultDriver();

        if (no_else) {
            Out << "if (";
            printValue(condition);
            Out << ")\n";
        } else { // add "else"s
            if (numConditions > 1) {
                if (numConditions > 1 && i == numConditions-1) {
                    Out << "else ";
                    Out << "/* if (";
                    printValue(condition);
                    Out << ") */\n";
                } else {
                    if (i > 0) {
                        Out << "else if (";
                    } else {
                        Out << "if (";
                    }
                    printValue(condition);
                    Out << ")\n";
                }
            } else {
                printAlwaysTrigger(signal, driver);
            }
        }

        Out << "begin\n";
        if (signal != rtl->getUnsynthesizableSignal()) {
            Out << signal->getName() << " " << assignOp << " ";
        }
        printValue(driver);
        Out << ";\n";

        // debugging
        // assert that we never assign an X to a variable
        // Note: need === instead of ==
        // xor (^) catches cases where the X is only in part of the signal
        if (reg) {
            Out << "if (^reset !== 1'bX && ^(";
            printValue(driver);
            Out << ") === 1'bX) begin " <<
                "$display (\"ERROR: Right hand side is 'X'. Assigned to " <<
                signal->getName() << "\");" << " $finish; end\n";
        }

        Out << "end\n";
    }

    Out << "end\n";
}
void VerilogWriter::printComments(const Instruction *I) {
    if (!I) return;
    //static std::map<const Instruction *I, std::string> cache;
    const BasicBlock *b = I->getParent();
    if (b) {
        Out << "/* " << b->getParent()->getName() << ": " <<
            getLabel(b) << "*/\n";
    }
    Out << "/* " << getValueStr(I) << "*/\n";
}

void VerilogWriter::printVerilogOpcode(RTLOp::Opcode opcode) {
    switch (opcode) {
        case RTLOp::Add: Out << " + ";   break;
        case RTLOp::Sub: Out << " - ";   break;
        case RTLOp::Mul: Out << " * ";   break;
        case RTLOp::Rem: Out << " % ";   break;
        case RTLOp::Div: Out << " / ";   break;
        case RTLOp::And: Out << " & ";   break;
        case RTLOp::Or:  Out << " | ";   break;
        case RTLOp::Xor: Out << " ^ ";   break;
        case RTLOp::Shl: Out << " <<< "; break;
        case RTLOp::Shr: Out << " >>> "; break;
        case RTLOp::EQ:  Out << " == ";  break;
        case RTLOp::NE:  Out << " != ";  break;
        case RTLOp::LT:  Out << " < ";   break;
        case RTLOp::LE:  Out << " <= ";  break;
        case RTLOp::GT:  Out << " > ";   break;
        case RTLOp::GE:  Out << " >= ";  break;
        default: llvm_unreachable("Invalid operator type!");
    }
}

// print bitwidth prefix. ie. 6'd
void VerilogWriter::printVerilogBitwidthPrefix(const RTLSignal *sig) {
    // add bitwidth
    if (isNumeric(sig->getValue())) {
        rtl->verifyBitwidth(sig, alloc);
        unsigned bits = sig->getWidth().numBits(rtl, alloc);
        // numbers are 32 bits wide by default
        if (bits != 32) Out << bits << "'d";
    }
}

void VerilogWriter::printValue(const RTLSignal *sig) {
    assert(sig);
    if (sig->isOp()) {
        printVerilogOperator((const RTLOp*)sig);
    } else if (sig->getType() == "parameter") {
        Out << sig->getName();
    } else {
        if (sig->getValue().empty()) {
            // normal variable ie. cur_state
            Out << sig->getName();
        } else {
            // constant ie. 4'd1
            printVerilogBitwidthPrefix(sig);
            Out << sig->getValue();
        }
    }
}

void VerilogWriter::printVerilogOperator(const RTLOp *op) {

    assert(op);
    if (op->getOpcode() == RTLOp::Finish) {
        Out << "$finish";
    } else if (op->getOpcode() == RTLOp::Write
            || op->getOpcode() == RTLOp::Display) {
        if (op->getOpcode() == RTLOp::Write) {
            Out << "$write(";
        } else {
            Out << "$display(";
        }
        for (unsigned i = 0; i < op->getNumOperands(); i++) {
            Out << ((i > 0) ? ", " : "");
            printValue(op->getOperand(i));
        }
        Out << ")";

        if (op->getNumOperands() > 1) {
            Out << ";\n";
            Out << "// to fix quartus warning\n";
            // avoid getting a warning from quartus that we
            // never read the value being printed
            for (unsigned i = 1; i < op->getNumOperands(); i++) {
                Out << "if (^reset !== 1'bX && ^(";
                printValue(op->getOperand(i));
                Out << ") === 1'bX) " <<
                    "finish <= 0";
                if (i != op->getNumOperands()-1) Out << ";\n";
            }
        }

    } else {
        switch (op->getNumOperands()) {
            case 3:
                assert(op->getOpcode() == RTLOp::Sel);
                Out << "(";
                printValue(op->getOperand(0));
                Out << " ? ";
                printValue(op->getOperand(1));
                Out << " : ";
                printValue(op->getOperand(2));
                Out << ")";
                break;
            case 2:
                printValue(op->getOperand(0));
                printVerilogOpcode(op->getOpcode());
                printValue(op->getOperand(1));
                break;
            case 1:
                if (op->getOpcode() == RTLOp::SExt) {
                    Out << "$signed(";
                    printValue(op->getOperand(0));
                    Out << ")";
                } else if (op->getOpcode() == RTLOp::ZExt) {
                    printValue(op->getOperand(0));
                } else {
                    assert(op->getOpcode() == RTLOp::Trunc);
                    // ie. memory_controller_out[31:0]
                    printValue(op->getOperand(0));
                    // don't truncate a constant
                    if (!op->getOperand(0)->isConst()) {
                        Out << op->getWidth().str();
                    }
                }
                break;
            default:
                llvm_unreachable("Invalid RTLOp!");
        }
    }
}




} // End legup namespace

