// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="binary_search,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.648000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=130,HLS_SYN_LUT=418}" *)

module binary_search (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        data_key_address0,
        data_key_ce0,
        data_key_q0,
        data_value_address0,
        data_value_ce0,
        data_value_q0,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [3:0] data_key_address0;
output   data_key_ce0;
input  [31:0] data_key_q0;
output  [3:0] data_value_address0;
output   data_value_ce0;
input  [31:0] data_value_q0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_key_ce0;
reg data_value_ce0;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_19;
wire   [30:0] tmp_7_fu_118_p4;
reg   [30:0] tmp_7_reg_214;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_52;
wire   [0:0] tmp_fu_106_p2;
wire   [31:0] fvalue_1_fu_181_p3;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_69;
wire   [31:0] up_2_fu_189_p3;
wire   [31:0] low_2_fu_197_p3;
reg   [31:0] fvalue_reg_70;
reg   [31:0] up_reg_82;
reg   [31:0] low_reg_94;
wire  signed [63:0] tmp_2_fu_128_p1;
wire   [31:0] tmp_1_fu_112_p2;
wire  signed [31:0] mid_fu_134_p1;
wire   [0:0] tmp_5_fu_148_p2;
wire   [31:0] up_4_fu_153_p2;
wire   [31:0] low_3_fu_159_p2;
wire   [0:0] tmp_3_fu_137_p2;
wire   [31:0] up_3_fu_142_p2;
wire   [31:0] up_1_fu_165_p3;
wire   [31:0] low_1_fu_173_p3;
reg   [2:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        fvalue_reg_70 <= fvalue_1_fu_181_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        fvalue_reg_70 <= ap_const_lv32_FFFFFFFF;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        low_reg_94 <= low_2_fu_197_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        low_reg_94 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        up_reg_82 <= up_2_fu_189_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        up_reg_82 <= ap_const_lv32_E;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (tmp_fu_106_p2 == ap_const_lv1_0))) begin
        tmp_7_reg_214 <= {{tmp_1_fu_112_p2[ap_const_lv32_1F : ap_const_lv32_1]}};
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_fu_106_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_106_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_fu_106_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(tmp_fu_106_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_19) begin
    if (ap_sig_bdd_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_52) begin
    if (ap_sig_bdd_52) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_69) begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        data_key_ce0 = ap_const_logic_1;
    end else begin
        data_key_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        data_value_ce0 = ap_const_logic_1;
    end else begin
        data_value_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_fu_106_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(tmp_fu_106_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = fvalue_reg_70;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_19 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_52 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign data_key_address0 = tmp_2_fu_128_p1;

assign data_value_address0 = tmp_2_fu_128_p1;

assign fvalue_1_fu_181_p3 = ((tmp_3_fu_137_p2[0:0] === 1'b1) ? data_value_q0 : fvalue_reg_70);

assign low_1_fu_173_p3 = ((tmp_5_fu_148_p2[0:0] === 1'b1) ? low_reg_94 : low_3_fu_159_p2);

assign low_2_fu_197_p3 = ((tmp_3_fu_137_p2[0:0] === 1'b1) ? low_reg_94 : low_1_fu_173_p3);

assign low_3_fu_159_p2 = ($signed(mid_fu_134_p1) + $signed(ap_const_lv32_1));

assign mid_fu_134_p1 = $signed(tmp_7_reg_214);

assign tmp_1_fu_112_p2 = (up_reg_82 + low_reg_94);

assign tmp_2_fu_128_p1 = $signed(tmp_7_fu_118_p4);

assign tmp_3_fu_137_p2 = (data_key_q0 == x? 1'b1: 1'b0);

assign tmp_5_fu_148_p2 = ($signed(data_key_q0) > $signed(x)? 1'b1: 1'b0);

assign tmp_7_fu_118_p4 = {{tmp_1_fu_112_p2[ap_const_lv32_1F : ap_const_lv32_1]}};

assign tmp_fu_106_p2 = ($signed(low_reg_94) > $signed(up_reg_82)? 1'b1: 1'b0);

assign up_1_fu_165_p3 = ((tmp_5_fu_148_p2[0:0] === 1'b1) ? up_4_fu_153_p2 : up_reg_82);

assign up_2_fu_189_p3 = ((tmp_3_fu_137_p2[0:0] === 1'b1) ? up_3_fu_142_p2 : up_1_fu_165_p3);

assign up_3_fu_142_p2 = ($signed(low_reg_94) + $signed(ap_const_lv32_FFFFFFFF));

assign up_4_fu_153_p2 = ($signed(mid_fu_134_p1) + $signed(ap_const_lv32_FFFFFFFF));


endmodule //binary_search

