// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module encode_filtep (
        ap_clk,
        ap_rst,
        rlt1,
        al1,
        rlt2,
        al2,
        ap_return,
        ap_ce
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_2E = 32'b101110;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input  [31:0] rlt1;
input  [31:0] al1;
input  [31:0] rlt2;
input  [31:0] al2;
output  [31:0] ap_return;
input   ap_ce;

wire   [46:0] grp_fu_62_p2;
reg   [46:0] pl_reg_122;
wire   [46:0] grp_fu_82_p2;
reg   [46:0] tmp_s_reg_127;
wire  signed [31:0] tmp_fu_48_p2;
wire  signed [31:0] tmp_33_fu_68_p2;
wire   [46:0] pl_1_fu_88_p2;
reg    grp_fu_62_ce;
reg    grp_fu_82_ce;


encode_mul_32s_32s_47_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
encode_mul_32s_32s_47_6_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( tmp_fu_48_p2 ),
    .din1( al1 ),
    .ce( grp_fu_62_ce ),
    .dout( grp_fu_62_p2 )
);

encode_mul_32s_32s_47_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 47 ))
encode_mul_32s_32s_47_6_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( tmp_33_fu_68_p2 ),
    .din1( al2 ),
    .ce( grp_fu_82_ce ),
    .dout( grp_fu_82_p2 )
);



always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_ce)) begin
        pl_reg_122 <= grp_fu_62_p2;
        tmp_s_reg_127 <= grp_fu_82_p2;
    end
end

always @ (ap_ce) begin
    if (~(ap_const_logic_1 == ap_ce)) begin
        grp_fu_62_ce = ap_const_logic_0;
    end else begin
        grp_fu_62_ce = ap_const_logic_1;
    end
end

always @ (ap_ce) begin
    if (~(ap_const_logic_1 == ap_ce)) begin
        grp_fu_82_ce = ap_const_logic_0;
    end else begin
        grp_fu_82_ce = ap_const_logic_1;
    end
end

assign ap_return = {{pl_1_fu_88_p2[ap_const_lv32_2E : ap_const_lv32_F]}};

assign pl_1_fu_88_p2 = (pl_reg_122 + tmp_s_reg_127);

assign tmp_33_fu_68_p2 = rlt2 << ap_const_lv32_1;

assign tmp_fu_48_p2 = rlt1 << ap_const_lv32_1;


endmodule //encode_filtep

