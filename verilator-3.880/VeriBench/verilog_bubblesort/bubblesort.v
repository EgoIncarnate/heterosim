// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

/*(* CORE_GENERATION_INFO="bubblesort,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx980tffg1930-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.780000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *) */ // Commented out for VPR -Sharad

module bubblesort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Array_r_address0,
        Array_r_ce0,
        Array_r_we0,
        Array_r_d0,
        Array_r_q0,
        Array_r_address1,
        Array_r_ce1,
        Array_r_we1,
        Array_r_d1,
        Array_r_q1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] Array_r_address0;
output   Array_r_ce0;
output   Array_r_we0;
output  [31:0] Array_r_d0;
input  [31:0] Array_r_q0;
output  [4:0] Array_r_address1;
output   Array_r_ce1;
output   Array_r_we1;
output  [31:0] Array_r_d1;
input  [31:0] Array_r_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] Array_r_address0;
reg Array_r_ce0;
reg Array_r_we0;
reg[4:0] Array_r_address1;
reg Array_r_ce1;
reg Array_r_we1;
reg   [1:0] ap_CS_fsm = 2'b00;
wire   [31:0] tmp_1_cast_fu_136_p1;
reg   [31:0] tmp_1_cast_reg_191;
wire   [0:0] tmp_2_fu_140_p2;
reg   [0:0] tmp_2_reg_196;
reg   [4:0] Array_addr_reg_203;
wire   [0:0] exitcond_fu_146_p2;
wire   [31:0] Index_1_fu_156_p2;
reg   [31:0] Index_1_reg_208;
reg   [4:0] Array_addr_1_reg_214;
wire   [4:0] i_1_fu_173_p2;
wire   [0:0] tmp_3_fu_167_p2;
wire   [5:0] indvars_iv_next_fu_179_p2;
reg   [5:0] indvars_iv_reg_57;
reg   [4:0] i_reg_69;
reg   [31:0] Index_reg_81;
wire   [0:0] tmp_7_fu_185_p2;
reg   [1:0] Sorted_reg_94;
wire   [63:0] tmp_4_fu_151_p1;
wire   [63:0] tmp_6_fu_162_p1;
wire   [4:0] tmp_5_fu_112_p1;
wire   [0:0] tmp_fu_116_p2;
wire   [4:0] indvars_iv_op_fu_122_p2;
wire   [4:0] tmp_1_fu_128_p3;
reg   [1:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b00;
parameter    ap_ST_st2_fsm_1 = 2'b1;
parameter    ap_ST_st3_fsm_2 = 2'b10;
parameter    ap_ST_st4_fsm_3 = 2'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv6_2C = 6'b101100;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv5_14 = 5'b10100;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin //: ap_ret_ap_CS_fsm						//Commented out block name for VPR -Sharad
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_7_fu_185_p2)) | ((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_7_fu_185_p2)))) begin
        Index_reg_81 <= Index_1_reg_208;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_2_fu_140_p2 == ap_const_lv1_0))) begin
        Index_reg_81 <= ap_const_lv32_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (ap_const_lv1_0 == tmp_7_fu_185_p2))) begin
        Sorted_reg_94 <= Sorted_reg_94;
    end else if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_7_fu_185_p2))) begin
        Sorted_reg_94 <= ap_const_lv2_0;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(tmp_2_fu_140_p2 == ap_const_lv1_0))) begin
        Sorted_reg_94 <= ap_const_lv2_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_69 <= ap_const_lv5_1;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_2_reg_196 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond_fu_146_p2) & (ap_const_lv1_0 == tmp_3_fu_167_p2))) begin
        i_reg_69 <= i_1_fu_173_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        indvars_iv_reg_57 <= ap_const_lv6_2C;
    end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_2_reg_196 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond_fu_146_p2) & (ap_const_lv1_0 == tmp_3_fu_167_p2))) begin
        indvars_iv_reg_57 <= indvars_iv_next_fu_179_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(tmp_2_reg_196 == ap_const_lv1_0) & (ap_const_lv1_0 == exitcond_fu_146_p2))) begin
        Array_addr_1_reg_214 <= tmp_6_fu_162_p1;
        Array_addr_reg_203 <= tmp_4_fu_151_p1;
        Index_1_reg_208 <= Index_1_fu_156_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        tmp_1_cast_reg_191[0] <= tmp_1_cast_fu_136_p1[0];
tmp_1_cast_reg_191[1] <= tmp_1_cast_fu_136_p1[1];
tmp_1_cast_reg_191[2] <= tmp_1_cast_fu_136_p1[2];
tmp_1_cast_reg_191[3] <= tmp_1_cast_fu_136_p1[3];
tmp_1_cast_reg_191[4] <= tmp_1_cast_fu_136_p1[4];
        tmp_2_reg_196 <= tmp_2_fu_140_p2;
    end
end

/// Array_r_address0 assign process. ///
always @ (ap_CS_fsm or Array_addr_reg_203 or tmp_4_fu_151_p1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        Array_r_address0 = Array_addr_reg_203;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        Array_r_address0 = tmp_4_fu_151_p1;
    end else begin
        //Array_r_address0 = 'bx;					//Original Vivado HLS code changed to the line that follows for VPR
		Array_r_address0 = 'b0;						//Added by Sharad
    end
end

/// Array_r_address1 assign process. ///
always @ (ap_CS_fsm or Array_addr_1_reg_214 or tmp_6_fu_162_p1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        Array_r_address1 = Array_addr_1_reg_214;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        Array_r_address1 = tmp_6_fu_162_p1;
    end else begin
        //Array_r_address1 = 'bx;					//Original Vivado HLS code changed to the line that follows for VPR
		Array_r_address1 = 'b0;						//Added by Sharad
    end
end

/// Array_r_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        Array_r_ce0 = ap_const_logic_1;
    end else begin
        Array_r_ce0 = ap_const_logic_0;
    end
end

/// Array_r_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        Array_r_ce1 = ap_const_logic_1;
    end else begin
        Array_r_ce1 = ap_const_logic_0;
    end
end

/// Array_r_we0 assign process. ///
always @ (ap_CS_fsm or tmp_7_fu_185_p2)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_7_fu_185_p2))) begin
        Array_r_we0 = ap_const_logic_1;
    end else begin
        Array_r_we0 = ap_const_logic_0;
    end
end

/// Array_r_we1 assign process. ///
always @ (ap_CS_fsm or tmp_7_fu_185_p2)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(ap_const_lv1_0 == tmp_7_fu_185_p2))) begin
        Array_r_we1 = ap_const_logic_1;
    end else begin
        Array_r_we1 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or tmp_2_reg_196 or exitcond_fu_146_p2 or tmp_3_fu_167_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ((tmp_2_reg_196 == ap_const_lv1_0) | (~(ap_const_lv1_0 == exitcond_fu_146_p2) & ~(ap_const_lv1_0 == tmp_3_fu_167_p2))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or tmp_2_reg_196 or exitcond_fu_146_p2 or tmp_3_fu_167_p2)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ((tmp_2_reg_196 == ap_const_lv1_0) | (~(ap_const_lv1_0 == exitcond_fu_146_p2) & ~(ap_const_lv1_0 == tmp_3_fu_167_p2))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_2_reg_196 or exitcond_fu_146_p2 or tmp_3_fu_167_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            if (((tmp_2_reg_196 == ap_const_lv1_0) | (~(ap_const_lv1_0 == exitcond_fu_146_p2) & ~(ap_const_lv1_0 == tmp_3_fu_167_p2)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if ((~(tmp_2_reg_196 == ap_const_lv1_0) & ~(ap_const_lv1_0 == exitcond_fu_146_p2) & (ap_const_lv1_0 == tmp_3_fu_167_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        default : 
            //ap_NS_fsm = 'bx;					//Original Vivado HLS code changed to the line that follows for VPR
			ap_NS_fsm = 'b0;					//Added by Sharad for VPR
    endcase
end
assign Array_r_d0 = Array_r_q1;
assign Array_r_d1 = Array_r_q0;
assign Index_1_fu_156_p2 = (Index_reg_81 + ap_const_lv32_1);
assign exitcond_fu_146_p2 = (Index_reg_81 == tmp_1_cast_reg_191? 1'b1: 1'b0);
assign i_1_fu_173_p2 = (i_reg_69 + ap_const_lv5_1);
assign indvars_iv_next_fu_179_p2 = (indvars_iv_reg_57 + ap_const_lv6_1);
assign indvars_iv_op_fu_122_p2 = (ap_const_lv5_0 - tmp_5_fu_112_p1);
//assign tmp_1_cast_fu_136_p1 = $unsigned(tmp_1_fu_128_p3);    			//Vivado-HLS
assign tmp_1_cast_fu_136_p1 = tmp_1_fu_128_p3;						//Added by Sharad for VPR
assign tmp_1_fu_128_p3 = ((tmp_fu_116_p2)? indvars_iv_op_fu_122_p2: ap_const_lv5_14);
assign tmp_2_fu_140_p2 = (i_reg_69 < ap_const_lv5_14? 1'b1: 1'b0);
assign tmp_3_fu_167_p2 = (Sorted_reg_94 == ap_const_lv2_1? 1'b1: 1'b0);
//assign tmp_4_fu_151_p1 = $signed(Index_reg_81);						//Vivado-HLS
assign tmp_4_fu_151_p1 = Index_reg_81;								//Added by Sharad for VPR
assign tmp_5_fu_112_p1 = indvars_iv_reg_57[4:0];
//assign tmp_6_fu_162_p1 = $signed(Index_1_fu_156_p2);					//Vivado-HLS
assign tmp_6_fu_162_p1 = Index_1_fu_156_p2;							//Added by Sharad for VPR

//assign tmp_7_fu_185_p2 = ($signed(Array_r_q0) > $signed(Array_r_q1)? 1'b1: 1'b0); //Vivado-HLS
assign tmp_7_fu_185_p2 = (Array_r_q0) > (Array_r_q1)? 1'b1: 1'b0;					//Added by Sharad for VPR
assign tmp_fu_116_p2 = (indvars_iv_reg_57 > ap_const_lv6_2C? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    tmp_1_cast_reg_191[31:5] <= 27'b000000000000000000000000000;
end



endmodule //bubblesort

