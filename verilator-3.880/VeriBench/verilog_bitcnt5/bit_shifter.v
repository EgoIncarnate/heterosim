// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bit_shifter,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.079000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=105,HLS_SYN_LUT=198}" *)

module bit_shifter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        mm,
        out_r,
        out_r_ap_vld,
        nn,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_r;
input  [31:0] mm;
output  [31:0] out_r;
output   out_r_ap_vld;
input  [31:0] nn;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_18;
wire   [6:0] i_1_fu_119_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_47;
wire   [31:0] n_1_fu_133_p2;
wire   [0:0] demorgan_fu_113_p2;
wire  signed [63:0] x_1_fu_149_p1;
reg   [63:0] x1_reg_67;
reg   [6:0] i_reg_76;
reg   [31:0] n_reg_87;
wire   [0:0] tmp_fu_99_p3;
wire   [0:0] not_s_fu_107_p2;
wire   [0:0] tmp_1_fu_125_p1;
wire   [31:0] tmp_3_cast_fu_129_p1;
wire   [62:0] tmp_6_fu_139_p4;
reg   [1:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (demorgan_fu_113_p2 == ap_const_lv1_0))) begin
        i_reg_76 <= i_1_fu_119_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_76 <= ap_const_lv7_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (demorgan_fu_113_p2 == ap_const_lv1_0))) begin
        n_reg_87 <= n_1_fu_133_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        n_reg_87 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (demorgan_fu_113_p2 == ap_const_lv1_0))) begin
        x1_reg_67 <= x_1_fu_149_p1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x1_reg_67 <= in_r;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or demorgan_fu_113_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(demorgan_fu_113_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or demorgan_fu_113_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(demorgan_fu_113_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_18) begin
    if (ap_sig_bdd_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_47) begin
    if (ap_sig_bdd_47) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or demorgan_fu_113_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(demorgan_fu_113_p2 == ap_const_lv1_0))) begin
        out_r_ap_vld = ap_const_logic_1;
    end else begin
        out_r_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or demorgan_fu_113_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(demorgan_fu_113_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = (nn + mm);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_18 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_47 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign demorgan_fu_113_p2 = (tmp_fu_99_p3 | not_s_fu_107_p2);

assign i_1_fu_119_p2 = (i_reg_76 + ap_const_lv7_1);

assign n_1_fu_133_p2 = (n_reg_87 + tmp_3_cast_fu_129_p1);

assign not_s_fu_107_p2 = (x1_reg_67 == ap_const_lv64_0? 1'b1: 1'b0);

assign out_r = n_reg_87;

assign tmp_1_fu_125_p1 = x1_reg_67[0:0];

assign tmp_3_cast_fu_129_p1 = tmp_1_fu_125_p1;

assign tmp_6_fu_139_p4 = {{x1_reg_67[ap_const_lv32_3F : ap_const_lv32_1]}};

assign tmp_fu_99_p3 = i_reg_76[ap_const_lv32_6];

assign x_1_fu_149_p1 = $signed(tmp_6_fu_139_p4);


endmodule //bit_shifter

