// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ntbl_bitcount,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.630000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=72}" *)

module ntbl_bitcount (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        mm,
        out_r,
        out_r_ap_vld,
        nn,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_r;
input  [31:0] mm;
output  [31:0] out_r;
output   out_r_ap_vld;
input  [31:0] nn;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_18;
wire   [7:0] bits_address0;
reg    bits_ce0;
wire   [3:0] bits_q0;
wire   [7:0] bits_address1;
reg    bits_ce1;
wire   [3:0] bits_q1;
wire   [7:0] bits_address2;
reg    bits_ce2;
wire   [3:0] bits_q2;
wire   [7:0] bits_address3;
reg    bits_ce3;
wire   [3:0] bits_q3;
wire   [7:0] bits_address4;
reg    bits_ce4;
wire   [3:0] bits_q4;
wire   [7:0] bits_address5;
reg    bits_ce5;
wire   [3:0] bits_q5;
wire   [7:0] bits_address6;
reg    bits_ce6;
wire   [3:0] bits_q6;
wire   [7:0] bits_address7;
reg    bits_ce7;
wire   [3:0] bits_q7;
wire   [63:0] tmp_2_fu_174_p1;
wire   [63:0] tmp_7_fu_189_p1;
wire   [63:0] tmp_s_fu_204_p1;
wire   [63:0] tmp_3_fu_219_p1;
wire   [63:0] tmp_6_fu_234_p1;
wire   [63:0] tmp_1_fu_249_p1;
wire   [63:0] tmp_4_fu_264_p1;
wire   [63:0] tmp_5_fu_279_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_100;
wire   [3:0] tmp_fu_170_p1;
wire   [3:0] tmp_5_cast_fu_179_p4;
wire   [3:0] tmp_cast_fu_194_p4;
wire   [3:0] tmp_14_cast_fu_209_p4;
wire   [3:0] tmp_19_cast_fu_224_p4;
wire   [3:0] tmp_24_cast_fu_239_p4;
wire   [3:0] tmp_29_cast_fu_254_p4;
wire   [3:0] tmp_34_cast_fu_269_p4;
wire   [4:0] tmp_3_cast_fu_284_p1;
wire   [4:0] tmp_8_cast_fu_288_p1;
wire   [4:0] tmp2_fu_316_p2;
wire   [4:0] tmp_12_cast_fu_292_p1;
wire   [4:0] tmp_17_cast_fu_296_p1;
wire   [4:0] tmp3_fu_326_p2;
wire   [5:0] tmp3_cast_fu_332_p1;
wire   [5:0] tmp2_cast_fu_322_p1;
wire   [5:0] tmp1_fu_336_p2;
wire   [4:0] tmp_22_cast_fu_300_p1;
wire   [4:0] tmp_27_cast_fu_304_p1;
wire   [4:0] tmp5_fu_346_p2;
wire   [4:0] tmp_32_cast_fu_308_p1;
wire   [4:0] tmp_37_cast_fu_312_p1;
wire   [4:0] tmp6_fu_356_p2;
wire   [5:0] tmp6_cast_fu_362_p1;
wire   [5:0] tmp5_cast_fu_352_p1;
wire   [5:0] tmp4_fu_366_p2;
wire   [6:0] tmp4_cast_fu_372_p1;
wire   [6:0] tmp1_cast_fu_342_p1;
wire   [6:0] tmp_8_fu_376_p2;
reg   [1:0] ap_NS_fsm;


ntbl_bitcount_bits #(
    .DataWidth( 4 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
bits_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( bits_address0 ),
    .ce0( bits_ce0 ),
    .q0( bits_q0 ),
    .address1( bits_address1 ),
    .ce1( bits_ce1 ),
    .q1( bits_q1 ),
    .address2( bits_address2 ),
    .ce2( bits_ce2 ),
    .q2( bits_q2 ),
    .address3( bits_address3 ),
    .ce3( bits_ce3 ),
    .q3( bits_q3 ),
    .address4( bits_address4 ),
    .ce4( bits_ce4 ),
    .q4( bits_q4 ),
    .address5( bits_address5 ),
    .ce5( bits_ce5 ),
    .q5( bits_q5 ),
    .address6( bits_address6 ),
    .ce6( bits_ce6 ),
    .q6( bits_q6 ),
    .address7( bits_address7 ),
    .ce7( bits_ce7 ),
    .q7( bits_q7 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_18) begin
    if (ap_sig_bdd_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_100) begin
    if (ap_sig_bdd_100) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce0 = ap_const_logic_1;
    end else begin
        bits_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce1 = ap_const_logic_1;
    end else begin
        bits_ce1 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce2 = ap_const_logic_1;
    end else begin
        bits_ce2 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce3 = ap_const_logic_1;
    end else begin
        bits_ce3 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce4 = ap_const_logic_1;
    end else begin
        bits_ce4 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce5 = ap_const_logic_1;
    end else begin
        bits_ce5 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce6 = ap_const_logic_1;
    end else begin
        bits_ce6 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        bits_ce7 = ap_const_logic_1;
    end else begin
        bits_ce7 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        out_r_ap_vld = ap_const_logic_1;
    end else begin
        out_r_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = (mm + nn);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_100 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_18 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

assign bits_address0 = tmp_2_fu_174_p1;

assign bits_address1 = tmp_7_fu_189_p1;

assign bits_address2 = tmp_s_fu_204_p1;

assign bits_address3 = tmp_3_fu_219_p1;

assign bits_address4 = tmp_6_fu_234_p1;

assign bits_address5 = tmp_1_fu_249_p1;

assign bits_address6 = tmp_4_fu_264_p1;

assign bits_address7 = tmp_5_fu_279_p1;

assign out_r = tmp_8_fu_376_p2;

assign tmp1_cast_fu_342_p1 = tmp1_fu_336_p2;

assign tmp1_fu_336_p2 = (tmp3_cast_fu_332_p1 + tmp2_cast_fu_322_p1);

assign tmp2_cast_fu_322_p1 = tmp2_fu_316_p2;

assign tmp2_fu_316_p2 = (tmp_3_cast_fu_284_p1 + tmp_8_cast_fu_288_p1);

assign tmp3_cast_fu_332_p1 = tmp3_fu_326_p2;

assign tmp3_fu_326_p2 = (tmp_12_cast_fu_292_p1 + tmp_17_cast_fu_296_p1);

assign tmp4_cast_fu_372_p1 = tmp4_fu_366_p2;

assign tmp4_fu_366_p2 = (tmp6_cast_fu_362_p1 + tmp5_cast_fu_352_p1);

assign tmp5_cast_fu_352_p1 = tmp5_fu_346_p2;

assign tmp5_fu_346_p2 = (tmp_22_cast_fu_300_p1 + tmp_27_cast_fu_304_p1);

assign tmp6_cast_fu_362_p1 = tmp6_fu_356_p2;

assign tmp6_fu_356_p2 = (tmp_32_cast_fu_308_p1 + tmp_37_cast_fu_312_p1);

assign tmp_12_cast_fu_292_p1 = bits_q2;

assign tmp_14_cast_fu_209_p4 = {{in_r[ap_const_lv32_F : ap_const_lv32_C]}};

assign tmp_17_cast_fu_296_p1 = bits_q3;

assign tmp_19_cast_fu_224_p4 = {{in_r[ap_const_lv32_13 : ap_const_lv32_10]}};

assign tmp_1_fu_249_p1 = tmp_24_cast_fu_239_p4;

assign tmp_22_cast_fu_300_p1 = bits_q4;

assign tmp_24_cast_fu_239_p4 = {{in_r[ap_const_lv32_17 : ap_const_lv32_14]}};

assign tmp_27_cast_fu_304_p1 = bits_q5;

assign tmp_29_cast_fu_254_p4 = {{in_r[ap_const_lv32_1B : ap_const_lv32_18]}};

assign tmp_2_fu_174_p1 = tmp_fu_170_p1;

assign tmp_32_cast_fu_308_p1 = bits_q6;

assign tmp_34_cast_fu_269_p4 = {{in_r[ap_const_lv32_1F : ap_const_lv32_1C]}};

assign tmp_37_cast_fu_312_p1 = bits_q7;

assign tmp_3_cast_fu_284_p1 = bits_q0;

assign tmp_3_fu_219_p1 = tmp_14_cast_fu_209_p4;

assign tmp_4_fu_264_p1 = tmp_29_cast_fu_254_p4;

assign tmp_5_cast_fu_179_p4 = {{in_r[ap_const_lv32_7 : ap_const_lv32_4]}};

assign tmp_5_fu_279_p1 = tmp_34_cast_fu_269_p4;

assign tmp_6_fu_234_p1 = tmp_19_cast_fu_224_p4;

assign tmp_7_fu_189_p1 = tmp_5_cast_fu_179_p4;

assign tmp_8_cast_fu_288_p1 = bits_q1;

assign tmp_8_fu_376_p2 = (tmp4_cast_fu_372_p1 + tmp1_cast_fu_342_p1);

assign tmp_cast_fu_194_p4 = {{in_r[ap_const_lv32_B : ap_const_lv32_8]}};

assign tmp_fu_170_p1 = in_r[3:0];

assign tmp_s_fu_204_p1 = tmp_cast_fu_194_p4;


endmodule //ntbl_bitcount

