// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decode_start_WriteOneBlock (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        store_address0,
        store_ce0,
        store_q0,
        store_offset,
        tmp_4,
        out_buf_address0,
        out_buf_ce0,
        out_buf_we0,
        out_buf_d0,
        tmp_42,
        width,
        height,
        voffs,
        hoffs
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv15_14BE = 15'b1010010111110;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] store_address0;
output   store_ce0;
input  [31:0] store_q0;
input  [3:0] store_offset;
input  [1:0] tmp_4;
output  [13:0] out_buf_address0;
output   out_buf_ce0;
output   out_buf_we0;
output  [7:0] out_buf_d0;
input  [1:0] tmp_42;
input  [15:0] width;
input  [15:0] height;
input  [31:0] voffs;
input  [31:0] hoffs;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg store_ce0;
reg out_buf_ce0;
reg out_buf_we0;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
wire   [31:0] tmp_46_fu_154_p2;
reg   [31:0] tmp_46_reg_443;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_65;
wire  signed [31:0] width_cast_fu_164_p1;
reg  signed [31:0] width_cast_reg_454;
wire   [31:0] tmp_fu_168_p2;
reg   [31:0] tmp_reg_459;
wire   [31:0] tmp_45_fu_185_p2;
reg   [31:0] tmp_45_reg_464;
wire   [31:0] tmp_48_fu_201_p2;
reg   [31:0] tmp_48_reg_470;
wire   [31:0] tmp_51_fu_207_p2;
reg   [31:0] tmp_51_reg_476;
wire   [31:0] smax5_fu_219_p3;
reg   [31:0] smax5_reg_482;
wire   [31:0] smax8_fu_239_p3;
reg   [31:0] smax8_reg_487;
wire   [14:0] tmp_194_fu_251_p2;
reg   [14:0] tmp_194_reg_492;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_88;
wire   [10:0] tmp_251_cast_fu_289_p3;
reg   [10:0] tmp_251_cast_reg_497;
wire   [31:0] tmp_50_fu_307_p2;
reg   [31:0] tmp_50_reg_502;
wire   [31:0] tmp_58_fu_334_p2;
reg   [31:0] tmp_58_reg_507;
wire   [63:0] tmp_59_fu_340_p1;
reg   [63:0] tmp_59_reg_512;
wire   [63:0] tmp_60_fu_354_p2;
reg   [63:0] tmp_60_reg_520;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_105;
wire   [0:0] exitcond9_fu_344_p2;
wire   [31:0] grp_fu_349_p2;
reg   [31:0] diff_reg_525;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_118;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_127;
wire   [31:0] p_rec_fu_392_p2;
reg   [31:0] p_rec_reg_538;
wire   [14:0] tmp_198_fu_407_p2;
reg   [14:0] tmp_198_reg_543;
wire   [0:0] exitcond5_fu_387_p2;
wire   [31:0] e_1_fu_412_p2;
reg   [31:0] e_1_reg_548;
wire   [31:0] i_28_fu_418_p2;
reg  signed [31:0] i_reg_112;
reg   [63:0] p_0_idx_reg_122;
reg   [31:0] e_reg_134;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_154;
reg   [31:0] p_1_rec_reg_143;
wire   [63:0] tmp_252_cast_fu_382_p1;
wire  signed [63:0] tmp_253_cast_fu_429_p1;
wire  signed [31:0] height_cast_fu_160_p1;
wire   [0:0] tmp_s_fu_173_p2;
wire   [31:0] smax6_fu_178_p3;
wire   [0:0] tmp_47_fu_191_p2;
wire   [31:0] smax7_fu_195_p3;
wire   [0:0] tmp_52_fu_213_p2;
wire   [31:0] tmp_54_fu_227_p2;
wire   [0:0] tmp_55_fu_233_p2;
wire   [1:0] tmp_194_fu_251_p0;
wire   [2:0] tmp_208_fu_265_p1;
wire   [4:0] p_shl_cast_fu_269_p3;
wire   [4:0] store_offset_cast_cast_fu_261_p1;
wire   [4:0] tmp_195_fu_277_p2;
wire   [4:0] tmp_4_cast_cast_fu_257_p1;
wire   [4:0] tmp_196_fu_283_p2;
wire   [0:0] tmp_49_fu_297_p2;
wire   [31:0] umax8_fu_301_p3;
wire   [31:0] tmp_53_fu_312_p2;
wire   [31:0] tmp_56_fu_316_p2;
wire   [0:0] tmp_57_fu_320_p2;
wire   [31:0] umax9_fu_326_p3;
wire  signed [15:0] grp_fu_349_p1;
wire   [7:0] tmp_209_fu_359_p1;
wire   [7:0] tmp_210_fu_363_p1;
wire   [7:0] sum_fu_367_p2;
wire   [10:0] sum_cast_cast_fu_373_p1;
wire   [10:0] tmp_197_fu_377_p2;
wire   [31:0] tmp_62_fu_398_p2;
wire   [14:0] tmp_212_fu_403_p1;
wire    grp_fu_349_ce;
reg   [7:0] ap_NS_fsm;
wire   [14:0] tmp_194_fu_251_p00;


decode_start_mul_32s_16s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
decode_start_mul_32s_16s_32_3_U65(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( i_reg_112 ),
    .din1( grp_fu_349_p1 ),
    .ce( grp_fu_349_ce ),
    .dout( grp_fu_349_p2 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        e_reg_134 <= e_1_reg_548;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        e_reg_134 <= hoffs;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond5_fu_387_p2))) begin
        i_reg_112 <= i_28_fu_418_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_reg_112 <= voffs;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(ap_const_lv1_0 == exitcond5_fu_387_p2))) begin
        p_0_idx_reg_122 <= tmp_60_reg_520;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        p_0_idx_reg_122 <= ap_const_lv64_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        p_1_rec_reg_143 <= p_rec_reg_538;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        p_1_rec_reg_143 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        diff_reg_525 <= grp_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (ap_const_lv1_0 == exitcond5_fu_387_p2))) begin
        e_1_reg_548 <= e_1_fu_412_p2;
        tmp_198_reg_543 <= tmp_198_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        p_rec_reg_538 <= p_rec_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        smax5_reg_482 <= smax5_fu_219_p3;
        smax8_reg_487 <= smax8_fu_239_p3;
        tmp_45_reg_464 <= tmp_45_fu_185_p2;
        tmp_48_reg_470 <= tmp_48_fu_201_p2;
        tmp_51_reg_476 <= tmp_51_fu_207_p2;
        tmp_reg_459 <= tmp_fu_168_p2;
        width_cast_reg_454 <= width_cast_fu_164_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_194_reg_492[14 : 1] <= tmp_194_fu_251_p2[14 : 1];
        tmp_251_cast_reg_497[10 : 6] <= tmp_251_cast_fu_289_p3[10 : 6];
        tmp_50_reg_502 <= tmp_50_fu_307_p2;
        tmp_58_reg_507 <= tmp_58_fu_334_p2;
        tmp_59_reg_512[31 : 0] <= tmp_59_fu_340_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_46_reg_443 <= tmp_46_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (exitcond9_fu_344_p2 == ap_const_lv1_0))) begin
        tmp_60_reg_520 <= tmp_60_fu_354_p2;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st4_fsm_3 or exitcond9_fu_344_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(exitcond9_fu_344_p2 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or exitcond9_fu_344_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(exitcond9_fu_344_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_26) begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_65) begin
    if (ap_sig_bdd_65) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_88) begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_105) begin
    if (ap_sig_bdd_105) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_118) begin
    if (ap_sig_bdd_118) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_127) begin
    if (ap_sig_bdd_127) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_154) begin
    if (ap_sig_bdd_154) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_7) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        out_buf_ce0 = ap_const_logic_1;
    end else begin
        out_buf_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_7) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        out_buf_we0 = ap_const_logic_1;
    end else begin
        out_buf_we0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st7_fsm_6) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        store_ce0 = ap_const_logic_1;
    end else begin
        store_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond9_fu_344_p2 or exitcond5_fu_387_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(exitcond9_fu_344_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(ap_const_lv1_0 == exitcond5_fu_387_p2)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_105 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_118 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_127 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_154 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_65 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign e_1_fu_412_p2 = (ap_const_lv32_1 + e_reg_134);

assign exitcond5_fu_387_p2 = (p_1_rec_reg_143 == tmp_58_reg_507? 1'b1: 1'b0);

assign exitcond9_fu_344_p2 = (i_reg_112 == tmp_50_reg_502? 1'b1: 1'b0);

assign grp_fu_349_ce = ap_const_logic_1;

assign grp_fu_349_p1 = width_cast_reg_454;

assign height_cast_fu_160_p1 = $signed(height);

assign i_28_fu_418_p2 = ($signed(i_reg_112) + $signed(ap_const_lv32_1));

assign out_buf_address0 = tmp_253_cast_fu_429_p1;

assign out_buf_d0 = store_q0[7:0];

assign p_rec_fu_392_p2 = (ap_const_lv32_1 + p_1_rec_reg_143);

assign p_shl_cast_fu_269_p3 = {{tmp_208_fu_265_p1}, {ap_const_lv2_0}};

assign smax5_fu_219_p3 = ((tmp_52_fu_213_p2[0:0] === 1'b1) ? hoffs : width_cast_fu_164_p1);

assign smax6_fu_178_p3 = ((tmp_s_fu_173_p2[0:0] === 1'b1) ? voffs : height_cast_fu_160_p1);

assign smax7_fu_195_p3 = ((tmp_47_fu_191_p2[0:0] === 1'b1) ? voffs : tmp_46_reg_443);

assign smax8_fu_239_p3 = ((tmp_55_fu_233_p2[0:0] === 1'b1) ? hoffs : tmp_54_fu_227_p2);

assign store_address0 = tmp_252_cast_fu_382_p1;

assign store_offset_cast_cast_fu_261_p1 = store_offset;

assign sum_cast_cast_fu_373_p1 = sum_fu_367_p2;

assign sum_fu_367_p2 = (tmp_209_fu_359_p1 + tmp_210_fu_363_p1);

assign tmp_194_fu_251_p0 = tmp_194_fu_251_p00;

assign tmp_194_fu_251_p00 = tmp_42;

assign tmp_194_fu_251_p2 = (tmp_194_fu_251_p0 * $signed('h14BE));

assign tmp_195_fu_277_p2 = (p_shl_cast_fu_269_p3 - store_offset_cast_cast_fu_261_p1);

assign tmp_196_fu_283_p2 = (tmp_195_fu_277_p2 + tmp_4_cast_cast_fu_257_p1);

assign tmp_197_fu_377_p2 = (tmp_251_cast_reg_497 + sum_cast_cast_fu_373_p1);

assign tmp_198_fu_407_p2 = (tmp_212_fu_403_p1 + tmp_194_reg_492);

assign tmp_208_fu_265_p1 = store_offset[2:0];

assign tmp_209_fu_359_p1 = p_1_rec_reg_143[7:0];

assign tmp_210_fu_363_p1 = p_0_idx_reg_122[7:0];

assign tmp_212_fu_403_p1 = tmp_62_fu_398_p2[14:0];

assign tmp_251_cast_fu_289_p3 = {{tmp_196_fu_283_p2}, {ap_const_lv6_0}};

assign tmp_252_cast_fu_382_p1 = tmp_197_fu_377_p2;

assign tmp_253_cast_fu_429_p1 = $signed(tmp_198_reg_543);

assign tmp_45_fu_185_p2 = (tmp_fu_168_p2 - smax6_fu_178_p3);

assign tmp_46_fu_154_p2 = (voffs + ap_const_lv32_8);

assign tmp_47_fu_191_p2 = ($signed(tmp_46_reg_443) < $signed(voffs)? 1'b1: 1'b0);

assign tmp_48_fu_201_p2 = (tmp_fu_168_p2 - smax7_fu_195_p3);

assign tmp_49_fu_297_p2 = (tmp_45_reg_464 > tmp_48_reg_470? 1'b1: 1'b0);

assign tmp_4_cast_cast_fu_257_p1 = tmp_4;

assign tmp_50_fu_307_p2 = (tmp_reg_459 - umax8_fu_301_p3);

assign tmp_51_fu_207_p2 = ($signed(hoffs) + $signed(ap_const_lv32_FFFFFFFF));

assign tmp_52_fu_213_p2 = ($signed(width_cast_fu_164_p1) < $signed(hoffs)? 1'b1: 1'b0);

assign tmp_53_fu_312_p2 = (tmp_51_reg_476 - smax5_reg_482);

assign tmp_54_fu_227_p2 = (hoffs + ap_const_lv32_8);

assign tmp_55_fu_233_p2 = ($signed(tmp_54_fu_227_p2) < $signed(hoffs)? 1'b1: 1'b0);

assign tmp_56_fu_316_p2 = (tmp_51_reg_476 - smax8_reg_487);

assign tmp_57_fu_320_p2 = (tmp_53_fu_312_p2 > tmp_56_fu_316_p2? 1'b1: 1'b0);

assign tmp_58_fu_334_p2 = (umax9_fu_326_p3 ^ ap_const_lv32_FFFFFFFF);

assign tmp_59_fu_340_p1 = tmp_58_fu_334_p2;

assign tmp_60_fu_354_p2 = (tmp_59_reg_512 + p_0_idx_reg_122);

assign tmp_62_fu_398_p2 = (e_reg_134 + diff_reg_525);

assign tmp_fu_168_p2 = ($signed(voffs) + $signed(ap_const_lv32_FFFFFFFF));

assign tmp_s_fu_173_p2 = ($signed(height_cast_fu_160_p1) < $signed(voffs)? 1'b1: 1'b0);

assign umax8_fu_301_p3 = ((tmp_49_fu_297_p2[0:0] === 1'b1) ? tmp_45_reg_464 : tmp_48_reg_470);

assign umax9_fu_326_p3 = ((tmp_57_fu_320_p2[0:0] === 1'b1) ? tmp_53_fu_312_p2 : tmp_56_fu_316_p2);

assign width_cast_fu_164_p1 = $signed(width);
always @ (posedge ap_clk) begin
    tmp_194_reg_492[0] <= 1'b0;
    tmp_251_cast_reg_497[5:0] <= 6'b000000;
    tmp_59_reg_512[63:32] <= 32'b00000000000000000000000000000000;
end



endmodule //decode_start_WriteOneBlock

