// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bit_count,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.479000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=197,HLS_SYN_LUT=420}" *)

module bit_count (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        mm,
        out_r,
        out_r_ap_vld,
        nn,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b1;
parameter    ap_ST_st2_fsm_1 = 3'b10;
parameter    ap_ST_st3_fsm_2 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_FFFFFFFFFFFFFFFF = 64'b1111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in_r;
input  [31:0] mm;
output  [31:0] out_r;
output   out_r_ap_vld;
input  [31:0] nn;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm = 3'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_19;
wire   [0:0] tmp_fu_89_p2;
reg   [0:0] tmp_reg_139;
wire   [63:0] x_1_fu_101_p2;
reg   [63:0] x_1_reg_143;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_50;
wire   [0:0] tmp_4_fu_107_p2;
reg   [0:0] tmp_4_reg_148;
wire   [31:0] n_2_fu_113_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_61;
reg   [63:0] x1_reg_57;
reg   [31:0] n_reg_66;
reg   [31:0] n_1_phi_fu_81_p4;
reg   [31:0] n_1_reg_77;
wire   [63:0] tmp_2_fu_95_p2;
reg   [2:0] ap_NS_fsm;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_reg_139 == ap_const_lv1_0) & ~(tmp_4_reg_148 == ap_const_lv1_0))) begin
        n_1_reg_77 <= n_2_fu_113_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & ~(tmp_fu_89_p2 == ap_const_lv1_0))) begin
        n_1_reg_77 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_fu_89_p2 == ap_const_lv1_0))) begin
        n_reg_66 <= ap_const_lv32_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_reg_139 == ap_const_lv1_0) & (tmp_4_reg_148 == ap_const_lv1_0))) begin
        n_reg_66 <= n_2_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0) & (tmp_fu_89_p2 == ap_const_lv1_0))) begin
        x1_reg_57 <= in_r;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_reg_139 == ap_const_lv1_0) & (tmp_4_reg_148 == ap_const_lv1_0))) begin
        x1_reg_57 <= x_1_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_4_reg_148 <= tmp_4_fu_107_p2;
        x_1_reg_143 <= x_1_fu_101_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_139 <= tmp_fu_89_p2;
    end
end

always @ (tmp_reg_139 or tmp_4_reg_148 or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (~(tmp_4_reg_148 == ap_const_lv1_0) | ~(tmp_reg_139 == ap_const_lv1_0)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (tmp_reg_139 or tmp_4_reg_148 or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (~(tmp_4_reg_148 == ap_const_lv1_0) | ~(tmp_reg_139 == ap_const_lv1_0)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_19) begin
    if (ap_sig_bdd_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_50) begin
    if (ap_sig_bdd_50) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_61) begin
    if (ap_sig_bdd_61) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (tmp_reg_139 or tmp_4_reg_148 or n_2_fu_113_p2 or ap_sig_cseq_ST_st3_fsm_2 or n_1_reg_77) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (tmp_reg_139 == ap_const_lv1_0) & ~(tmp_4_reg_148 == ap_const_lv1_0))) begin
        n_1_phi_fu_81_p4 = n_2_fu_113_p2;
    end else begin
        n_1_phi_fu_81_p4 = n_1_reg_77;
    end
end

always @ (tmp_reg_139 or tmp_4_reg_148 or ap_sig_cseq_ST_st3_fsm_2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (~(tmp_4_reg_148 == ap_const_lv1_0) | ~(tmp_reg_139 == ap_const_lv1_0)))) begin
        out_r_ap_vld = ap_const_logic_1;
    end else begin
        out_r_ap_vld = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_fu_89_p2 or tmp_reg_139 or tmp_4_reg_148) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if ((~(ap_start == ap_const_logic_0) & ~(tmp_fu_89_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else if ((~(ap_start == ap_const_logic_0) & (tmp_fu_89_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((~(tmp_4_reg_148 == ap_const_lv1_0) | ~(tmp_reg_139 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = (nn + mm);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_19 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_50 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_61 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

assign n_2_fu_113_p2 = (n_reg_66 + ap_const_lv32_1);

assign out_r = n_1_phi_fu_81_p4;

assign tmp_2_fu_95_p2 = ($signed(x1_reg_57) + $signed(ap_const_lv64_FFFFFFFFFFFFFFFF));

assign tmp_4_fu_107_p2 = (x_1_fu_101_p2 == ap_const_lv64_0? 1'b1: 1'b0);

assign tmp_fu_89_p2 = (in_r == ap_const_lv64_0? 1'b1: 1'b0);

assign x_1_fu_101_p2 = (tmp_2_fu_95_p2 & x1_reg_57);


endmodule //bit_count

