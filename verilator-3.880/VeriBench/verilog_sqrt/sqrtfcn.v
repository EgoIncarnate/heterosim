// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sqrtfcn,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx980tffg1930-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.832000,HLS_SYN_LAT=218,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module sqrtfcn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        val_r,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] val_r;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg   [5:0] ap_CS_fsm = 6'b000000;
wire   [31:0] grp_fu_74_p2;
reg   [31:0] reg_113;
wire   [63:0] grp_fu_88_p1;
reg   [63:0] reg_118;
wire   [31:0] grp_fu_70_p2;
reg   [31:0] reg_125;
reg   [31:0] x_1_load_reg_230;
wire   [0:0] tmp_2_fu_157_p2;
reg   [0:0] tmp_2_reg_242;
wire   [0:0] exitcond_fu_148_p2;
wire   [63:0] grp_fu_98_p2;
reg   [63:0] tmp_7_reg_246;
wire   [63:0] grp_fu_103_p2;
reg   [63:0] tmp_8_reg_251;
wire   [31:0] grp_fu_84_p1;
wire   [31:0] p_0_i_fu_182_p3;
wire   [4:0] i_1_fu_200_p2;
reg   [4:0] i_reg_46;
wire   [0:0] grp_fu_92_p2;
reg   [31:0] x_2_reg_58;
reg   [31:0] x_1_fu_32;
wire   [31:0] grp_fu_78_p2;
reg   [31:0] flag_fu_36;
wire   [31:0] flag_1_fu_191_p1;
reg   [31:0] grp_fu_70_p0;
reg   [31:0] grp_fu_70_p1;
reg   [31:0] grp_fu_74_p0;
reg   [31:0] grp_fu_74_p1;
wire   [31:0] grp_fu_78_p0;
wire   [31:0] grp_fu_78_p1;
wire   [63:0] grp_fu_84_p0;
reg   [31:0] grp_fu_88_p0;
reg   [31:0] grp_fu_92_p0;
wire   [31:0] grp_fu_92_p1;
wire   [63:0] grp_fu_98_p0;
wire   [63:0] grp_fu_98_p1;
wire   [63:0] grp_fu_103_p0;
wire   [63:0] grp_fu_103_p1;
wire   [63:0] grp_fu_107_p0;
wire   [63:0] grp_fu_107_p1;
wire   [31:0] tmp_1_to_int_i_fu_168_p1;
wire   [31:0] tmp_1_neg_i_fu_172_p2;
wire   [31:0] tmp_1_i_fu_178_p1;
wire   [0:0] grp_fu_107_p2;
reg   [1:0] grp_fu_70_opcode;
wire    grp_fu_70_ce;
wire    grp_fu_74_ce;
wire    grp_fu_78_ce;
wire    grp_fu_84_ce;
wire    grp_fu_88_ce;
wire    grp_fu_92_ce;
reg   [4:0] grp_fu_92_opcode;
wire    grp_fu_98_ce;
wire    grp_fu_103_ce;
wire    grp_fu_107_ce;
wire   [4:0] grp_fu_107_opcode;
reg   [5:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b000000;
parameter    ap_ST_st2_fsm_1 = 6'b1;
parameter    ap_ST_st3_fsm_2 = 6'b10;
parameter    ap_ST_st4_fsm_3 = 6'b11;
parameter    ap_ST_st5_fsm_4 = 6'b100;
parameter    ap_ST_st6_fsm_5 = 6'b101;
parameter    ap_ST_st7_fsm_6 = 6'b110;
parameter    ap_ST_st8_fsm_7 = 6'b111;
parameter    ap_ST_st9_fsm_8 = 6'b1000;
parameter    ap_ST_st10_fsm_9 = 6'b1001;
parameter    ap_ST_st11_fsm_10 = 6'b1010;
parameter    ap_ST_st12_fsm_11 = 6'b1011;
parameter    ap_ST_st13_fsm_12 = 6'b1100;
parameter    ap_ST_st14_fsm_13 = 6'b1101;
parameter    ap_ST_st15_fsm_14 = 6'b1110;
parameter    ap_ST_st16_fsm_15 = 6'b1111;
parameter    ap_ST_st17_fsm_16 = 6'b10000;
parameter    ap_ST_st18_fsm_17 = 6'b10001;
parameter    ap_ST_st19_fsm_18 = 6'b10010;
parameter    ap_ST_st20_fsm_19 = 6'b10011;
parameter    ap_ST_st21_fsm_20 = 6'b10100;
parameter    ap_ST_st22_fsm_21 = 6'b10101;
parameter    ap_ST_st23_fsm_22 = 6'b10110;
parameter    ap_ST_st24_fsm_23 = 6'b10111;
parameter    ap_ST_st25_fsm_24 = 6'b11000;
parameter    ap_ST_st26_fsm_25 = 6'b11001;
parameter    ap_ST_st27_fsm_26 = 6'b11010;
parameter    ap_ST_st28_fsm_27 = 6'b11011;
parameter    ap_ST_st29_fsm_28 = 6'b11100;
parameter    ap_ST_st30_fsm_29 = 6'b11101;
parameter    ap_ST_st31_fsm_30 = 6'b11110;
parameter    ap_ST_st32_fsm_31 = 6'b11111;
parameter    ap_ST_st33_fsm_32 = 6'b100000;
parameter    ap_ST_st34_fsm_33 = 6'b100001;
parameter    ap_ST_st35_fsm_34 = 6'b100010;
parameter    ap_ST_st36_fsm_35 = 6'b100011;
parameter    ap_ST_st37_fsm_36 = 6'b100100;
parameter    ap_ST_st38_fsm_37 = 6'b100101;
parameter    ap_ST_st39_fsm_38 = 6'b100110;
parameter    ap_ST_st40_fsm_39 = 6'b100111;
parameter    ap_ST_st41_fsm_40 = 6'b101000;
parameter    ap_ST_st42_fsm_41 = 6'b101001;
parameter    ap_ST_st43_fsm_42 = 6'b101010;
parameter    ap_ST_st44_fsm_43 = 6'b101011;
parameter    ap_ST_st45_fsm_44 = 6'b101100;
parameter    ap_ST_st46_fsm_45 = 6'b101101;
parameter    ap_ST_st47_fsm_46 = 6'b101110;
parameter    ap_ST_st48_fsm_47 = 6'b101111;
parameter    ap_ST_st49_fsm_48 = 6'b110000;
parameter    ap_ST_st50_fsm_49 = 6'b110001;
parameter    ap_ST_st51_fsm_50 = 6'b110010;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_41200000 = 32'b1000001001000000000000000000000;
parameter    ap_const_lv64_4000000000000000 = 64'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_3EE4F8B588E368F1 = 64'b11111011100100111110001011010110001000111000110110100011110001;
parameter    ap_const_lv5_14 = 5'b10100;
parameter    ap_const_lv32_80000000 = 32'b10000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_4 = 5'b100;
parameter    ap_const_lv5_5 = 5'b101;
parameter    ap_true = 1'b1;


sqrtfcn_faddfsub_32ns_32ns_32_4_full_dsp #(
    .ID( 0 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sqrtfcn_faddfsub_32ns_32ns_32_4_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_70_p0 ),
    .din1( grp_fu_70_p1 ),
    .opcode( grp_fu_70_opcode ),
    .ce( grp_fu_70_ce ),
    .dout( grp_fu_70_p2 )
);

sqrtfcn_fmul_32ns_32ns_32_3_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sqrtfcn_fmul_32ns_32ns_32_3_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_74_p0 ),
    .din1( grp_fu_74_p1 ),
    .ce( grp_fu_74_ce ),
    .dout( grp_fu_74_p2 )
);

sqrtfcn_fdiv_32ns_32ns_32_8 #(
    .ID( 2 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sqrtfcn_fdiv_32ns_32ns_32_8_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_78_p0 ),
    .din1( grp_fu_78_p1 ),
    .ce( grp_fu_78_ce ),
    .dout( grp_fu_78_p2 )
);

sqrtfcn_fptrunc_64ns_32_3 #(
    .ID( 3 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
sqrtfcn_fptrunc_64ns_32_3_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_84_p0 ),
    .ce( grp_fu_84_ce ),
    .dout( grp_fu_84_p1 )
);

sqrtfcn_fpext_32ns_64_3 #(
    .ID( 4 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sqrtfcn_fpext_32ns_64_3_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_88_p0 ),
    .ce( grp_fu_88_ce ),
    .dout( grp_fu_88_p1 )
);

sqrtfcn_fcmp_32ns_32ns_1_3 #(
    .ID( 5 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
sqrtfcn_fcmp_32ns_32ns_1_3_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_92_p0 ),
    .din1( grp_fu_92_p1 ),
    .ce( grp_fu_92_ce ),
    .opcode( grp_fu_92_opcode ),
    .dout( grp_fu_92_p2 )
);

sqrtfcn_dmul_64ns_64ns_64_4_max_dsp #(
    .ID( 6 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sqrtfcn_dmul_64ns_64ns_64_4_max_dsp_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_98_p0 ),
    .din1( grp_fu_98_p1 ),
    .ce( grp_fu_98_ce ),
    .dout( grp_fu_98_p2 )
);

sqrtfcn_ddiv_64ns_64ns_64_14 #(
    .ID( 7 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sqrtfcn_ddiv_64ns_64ns_64_14_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_103_p0 ),
    .din1( grp_fu_103_p1 ),
    .ce( grp_fu_103_ce ),
    .dout( grp_fu_103_p2 )
);

sqrtfcn_dcmp_64ns_64ns_1_3 #(
    .ID( 8 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
sqrtfcn_dcmp_64ns_64ns_1_3_U8(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_107_p0 ),
    .din1( grp_fu_107_p1 ),
    .ce( grp_fu_107_ce ),
    .opcode( grp_fu_107_opcode ),
    .dout( grp_fu_107_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st50_fsm_49 == ap_CS_fsm) & ~(tmp_2_reg_242 == ap_const_lv1_0))) begin
        flag_fu_36[0] <= flag_1_fu_191_p1[0];
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == grp_fu_92_p2))) begin
        flag_fu_36[0] <= 1'b0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == grp_fu_92_p2))) begin
        i_reg_46 <= ap_const_lv5_1;
    end else if ((ap_ST_st50_fsm_49 == ap_CS_fsm)) begin
        i_reg_46 <= i_1_fu_200_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st37_fsm_36 == ap_CS_fsm)) begin
        x_1_fu_32 <= grp_fu_70_p2;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & (ap_const_lv1_0 == grp_fu_92_p2))) begin
        x_1_fu_32 <= grp_fu_78_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & ~(exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        x_2_reg_58 <= x_1_fu_32;
    end else if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(ap_const_lv1_0 == grp_fu_92_p2))) begin
        x_2_reg_58 <= ap_const_lv32_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st11_fsm_10 == ap_CS_fsm) | (ap_ST_st40_fsm_39 == ap_CS_fsm))) begin
        reg_113 <= grp_fu_74_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st13_fsm_12 == ap_CS_fsm) | (ap_ST_st17_fsm_16 == ap_CS_fsm) | (ap_ST_st48_fsm_47 == ap_CS_fsm))) begin
        reg_118 <= grp_fu_88_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st15_fsm_14 == ap_CS_fsm) | (ap_ST_st37_fsm_36 == ap_CS_fsm) | (ap_ST_st44_fsm_43 == ap_CS_fsm))) begin
        reg_125 <= grp_fu_70_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st9_fsm_8 == ap_CS_fsm) & (exitcond_fu_148_p2 == ap_const_lv1_0))) begin
        tmp_2_reg_242 <= tmp_2_fu_157_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st17_fsm_16 == ap_CS_fsm)) begin
        tmp_7_reg_246 <= grp_fu_98_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st31_fsm_30 == ap_CS_fsm)) begin
        tmp_8_reg_251 <= grp_fu_103_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        x_1_load_reg_230 <= x_1_fu_32;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st51_fsm_50 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st51_fsm_50 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// grp_fu_70_opcode assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st41_fsm_40 == ap_CS_fsm))) begin
        grp_fu_70_opcode = ap_const_lv2_1;
    end else if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        grp_fu_70_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_70_opcode = 'bx;
    end
end

/// grp_fu_70_p0 assign process. ///
always @ (ap_CS_fsm or val_r or x_1_load_reg_230)
begin
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        grp_fu_70_p0 = x_1_load_reg_230;
    end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st41_fsm_40 == ap_CS_fsm))) begin
        grp_fu_70_p0 = val_r;
    end else begin
        grp_fu_70_p0 = 'bx;
    end
end

/// grp_fu_70_p1 assign process. ///
always @ (ap_CS_fsm or reg_113 or grp_fu_84_p1)
begin
    if ((ap_ST_st34_fsm_33 == ap_CS_fsm)) begin
        grp_fu_70_p1 = grp_fu_84_p1;
    end else if (((ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st41_fsm_40 == ap_CS_fsm))) begin
        grp_fu_70_p1 = reg_113;
    end else begin
        grp_fu_70_p1 = 'bx;
    end
end

/// grp_fu_74_p0 assign process. ///
always @ (ap_CS_fsm or reg_125 or x_1_fu_32)
begin
    if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_74_p0 = reg_125;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        grp_fu_74_p0 = x_1_fu_32;
    end else begin
        grp_fu_74_p0 = 'bx;
    end
end

/// grp_fu_74_p1 assign process. ///
always @ (ap_CS_fsm or reg_125 or x_1_fu_32)
begin
    if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_74_p1 = reg_125;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        grp_fu_74_p1 = x_1_fu_32;
    end else begin
        grp_fu_74_p1 = 'bx;
    end
end

/// grp_fu_88_p0 assign process. ///
always @ (ap_CS_fsm or grp_fu_70_p2 or x_1_load_reg_230 or p_0_i_fu_182_p3)
begin
    if ((ap_ST_st46_fsm_45 == ap_CS_fsm)) begin
        grp_fu_88_p0 = p_0_i_fu_182_p3;
    end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        grp_fu_88_p0 = grp_fu_70_p2;
    end else if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
        grp_fu_88_p0 = x_1_load_reg_230;
    end else begin
        grp_fu_88_p0 = 'bx;
    end
end

/// grp_fu_92_opcode assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st44_fsm_43 == ap_CS_fsm)) begin
        grp_fu_92_opcode = ap_const_lv5_4;
    end else if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        grp_fu_92_opcode = ap_const_lv5_1;
    end else begin
        grp_fu_92_opcode = 'bx;
    end
end

/// grp_fu_92_p0 assign process. ///
always @ (ap_CS_fsm or val_r or grp_fu_70_p2)
begin
    if ((ap_ST_st44_fsm_43 == ap_CS_fsm)) begin
        grp_fu_92_p0 = grp_fu_70_p2;
    end else if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        grp_fu_92_p0 = val_r;
    end else begin
        grp_fu_92_p0 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_2_fu_157_p2 or exitcond_fu_148_p2 or grp_fu_92_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            if ((ap_const_lv1_0 == grp_fu_92_p2)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st51_fsm_50;
            end
        ap_ST_st9_fsm_8 : 
            if (((exitcond_fu_148_p2 == ap_const_lv1_0) & (tmp_2_fu_157_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st50_fsm_49;
            end else if (((exitcond_fu_148_p2 == ap_const_lv1_0) & ~(tmp_2_fu_157_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st51_fsm_50;
            end
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st14_fsm_13 : 
            ap_NS_fsm = ap_ST_st15_fsm_14;
        ap_ST_st15_fsm_14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st16_fsm_15 : 
            ap_NS_fsm = ap_ST_st17_fsm_16;
        ap_ST_st17_fsm_16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
        ap_ST_st18_fsm_17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
        ap_ST_st19_fsm_18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
        ap_ST_st20_fsm_19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
        ap_ST_st21_fsm_20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
        ap_ST_st22_fsm_21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
        ap_ST_st23_fsm_22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
        ap_ST_st24_fsm_23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
        ap_ST_st25_fsm_24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
        ap_ST_st26_fsm_25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
        ap_ST_st27_fsm_26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
        ap_ST_st28_fsm_27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
        ap_ST_st29_fsm_28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
        ap_ST_st30_fsm_29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
        ap_ST_st31_fsm_30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
        ap_ST_st32_fsm_31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
        ap_ST_st33_fsm_32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
        ap_ST_st34_fsm_33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
        ap_ST_st35_fsm_34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
        ap_ST_st36_fsm_35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
        ap_ST_st37_fsm_36 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
        ap_ST_st38_fsm_37 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
        ap_ST_st39_fsm_38 : 
            ap_NS_fsm = ap_ST_st40_fsm_39;
        ap_ST_st40_fsm_39 : 
            ap_NS_fsm = ap_ST_st41_fsm_40;
        ap_ST_st41_fsm_40 : 
            ap_NS_fsm = ap_ST_st42_fsm_41;
        ap_ST_st42_fsm_41 : 
            ap_NS_fsm = ap_ST_st43_fsm_42;
        ap_ST_st43_fsm_42 : 
            ap_NS_fsm = ap_ST_st44_fsm_43;
        ap_ST_st44_fsm_43 : 
            ap_NS_fsm = ap_ST_st45_fsm_44;
        ap_ST_st45_fsm_44 : 
            ap_NS_fsm = ap_ST_st46_fsm_45;
        ap_ST_st46_fsm_45 : 
            ap_NS_fsm = ap_ST_st47_fsm_46;
        ap_ST_st47_fsm_46 : 
            ap_NS_fsm = ap_ST_st48_fsm_47;
        ap_ST_st48_fsm_47 : 
            ap_NS_fsm = ap_ST_st49_fsm_48;
        ap_ST_st49_fsm_48 : 
            ap_NS_fsm = ap_ST_st50_fsm_49;
        ap_ST_st50_fsm_49 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st51_fsm_50 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign ap_return = x_2_reg_58;
assign exitcond_fu_148_p2 = (i_reg_46 == ap_const_lv5_14? 1'b1: 1'b0);
assign flag_1_fu_191_p1 = $unsigned(grp_fu_107_p2);
assign grp_fu_103_ce = ap_const_logic_1;
assign grp_fu_103_p0 = reg_118;
assign grp_fu_103_p1 = tmp_7_reg_246;
assign grp_fu_107_ce = ap_const_logic_1;
assign grp_fu_107_opcode = ap_const_lv5_5;
assign grp_fu_107_p0 = grp_fu_88_p1;
assign grp_fu_107_p1 = ap_const_lv64_3EE4F8B588E368F1;
assign grp_fu_70_ce = ap_const_logic_1;
assign grp_fu_74_ce = ap_const_logic_1;
assign grp_fu_78_ce = ap_const_logic_1;
assign grp_fu_78_p0 = val_r;
assign grp_fu_78_p1 = ap_const_lv32_41200000;
assign grp_fu_84_ce = ap_const_logic_1;
assign grp_fu_84_p0 = tmp_8_reg_251;
assign grp_fu_88_ce = ap_const_logic_1;
assign grp_fu_92_ce = ap_const_logic_1;
assign grp_fu_92_p1 = ap_const_lv32_0;
assign grp_fu_98_ce = ap_const_logic_1;
assign grp_fu_98_p0 = reg_118;
assign grp_fu_98_p1 = ap_const_lv64_4000000000000000;
assign i_1_fu_200_p2 = (i_reg_46 + ap_const_lv5_1);
assign p_0_i_fu_182_p3 = ((grp_fu_92_p2)? tmp_1_i_fu_178_p1: reg_125);
assign tmp_1_i_fu_178_p1 = tmp_1_neg_i_fu_172_p2;
assign tmp_1_neg_i_fu_172_p2 = (tmp_1_to_int_i_fu_168_p1 ^ ap_const_lv32_80000000);
assign tmp_1_to_int_i_fu_168_p1 = reg_125;
assign tmp_2_fu_157_p2 = (flag_fu_36 == ap_const_lv32_0? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    flag_fu_36[31:1] <= 31'b0000000000000000000000000000000;
end



endmodule //sqrtfcn

