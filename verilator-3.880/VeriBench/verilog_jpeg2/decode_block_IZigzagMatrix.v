// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decode_block_IZigzagMatrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imatrix_address0,
        imatrix_ce0,
        imatrix_q0,
        imatrix_address1,
        imatrix_ce1,
        imatrix_q1,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15,
        ap_return_16,
        ap_return_17,
        ap_return_18,
        ap_return_19,
        ap_return_20,
        ap_return_21,
        ap_return_22,
        ap_return_23,
        ap_return_24,
        ap_return_25,
        ap_return_26,
        ap_return_27,
        ap_return_28,
        ap_return_29,
        ap_return_30,
        ap_return_31,
        ap_return_32,
        ap_return_33,
        ap_return_34,
        ap_return_35,
        ap_return_36,
        ap_return_37,
        ap_return_38,
        ap_return_39,
        ap_return_40,
        ap_return_41,
        ap_return_42,
        ap_return_43,
        ap_return_44,
        ap_return_45,
        ap_return_46,
        ap_return_47,
        ap_return_48,
        ap_return_49,
        ap_return_50,
        ap_return_51,
        ap_return_52,
        ap_return_53,
        ap_return_54,
        ap_return_55,
        ap_return_56,
        ap_return_57,
        ap_return_58,
        ap_return_59,
        ap_return_60,
        ap_return_61,
        ap_return_62,
        ap_return_63
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 32'b1;
parameter    ap_ST_pp0_stg1_fsm_1 = 32'b10;
parameter    ap_ST_pp0_stg2_fsm_2 = 32'b100;
parameter    ap_ST_pp0_stg3_fsm_3 = 32'b1000;
parameter    ap_ST_pp0_stg4_fsm_4 = 32'b10000;
parameter    ap_ST_pp0_stg5_fsm_5 = 32'b100000;
parameter    ap_ST_pp0_stg6_fsm_6 = 32'b1000000;
parameter    ap_ST_pp0_stg7_fsm_7 = 32'b10000000;
parameter    ap_ST_pp0_stg8_fsm_8 = 32'b100000000;
parameter    ap_ST_pp0_stg9_fsm_9 = 32'b1000000000;
parameter    ap_ST_pp0_stg10_fsm_10 = 32'b10000000000;
parameter    ap_ST_pp0_stg11_fsm_11 = 32'b100000000000;
parameter    ap_ST_pp0_stg12_fsm_12 = 32'b1000000000000;
parameter    ap_ST_pp0_stg13_fsm_13 = 32'b10000000000000;
parameter    ap_ST_pp0_stg14_fsm_14 = 32'b100000000000000;
parameter    ap_ST_pp0_stg15_fsm_15 = 32'b1000000000000000;
parameter    ap_ST_pp0_stg16_fsm_16 = 32'b10000000000000000;
parameter    ap_ST_pp0_stg17_fsm_17 = 32'b100000000000000000;
parameter    ap_ST_pp0_stg18_fsm_18 = 32'b1000000000000000000;
parameter    ap_ST_pp0_stg19_fsm_19 = 32'b10000000000000000000;
parameter    ap_ST_pp0_stg20_fsm_20 = 32'b100000000000000000000;
parameter    ap_ST_pp0_stg21_fsm_21 = 32'b1000000000000000000000;
parameter    ap_ST_pp0_stg22_fsm_22 = 32'b10000000000000000000000;
parameter    ap_ST_pp0_stg23_fsm_23 = 32'b100000000000000000000000;
parameter    ap_ST_pp0_stg24_fsm_24 = 32'b1000000000000000000000000;
parameter    ap_ST_pp0_stg25_fsm_25 = 32'b10000000000000000000000000;
parameter    ap_ST_pp0_stg26_fsm_26 = 32'b100000000000000000000000000;
parameter    ap_ST_pp0_stg27_fsm_27 = 32'b1000000000000000000000000000;
parameter    ap_ST_pp0_stg28_fsm_28 = 32'b10000000000000000000000000000;
parameter    ap_ST_pp0_stg29_fsm_29 = 32'b100000000000000000000000000000;
parameter    ap_ST_pp0_stg30_fsm_30 = 32'b1000000000000000000000000000000;
parameter    ap_ST_pp0_stg31_fsm_31 = 32'b10000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_1B = 64'b11011;
parameter    ap_const_lv64_1C = 64'b11100;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_10 = 64'b10000;
parameter    ap_const_lv64_1A = 64'b11010;
parameter    ap_const_lv64_1D = 64'b11101;
parameter    ap_const_lv64_2A = 64'b101010;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_11 = 64'b10001;
parameter    ap_const_lv64_19 = 64'b11001;
parameter    ap_const_lv64_1E = 64'b11110;
parameter    ap_const_lv64_29 = 64'b101001;
parameter    ap_const_lv64_2B = 64'b101011;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_18 = 64'b11000;
parameter    ap_const_lv64_1F = 64'b11111;
parameter    ap_const_lv64_28 = 64'b101000;
parameter    ap_const_lv64_2C = 64'b101100;
parameter    ap_const_lv64_35 = 64'b110101;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_13 = 64'b10011;
parameter    ap_const_lv64_17 = 64'b10111;
parameter    ap_const_lv64_20 = 64'b100000;
parameter    ap_const_lv64_27 = 64'b100111;
parameter    ap_const_lv64_2D = 64'b101101;
parameter    ap_const_lv64_34 = 64'b110100;
parameter    ap_const_lv64_36 = 64'b110110;
parameter    ap_const_lv64_14 = 64'b10100;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv64_21 = 64'b100001;
parameter    ap_const_lv64_26 = 64'b100110;
parameter    ap_const_lv64_2E = 64'b101110;
parameter    ap_const_lv64_33 = 64'b110011;
parameter    ap_const_lv64_37 = 64'b110111;
parameter    ap_const_lv64_3C = 64'b111100;
parameter    ap_const_lv64_15 = 64'b10101;
parameter    ap_const_lv64_22 = 64'b100010;
parameter    ap_const_lv64_25 = 64'b100101;
parameter    ap_const_lv64_2F = 64'b101111;
parameter    ap_const_lv64_32 = 64'b110010;
parameter    ap_const_lv64_38 = 64'b111000;
parameter    ap_const_lv64_3B = 64'b111011;
parameter    ap_const_lv64_3D = 64'b111101;
parameter    ap_const_lv64_23 = 64'b100011;
parameter    ap_const_lv64_24 = 64'b100100;
parameter    ap_const_lv64_30 = 64'b110000;
parameter    ap_const_lv64_31 = 64'b110001;
parameter    ap_const_lv64_39 = 64'b111001;
parameter    ap_const_lv64_3A = 64'b111010;
parameter    ap_const_lv64_3E = 64'b111110;
parameter    ap_const_lv64_3F = 64'b111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] imatrix_address0;
output   imatrix_ce0;
input  [31:0] imatrix_q0;
output  [5:0] imatrix_address1;
output   imatrix_ce1;
input  [31:0] imatrix_q1;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output  [31:0] ap_return_8;
output  [31:0] ap_return_9;
output  [31:0] ap_return_10;
output  [31:0] ap_return_11;
output  [31:0] ap_return_12;
output  [31:0] ap_return_13;
output  [31:0] ap_return_14;
output  [31:0] ap_return_15;
output  [31:0] ap_return_16;
output  [31:0] ap_return_17;
output  [31:0] ap_return_18;
output  [31:0] ap_return_19;
output  [31:0] ap_return_20;
output  [31:0] ap_return_21;
output  [31:0] ap_return_22;
output  [31:0] ap_return_23;
output  [31:0] ap_return_24;
output  [31:0] ap_return_25;
output  [31:0] ap_return_26;
output  [31:0] ap_return_27;
output  [31:0] ap_return_28;
output  [31:0] ap_return_29;
output  [31:0] ap_return_30;
output  [31:0] ap_return_31;
output  [31:0] ap_return_32;
output  [31:0] ap_return_33;
output  [31:0] ap_return_34;
output  [31:0] ap_return_35;
output  [31:0] ap_return_36;
output  [31:0] ap_return_37;
output  [31:0] ap_return_38;
output  [31:0] ap_return_39;
output  [31:0] ap_return_40;
output  [31:0] ap_return_41;
output  [31:0] ap_return_42;
output  [31:0] ap_return_43;
output  [31:0] ap_return_44;
output  [31:0] ap_return_45;
output  [31:0] ap_return_46;
output  [31:0] ap_return_47;
output  [31:0] ap_return_48;
output  [31:0] ap_return_49;
output  [31:0] ap_return_50;
output  [31:0] ap_return_51;
output  [31:0] ap_return_52;
output  [31:0] ap_return_53;
output  [31:0] ap_return_54;
output  [31:0] ap_return_55;
output  [31:0] ap_return_56;
output  [31:0] ap_return_57;
output  [31:0] ap_return_58;
output  [31:0] ap_return_59;
output  [31:0] ap_return_60;
output  [31:0] ap_return_61;
output  [31:0] ap_return_62;
output  [31:0] ap_return_63;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] imatrix_address0;
reg imatrix_ce0;
reg[5:0] imatrix_address1;
reg imatrix_ce1;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm = 32'b1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_bdd_50;
reg    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_sig_cseq_ST_pp0_stg31_fsm_31;
reg    ap_sig_bdd_70;
reg   [31:0] imatrix_load_reg_1055;
reg    ap_sig_cseq_ST_pp0_stg1_fsm_1;
reg    ap_sig_bdd_161;
reg   [31:0] imatrix_load_1_reg_1060;
reg   [31:0] imatrix_load_2_reg_1075;
reg    ap_sig_cseq_ST_pp0_stg2_fsm_2;
reg    ap_sig_bdd_175;
reg   [31:0] imatrix_load_3_reg_1080;
reg   [31:0] imatrix_load_4_reg_1095;
reg    ap_sig_cseq_ST_pp0_stg3_fsm_3;
reg    ap_sig_bdd_189;
reg   [31:0] imatrix_load_5_reg_1100;
reg   [31:0] imatrix_load_6_reg_1115;
reg    ap_sig_cseq_ST_pp0_stg4_fsm_4;
reg    ap_sig_bdd_203;
reg   [31:0] imatrix_load_7_reg_1120;
reg   [31:0] imatrix_load_8_reg_1135;
reg    ap_sig_cseq_ST_pp0_stg5_fsm_5;
reg    ap_sig_bdd_217;
reg   [31:0] imatrix_load_9_reg_1140;
reg   [31:0] imatrix_load_10_reg_1155;
reg    ap_sig_cseq_ST_pp0_stg6_fsm_6;
reg    ap_sig_bdd_231;
reg   [31:0] imatrix_load_11_reg_1160;
reg   [31:0] imatrix_load_12_reg_1175;
reg    ap_sig_cseq_ST_pp0_stg7_fsm_7;
reg    ap_sig_bdd_245;
reg   [31:0] imatrix_load_13_reg_1180;
reg   [31:0] imatrix_load_14_reg_1195;
reg    ap_sig_cseq_ST_pp0_stg8_fsm_8;
reg    ap_sig_bdd_259;
reg   [31:0] imatrix_load_15_reg_1200;
reg   [31:0] imatrix_load_16_reg_1215;
reg    ap_sig_cseq_ST_pp0_stg9_fsm_9;
reg    ap_sig_bdd_273;
reg   [31:0] imatrix_load_17_reg_1220;
reg   [31:0] imatrix_load_18_reg_1235;
reg    ap_sig_cseq_ST_pp0_stg10_fsm_10;
reg    ap_sig_bdd_287;
reg   [31:0] imatrix_load_19_reg_1240;
reg   [31:0] imatrix_load_20_reg_1255;
reg    ap_sig_cseq_ST_pp0_stg11_fsm_11;
reg    ap_sig_bdd_301;
reg   [31:0] imatrix_load_21_reg_1260;
reg   [31:0] imatrix_load_22_reg_1275;
reg    ap_sig_cseq_ST_pp0_stg12_fsm_12;
reg    ap_sig_bdd_315;
reg   [31:0] imatrix_load_23_reg_1280;
reg   [31:0] imatrix_load_24_reg_1295;
reg    ap_sig_cseq_ST_pp0_stg13_fsm_13;
reg    ap_sig_bdd_329;
reg   [31:0] imatrix_load_25_reg_1300;
reg   [31:0] imatrix_load_26_reg_1315;
reg    ap_sig_cseq_ST_pp0_stg14_fsm_14;
reg    ap_sig_bdd_343;
reg   [31:0] imatrix_load_27_reg_1320;
reg   [31:0] imatrix_load_28_reg_1335;
reg    ap_sig_cseq_ST_pp0_stg15_fsm_15;
reg    ap_sig_bdd_357;
reg   [31:0] imatrix_load_29_reg_1340;
reg   [31:0] imatrix_load_30_reg_1355;
reg    ap_sig_cseq_ST_pp0_stg16_fsm_16;
reg    ap_sig_bdd_371;
reg   [31:0] imatrix_load_31_reg_1360;
reg   [31:0] imatrix_load_32_reg_1375;
reg    ap_sig_cseq_ST_pp0_stg17_fsm_17;
reg    ap_sig_bdd_385;
reg   [31:0] imatrix_load_33_reg_1380;
reg   [31:0] imatrix_load_34_reg_1395;
reg    ap_sig_cseq_ST_pp0_stg18_fsm_18;
reg    ap_sig_bdd_399;
reg   [31:0] imatrix_load_35_reg_1400;
reg   [31:0] imatrix_load_36_reg_1415;
reg    ap_sig_cseq_ST_pp0_stg19_fsm_19;
reg    ap_sig_bdd_413;
reg   [31:0] imatrix_load_37_reg_1420;
reg   [31:0] imatrix_load_38_reg_1435;
reg    ap_sig_cseq_ST_pp0_stg20_fsm_20;
reg    ap_sig_bdd_427;
reg   [31:0] imatrix_load_39_reg_1440;
reg   [31:0] imatrix_load_40_reg_1455;
reg    ap_sig_cseq_ST_pp0_stg21_fsm_21;
reg    ap_sig_bdd_441;
reg   [31:0] imatrix_load_41_reg_1460;
reg   [31:0] imatrix_load_42_reg_1475;
reg    ap_sig_cseq_ST_pp0_stg22_fsm_22;
reg    ap_sig_bdd_455;
reg   [31:0] imatrix_load_43_reg_1480;
reg   [31:0] imatrix_load_44_reg_1495;
reg    ap_sig_cseq_ST_pp0_stg23_fsm_23;
reg    ap_sig_bdd_469;
reg   [31:0] imatrix_load_45_reg_1500;
reg   [31:0] imatrix_load_46_reg_1515;
reg    ap_sig_cseq_ST_pp0_stg24_fsm_24;
reg    ap_sig_bdd_483;
reg   [31:0] imatrix_load_47_reg_1520;
reg   [31:0] imatrix_load_48_reg_1535;
reg    ap_sig_cseq_ST_pp0_stg25_fsm_25;
reg    ap_sig_bdd_497;
reg   [31:0] imatrix_load_49_reg_1540;
reg   [31:0] imatrix_load_50_reg_1555;
reg    ap_sig_cseq_ST_pp0_stg26_fsm_26;
reg    ap_sig_bdd_511;
reg   [31:0] imatrix_load_51_reg_1560;
reg   [31:0] imatrix_load_52_reg_1575;
reg    ap_sig_cseq_ST_pp0_stg27_fsm_27;
reg    ap_sig_bdd_525;
reg   [31:0] imatrix_load_53_reg_1580;
reg   [31:0] imatrix_load_54_reg_1595;
reg    ap_sig_cseq_ST_pp0_stg28_fsm_28;
reg    ap_sig_bdd_539;
reg   [31:0] imatrix_load_55_reg_1600;
reg   [31:0] imatrix_load_56_reg_1615;
reg    ap_sig_cseq_ST_pp0_stg29_fsm_29;
reg    ap_sig_bdd_553;
reg   [31:0] imatrix_load_57_reg_1620;
reg   [31:0] imatrix_load_58_reg_1635;
reg    ap_sig_cseq_ST_pp0_stg30_fsm_30;
reg    ap_sig_bdd_567;
reg   [31:0] imatrix_load_59_reg_1640;
reg   [31:0] imatrix_load_60_reg_1655;
reg   [31:0] imatrix_load_61_reg_1660;
reg    ap_reg_ppiten_pp0_it0_preg = 1'b0;
reg   [31:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;




always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it0_preg
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0_preg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)))) begin
            ap_reg_ppiten_pp0_it0_preg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31)) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_6))) begin
        imatrix_load_10_reg_1155 <= imatrix_q0;
        imatrix_load_11_reg_1160 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_7))) begin
        imatrix_load_12_reg_1175 <= imatrix_q0;
        imatrix_load_13_reg_1180 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg8_fsm_8))) begin
        imatrix_load_14_reg_1195 <= imatrix_q0;
        imatrix_load_15_reg_1200 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg9_fsm_9))) begin
        imatrix_load_16_reg_1215 <= imatrix_q0;
        imatrix_load_17_reg_1220 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg10_fsm_10))) begin
        imatrix_load_18_reg_1235 <= imatrix_q0;
        imatrix_load_19_reg_1240 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1))) begin
        imatrix_load_1_reg_1060 <= imatrix_q1;
        imatrix_load_reg_1055 <= imatrix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg11_fsm_11))) begin
        imatrix_load_20_reg_1255 <= imatrix_q0;
        imatrix_load_21_reg_1260 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg12_fsm_12))) begin
        imatrix_load_22_reg_1275 <= imatrix_q0;
        imatrix_load_23_reg_1280 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg13_fsm_13))) begin
        imatrix_load_24_reg_1295 <= imatrix_q0;
        imatrix_load_25_reg_1300 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg14_fsm_14))) begin
        imatrix_load_26_reg_1315 <= imatrix_q0;
        imatrix_load_27_reg_1320 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg15_fsm_15))) begin
        imatrix_load_28_reg_1335 <= imatrix_q0;
        imatrix_load_29_reg_1340 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2))) begin
        imatrix_load_2_reg_1075 <= imatrix_q0;
        imatrix_load_3_reg_1080 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg16_fsm_16))) begin
        imatrix_load_30_reg_1355 <= imatrix_q0;
        imatrix_load_31_reg_1360 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg17_fsm_17))) begin
        imatrix_load_32_reg_1375 <= imatrix_q0;
        imatrix_load_33_reg_1380 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg18_fsm_18))) begin
        imatrix_load_34_reg_1395 <= imatrix_q0;
        imatrix_load_35_reg_1400 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg19_fsm_19))) begin
        imatrix_load_36_reg_1415 <= imatrix_q0;
        imatrix_load_37_reg_1420 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg20_fsm_20))) begin
        imatrix_load_38_reg_1435 <= imatrix_q0;
        imatrix_load_39_reg_1440 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg21_fsm_21))) begin
        imatrix_load_40_reg_1455 <= imatrix_q0;
        imatrix_load_41_reg_1460 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg22_fsm_22))) begin
        imatrix_load_42_reg_1475 <= imatrix_q0;
        imatrix_load_43_reg_1480 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg23_fsm_23))) begin
        imatrix_load_44_reg_1495 <= imatrix_q0;
        imatrix_load_45_reg_1500 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg24_fsm_24))) begin
        imatrix_load_46_reg_1515 <= imatrix_q0;
        imatrix_load_47_reg_1520 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg25_fsm_25))) begin
        imatrix_load_48_reg_1535 <= imatrix_q0;
        imatrix_load_49_reg_1540 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3))) begin
        imatrix_load_4_reg_1095 <= imatrix_q0;
        imatrix_load_5_reg_1100 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg26_fsm_26))) begin
        imatrix_load_50_reg_1555 <= imatrix_q0;
        imatrix_load_51_reg_1560 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg27_fsm_27))) begin
        imatrix_load_52_reg_1575 <= imatrix_q0;
        imatrix_load_53_reg_1580 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg28_fsm_28))) begin
        imatrix_load_54_reg_1595 <= imatrix_q0;
        imatrix_load_55_reg_1600 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg29_fsm_29))) begin
        imatrix_load_56_reg_1615 <= imatrix_q0;
        imatrix_load_57_reg_1620 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg30_fsm_30))) begin
        imatrix_load_58_reg_1635 <= imatrix_q0;
        imatrix_load_59_reg_1640 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31))) begin
        imatrix_load_60_reg_1655 <= imatrix_q0;
        imatrix_load_61_reg_1660 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4))) begin
        imatrix_load_6_reg_1115 <= imatrix_q0;
        imatrix_load_7_reg_1120 <= imatrix_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_5))) begin
        imatrix_load_8_reg_1135 <= imatrix_q0;
        imatrix_load_9_reg_1140 <= imatrix_q1;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg31_fsm_31) begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0_preg) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
        ap_reg_ppiten_pp0_it0 = ap_start;
    end else begin
        ap_reg_ppiten_pp0_it0 = ap_reg_ppiten_pp0_it0_preg;
    end
end

always @ (ap_sig_bdd_50) begin
    if (ap_sig_bdd_50) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_287) begin
    if (ap_sig_bdd_287) begin
        ap_sig_cseq_ST_pp0_stg10_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg10_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_301) begin
    if (ap_sig_bdd_301) begin
        ap_sig_cseq_ST_pp0_stg11_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg11_fsm_11 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_315) begin
    if (ap_sig_bdd_315) begin
        ap_sig_cseq_ST_pp0_stg12_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg12_fsm_12 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_329) begin
    if (ap_sig_bdd_329) begin
        ap_sig_cseq_ST_pp0_stg13_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg13_fsm_13 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_343) begin
    if (ap_sig_bdd_343) begin
        ap_sig_cseq_ST_pp0_stg14_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg14_fsm_14 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_357) begin
    if (ap_sig_bdd_357) begin
        ap_sig_cseq_ST_pp0_stg15_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg15_fsm_15 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_371) begin
    if (ap_sig_bdd_371) begin
        ap_sig_cseq_ST_pp0_stg16_fsm_16 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg16_fsm_16 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_385) begin
    if (ap_sig_bdd_385) begin
        ap_sig_cseq_ST_pp0_stg17_fsm_17 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg17_fsm_17 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_399) begin
    if (ap_sig_bdd_399) begin
        ap_sig_cseq_ST_pp0_stg18_fsm_18 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg18_fsm_18 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_413) begin
    if (ap_sig_bdd_413) begin
        ap_sig_cseq_ST_pp0_stg19_fsm_19 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg19_fsm_19 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_161) begin
    if (ap_sig_bdd_161) begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg1_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_427) begin
    if (ap_sig_bdd_427) begin
        ap_sig_cseq_ST_pp0_stg20_fsm_20 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg20_fsm_20 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_441) begin
    if (ap_sig_bdd_441) begin
        ap_sig_cseq_ST_pp0_stg21_fsm_21 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg21_fsm_21 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_455) begin
    if (ap_sig_bdd_455) begin
        ap_sig_cseq_ST_pp0_stg22_fsm_22 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg22_fsm_22 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_469) begin
    if (ap_sig_bdd_469) begin
        ap_sig_cseq_ST_pp0_stg23_fsm_23 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg23_fsm_23 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_483) begin
    if (ap_sig_bdd_483) begin
        ap_sig_cseq_ST_pp0_stg24_fsm_24 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg24_fsm_24 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_497) begin
    if (ap_sig_bdd_497) begin
        ap_sig_cseq_ST_pp0_stg25_fsm_25 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg25_fsm_25 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_511) begin
    if (ap_sig_bdd_511) begin
        ap_sig_cseq_ST_pp0_stg26_fsm_26 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg26_fsm_26 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_525) begin
    if (ap_sig_bdd_525) begin
        ap_sig_cseq_ST_pp0_stg27_fsm_27 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg27_fsm_27 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_539) begin
    if (ap_sig_bdd_539) begin
        ap_sig_cseq_ST_pp0_stg28_fsm_28 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg28_fsm_28 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_553) begin
    if (ap_sig_bdd_553) begin
        ap_sig_cseq_ST_pp0_stg29_fsm_29 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg29_fsm_29 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_175) begin
    if (ap_sig_bdd_175) begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg2_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_567) begin
    if (ap_sig_bdd_567) begin
        ap_sig_cseq_ST_pp0_stg30_fsm_30 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg30_fsm_30 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_70) begin
    if (ap_sig_bdd_70) begin
        ap_sig_cseq_ST_pp0_stg31_fsm_31 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg31_fsm_31 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_189) begin
    if (ap_sig_bdd_189) begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg3_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_203) begin
    if (ap_sig_bdd_203) begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg4_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_217) begin
    if (ap_sig_bdd_217) begin
        ap_sig_cseq_ST_pp0_stg5_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg5_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_231) begin
    if (ap_sig_bdd_231) begin
        ap_sig_cseq_ST_pp0_stg6_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg6_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_245) begin
    if (ap_sig_bdd_245) begin
        ap_sig_cseq_ST_pp0_stg7_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg7_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_259) begin
    if (ap_sig_bdd_259) begin
        ap_sig_cseq_ST_pp0_stg8_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg8_fsm_8 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_273) begin
    if (ap_sig_bdd_273) begin
        ap_sig_cseq_ST_pp0_stg9_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg9_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_reg_ppiten_pp0_it0) begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg31_fsm_31 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg5_fsm_5 or ap_sig_cseq_ST_pp0_stg6_fsm_6 or ap_sig_cseq_ST_pp0_stg7_fsm_7 or ap_sig_cseq_ST_pp0_stg8_fsm_8 or ap_sig_cseq_ST_pp0_stg9_fsm_9 or ap_sig_cseq_ST_pp0_stg10_fsm_10 or ap_sig_cseq_ST_pp0_stg11_fsm_11 or ap_sig_cseq_ST_pp0_stg12_fsm_12 or ap_sig_cseq_ST_pp0_stg13_fsm_13 or ap_sig_cseq_ST_pp0_stg14_fsm_14 or ap_sig_cseq_ST_pp0_stg15_fsm_15 or ap_sig_cseq_ST_pp0_stg16_fsm_16 or ap_sig_cseq_ST_pp0_stg17_fsm_17 or ap_sig_cseq_ST_pp0_stg18_fsm_18 or ap_sig_cseq_ST_pp0_stg19_fsm_19 or ap_sig_cseq_ST_pp0_stg20_fsm_20 or ap_sig_cseq_ST_pp0_stg21_fsm_21 or ap_sig_cseq_ST_pp0_stg22_fsm_22 or ap_sig_cseq_ST_pp0_stg23_fsm_23 or ap_sig_cseq_ST_pp0_stg24_fsm_24 or ap_sig_cseq_ST_pp0_stg25_fsm_25 or ap_sig_cseq_ST_pp0_stg26_fsm_26 or ap_sig_cseq_ST_pp0_stg27_fsm_27 or ap_sig_cseq_ST_pp0_stg28_fsm_28 or ap_sig_cseq_ST_pp0_stg29_fsm_29 or ap_sig_cseq_ST_pp0_stg30_fsm_30) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31)) begin
            imatrix_address0 = ap_const_lv64_3E;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg30_fsm_30)) begin
            imatrix_address0 = ap_const_lv64_39;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg29_fsm_29)) begin
            imatrix_address0 = ap_const_lv64_30;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg28_fsm_28)) begin
            imatrix_address0 = ap_const_lv64_23;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg27_fsm_27)) begin
            imatrix_address0 = ap_const_lv64_3B;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg26_fsm_26)) begin
            imatrix_address0 = ap_const_lv64_32;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg25_fsm_25)) begin
            imatrix_address0 = ap_const_lv64_25;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg24_fsm_24)) begin
            imatrix_address0 = ap_const_lv64_15;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg23_fsm_23)) begin
            imatrix_address0 = ap_const_lv64_37;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg22_fsm_22)) begin
            imatrix_address0 = ap_const_lv64_2E;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg21_fsm_21)) begin
            imatrix_address0 = ap_const_lv64_21;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg20_fsm_20)) begin
            imatrix_address0 = ap_const_lv64_14;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg19_fsm_19)) begin
            imatrix_address0 = ap_const_lv64_34;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg18_fsm_18)) begin
            imatrix_address0 = ap_const_lv64_27;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg17_fsm_17)) begin
            imatrix_address0 = ap_const_lv64_17;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg16_fsm_16)) begin
            imatrix_address0 = ap_const_lv64_A;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg15_fsm_15)) begin
            imatrix_address0 = ap_const_lv64_2C;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg14_fsm_14)) begin
            imatrix_address0 = ap_const_lv64_1F;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg13_fsm_13)) begin
            imatrix_address0 = ap_const_lv64_12;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg12_fsm_12)) begin
            imatrix_address0 = ap_const_lv64_9;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg11_fsm_11)) begin
            imatrix_address0 = ap_const_lv64_29;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg10_fsm_10)) begin
            imatrix_address0 = ap_const_lv64_19;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg9_fsm_9)) begin
            imatrix_address0 = ap_const_lv64_C;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg8_fsm_8)) begin
            imatrix_address0 = ap_const_lv64_3;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_7)) begin
            imatrix_address0 = ap_const_lv64_1D;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) begin
            imatrix_address0 = ap_const_lv64_10;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) begin
            imatrix_address0 = ap_const_lv64_7;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
            imatrix_address0 = ap_const_lv64_2;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) begin
            imatrix_address0 = ap_const_lv64_1B;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) begin
            imatrix_address0 = ap_const_lv64_E;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            imatrix_address0 = ap_const_lv64_5;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            imatrix_address0 = ap_const_lv64_0;
        end else begin
            imatrix_address0 = 'bx;
        end
    end else begin
        imatrix_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg31_fsm_31 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg5_fsm_5 or ap_sig_cseq_ST_pp0_stg6_fsm_6 or ap_sig_cseq_ST_pp0_stg7_fsm_7 or ap_sig_cseq_ST_pp0_stg8_fsm_8 or ap_sig_cseq_ST_pp0_stg9_fsm_9 or ap_sig_cseq_ST_pp0_stg10_fsm_10 or ap_sig_cseq_ST_pp0_stg11_fsm_11 or ap_sig_cseq_ST_pp0_stg12_fsm_12 or ap_sig_cseq_ST_pp0_stg13_fsm_13 or ap_sig_cseq_ST_pp0_stg14_fsm_14 or ap_sig_cseq_ST_pp0_stg15_fsm_15 or ap_sig_cseq_ST_pp0_stg16_fsm_16 or ap_sig_cseq_ST_pp0_stg17_fsm_17 or ap_sig_cseq_ST_pp0_stg18_fsm_18 or ap_sig_cseq_ST_pp0_stg19_fsm_19 or ap_sig_cseq_ST_pp0_stg20_fsm_20 or ap_sig_cseq_ST_pp0_stg21_fsm_21 or ap_sig_cseq_ST_pp0_stg22_fsm_22 or ap_sig_cseq_ST_pp0_stg23_fsm_23 or ap_sig_cseq_ST_pp0_stg24_fsm_24 or ap_sig_cseq_ST_pp0_stg25_fsm_25 or ap_sig_cseq_ST_pp0_stg26_fsm_26 or ap_sig_cseq_ST_pp0_stg27_fsm_27 or ap_sig_cseq_ST_pp0_stg28_fsm_28 or ap_sig_cseq_ST_pp0_stg29_fsm_29 or ap_sig_cseq_ST_pp0_stg30_fsm_30) begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0)) begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31)) begin
            imatrix_address1 = ap_const_lv64_3F;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg30_fsm_30)) begin
            imatrix_address1 = ap_const_lv64_3A;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg29_fsm_29)) begin
            imatrix_address1 = ap_const_lv64_31;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg28_fsm_28)) begin
            imatrix_address1 = ap_const_lv64_24;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg27_fsm_27)) begin
            imatrix_address1 = ap_const_lv64_3D;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg26_fsm_26)) begin
            imatrix_address1 = ap_const_lv64_38;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg25_fsm_25)) begin
            imatrix_address1 = ap_const_lv64_2F;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg24_fsm_24)) begin
            imatrix_address1 = ap_const_lv64_22;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg23_fsm_23)) begin
            imatrix_address1 = ap_const_lv64_3C;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg22_fsm_22)) begin
            imatrix_address1 = ap_const_lv64_33;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg21_fsm_21)) begin
            imatrix_address1 = ap_const_lv64_26;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg20_fsm_20)) begin
            imatrix_address1 = ap_const_lv64_16;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg19_fsm_19)) begin
            imatrix_address1 = ap_const_lv64_36;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg18_fsm_18)) begin
            imatrix_address1 = ap_const_lv64_2D;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg17_fsm_17)) begin
            imatrix_address1 = ap_const_lv64_20;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg16_fsm_16)) begin
            imatrix_address1 = ap_const_lv64_13;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg15_fsm_15)) begin
            imatrix_address1 = ap_const_lv64_35;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg14_fsm_14)) begin
            imatrix_address1 = ap_const_lv64_28;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg13_fsm_13)) begin
            imatrix_address1 = ap_const_lv64_18;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg12_fsm_12)) begin
            imatrix_address1 = ap_const_lv64_B;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg11_fsm_11)) begin
            imatrix_address1 = ap_const_lv64_2B;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg10_fsm_10)) begin
            imatrix_address1 = ap_const_lv64_1E;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg9_fsm_9)) begin
            imatrix_address1 = ap_const_lv64_11;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg8_fsm_8)) begin
            imatrix_address1 = ap_const_lv64_8;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_7)) begin
            imatrix_address1 = ap_const_lv64_2A;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) begin
            imatrix_address1 = ap_const_lv64_1A;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) begin
            imatrix_address1 = ap_const_lv64_D;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) begin
            imatrix_address1 = ap_const_lv64_4;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) begin
            imatrix_address1 = ap_const_lv64_1C;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) begin
            imatrix_address1 = ap_const_lv64_F;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) begin
            imatrix_address1 = ap_const_lv64_6;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0)) begin
            imatrix_address1 = ap_const_lv64_1;
        end else begin
            imatrix_address1 = 'bx;
        end
    end else begin
        imatrix_address1 = 'bx;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg31_fsm_31 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg5_fsm_5 or ap_sig_cseq_ST_pp0_stg6_fsm_6 or ap_sig_cseq_ST_pp0_stg7_fsm_7 or ap_sig_cseq_ST_pp0_stg8_fsm_8 or ap_sig_cseq_ST_pp0_stg9_fsm_9 or ap_sig_cseq_ST_pp0_stg10_fsm_10 or ap_sig_cseq_ST_pp0_stg11_fsm_11 or ap_sig_cseq_ST_pp0_stg12_fsm_12 or ap_sig_cseq_ST_pp0_stg13_fsm_13 or ap_sig_cseq_ST_pp0_stg14_fsm_14 or ap_sig_cseq_ST_pp0_stg15_fsm_15 or ap_sig_cseq_ST_pp0_stg16_fsm_16 or ap_sig_cseq_ST_pp0_stg17_fsm_17 or ap_sig_cseq_ST_pp0_stg18_fsm_18 or ap_sig_cseq_ST_pp0_stg19_fsm_19 or ap_sig_cseq_ST_pp0_stg20_fsm_20 or ap_sig_cseq_ST_pp0_stg21_fsm_21 or ap_sig_cseq_ST_pp0_stg22_fsm_22 or ap_sig_cseq_ST_pp0_stg23_fsm_23 or ap_sig_cseq_ST_pp0_stg24_fsm_24 or ap_sig_cseq_ST_pp0_stg25_fsm_25 or ap_sig_cseq_ST_pp0_stg26_fsm_26 or ap_sig_cseq_ST_pp0_stg27_fsm_27 or ap_sig_cseq_ST_pp0_stg28_fsm_28 or ap_sig_cseq_ST_pp0_stg29_fsm_29 or ap_sig_cseq_ST_pp0_stg30_fsm_30) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg8_fsm_8)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg9_fsm_9)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg10_fsm_10)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg11_fsm_11)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg12_fsm_12)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg13_fsm_13)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg14_fsm_14)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg15_fsm_15)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg16_fsm_16)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg17_fsm_17)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg18_fsm_18)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg19_fsm_19)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg20_fsm_20)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg21_fsm_21)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg22_fsm_22)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg23_fsm_23)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg24_fsm_24)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg25_fsm_25)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg26_fsm_26)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg27_fsm_27)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg28_fsm_28)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg29_fsm_29)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg30_fsm_30)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        imatrix_ce0 = ap_const_logic_1;
    end else begin
        imatrix_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_sig_cseq_ST_pp0_stg31_fsm_31 or ap_sig_cseq_ST_pp0_stg1_fsm_1 or ap_sig_cseq_ST_pp0_stg2_fsm_2 or ap_sig_cseq_ST_pp0_stg3_fsm_3 or ap_sig_cseq_ST_pp0_stg4_fsm_4 or ap_sig_cseq_ST_pp0_stg5_fsm_5 or ap_sig_cseq_ST_pp0_stg6_fsm_6 or ap_sig_cseq_ST_pp0_stg7_fsm_7 or ap_sig_cseq_ST_pp0_stg8_fsm_8 or ap_sig_cseq_ST_pp0_stg9_fsm_9 or ap_sig_cseq_ST_pp0_stg10_fsm_10 or ap_sig_cseq_ST_pp0_stg11_fsm_11 or ap_sig_cseq_ST_pp0_stg12_fsm_12 or ap_sig_cseq_ST_pp0_stg13_fsm_13 or ap_sig_cseq_ST_pp0_stg14_fsm_14 or ap_sig_cseq_ST_pp0_stg15_fsm_15 or ap_sig_cseq_ST_pp0_stg16_fsm_16 or ap_sig_cseq_ST_pp0_stg17_fsm_17 or ap_sig_cseq_ST_pp0_stg18_fsm_18 or ap_sig_cseq_ST_pp0_stg19_fsm_19 or ap_sig_cseq_ST_pp0_stg20_fsm_20 or ap_sig_cseq_ST_pp0_stg21_fsm_21 or ap_sig_cseq_ST_pp0_stg22_fsm_22 or ap_sig_cseq_ST_pp0_stg23_fsm_23 or ap_sig_cseq_ST_pp0_stg24_fsm_24 or ap_sig_cseq_ST_pp0_stg25_fsm_25 or ap_sig_cseq_ST_pp0_stg26_fsm_26 or ap_sig_cseq_ST_pp0_stg27_fsm_27 or ap_sig_cseq_ST_pp0_stg28_fsm_28 or ap_sig_cseq_ST_pp0_stg29_fsm_29 or ap_sig_cseq_ST_pp0_stg30_fsm_30) begin
    if ((((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg31_fsm_31)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg1_fsm_1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg2_fsm_2)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg3_fsm_3)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg4_fsm_4)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg5_fsm_5)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg6_fsm_6)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg7_fsm_7)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg8_fsm_8)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg9_fsm_9)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg10_fsm_10)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg11_fsm_11)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg12_fsm_12)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg13_fsm_13)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg14_fsm_14)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg15_fsm_15)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg16_fsm_16)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg17_fsm_17)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg18_fsm_18)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg19_fsm_19)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg20_fsm_20)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg21_fsm_21)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg22_fsm_22)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg23_fsm_23)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg24_fsm_24)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg25_fsm_25)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg26_fsm_26)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg27_fsm_27)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg28_fsm_28)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg29_fsm_29)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg30_fsm_30)) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0))))) begin
        imatrix_ce1 = ap_const_logic_1;
    end else begin
        imatrix_ce1 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_pprstidle_pp0) begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & ~(ap_const_logic_1 == ap_sig_pprstidle_pp0) & ~((ap_const_logic_0 == ap_reg_ppiten_pp0_it1) & (ap_const_logic_0 == ap_start)))) begin
                ap_NS_fsm = ap_ST_pp0_stg1_fsm_1;
            end else if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (ap_start == ap_const_logic_0)) & (ap_const_logic_1 == ap_sig_pprstidle_pp0))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
            end
        end
        ap_ST_pp0_stg1_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg2_fsm_2;
        end
        ap_ST_pp0_stg2_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg3_fsm_3;
        end
        ap_ST_pp0_stg3_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg4_fsm_4;
        end
        ap_ST_pp0_stg4_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg5_fsm_5;
        end
        ap_ST_pp0_stg5_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg6_fsm_6;
        end
        ap_ST_pp0_stg6_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg7_fsm_7;
        end
        ap_ST_pp0_stg7_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg8_fsm_8;
        end
        ap_ST_pp0_stg8_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg9_fsm_9;
        end
        ap_ST_pp0_stg9_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg10_fsm_10;
        end
        ap_ST_pp0_stg10_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg11_fsm_11;
        end
        ap_ST_pp0_stg11_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg12_fsm_12;
        end
        ap_ST_pp0_stg12_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg13_fsm_13;
        end
        ap_ST_pp0_stg13_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg14_fsm_14;
        end
        ap_ST_pp0_stg14_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg15_fsm_15;
        end
        ap_ST_pp0_stg15_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg16_fsm_16;
        end
        ap_ST_pp0_stg16_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg17_fsm_17;
        end
        ap_ST_pp0_stg17_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg18_fsm_18;
        end
        ap_ST_pp0_stg18_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg19_fsm_19;
        end
        ap_ST_pp0_stg19_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg20_fsm_20;
        end
        ap_ST_pp0_stg20_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg21_fsm_21;
        end
        ap_ST_pp0_stg21_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg22_fsm_22;
        end
        ap_ST_pp0_stg22_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg23_fsm_23;
        end
        ap_ST_pp0_stg23_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg24_fsm_24;
        end
        ap_ST_pp0_stg24_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg25_fsm_25;
        end
        ap_ST_pp0_stg25_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg26_fsm_26;
        end
        ap_ST_pp0_stg26_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg27_fsm_27;
        end
        ap_ST_pp0_stg27_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg28_fsm_28;
        end
        ap_ST_pp0_stg28_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg29_fsm_29;
        end
        ap_ST_pp0_stg29_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg30_fsm_30;
        end
        ap_ST_pp0_stg30_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg31_fsm_31;
        end
        ap_ST_pp0_stg31_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return_0 = imatrix_load_reg_1055;

assign ap_return_1 = imatrix_load_1_reg_1060;

assign ap_return_10 = imatrix_load_10_reg_1155;

assign ap_return_11 = imatrix_load_11_reg_1160;

assign ap_return_12 = imatrix_load_12_reg_1175;

assign ap_return_13 = imatrix_load_13_reg_1180;

assign ap_return_14 = imatrix_load_14_reg_1195;

assign ap_return_15 = imatrix_load_15_reg_1200;

assign ap_return_16 = imatrix_load_16_reg_1215;

assign ap_return_17 = imatrix_load_17_reg_1220;

assign ap_return_18 = imatrix_load_18_reg_1235;

assign ap_return_19 = imatrix_load_19_reg_1240;

assign ap_return_2 = imatrix_load_2_reg_1075;

assign ap_return_20 = imatrix_load_20_reg_1255;

assign ap_return_21 = imatrix_load_21_reg_1260;

assign ap_return_22 = imatrix_load_22_reg_1275;

assign ap_return_23 = imatrix_load_23_reg_1280;

assign ap_return_24 = imatrix_load_24_reg_1295;

assign ap_return_25 = imatrix_load_25_reg_1300;

assign ap_return_26 = imatrix_load_26_reg_1315;

assign ap_return_27 = imatrix_load_27_reg_1320;

assign ap_return_28 = imatrix_load_28_reg_1335;

assign ap_return_29 = imatrix_load_29_reg_1340;

assign ap_return_3 = imatrix_load_3_reg_1080;

assign ap_return_30 = imatrix_load_30_reg_1355;

assign ap_return_31 = imatrix_load_31_reg_1360;

assign ap_return_32 = imatrix_load_32_reg_1375;

assign ap_return_33 = imatrix_load_33_reg_1380;

assign ap_return_34 = imatrix_load_34_reg_1395;

assign ap_return_35 = imatrix_load_35_reg_1400;

assign ap_return_36 = imatrix_load_36_reg_1415;

assign ap_return_37 = imatrix_load_37_reg_1420;

assign ap_return_38 = imatrix_load_38_reg_1435;

assign ap_return_39 = imatrix_load_39_reg_1440;

assign ap_return_4 = imatrix_load_4_reg_1095;

assign ap_return_40 = imatrix_load_40_reg_1455;

assign ap_return_41 = imatrix_load_41_reg_1460;

assign ap_return_42 = imatrix_load_42_reg_1475;

assign ap_return_43 = imatrix_load_43_reg_1480;

assign ap_return_44 = imatrix_load_44_reg_1495;

assign ap_return_45 = imatrix_load_45_reg_1500;

assign ap_return_46 = imatrix_load_46_reg_1515;

assign ap_return_47 = imatrix_load_47_reg_1520;

assign ap_return_48 = imatrix_load_48_reg_1535;

assign ap_return_49 = imatrix_load_49_reg_1540;

assign ap_return_5 = imatrix_load_5_reg_1100;

assign ap_return_50 = imatrix_load_50_reg_1555;

assign ap_return_51 = imatrix_load_51_reg_1560;

assign ap_return_52 = imatrix_load_52_reg_1575;

assign ap_return_53 = imatrix_load_53_reg_1580;

assign ap_return_54 = imatrix_load_54_reg_1595;

assign ap_return_55 = imatrix_load_55_reg_1600;

assign ap_return_56 = imatrix_load_56_reg_1615;

assign ap_return_57 = imatrix_load_57_reg_1620;

assign ap_return_58 = imatrix_load_58_reg_1635;

assign ap_return_59 = imatrix_load_59_reg_1640;

assign ap_return_6 = imatrix_load_6_reg_1115;

assign ap_return_60 = imatrix_load_60_reg_1655;

assign ap_return_61 = imatrix_load_61_reg_1660;

assign ap_return_62 = imatrix_q0;

assign ap_return_63 = imatrix_q1;

assign ap_return_7 = imatrix_load_7_reg_1120;

assign ap_return_8 = imatrix_load_8_reg_1135;

assign ap_return_9 = imatrix_load_9_reg_1140;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_161 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_175 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_189 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_203 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_217 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_231 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_245 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_259 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_273 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_287 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_301 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_315 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_329 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_343 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_357 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_371 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_10]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_385 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_11]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_399 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_12]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_413 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_13]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_427 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_14]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_441 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_15]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_455 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_16]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_469 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_17]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_483 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_18]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_497 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_19]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_50 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_511 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_525 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_539 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1C]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_553 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1D]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_567 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1E]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_70 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1F]);
end


endmodule //decode_block_IZigzagMatrix

