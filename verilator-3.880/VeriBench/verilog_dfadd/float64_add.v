// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="float64_add,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.622750,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=3122,HLS_SYN_LUT=9692}" *)

module float64_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_address0,
        buff_ce0,
        buff_q0,
        buff_address1,
        buff_ce1,
        buff_q1,
        m,
        result,
        result_ap_vld,
        n,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] buff_address0;
output   buff_ce0;
input  [63:0] buff_q0;
output  [0:0] buff_address1;
output   buff_ce1;
input  [63:0] buff_q1;
input  [31:0] m;
output  [63:0] result;
output   result_ap_vld;
input  [31:0] n;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buff_ce0;
reg buff_ce1;
reg result_ap_vld;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
reg   [31:0] float_exception_flags = 32'b00000000000000000000000000000000;
reg   [31:0] float_rounding_mode = 32'b00000000000000000000000000000000;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_58;
reg   [63:0] a_reg_164;
reg   [63:0] b_reg_170;
wire   [0:0] tmp_fu_118_p3;
reg   [0:0] tmp_reg_176;
wire   [0:0] tmptmp_fu_134_p2;
reg   [0:0] tmptmp_reg_182;
wire    grp_float64_add_subFloat64Sigs_fu_92_ap_start;
wire    grp_float64_add_subFloat64Sigs_fu_92_ap_done;
wire    grp_float64_add_subFloat64Sigs_fu_92_ap_idle;
wire    grp_float64_add_subFloat64Sigs_fu_92_ap_ready;
wire   [63:0] grp_float64_add_subFloat64Sigs_fu_92_a;
wire   [63:0] grp_float64_add_subFloat64Sigs_fu_92_b;
wire   [0:0] grp_float64_add_subFloat64Sigs_fu_92_zSign;
wire   [63:0] grp_float64_add_subFloat64Sigs_fu_92_ap_return;
wire    grp_float64_add_addFloat64Sigs_fu_106_ap_start;
wire    grp_float64_add_addFloat64Sigs_fu_106_ap_done;
wire    grp_float64_add_addFloat64Sigs_fu_106_ap_idle;
wire    grp_float64_add_addFloat64Sigs_fu_106_ap_ready;
wire   [63:0] grp_float64_add_addFloat64Sigs_fu_106_a;
wire   [63:0] grp_float64_add_addFloat64Sigs_fu_106_b;
wire   [0:0] grp_float64_add_addFloat64Sigs_fu_106_zSign;
wire   [31:0] grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_i;
wire   [31:0] grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o;
wire    grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o_ap_vld;
wire   [31:0] grp_float64_add_addFloat64Sigs_fu_106_float_rounding_mode;
wire   [63:0] grp_float64_add_addFloat64Sigs_fu_106_ap_return;
reg   [63:0] storemerge_phi_fu_85_p4;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_99;
reg    grp_float64_add_subFloat64Sigs_fu_92_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_122;
wire   [31:0] grp_float64_add_subFloat64Sigs_fu_92_float_exception_flags_o;
reg    grp_float64_add_addFloat64Sigs_fu_106_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_143;
wire   [0:0] tmp_54_fu_126_p3;
reg   [4:0] ap_NS_fsm;


float64_add_subFloat64Sigs grp_float64_add_subFloat64Sigs_fu_92(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_float64_add_subFloat64Sigs_fu_92_ap_start ),
    .ap_done( grp_float64_add_subFloat64Sigs_fu_92_ap_done ),
    .ap_idle( grp_float64_add_subFloat64Sigs_fu_92_ap_idle ),
    .ap_ready( grp_float64_add_subFloat64Sigs_fu_92_ap_ready ),
    .a( grp_float64_add_subFloat64Sigs_fu_92_a ),
    .b( grp_float64_add_subFloat64Sigs_fu_92_b ),
    .zSign( grp_float64_add_subFloat64Sigs_fu_92_zSign ),
    .ap_return( grp_float64_add_subFloat64Sigs_fu_92_ap_return )
);

float64_add_addFloat64Sigs grp_float64_add_addFloat64Sigs_fu_106(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_float64_add_addFloat64Sigs_fu_106_ap_start ),
    .ap_done( grp_float64_add_addFloat64Sigs_fu_106_ap_done ),
    .ap_idle( grp_float64_add_addFloat64Sigs_fu_106_ap_idle ),
    .ap_ready( grp_float64_add_addFloat64Sigs_fu_106_ap_ready ),
    .a( grp_float64_add_addFloat64Sigs_fu_106_a ),
    .b( grp_float64_add_addFloat64Sigs_fu_106_b ),
    .zSign( grp_float64_add_addFloat64Sigs_fu_106_zSign ),
    .float_exception_flags_i( grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_i ),
    .float_exception_flags_o( grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o ),
    .float_exception_flags_o_ap_vld( grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o_ap_vld ),
    .float_rounding_mode( grp_float64_add_addFloat64Sigs_fu_106_float_rounding_mode ),
    .ap_return( grp_float64_add_addFloat64Sigs_fu_106_ap_return )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_float64_add_addFloat64Sigs_fu_106_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_float64_add_addFloat64Sigs_fu_106_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
            grp_float64_add_addFloat64Sigs_fu_106_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_float64_add_addFloat64Sigs_fu_106_ap_ready)) begin
            grp_float64_add_addFloat64Sigs_fu_106_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_float64_add_subFloat64Sigs_fu_92_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_float64_add_subFloat64Sigs_fu_92_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
            grp_float64_add_subFloat64Sigs_fu_92_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_float64_add_subFloat64Sigs_fu_92_ap_ready)) begin
            grp_float64_add_subFloat64Sigs_fu_92_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_logic_1 == grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o_ap_vld)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_1 == grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o_ap_vld)))) begin
        float_exception_flags <= grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_o;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(tmptmp_reg_182 == ap_const_lv1_0) & ~(((tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_addFloat64Sigs_fu_106_ap_done)) | (~(tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_subFloat64Sigs_fu_92_ap_done)))) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        float_exception_flags <= grp_float64_add_subFloat64Sigs_fu_92_float_exception_flags_o;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        a_reg_164 <= buff_q0;
        b_reg_170 <= buff_q1;
        tmp_reg_176 <= buff_q0[ap_const_lv32_3F];
        tmptmp_reg_182 <= tmptmp_fu_134_p2;
    end
end

always @ (tmptmp_reg_182 or grp_float64_add_subFloat64Sigs_fu_92_ap_done or grp_float64_add_addFloat64Sigs_fu_106_ap_done or ap_sig_cseq_ST_st4_fsm_3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_addFloat64Sigs_fu_106_ap_done)) | (~(tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_subFloat64Sigs_fu_92_ap_done))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (tmptmp_reg_182 or grp_float64_add_subFloat64Sigs_fu_92_ap_done or grp_float64_add_addFloat64Sigs_fu_106_ap_done or ap_sig_cseq_ST_st4_fsm_3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_addFloat64Sigs_fu_106_ap_done)) | (~(tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_subFloat64Sigs_fu_92_ap_done))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_21) begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_58) begin
    if (ap_sig_bdd_58) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_143) begin
    if (ap_sig_bdd_143) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_99) begin
    if (ap_sig_bdd_99) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_122) begin
    if (ap_sig_bdd_122) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        buff_ce0 = ap_const_logic_1;
    end else begin
        buff_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        buff_ce1 = ap_const_logic_1;
    end else begin
        buff_ce1 = ap_const_logic_0;
    end
end

always @ (tmptmp_reg_182 or grp_float64_add_subFloat64Sigs_fu_92_ap_done or grp_float64_add_addFloat64Sigs_fu_106_ap_done or ap_sig_cseq_ST_st4_fsm_3) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(((tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_addFloat64Sigs_fu_106_ap_done)) | (~(tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_subFloat64Sigs_fu_92_ap_done))))) begin
        result_ap_vld = ap_const_logic_1;
    end else begin
        result_ap_vld = ap_const_logic_0;
    end
end

always @ (tmptmp_reg_182 or grp_float64_add_subFloat64Sigs_fu_92_ap_return or grp_float64_add_addFloat64Sigs_fu_106_ap_return or ap_sig_cseq_ST_st4_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        if ((tmptmp_reg_182 == ap_const_lv1_0)) begin
            storemerge_phi_fu_85_p4 = grp_float64_add_addFloat64Sigs_fu_106_ap_return;
        end else if (~(tmptmp_reg_182 == ap_const_lv1_0)) begin
            storemerge_phi_fu_85_p4 = grp_float64_add_subFloat64Sigs_fu_92_ap_return;
        end else begin
            storemerge_phi_fu_85_p4 = 'bx;
        end
    end else begin
        storemerge_phi_fu_85_p4 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or tmptmp_fu_134_p2 or tmptmp_reg_182 or grp_float64_add_subFloat64Sigs_fu_92_ap_done or grp_float64_add_addFloat64Sigs_fu_106_ap_done) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(tmptmp_fu_134_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(((tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_addFloat64Sigs_fu_106_ap_done)) | (~(tmptmp_reg_182 == ap_const_lv1_0) & (ap_const_logic_0 == grp_float64_add_subFloat64Sigs_fu_92_ap_done)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = (n + m);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_122 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_143 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_58 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_99 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign buff_address0 = ap_const_lv64_0;

assign buff_address1 = ap_const_lv64_1;

assign grp_float64_add_addFloat64Sigs_fu_106_a = a_reg_164;

assign grp_float64_add_addFloat64Sigs_fu_106_ap_start = grp_float64_add_addFloat64Sigs_fu_106_ap_start_ap_start_reg;

assign grp_float64_add_addFloat64Sigs_fu_106_b = b_reg_170;

assign grp_float64_add_addFloat64Sigs_fu_106_float_exception_flags_i = float_exception_flags;

assign grp_float64_add_addFloat64Sigs_fu_106_float_rounding_mode = float_rounding_mode;

assign grp_float64_add_addFloat64Sigs_fu_106_zSign = tmp_reg_176;

assign grp_float64_add_subFloat64Sigs_fu_92_a = a_reg_164;

assign grp_float64_add_subFloat64Sigs_fu_92_ap_start = grp_float64_add_subFloat64Sigs_fu_92_ap_start_ap_start_reg;

assign grp_float64_add_subFloat64Sigs_fu_92_b = b_reg_170;

assign grp_float64_add_subFloat64Sigs_fu_92_float_exception_flags_o = ap_const_lv32_0;

assign grp_float64_add_subFloat64Sigs_fu_92_zSign = tmp_reg_176;

assign result = storemerge_phi_fu_85_p4;

assign tmp_54_fu_126_p3 = buff_q1[ap_const_lv32_3F];

assign tmp_fu_118_p3 = buff_q0[ap_const_lv32_3F];

assign tmptmp_fu_134_p2 = (tmp_fu_118_p3 ^ tmp_54_fu_126_p3);


endmodule //float64_add

