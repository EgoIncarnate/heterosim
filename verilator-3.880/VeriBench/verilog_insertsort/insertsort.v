// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

/*(* CORE_GENERATION_INFO="insertsort,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx980tffg1930-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.780000,HLS_SYN_LAT=28,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *) */   //Commented out for VPR -Sharad

module insertsort (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_we0,
        a_d0,
        a_q0,
        a_address1,
        a_ce1,
        a_we1,
        a_d1,
        a_q1
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
output   a_we0;
output  [31:0] a_d0;
input  [31:0] a_q0;
output  [3:0] a_address1;
output   a_ce1;
output   a_we1;
output  [31:0] a_d1;
input  [31:0] a_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] a_address0;
reg a_ce0;
reg a_we0;
reg[3:0] a_address1;
reg a_ce1;
reg a_we1;
reg   [2:0] ap_CS_fsm = 3'b000;
wire   [31:0] j_cast1_fu_68_p1;
reg   [3:0] a_addr_reg_114;
wire   [31:0] j_1_fu_83_p2;
reg   [31:0] j_1_reg_119;
reg   [3:0] a_addr_1_reg_124;
reg   [31:0] temp_reg_129;
wire   [3:0] i_fu_100_p2;
wire   [0:0] tmp_3_fu_94_p2;
reg   [3:0] j_reg_46;
reg   [31:0] j1_reg_58;
wire   [0:0] exitcond_fu_72_p2;
wire   [63:0] tmp_fu_78_p1;
wire   [63:0] tmp_2_fu_89_p1;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv4_2 = 4'b10;
parameter    ap_const_lv4_B = 4'b1011;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_true = 1'b1;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin //: ap_ret_ap_CS_fsm								//Commented out block name for VPR -Sharad
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_72_p2))) begin
        j1_reg_58 <= j_cast1_fu_68_p1;
    end else if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        j1_reg_58 <= j_1_reg_119;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & (tmp_3_fu_94_p2 == ap_const_lv1_0))) begin
        j_reg_46 <= i_fu_100_p2;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        j_reg_46 <= ap_const_lv4_2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        a_addr_1_reg_124 <= tmp_2_fu_89_p1;
        a_addr_reg_114 <= tmp_fu_78_p1;
        j_1_reg_119 <= j_1_fu_83_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        temp_reg_129 <= a_q0;
    end
end

/// a_address0 assign process. ///
always @ (ap_CS_fsm or a_addr_reg_114 or tmp_fu_78_p1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        a_address0 = a_addr_reg_114;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        a_address0 = tmp_fu_78_p1;
    end else begin
        //a_address0 = 'bx;								//Original Vivado-HLS
		a_address0 = 'b0;								//Added by Sharad for VPR
    end
end

/// a_address1 assign process. ///
always @ (ap_CS_fsm or a_addr_1_reg_124 or tmp_2_fu_89_p1)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        a_address1 = a_addr_1_reg_124;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        a_address1 = tmp_2_fu_89_p1;
    end else begin
        //a_address1 = 'bx;								//Original Vivado-HLS
		a_address1 = 'b0;								//Added by Sharad for VPR
    end
end

/// a_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        a_ce0 = ap_const_logic_1;
    end else begin
        a_ce0 = ap_const_logic_0;
    end
end

/// a_ce1 assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st5_fsm_4 == ap_CS_fsm))) begin
        a_ce1 = ap_const_logic_1;
    end else begin
        a_ce1 = ap_const_logic_0;
    end
end

/// a_we0 assign process. ///
always @ (ap_CS_fsm or tmp_3_fu_94_p2)
begin
    if (((ap_ST_st4_fsm_3 == ap_CS_fsm) & ~(tmp_3_fu_94_p2 == ap_const_lv1_0))) begin
        a_we0 = ap_const_logic_1;
    end else begin
        a_we0 = ap_const_logic_0;
    end
end

/// a_we1 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st5_fsm_4 == ap_CS_fsm)) begin
        a_we1 = ap_const_logic_1;
    end else begin
        a_we1 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or exitcond_fu_72_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_72_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_fu_72_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_72_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_3_fu_94_p2 or exitcond_fu_72_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(ap_const_lv1_0 == exitcond_fu_72_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            if ((tmp_3_fu_94_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        default : 
            //ap_NS_fsm = 'bx;						//Original Vivado-HLS
			ap_NS_fsm = 'b0;						//Added by Sharad for VPR
    endcase
end
assign a_d0 = a_q1;
assign a_d1 = temp_reg_129;
assign exitcond_fu_72_p2 = (j_reg_46 == ap_const_lv4_B? 1'b1: 1'b0);
assign i_fu_100_p2 = (j_reg_46 + ap_const_lv4_1);
assign j_1_fu_83_p2 = (j1_reg_58 + ap_const_lv32_FFFFFFFF);

assign j_cast1_fu_68_p1 = $unsigned(j_reg_46);							//Original Vivado-HLS
//assign j_cast1_fu_68_p1 = {28'b0,j_reg_46};									//Added by Sharad for VPR

assign tmp_2_fu_89_p1 = $signed(j_1_fu_83_p2);							//Original Vivado-HLS
//assign tmp_2_fu_89_p1 = {32{j_1_fu_83_p2[31]},j_1_fu_83_p2};				//Added by Sharad for VPR

assign tmp_3_fu_94_p2 = ($signed(a_q0) < $signed(a_q1)? 1'b1: 1'b0);  	//Original Vivado-HLS
//assign tmp_3_fu_94_p2 = a_q0 < a_q1? 1'b1: 1'b0;							//Added by Sharad for VPR

assign tmp_fu_78_p1 = $signed(j1_reg_58);									//Original Vivado-HLS
//assign tmp_fu_78_p1 = {32{j1_reg_58[31]},j1_reg_58};						//Added by Sharad for VPR


endmodule //insertsort

