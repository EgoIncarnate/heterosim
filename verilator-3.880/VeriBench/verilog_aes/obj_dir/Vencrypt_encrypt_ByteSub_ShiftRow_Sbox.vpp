`begin_keywords "1800-2012"
`line 1 "encrypt_ByteSub_ShiftRow_Sbox.v" 1
 
 
 
 

`line 6 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
 

`line 8 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
`timescale 1 ns / 1 ps
module encrypt_ByteSub_ShiftRow_Sbox_rom (
addr0, ce0, q0, addr1, ce1, q1, clk);

`line 12 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
parameter DWIDTH = 8;
parameter AWIDTH = 8;
parameter MEM_SIZE = 256;

`line 16 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
input[AWIDTH-1:0] addr0;
input ce0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

`line 24 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
reg [DWIDTH-1:0] ram[MEM_SIZE-1:0];

`line 26 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
initial begin
    $readmemh("./encrypt_ByteSub_ShiftRow_Sbox_rom.dat", ram);
end



`line 32 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
always @(posedge clk)  
begin 
    if (ce0) 
    begin
        q0 <= ram[addr0];
    end
end



`line 42 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
always @(posedge clk)  
begin 
    if (ce1) 
    begin
        q1 <= ram[addr1];
    end
end



`line 52 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
endmodule


`line 55 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
`timescale 1 ns / 1 ps
module encrypt_ByteSub_ShiftRow_Sbox(
    reset,
    clk,
    address0,
    ce0,
    q0,
    address1,
    ce1,
    q1);

`line 66 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
parameter DataWidth = 32'd8;
parameter AddressRange = 32'd256;
parameter AddressWidth = 32'd8;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



`line 80 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
encrypt_ByteSub_ShiftRow_Sbox_rom encrypt_ByteSub_ShiftRow_Sbox_rom_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

`line 89 "encrypt_ByteSub_ShiftRow_Sbox.v" 0
endmodule


`line 92 "encrypt_ByteSub_ShiftRow_Sbox.v" 2
