`begin_keywords "1800-2012"
`line 1 "encrypt_mul_32s_4ns_32_3.v" 1
 
 
 
 

`line 6 "encrypt_mul_32s_4ns_32_3.v" 0
 


`line 9 "encrypt_mul_32s_4ns_32_3.v" 0
`timescale 1 ns / 1 ps

`line 11 "encrypt_mul_32s_4ns_32_3.v" 0
(* use_dsp48 = "yes" *) module encrypt_mul_32s_4ns_32_3_Mul3S_0(clk, ce, a, b, p);
input clk;
input ce;
input[32 - 1 : 0] a;  
input[4 - 1 : 0] b;  
output[32 - 1 : 0] p;

`line 18 "encrypt_mul_32s_4ns_32_3.v" 0
reg signed [32 - 1 : 0] a_reg0;
reg [4 - 1 : 0] b_reg0;
wire signed [32 - 1 : 0] tmp_product;
reg signed [32 - 1 : 0] buff0;

`line 23 "encrypt_mul_32s_4ns_32_3.v" 0
assign p = buff0;
assign tmp_product = a_reg0 * $signed({1'b0, b_reg0});
always @ (posedge clk) begin
    if (ce) begin
        a_reg0 <= a;
        b_reg0 <= b;
        buff0 <= tmp_product;
    end
end
endmodule

`line 34 "encrypt_mul_32s_4ns_32_3.v" 0
`timescale 1 ns / 1 ps
module encrypt_mul_32s_4ns_32_3(
    clk,
    reset,
    ce,
    din0,
    din1,
    dout);

`line 43 "encrypt_mul_32s_4ns_32_3.v" 0
parameter ID = 32'd1;
parameter NUM_STAGE = 32'd1;
parameter din0_WIDTH = 32'd1;
parameter din1_WIDTH = 32'd1;
parameter dout_WIDTH = 32'd1;
input clk;
input reset;
input ce;
input[din0_WIDTH - 1:0] din0;
input[din1_WIDTH - 1:0] din1;
output[dout_WIDTH - 1:0] dout;



`line 57 "encrypt_mul_32s_4ns_32_3.v" 0
encrypt_mul_32s_4ns_32_3_Mul3S_0 encrypt_mul_32s_4ns_32_3_Mul3S_0_U(
    .clk( clk ),
    .ce( ce ),
    .a( din0 ),
    .b( din1 ),
    .p( dout ));

`line 64 "encrypt_mul_32s_4ns_32_3.v" 0
endmodule


`line 67 "encrypt_mul_32s_4ns_32_3.v" 2
