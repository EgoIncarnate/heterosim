`begin_keywords "1800-2012"
`line 1 "encrypt_MixColumn_AddRoundKey.v" 1
 
 
 
 

`line 6 "encrypt_MixColumn_AddRoundKey.v" 0
 

`line 8 "encrypt_MixColumn_AddRoundKey.v" 0
`timescale 1 ns / 1 ps 

`line 10 "encrypt_MixColumn_AddRoundKey.v" 0
module encrypt_MixColumn_AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        nb,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

`line 37 "encrypt_MixColumn_AddRoundKey.v" 0
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 14'b1;
parameter    ap_ST_st2_fsm_1 = 14'b10;
parameter    ap_ST_st3_fsm_2 = 14'b100;
parameter    ap_ST_st4_fsm_3 = 14'b1000;
parameter    ap_ST_st5_fsm_4 = 14'b10000;
parameter    ap_ST_st6_fsm_5 = 14'b100000;
parameter    ap_ST_st7_fsm_6 = 14'b1000000;
parameter    ap_ST_st8_fsm_7 = 14'b10000000;
parameter    ap_ST_st9_fsm_8 = 14'b100000000;
parameter    ap_ST_st10_fsm_9 = 14'b1000000000;
parameter    ap_ST_st11_fsm_10 = 14'b10000000000;
parameter    ap_ST_st12_fsm_11 = 14'b100000000000;
parameter    ap_ST_st13_fsm_12 = 14'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv31_1 = 31'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_100 = 32'b100000000;
parameter    ap_const_lv32_11B = 32'b100011011;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv10_78 = 10'b1111000;
parameter    ap_const_lv10_F0 = 10'b11110000;
parameter    ap_const_lv10_168 = 10'b101101000;
parameter    ap_true = 1'b1;

`line 81 "encrypt_MixColumn_AddRoundKey.v" 0
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [6:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [31:0] nb;
input  [31:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

`line 106 "encrypt_MixColumn_AddRoundKey.v" 0
reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[6:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm = 14'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_32;
wire   [31:0] grp_fu_285_p2;
reg   [31:0] tmp_reg_866;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_75;
wire   [30:0] j_3_fu_300_p2;
reg   [30:0] j_3_reg_874;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_84;
wire   [31:0] tmp_2_fu_310_p3;
reg   [31:0] tmp_2_reg_879;
wire   [0:0] tmp_s_fu_295_p2;
wire  signed [63:0] tmp_3_fu_318_p1;
reg  signed [63:0] tmp_3_reg_885;
wire  signed [63:0] tmp_8_fu_329_p1;
reg  signed [63:0] tmp_8_reg_895;
wire   [31:0] tmp_24_fu_334_p2;
reg   [31:0] tmp_24_reg_905;
wire   [9:0] tmp_45_fu_339_p1;
reg   [9:0] tmp_45_reg_910;
reg   [31:0] x_6_reg_917;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_111;
wire   [31:0] tmp_9_fu_343_p2;
reg   [31:0] tmp_9_reg_924;
wire   [31:0] ret_load_1_fu_369_p3;
reg   [31:0] ret_load_1_reg_929;
reg   [31:0] x_reg_934;
wire   [31:0] storemerge_v_fu_419_p3;
reg   [31:0] storemerge_v_reg_940;
wire  signed [63:0] tmp_13_fu_432_p1;
reg  signed [63:0] tmp_13_reg_945;
wire  signed [63:0] tmp_23_fu_442_p1;
reg  signed [63:0] tmp_23_reg_955;
wire   [31:0] tmp_33_tmp_9_fu_481_p3;
reg   [31:0] tmp_33_tmp_9_reg_975;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_141;
wire   [31:0] storemerge8_v_fu_574_p3;
reg   [31:0] storemerge8_v_reg_990;
reg   [31:0] word_load_1_reg_995;
wire   [31:0] tmp4_fu_582_p2;
reg   [31:0] tmp4_reg_1000;
wire   [31:0] tmp_43_tmp_s_fu_607_p3;
reg   [31:0] tmp_43_tmp_s_reg_1005;
wire   [31:0] storemerge9_v_fu_657_p3;
reg   [31:0] storemerge9_v_reg_1010;
wire   [31:0] tmp7_fu_665_p2;
reg   [31:0] tmp7_reg_1015;
wire   [31:0] tmp10_fu_739_p2;
reg   [31:0] tmp10_reg_1020;
wire   [31:0] tmp12_fu_744_p2;
reg   [31:0] tmp12_reg_1025;
wire   [31:0] tmp_43_fu_786_p2;
reg   [31:0] tmp_43_reg_1030;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_167;
wire   [30:0] j_2_fu_800_p2;
reg   [30:0] j_2_reg_1038;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_176;
wire   [31:0] tmp_14_fu_810_p3;
reg   [31:0] tmp_14_reg_1043;
wire   [0:0] tmp_10_fu_795_p2;
wire  signed [63:0] tmp_15_fu_818_p1;
reg  signed [63:0] tmp_15_reg_1049;
wire  signed [63:0] tmp_17_fu_829_p1;
reg  signed [63:0] tmp_17_reg_1059;
wire  signed [63:0] tmp_19_fu_839_p1;
reg  signed [63:0] tmp_19_reg_1069;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_199;
wire  signed [63:0] tmp_21_fu_849_p1;
reg  signed [63:0] tmp_21_reg_1079;
reg   [4:0] ret_address0;
reg    ret_ce0;
reg    ret_we0;
reg   [31:0] ret_d0;
wire   [31:0] ret_q0;
reg   [4:0] ret_address1;
reg    ret_ce1;
reg    ret_we1;
reg   [31:0] ret_d1;
wire   [31:0] ret_q1;
reg   [30:0] j_reg_243;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_230;
reg   [30:0] j_1_reg_254;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_239;
wire  signed [63:0] tmp_25_fu_447_p1;
wire  signed [63:0] tmp_49_cast_fu_456_p1;
wire  signed [63:0] tmp_50_cast_fu_494_p1;
wire  signed [63:0] tmp_51_cast_fu_504_p1;
wire   [31:0] tmp_26_fu_525_p2;
wire   [31:0] tmp_32_fu_759_p2;
wire   [31:0] tmp_38_fu_775_p2;
wire   [31:0] j_cast_fu_291_p1;
wire  signed [31:0] tmp_s_fu_295_p1;
wire   [29:0] tmp_4_fu_306_p1;
wire   [31:0] tmp_7_fu_323_p2;
wire   [23:0] grp_fu_265_p4;
wire   [31:0] p_mask_fu_349_p3;
wire   [0:0] tmp_5_fu_357_p2;
wire   [31:0] tmp_6_fu_363_p2;
wire   [31:0] tmp_35_fu_377_p2;
wire   [31:0] x_1_fu_383_p2;
wire   [23:0] tmp_44_fu_389_p4;
wire   [31:0] p_mask1_fu_399_p3;
wire   [0:0] tmp_1_fu_407_p2;
wire   [31:0] tmp_11_fu_413_p2;
wire   [31:0] tmp_12_fu_427_p2;
wire   [31:0] tmp_22_fu_437_p2;
wire   [9:0] tmp_46_fu_451_p2;
wire   [23:0] grp_fu_275_p4;
wire   [31:0] p_mask2_fu_461_p3;
wire   [0:0] tmp_27_fu_469_p2;
wire   [31:0] tmp_28_fu_475_p2;
wire   [9:0] tmp_47_fu_489_p2;
wire   [9:0] tmp_48_fu_499_p2;
wire   [31:0] tmp3_fu_515_p2;
wire   [31:0] tmp2_fu_519_p2;
wire   [31:0] tmp1_fu_509_p2;
wire   [31:0] tmp_50_fu_532_p2;
wire   [31:0] x_3_fu_538_p2;
wire   [23:0] tmp_51_fu_544_p4;
wire   [31:0] p_mask3_fu_554_p3;
wire   [0:0] tmp_30_fu_562_p2;
wire   [31:0] tmp_31_fu_568_p2;
wire   [31:0] p_mask4_fu_587_p3;
wire   [0:0] tmp_33_fu_595_p2;
wire   [31:0] tmp_34_fu_601_p2;
wire   [31:0] tmp_53_fu_615_p2;
wire   [31:0] x_5_fu_621_p2;
wire   [23:0] tmp_54_fu_627_p4;
wire   [31:0] p_mask5_fu_637_p3;
wire   [0:0] tmp_36_fu_645_p2;
wire   [31:0] tmp_37_fu_651_p2;
wire   [31:0] p_mask6_fu_669_p3;
wire   [0:0] tmp_39_fu_677_p2;
wire   [31:0] tmp_40_fu_683_p2;
wire   [31:0] x_7_fu_697_p2;
wire   [23:0] tmp_56_fu_701_p4;
wire   [31:0] p_mask7_fu_711_p3;
wire   [0:0] tmp_41_fu_719_p2;
wire   [31:0] tmp_42_fu_725_p2;
wire   [31:0] storemerge1_v_fu_731_p3;
wire   [31:0] tmp_53_tmp_s_fu_689_p3;
wire   [31:0] tmp6_fu_750_p2;
wire   [31:0] tmp5_fu_754_p2;
wire   [31:0] tmp9_fu_765_p2;
wire   [31:0] tmp8_fu_769_p2;
wire   [31:0] tmp11_fu_781_p2;
wire   [31:0] j_1_cast_fu_791_p1;
wire  signed [31:0] tmp_10_fu_795_p1;
wire   [29:0] tmp_57_fu_806_p1;
wire   [31:0] tmp_16_fu_823_p2;
wire   [31:0] tmp_18_fu_834_p2;
wire   [31:0] tmp_20_fu_844_p2;
wire    grp_fu_285_ce;
reg   [13:0] ap_NS_fsm;


`line 284 "encrypt_MixColumn_AddRoundKey.v" 0
encrypt_MixColumn_AddRoundKey_ret #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ret_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( ret_address0 ),
    .ce0( ret_ce0 ),
    .we0( ret_we0 ),
    .d0( ret_d0 ),
    .q0( ret_q0 ),
    .address1( ret_address1 ),
    .ce1( ret_ce1 ),
    .we1( ret_we1 ),
    .d1( ret_d1 ),
    .q1( ret_q1 )
);

`line 303 "encrypt_MixColumn_AddRoundKey.v" 0
encrypt_mul_32s_32s_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
encrypt_mul_32s_32s_32_6_U18(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( n ),
    .din1( nb ),
    .ce( grp_fu_285_ce ),
    .dout( grp_fu_285_p2 )
);



`line 320 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

`line 328 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (tmp_s_fu_295_p2 == ap_const_lv1_0))) begin
        j_1_reg_254 <= ap_const_lv31_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        j_1_reg_254 <= j_2_reg_1038;
    end
end

`line 336 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        j_reg_243 <= j_3_reg_874;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        j_reg_243 <= ap_const_lv31_0;
    end
end

`line 344 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        j_2_reg_1038 <= j_2_fu_800_p2;
    end
end

`line 350 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        j_3_reg_874 <= j_3_fu_300_p2;
    end
end

`line 356 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ret_load_1_reg_929 <= ret_load_1_fu_369_p3;
        storemerge_v_reg_940 <= storemerge_v_fu_419_p3;
        tmp_13_reg_945[63 : 2] <= tmp_13_fu_432_p1[63 : 2];
        tmp_23_reg_955[63 : 2] <= tmp_23_fu_442_p1[63 : 2];
        tmp_33_tmp_9_reg_975 <= tmp_33_tmp_9_fu_481_p3;
        tmp_9_reg_924[31 : 1] <= tmp_9_fu_343_p2[31 : 1];
        x_6_reg_917 <= statemt_q0;
        x_reg_934 <= statemt_q1;
    end
end

`line 369 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        storemerge8_v_reg_990 <= storemerge8_v_fu_574_p3;
        storemerge9_v_reg_1010 <= storemerge9_v_fu_657_p3;
        tmp10_reg_1020 <= tmp10_fu_739_p2;
        tmp12_reg_1025 <= tmp12_fu_744_p2;
        tmp4_reg_1000 <= tmp4_fu_582_p2;
        tmp7_reg_1015 <= tmp7_fu_665_p2;
        tmp_43_tmp_s_reg_1005 <= tmp_43_tmp_s_fu_607_p3;
        word_load_1_reg_995 <= word_q1;
    end
end

`line 382 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & ~(ap_const_lv1_0 == tmp_10_fu_795_p2))) begin
        tmp_14_reg_1043[31 : 2] <= tmp_14_fu_810_p3[31 : 2];
        tmp_15_reg_1049[63 : 2] <= tmp_15_fu_818_p1[63 : 2];
        tmp_17_reg_1059[63 : 2] <= tmp_17_fu_829_p1[63 : 2];
    end
end

`line 390 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        tmp_19_reg_1069[63 : 2] <= tmp_19_fu_839_p1[63 : 2];
        tmp_21_reg_1079[63 : 2] <= tmp_21_fu_849_p1[63 : 2];
    end
end

`line 397 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(tmp_s_fu_295_p2 == ap_const_lv1_0))) begin
        tmp_24_reg_905 <= tmp_24_fu_334_p2;
        tmp_2_reg_879[31 : 2] <= tmp_2_fu_310_p3[31 : 2];
        tmp_3_reg_885[63 : 2] <= tmp_3_fu_318_p1[63 : 2];
        tmp_45_reg_910 <= tmp_45_fu_339_p1;
        tmp_8_reg_895[63 : 2] <= tmp_8_fu_329_p1[63 : 2];
    end
end

`line 407 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        tmp_43_reg_1030 <= tmp_43_fu_786_p2;
    end
end

`line 413 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_reg_866 <= grp_fu_285_p2;
    end
end

`line 419 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st12_fsm_11 or tmp_10_fu_795_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & (ap_const_lv1_0 == tmp_10_fu_795_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

`line 427 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

`line 435 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st12_fsm_11 or tmp_10_fu_795_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) & (ap_const_lv1_0 == tmp_10_fu_795_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

`line 443 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_167) begin
    if (ap_sig_bdd_167) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

`line 451 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_230) begin
    if (ap_sig_bdd_230) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

`line 459 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_176) begin
    if (ap_sig_bdd_176) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

`line 467 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_199) begin
    if (ap_sig_bdd_199) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

`line 475 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_239) begin
    if (ap_sig_bdd_239) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

`line 483 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_32) begin
    if (ap_sig_bdd_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

`line 491 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_75) begin
    if (ap_sig_bdd_75) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

`line 499 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_84) begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

`line 507 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_111) begin
    if (ap_sig_bdd_111) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

`line 515 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_bdd_141) begin
    if (ap_sig_bdd_141) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

`line 523 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (tmp_3_reg_885 or tmp_8_reg_895 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or tmp_15_fu_818_p1 or tmp_19_fu_839_p1 or ap_sig_cseq_ST_st13_fsm_12) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ret_address0 = tmp_8_reg_895;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        ret_address0 = tmp_3_reg_885;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        ret_address0 = tmp_19_fu_839_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        ret_address0 = tmp_15_fu_818_p1;
    end else begin
        ret_address0 = 'bx;
    end
end

`line 537 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (tmp_13_reg_945 or tmp_23_reg_955 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or tmp_17_fu_829_p1 or ap_sig_cseq_ST_st13_fsm_12 or tmp_21_fu_849_p1 or ap_sig_cseq_ST_st11_fsm_10) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        ret_address1 = tmp_23_reg_955;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ret_address1 = tmp_13_reg_945;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        ret_address1 = tmp_21_fu_849_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        ret_address1 = tmp_17_fu_829_p1;
    end else begin
        ret_address1 = 'bx;
    end
end

`line 551 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st13_fsm_12) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        ret_ce0 = ap_const_logic_1;
    end else begin
        ret_ce0 = ap_const_logic_0;
    end
end

`line 559 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st11_fsm_10) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        ret_ce1 = ap_const_logic_1;
    end else begin
        ret_ce1 = ap_const_logic_0;
    end
end

`line 567 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9 or tmp_26_fu_525_p2 or tmp_32_fu_759_p2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ret_d0 = tmp_32_fu_759_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        ret_d0 = tmp_26_fu_525_p2;
    end else begin
        ret_d0 = 'bx;
    end
end

`line 577 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (tmp_43_reg_1030 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st11_fsm_10 or tmp_38_fu_775_p2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        ret_d1 = tmp_43_reg_1030;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ret_d1 = tmp_38_fu_775_p2;
    end else begin
        ret_d1 = 'bx;
    end
end

`line 587 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st10_fsm_9) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        ret_we0 = ap_const_logic_1;
    end else begin
        ret_we0 = ap_const_logic_0;
    end
end

`line 595 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st11_fsm_10) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        ret_we1 = ap_const_logic_1;
    end else begin
        ret_we1 = ap_const_logic_0;
    end
end

`line 603 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st7_fsm_6 or tmp_3_fu_318_p1 or ap_sig_cseq_ST_st8_fsm_7 or tmp_13_fu_432_p1 or tmp_15_reg_1049 or tmp_19_reg_1069 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        statemt_address0 = tmp_19_reg_1069;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        statemt_address0 = tmp_15_reg_1049;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        statemt_address0 = tmp_13_fu_432_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        statemt_address0 = tmp_3_fu_318_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

`line 617 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st7_fsm_6 or tmp_8_fu_329_p1 or ap_sig_cseq_ST_st8_fsm_7 or tmp_23_fu_442_p1 or tmp_17_reg_1059 or ap_sig_cseq_ST_st13_fsm_12 or tmp_21_reg_1079 or ap_sig_cseq_ST_st14_fsm_13) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        statemt_address1 = tmp_21_reg_1079;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        statemt_address1 = tmp_17_reg_1059;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        statemt_address1 = tmp_23_fu_442_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        statemt_address1 = tmp_8_fu_329_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

`line 631 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        statemt_ce0 = ap_const_logic_1;
    end else begin
        statemt_ce0 = ap_const_logic_0;
    end
end

`line 639 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        statemt_ce1 = ap_const_logic_1;
    end else begin
        statemt_ce1 = ap_const_logic_0;
    end
end

`line 647 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        statemt_we0 = ap_const_logic_1;
    end else begin
        statemt_we0 = ap_const_logic_0;
    end
end

`line 655 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st14_fsm_13) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        statemt_we1 = ap_const_logic_1;
    end else begin
        statemt_we1 = ap_const_logic_0;
    end
end

`line 663 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8 or tmp_25_fu_447_p1 or tmp_50_cast_fu_494_p1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        word_address0 = tmp_50_cast_fu_494_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        word_address0 = tmp_25_fu_447_p1;
    end else begin
        word_address0 = 'bx;
    end
end

`line 673 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8 or tmp_49_cast_fu_456_p1 or tmp_51_cast_fu_504_p1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        word_address1 = tmp_51_cast_fu_504_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        word_address1 = tmp_49_cast_fu_456_p1;
    end else begin
        word_address1 = 'bx;
    end
end

`line 683 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        word_ce0 = ap_const_logic_1;
    end else begin
        word_ce0 = ap_const_logic_0;
    end
end

`line 691 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st9_fsm_8) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        word_ce1 = ap_const_logic_1;
    end else begin
        word_ce1 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_s_fu_295_p2 or tmp_10_fu_795_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if ((tmp_s_fu_295_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st12_fsm_11 : 
        begin
            if ((ap_const_lv1_0 == tmp_10_fu_795_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



`line 777 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_111 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


`line 782 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_141 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end


`line 787 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_167 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


`line 792 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_176 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


`line 797 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_199 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end


`line 802 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_230 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


`line 807 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_239 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end


`line 812 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_32 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


`line 817 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_75 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


`line 822 "encrypt_MixColumn_AddRoundKey.v" 0
always @ (ap_CS_fsm) begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

`line 826 "encrypt_MixColumn_AddRoundKey.v" 0
assign grp_fu_265_p4 = {{statemt_q0[ap_const_lv32_1E : ap_const_lv32_7]}};

`line 828 "encrypt_MixColumn_AddRoundKey.v" 0
assign grp_fu_275_p4 = {{statemt_q1[ap_const_lv32_1E : ap_const_lv32_7]}};

`line 830 "encrypt_MixColumn_AddRoundKey.v" 0
assign grp_fu_285_ce = ap_const_logic_1;

`line 832 "encrypt_MixColumn_AddRoundKey.v" 0
assign j_1_cast_fu_791_p1 = j_1_reg_254;

`line 834 "encrypt_MixColumn_AddRoundKey.v" 0
assign j_2_fu_800_p2 = (j_1_reg_254 + ap_const_lv31_1);

`line 836 "encrypt_MixColumn_AddRoundKey.v" 0
assign j_3_fu_300_p2 = (j_reg_243 + ap_const_lv31_1);

`line 838 "encrypt_MixColumn_AddRoundKey.v" 0
assign j_cast_fu_291_p1 = j_reg_243;

`line 840 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask1_fu_399_p3 = {{tmp_44_fu_389_p4}, {ap_const_lv8_0}};

`line 842 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask2_fu_461_p3 = {{grp_fu_275_p4}, {ap_const_lv8_0}};

`line 844 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask3_fu_554_p3 = {{tmp_51_fu_544_p4}, {ap_const_lv8_0}};

`line 846 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask4_fu_587_p3 = {{grp_fu_265_p4}, {ap_const_lv8_0}};

`line 848 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask5_fu_637_p3 = {{tmp_54_fu_627_p4}, {ap_const_lv8_0}};

`line 850 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask6_fu_669_p3 = {{grp_fu_275_p4}, {ap_const_lv8_0}};

`line 852 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask7_fu_711_p3 = {{tmp_56_fu_701_p4}, {ap_const_lv8_0}};

`line 854 "encrypt_MixColumn_AddRoundKey.v" 0
assign p_mask_fu_349_p3 = {{grp_fu_265_p4}, {ap_const_lv8_0}};

`line 856 "encrypt_MixColumn_AddRoundKey.v" 0
assign ret_load_1_fu_369_p3 = ((tmp_5_fu_357_p2[0:0] === 1'b1) ? tmp_6_fu_363_p2 : tmp_9_fu_343_p2);

`line 858 "encrypt_MixColumn_AddRoundKey.v" 0
assign statemt_d0 = ret_q0;

`line 860 "encrypt_MixColumn_AddRoundKey.v" 0
assign statemt_d1 = ret_q1;

`line 862 "encrypt_MixColumn_AddRoundKey.v" 0
assign storemerge1_v_fu_731_p3 = ((tmp_41_fu_719_p2[0:0] === 1'b1) ? tmp_42_fu_725_p2 : x_7_fu_697_p2);

`line 864 "encrypt_MixColumn_AddRoundKey.v" 0
assign storemerge8_v_fu_574_p3 = ((tmp_30_fu_562_p2[0:0] === 1'b1) ? tmp_31_fu_568_p2 : x_3_fu_538_p2);

`line 866 "encrypt_MixColumn_AddRoundKey.v" 0
assign storemerge9_v_fu_657_p3 = ((tmp_36_fu_645_p2[0:0] === 1'b1) ? tmp_37_fu_651_p2 : x_5_fu_621_p2);

`line 868 "encrypt_MixColumn_AddRoundKey.v" 0
assign storemerge_v_fu_419_p3 = ((tmp_1_fu_407_p2[0:0] === 1'b1) ? tmp_11_fu_413_p2 : x_1_fu_383_p2);

`line 870 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp10_fu_739_p2 = (statemt_q0 ^ x_reg_934);

`line 872 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp11_fu_781_p2 = (tmp12_reg_1025 ^ word_q1);

`line 874 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp12_fu_744_p2 = (storemerge1_v_fu_731_p3 ^ tmp_53_tmp_s_fu_689_p3);

`line 876 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp1_fu_509_p2 = (statemt_q0 ^ statemt_q1);

`line 878 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp2_fu_519_p2 = (tmp3_fu_515_p2 ^ word_q0);

`line 880 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp3_fu_515_p2 = (ret_load_1_reg_929 ^ storemerge_v_reg_940);

`line 882 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp4_fu_582_p2 = (statemt_q1 ^ x_6_reg_917);

`line 884 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp5_fu_754_p2 = (tmp6_fu_750_p2 ^ word_load_1_reg_995);

`line 886 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp6_fu_750_p2 = (storemerge8_v_reg_990 ^ tmp_33_tmp_9_reg_975);

`line 888 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp7_fu_665_p2 = (x_reg_934 ^ x_6_reg_917);

`line 890 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp8_fu_769_p2 = (tmp9_fu_765_p2 ^ word_q0);

`line 892 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp9_fu_765_p2 = (storemerge9_v_reg_1010 ^ tmp_43_tmp_s_reg_1005);

`line 894 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_10_fu_795_p1 = nb;

`line 896 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_10_fu_795_p2 = ($signed(j_1_cast_fu_791_p1) < $signed(tmp_10_fu_795_p1)? 1'b1: 1'b0);

`line 898 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_11_fu_413_p2 = (x_1_fu_383_p2 ^ ap_const_lv32_11B);

`line 900 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_12_fu_427_p2 = (tmp_2_reg_879 | ap_const_lv32_2);

`line 902 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_13_fu_432_p1 = $signed(tmp_12_fu_427_p2);

`line 904 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_14_fu_810_p3 = {{tmp_57_fu_806_p1}, {ap_const_lv2_0}};

`line 906 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_15_fu_818_p1 = $signed(tmp_14_fu_810_p3);

`line 908 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_16_fu_823_p2 = (tmp_14_fu_810_p3 | ap_const_lv32_1);

`line 910 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_17_fu_829_p1 = $signed(tmp_16_fu_823_p2);

`line 912 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_18_fu_834_p2 = (tmp_14_reg_1043 | ap_const_lv32_2);

`line 914 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_19_fu_839_p1 = $signed(tmp_18_fu_834_p2);

`line 916 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_1_fu_407_p2 = (p_mask1_fu_399_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 918 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_20_fu_844_p2 = (tmp_14_reg_1043 | ap_const_lv32_3);

`line 920 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_21_fu_849_p1 = $signed(tmp_20_fu_844_p2);

`line 922 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_22_fu_437_p2 = (tmp_2_reg_879 | ap_const_lv32_3);

`line 924 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_23_fu_442_p1 = $signed(tmp_22_fu_437_p2);

`line 926 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_24_fu_334_p2 = (j_cast_fu_291_p1 + tmp_reg_866);

`line 928 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_25_fu_447_p1 = $signed(tmp_24_reg_905);

`line 930 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_26_fu_525_p2 = (tmp2_fu_519_p2 ^ tmp1_fu_509_p2);

`line 932 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_27_fu_469_p2 = (p_mask2_fu_461_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 934 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_28_fu_475_p2 = (tmp_35_fu_377_p2 ^ ap_const_lv32_11B);

`line 936 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_2_fu_310_p3 = {{tmp_4_fu_306_p1}, {ap_const_lv2_0}};

`line 938 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_30_fu_562_p2 = (p_mask3_fu_554_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 940 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_31_fu_568_p2 = (x_3_fu_538_p2 ^ ap_const_lv32_11B);

`line 942 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_32_fu_759_p2 = (tmp5_fu_754_p2 ^ tmp4_reg_1000);

`line 944 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_33_fu_595_p2 = (p_mask4_fu_587_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 946 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_33_tmp_9_fu_481_p3 = ((tmp_27_fu_469_p2[0:0] === 1'b1) ? tmp_28_fu_475_p2 : tmp_35_fu_377_p2);

`line 948 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_34_fu_601_p2 = (tmp_50_fu_532_p2 ^ ap_const_lv32_11B);

`line 950 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_35_fu_377_p2 = statemt_q1 << ap_const_lv32_1;

`line 952 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_36_fu_645_p2 = (p_mask5_fu_637_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 954 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_37_fu_651_p2 = (x_5_fu_621_p2 ^ ap_const_lv32_11B);

`line 956 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_38_fu_775_p2 = (tmp8_fu_769_p2 ^ tmp7_reg_1015);

`line 958 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_39_fu_677_p2 = (p_mask6_fu_669_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 960 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_3_fu_318_p1 = $signed(tmp_2_fu_310_p3);

`line 962 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_40_fu_683_p2 = (tmp_53_fu_615_p2 ^ ap_const_lv32_11B);

`line 964 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_41_fu_719_p2 = (p_mask7_fu_711_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 966 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_42_fu_725_p2 = (x_7_fu_697_p2 ^ ap_const_lv32_11B);

`line 968 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_43_fu_786_p2 = (tmp11_fu_781_p2 ^ tmp10_reg_1020);

`line 970 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_43_tmp_s_fu_607_p3 = ((tmp_33_fu_595_p2[0:0] === 1'b1) ? tmp_34_fu_601_p2 : tmp_50_fu_532_p2);

`line 972 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_44_fu_389_p4 = {{x_1_fu_383_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

`line 974 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_45_fu_339_p1 = tmp_24_fu_334_p2[9:0];

`line 976 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_46_fu_451_p2 = (ap_const_lv10_78 + tmp_45_reg_910);

`line 978 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_47_fu_489_p2 = (ap_const_lv10_F0 + tmp_45_reg_910);

`line 980 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_48_fu_499_p2 = (ap_const_lv10_168 + tmp_45_reg_910);

`line 982 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_49_cast_fu_456_p1 = $signed(tmp_46_fu_451_p2);

`line 984 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_4_fu_306_p1 = j_reg_243[29:0];

`line 986 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_50_cast_fu_494_p1 = $signed(tmp_47_fu_489_p2);

`line 988 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_50_fu_532_p2 = statemt_q0 << ap_const_lv32_1;

`line 990 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_51_cast_fu_504_p1 = $signed(tmp_48_fu_499_p2);

`line 992 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_51_fu_544_p4 = {{x_3_fu_538_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

`line 994 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_53_fu_615_p2 = statemt_q1 << ap_const_lv32_1;

`line 996 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_53_tmp_s_fu_689_p3 = ((tmp_39_fu_677_p2[0:0] === 1'b1) ? tmp_40_fu_683_p2 : tmp_53_fu_615_p2);

`line 998 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_54_fu_627_p4 = {{x_5_fu_621_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

`line 1000 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_56_fu_701_p4 = {{x_7_fu_697_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

`line 1002 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_57_fu_806_p1 = j_1_reg_254[29:0];

`line 1004 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_5_fu_357_p2 = (p_mask_fu_349_p3 == ap_const_lv32_100? 1'b1: 1'b0);

`line 1006 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_6_fu_363_p2 = (tmp_9_fu_343_p2 ^ ap_const_lv32_11B);

`line 1008 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_7_fu_323_p2 = (tmp_2_fu_310_p3 | ap_const_lv32_1);

`line 1010 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_8_fu_329_p1 = $signed(tmp_7_fu_323_p2);

`line 1012 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_9_fu_343_p2 = statemt_q0 << ap_const_lv32_1;

`line 1014 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_s_fu_295_p1 = nb;

`line 1016 "encrypt_MixColumn_AddRoundKey.v" 0
assign tmp_s_fu_295_p2 = ($signed(j_cast_fu_291_p1) < $signed(tmp_s_fu_295_p1)? 1'b1: 1'b0);

`line 1018 "encrypt_MixColumn_AddRoundKey.v" 0
assign x_1_fu_383_p2 = (statemt_q1 ^ tmp_35_fu_377_p2);

`line 1020 "encrypt_MixColumn_AddRoundKey.v" 0
assign x_3_fu_538_p2 = (statemt_q0 ^ tmp_50_fu_532_p2);

`line 1022 "encrypt_MixColumn_AddRoundKey.v" 0
assign x_5_fu_621_p2 = (statemt_q1 ^ tmp_53_fu_615_p2);

`line 1024 "encrypt_MixColumn_AddRoundKey.v" 0
assign x_7_fu_697_p2 = (x_6_reg_917 ^ tmp_9_reg_924);
always @ (posedge ap_clk) begin
    tmp_2_reg_879[1:0] <= 2'b00;
    tmp_3_reg_885[1:0] <= 2'b00;
    tmp_8_reg_895[1:0] <= 2'b01;
    tmp_9_reg_924[0] <= 1'b0;
    tmp_13_reg_945[1:0] <= 2'b10;
    tmp_23_reg_955[1:0] <= 2'b11;
    tmp_14_reg_1043[1:0] <= 2'b00;
    tmp_15_reg_1049[1:0] <= 2'b00;
    tmp_17_reg_1059[1:0] <= 2'b01;
    tmp_19_reg_1069[1:0] <= 2'b10;
    tmp_21_reg_1079[1:0] <= 2'b11;
end



`line 1041 "encrypt_MixColumn_AddRoundKey.v" 0
endmodule  


`line 1044 "encrypt_MixColumn_AddRoundKey.v" 2
