`begin_keywords "1800-2012"
`line 1 "encrypt_word.v" 1
 
 
 
 

`line 6 "encrypt_word.v" 0
 

`line 8 "encrypt_word.v" 0
`timescale 1 ns / 1 ps
module encrypt_word_ram (addr0, ce0, d0, we0, q0, addr1, ce1, q1,  clk);

`line 11 "encrypt_word.v" 0
parameter DWIDTH = 32;
parameter AWIDTH = 9;
parameter MEM_SIZE = 480;

`line 15 "encrypt_word.v" 0
input[AWIDTH-1:0] addr0;
input ce0;
input[DWIDTH-1:0] d0;
input we0;
output reg[DWIDTH-1:0] q0;
input[AWIDTH-1:0] addr1;
input ce1;
output reg[DWIDTH-1:0] q1;
input clk;

`line 25 "encrypt_word.v" 0
(* ram_style = "block" *)reg [DWIDTH-1:0] ram[MEM_SIZE-1:0];

`line 27 "encrypt_word.v" 0
initial begin
    $readmemh("./encrypt_word_ram.dat", ram);
end



`line 33 "encrypt_word.v" 0
always @(posedge clk)  
begin 
    if (ce0) 
    begin
        if (we0) 
        begin 
            ram[addr0] <= d0; 
            q0 <= d0;
        end 
        else 
            q0 <= ram[addr0];
    end
end


`line 48 "encrypt_word.v" 0
always @(posedge clk)  
begin 
    if (ce1) 
    begin
            q1 <= ram[addr1];
    end
end


`line 57 "encrypt_word.v" 0
endmodule


`line 60 "encrypt_word.v" 0
`timescale 1 ns / 1 ps
module encrypt_word(
    reset,
    clk,
    address0,
    ce0,
    we0,
    d0,
    q0,
    address1,
    ce1,
    q1);

`line 73 "encrypt_word.v" 0
parameter DataWidth = 32'd32;
parameter AddressRange = 32'd480;
parameter AddressWidth = 32'd9;
input reset;
input clk;
input[AddressWidth - 1:0] address0;
input ce0;
input we0;
input[DataWidth - 1:0] d0;
output[DataWidth - 1:0] q0;
input[AddressWidth - 1:0] address1;
input ce1;
output[DataWidth - 1:0] q1;



`line 89 "encrypt_word.v" 0
encrypt_word_ram encrypt_word_ram_U(
    .clk( clk ),
    .addr0( address0 ),
    .ce0( ce0 ),
    .d0( d0 ),
    .we0( we0 ),
    .q0( q0 ),
    .addr1( address1 ),
    .ce1( ce1 ),
    .q1( q1 ));

`line 100 "encrypt_word.v" 0
endmodule


`line 103 "encrypt_word.v" 2
