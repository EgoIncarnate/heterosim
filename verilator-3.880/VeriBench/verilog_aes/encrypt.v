// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encrypt,hls_ip_2015_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.240000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=7,HLS_SYN_FF=3205,HLS_SYN_LUT=6406}" *)

module encrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buff_address0,
        buff_ce0,
        buff_we0,
        buff_d0,
        buff_q0,
        buff_address1,
        buff_ce1,
        buff_we1,
        buff_d1,
        buff_q1,
        m,
        n,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 16'b1;
parameter    ap_ST_st2_fsm_1 = 16'b10;
parameter    ap_ST_st3_fsm_2 = 16'b100;
parameter    ap_ST_st4_fsm_3 = 16'b1000;
parameter    ap_ST_st5_fsm_4 = 16'b10000;
parameter    ap_ST_st6_fsm_5 = 16'b100000;
parameter    ap_ST_st7_fsm_6 = 16'b1000000;
parameter    ap_ST_st8_fsm_7 = 16'b10000000;
parameter    ap_ST_st9_fsm_8 = 16'b100000000;
parameter    ap_ST_st10_fsm_9 = 16'b1000000000;
parameter    ap_ST_st11_fsm_10 = 16'b10000000000;
parameter    ap_ST_st12_fsm_11 = 16'b100000000000;
parameter    ap_ST_st13_fsm_12 = 16'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 16'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 16'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv64_41 = 64'b1000001;
parameter    ap_const_lv64_40 = 64'b1000000;
parameter    ap_const_lv32_3E900 = 32'b111110100100000000;
parameter    ap_const_lv32_2EF00 = 32'b101110111100000000;
parameter    ap_const_lv32_1F500 = 32'b11111010100000000;
parameter    ap_const_lv32_3E8C0 = 32'b111110100011000000;
parameter    ap_const_lv32_2EEC0 = 32'b101110111011000000;
parameter    ap_const_lv32_1F4C0 = 32'b11111010011000000;
parameter    ap_const_lv32_3E880 = 32'b111110100010000000;
parameter    ap_const_lv32_2EE80 = 32'b101110111010000000;
parameter    ap_const_lv32_1F480 = 32'b11111010010000000;
parameter    ap_const_lv5_10 = 5'b10000;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] buff_address0;
output   buff_ce0;
output   buff_we0;
output  [31:0] buff_d0;
input  [31:0] buff_q0;
output  [6:0] buff_address1;
output   buff_ce1;
output   buff_we1;
output  [31:0] buff_d1;
input  [31:0] buff_q1;
input  [31:0] m;
input  [31:0] n;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[6:0] buff_address0;
reg buff_ce0;
reg buff_we0;
reg[31:0] buff_d0;
reg[6:0] buff_address1;
reg buff_ce1;
reg buff_we1;
reg[31:0] buff_d1;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm = 16'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_32;
reg   [8:0] word_address0;
reg    word_ce0;
reg    word_we0;
wire   [31:0] word_d0;
wire   [31:0] word_q0;
reg   [8:0] word_address1;
reg    word_ce1;
wire   [31:0] word_q1;
reg   [31:0] round = 32'b00000000000000000000000000000000;
reg   [31:0] nb = 32'b00000000000000000000000000000000;
wire   [3:0] out_enc_statemt_address0;
reg    out_enc_statemt_ce0;
wire   [7:0] out_enc_statemt_q0;
reg   [31:0] reg_233;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_84;
wire   [0:0] tmp_1_fu_261_p2;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_98;
reg   [31:0] type_reg_320;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_112;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_121;
wire    grp_encrypt_KeySchedule_fu_158_ap_done;
wire   [6:0] main_result_gep_fu_107_p3;
reg   [6:0] main_result_reg_336;
wire   [31:0] i_2_fu_267_p2;
reg   [31:0] i_2_reg_344;
wire   [4:0] i_3_fu_279_p2;
reg   [4:0] i_3_reg_352;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_140;
wire   [0:0] exitcond_fu_273_p2;
wire   [0:0] tmp_5_fu_299_p2;
reg   [0:0] tmp_5_reg_367;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_156;
wire    grp_encrypt_KeySchedule_fu_158_ap_start;
wire    grp_encrypt_KeySchedule_fu_158_ap_idle;
wire    grp_encrypt_KeySchedule_fu_158_ap_ready;
wire   [31:0] grp_encrypt_KeySchedule_fu_158_type_r;
wire   [6:0] grp_encrypt_KeySchedule_fu_158_key_address0;
wire    grp_encrypt_KeySchedule_fu_158_key_ce0;
wire   [31:0] grp_encrypt_KeySchedule_fu_158_key_q0;
wire   [8:0] grp_encrypt_KeySchedule_fu_158_word_address0;
wire    grp_encrypt_KeySchedule_fu_158_word_ce0;
wire    grp_encrypt_KeySchedule_fu_158_word_we0;
wire   [31:0] grp_encrypt_KeySchedule_fu_158_word_d0;
wire   [31:0] grp_encrypt_KeySchedule_fu_158_word_q0;
wire   [8:0] grp_encrypt_KeySchedule_fu_158_word_address1;
wire    grp_encrypt_KeySchedule_fu_158_word_ce1;
wire   [31:0] grp_encrypt_KeySchedule_fu_158_word_q1;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_done;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_idle;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_ready;
wire   [6:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address0;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce0;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we0;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d0;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_q0;
wire   [6:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address1;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce1;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we1;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d1;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_q1;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_nb;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_n;
wire   [8:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address0;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce0;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_word_q0;
wire   [8:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address1;
wire    grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce1;
wire   [31:0] grp_encrypt_MixColumn_AddRoundKey_fu_171_word_q1;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_ap_done;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_ap_idle;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_ap_ready;
wire   [6:0] grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address0;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce0;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we0;
wire   [31:0] grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d0;
wire   [31:0] grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_q0;
wire   [6:0] grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address1;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce1;
wire    grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we1;
wire   [31:0] grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d1;
wire   [31:0] grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_q1;
wire   [31:0] grp_encrypt_ByteSub_ShiftRow_fu_182_nb;
wire    grp_encrypt_AddRoundKey_fu_191_ap_start;
wire    grp_encrypt_AddRoundKey_fu_191_ap_done;
wire    grp_encrypt_AddRoundKey_fu_191_ap_idle;
wire    grp_encrypt_AddRoundKey_fu_191_ap_ready;
wire   [6:0] grp_encrypt_AddRoundKey_fu_191_statemt_address0;
wire    grp_encrypt_AddRoundKey_fu_191_statemt_ce0;
wire    grp_encrypt_AddRoundKey_fu_191_statemt_we0;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_statemt_d0;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_statemt_q0;
wire   [6:0] grp_encrypt_AddRoundKey_fu_191_statemt_address1;
wire    grp_encrypt_AddRoundKey_fu_191_statemt_ce1;
wire    grp_encrypt_AddRoundKey_fu_191_statemt_we1;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_statemt_d1;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_statemt_q1;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_type_r;
reg   [31:0] grp_encrypt_AddRoundKey_fu_191_n;
wire   [8:0] grp_encrypt_AddRoundKey_fu_191_word_address0;
wire    grp_encrypt_AddRoundKey_fu_191_word_ce0;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_word_q0;
wire   [8:0] grp_encrypt_AddRoundKey_fu_191_word_address1;
wire    grp_encrypt_AddRoundKey_fu_191_word_ce1;
wire   [31:0] grp_encrypt_AddRoundKey_fu_191_word_q1;
reg   [31:0] i_reg_135;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_247;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_257;
reg   [4:0] i_1_reg_147;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_270;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_278;
reg    grp_encrypt_KeySchedule_fu_158_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_287;
reg    grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start_ap_start_reg = 1'b0;
reg    grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_318;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_325;
reg    grp_encrypt_AddRoundKey_fu_191_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_341;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_348;
wire   [63:0] tmp_4_fu_285_p1;
wire   [31:0] tmp_7_fu_308_p2;
wire   [31:0] tmp_fu_255_p2;
wire   [31:0] out_enc_statemt_load_cast_fu_295_p1;
wire   [31:0] tmp_6_fu_305_p1;
reg   [15:0] ap_NS_fsm;


encrypt_word #(
    .DataWidth( 32 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
word_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( word_address0 ),
    .ce0( word_ce0 ),
    .we0( word_we0 ),
    .d0( word_d0 ),
    .q0( word_q0 ),
    .address1( word_address1 ),
    .ce1( word_ce1 ),
    .q1( word_q1 )
);

encrypt_out_enc_statemt #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
out_enc_statemt_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( out_enc_statemt_address0 ),
    .ce0( out_enc_statemt_ce0 ),
    .q0( out_enc_statemt_q0 )
);

encrypt_KeySchedule grp_encrypt_KeySchedule_fu_158(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_encrypt_KeySchedule_fu_158_ap_start ),
    .ap_done( grp_encrypt_KeySchedule_fu_158_ap_done ),
    .ap_idle( grp_encrypt_KeySchedule_fu_158_ap_idle ),
    .ap_ready( grp_encrypt_KeySchedule_fu_158_ap_ready ),
    .type_r( grp_encrypt_KeySchedule_fu_158_type_r ),
    .key_address0( grp_encrypt_KeySchedule_fu_158_key_address0 ),
    .key_ce0( grp_encrypt_KeySchedule_fu_158_key_ce0 ),
    .key_q0( grp_encrypt_KeySchedule_fu_158_key_q0 ),
    .word_address0( grp_encrypt_KeySchedule_fu_158_word_address0 ),
    .word_ce0( grp_encrypt_KeySchedule_fu_158_word_ce0 ),
    .word_we0( grp_encrypt_KeySchedule_fu_158_word_we0 ),
    .word_d0( grp_encrypt_KeySchedule_fu_158_word_d0 ),
    .word_q0( grp_encrypt_KeySchedule_fu_158_word_q0 ),
    .word_address1( grp_encrypt_KeySchedule_fu_158_word_address1 ),
    .word_ce1( grp_encrypt_KeySchedule_fu_158_word_ce1 ),
    .word_q1( grp_encrypt_KeySchedule_fu_158_word_q1 )
);

encrypt_MixColumn_AddRoundKey grp_encrypt_MixColumn_AddRoundKey_fu_171(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start ),
    .ap_done( grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_done ),
    .ap_idle( grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_idle ),
    .ap_ready( grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_ready ),
    .statemt_address0( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address0 ),
    .statemt_ce0( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce0 ),
    .statemt_we0( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we0 ),
    .statemt_d0( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d0 ),
    .statemt_q0( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_q0 ),
    .statemt_address1( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address1 ),
    .statemt_ce1( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce1 ),
    .statemt_we1( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we1 ),
    .statemt_d1( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d1 ),
    .statemt_q1( grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_q1 ),
    .nb( grp_encrypt_MixColumn_AddRoundKey_fu_171_nb ),
    .n( grp_encrypt_MixColumn_AddRoundKey_fu_171_n ),
    .word_address0( grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address0 ),
    .word_ce0( grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce0 ),
    .word_q0( grp_encrypt_MixColumn_AddRoundKey_fu_171_word_q0 ),
    .word_address1( grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address1 ),
    .word_ce1( grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce1 ),
    .word_q1( grp_encrypt_MixColumn_AddRoundKey_fu_171_word_q1 )
);

encrypt_ByteSub_ShiftRow grp_encrypt_ByteSub_ShiftRow_fu_182(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start ),
    .ap_done( grp_encrypt_ByteSub_ShiftRow_fu_182_ap_done ),
    .ap_idle( grp_encrypt_ByteSub_ShiftRow_fu_182_ap_idle ),
    .ap_ready( grp_encrypt_ByteSub_ShiftRow_fu_182_ap_ready ),
    .statemt_address0( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address0 ),
    .statemt_ce0( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce0 ),
    .statemt_we0( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we0 ),
    .statemt_d0( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d0 ),
    .statemt_q0( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_q0 ),
    .statemt_address1( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address1 ),
    .statemt_ce1( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce1 ),
    .statemt_we1( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we1 ),
    .statemt_d1( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d1 ),
    .statemt_q1( grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_q1 ),
    .nb( grp_encrypt_ByteSub_ShiftRow_fu_182_nb )
);

encrypt_AddRoundKey grp_encrypt_AddRoundKey_fu_191(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_encrypt_AddRoundKey_fu_191_ap_start ),
    .ap_done( grp_encrypt_AddRoundKey_fu_191_ap_done ),
    .ap_idle( grp_encrypt_AddRoundKey_fu_191_ap_idle ),
    .ap_ready( grp_encrypt_AddRoundKey_fu_191_ap_ready ),
    .statemt_address0( grp_encrypt_AddRoundKey_fu_191_statemt_address0 ),
    .statemt_ce0( grp_encrypt_AddRoundKey_fu_191_statemt_ce0 ),
    .statemt_we0( grp_encrypt_AddRoundKey_fu_191_statemt_we0 ),
    .statemt_d0( grp_encrypt_AddRoundKey_fu_191_statemt_d0 ),
    .statemt_q0( grp_encrypt_AddRoundKey_fu_191_statemt_q0 ),
    .statemt_address1( grp_encrypt_AddRoundKey_fu_191_statemt_address1 ),
    .statemt_ce1( grp_encrypt_AddRoundKey_fu_191_statemt_ce1 ),
    .statemt_we1( grp_encrypt_AddRoundKey_fu_191_statemt_we1 ),
    .statemt_d1( grp_encrypt_AddRoundKey_fu_191_statemt_d1 ),
    .statemt_q1( grp_encrypt_AddRoundKey_fu_191_statemt_q1 ),
    .type_r( grp_encrypt_AddRoundKey_fu_191_type_r ),
    .n( grp_encrypt_AddRoundKey_fu_191_n ),
    .word_address0( grp_encrypt_AddRoundKey_fu_191_word_address0 ),
    .word_ce0( grp_encrypt_AddRoundKey_fu_191_word_ce0 ),
    .word_q0( grp_encrypt_AddRoundKey_fu_191_word_q0 ),
    .word_address1( grp_encrypt_AddRoundKey_fu_191_word_address1 ),
    .word_ce1( grp_encrypt_AddRoundKey_fu_191_word_ce1 ),
    .word_q1( grp_encrypt_AddRoundKey_fu_191_word_q1 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_encrypt_AddRoundKey_fu_191_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_encrypt_AddRoundKey_fu_191_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11))) begin
            grp_encrypt_AddRoundKey_fu_191_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_encrypt_AddRoundKey_fu_191_ap_ready)) begin
            grp_encrypt_AddRoundKey_fu_191_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (tmp_1_fu_261_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(tmp_1_fu_261_p2 == ap_const_lv1_0)))) begin
            grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_encrypt_ByteSub_ShiftRow_fu_182_ap_ready)) begin
            grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_encrypt_KeySchedule_fu_158_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_encrypt_KeySchedule_fu_158_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
            grp_encrypt_KeySchedule_fu_158_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_encrypt_KeySchedule_fu_158_ap_ready)) begin
            grp_encrypt_KeySchedule_fu_158_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin : ap_ret_grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
            grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_ready)) begin
            grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        i_1_reg_147 <= i_3_reg_352;
    end else if ((~(ap_const_logic_0 == grp_encrypt_AddRoundKey_fu_191_ap_done) & (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        i_1_reg_147 <= ap_const_lv5_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) & ~(ap_const_logic_0 == grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_done))) begin
        i_reg_135 <= i_2_reg_344;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) & ~(ap_const_logic_0 == grp_encrypt_AddRoundKey_fu_191_ap_done))) begin
        i_reg_135 <= ap_const_lv32_1;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_3E880)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_2EE80)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_1F480)))) begin
        nb[1] <= 1'b0;
        nb[2] <= 1'b1;
        nb[3] <= 1'b0;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_3E8C0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & ((type_reg_320 == ap_const_lv32_2EEC0) | (type_reg_320 == ap_const_lv32_1F4C0))))) begin
        nb[1] <= 1'b1;
        nb[2] <= 1'b1;
        nb[3] <= 1'b0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & ((type_reg_320 == ap_const_lv32_3E900) | (type_reg_320 == ap_const_lv32_2EF00) | (type_reg_320 == ap_const_lv32_1F500)))) begin
        nb[1] <= 1'b0;
        nb[2] <= 1'b0;
        nb[3] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_1F480))) begin
        round[1] <= 1'b0;
        round[2] <= 1'b0;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & ((type_reg_320 == ap_const_lv32_2EEC0) | (type_reg_320 == ap_const_lv32_1F4C0))) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_2EE80)))) begin
        round[1] <= 1'b1;
        round[2] <= 1'b0;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & ((type_reg_320 == ap_const_lv32_3E900) | (type_reg_320 == ap_const_lv32_2EF00) | (type_reg_320 == ap_const_lv32_1F500))) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_3E8C0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done) & (type_reg_320 == ap_const_lv32_3E880)))) begin
        round[1] <= 1'b0;
        round[2] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        i_2_reg_344 <= i_2_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        i_3_reg_352 <= i_3_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & (tmp_1_fu_261_p2 == ap_const_lv1_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) & ~(tmp_1_fu_261_p2 == ap_const_lv1_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8))) begin
        reg_233[3 : 1] <= nb[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        tmp_5_reg_367 <= tmp_5_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        type_reg_320 <= buff_q0;
    end
end

always @ (ap_sig_cseq_ST_st14_fsm_13 or exitcond_fu_273_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_lv1_0 == exitcond_fu_273_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st14_fsm_13 or exitcond_fu_273_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) & ~(ap_const_lv1_0 == exitcond_fu_273_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_257) begin
    if (ap_sig_bdd_257) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_325) begin
    if (ap_sig_bdd_325) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_348) begin
    if (ap_sig_bdd_348) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_270) begin
    if (ap_sig_bdd_270) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_140) begin
    if (ap_sig_bdd_140) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_156) begin
    if (ap_sig_bdd_156) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_278) begin
    if (ap_sig_bdd_278) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_32) begin
    if (ap_sig_bdd_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_112) begin
    if (ap_sig_bdd_112) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_287) begin
    if (ap_sig_bdd_287) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_121) begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_341) begin
    if (ap_sig_bdd_341) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_247) begin
    if (ap_sig_bdd_247) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_84) begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_318) begin
    if (ap_sig_bdd_318) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_98) begin
    if (ap_sig_bdd_98) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st4_fsm_3 or main_result_reg_336 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st15_fsm_14 or grp_encrypt_KeySchedule_fu_158_key_address0 or grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address0 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address0 or grp_encrypt_AddRoundKey_fu_191_statemt_address0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10 or tmp_4_fu_285_p1) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        buff_address0 = main_result_reg_336;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        buff_address0 = tmp_4_fu_285_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        buff_address0 = ap_const_lv64_41;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_address0 = grp_encrypt_AddRoundKey_fu_191_statemt_address0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_address0 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_address0 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        buff_address0 = grp_encrypt_KeySchedule_fu_158_key_address0;
    end else begin
        buff_address0 = 'bx;
    end
end

always @ (grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address1 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address1 or grp_encrypt_AddRoundKey_fu_191_statemt_address1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_address1 = grp_encrypt_AddRoundKey_fu_191_statemt_address1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_address1 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_address1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_address1 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_address1;
    end else begin
        buff_address1 = 'bx;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st15_fsm_14 or grp_encrypt_KeySchedule_fu_158_key_ce0 or grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce0 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce0 or grp_encrypt_AddRoundKey_fu_191_statemt_ce0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10) begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        buff_ce0 = ap_const_logic_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_ce0 = grp_encrypt_AddRoundKey_fu_191_statemt_ce0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_ce0 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_ce0 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        buff_ce0 = grp_encrypt_KeySchedule_fu_158_key_ce0;
    end else begin
        buff_ce0 = ap_const_logic_0;
    end
end

always @ (grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce1 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce1 or grp_encrypt_AddRoundKey_fu_191_statemt_ce1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_ce1 = grp_encrypt_AddRoundKey_fu_191_statemt_ce1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_ce1 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_ce1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_ce1 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_ce1;
    end else begin
        buff_ce1 = ap_const_logic_0;
    end
end

always @ (grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d0 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d0 or grp_encrypt_AddRoundKey_fu_191_statemt_d0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10 or tmp_7_fu_308_p2) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        buff_d0 = tmp_7_fu_308_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_d0 = grp_encrypt_AddRoundKey_fu_191_statemt_d0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_d0 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_d0 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d0;
    end else begin
        buff_d0 = 'bx;
    end
end

always @ (grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d1 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d1 or grp_encrypt_AddRoundKey_fu_191_statemt_d1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_d1 = grp_encrypt_AddRoundKey_fu_191_statemt_d1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_d1 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_d1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_d1 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_d1;
    end else begin
        buff_d1 = 'bx;
    end
end

always @ (grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we0 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we0 or grp_encrypt_AddRoundKey_fu_191_statemt_we0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st16_fsm_15 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        buff_we0 = ap_const_logic_1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_we0 = grp_encrypt_AddRoundKey_fu_191_statemt_we0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_we0 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_we0 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we0;
    end else begin
        buff_we0 = ap_const_logic_0;
    end
end

always @ (grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we1 or grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we1 or grp_encrypt_AddRoundKey_fu_191_statemt_we1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st11_fsm_10) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        buff_we1 = grp_encrypt_AddRoundKey_fu_191_statemt_we1;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        buff_we1 = grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_we1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        buff_we1 = grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_we1;
    end else begin
        buff_we1 = ap_const_logic_0;
    end
end

always @ (i_reg_135 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st13_fsm_12) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        grp_encrypt_AddRoundKey_fu_191_n = i_reg_135;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_encrypt_AddRoundKey_fu_191_n = ap_const_lv32_0;
    end else begin
        grp_encrypt_AddRoundKey_fu_191_n = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st14_fsm_13) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        out_enc_statemt_ce0 = ap_const_logic_1;
    end else begin
        out_enc_statemt_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or grp_encrypt_KeySchedule_fu_158_word_address0 or grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address0 or grp_encrypt_AddRoundKey_fu_191_word_address0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        word_address0 = grp_encrypt_AddRoundKey_fu_191_word_address0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        word_address0 = grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        word_address0 = grp_encrypt_KeySchedule_fu_158_word_address0;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or grp_encrypt_KeySchedule_fu_158_word_address1 or grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address1 or grp_encrypt_AddRoundKey_fu_191_word_address1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        word_address1 = grp_encrypt_AddRoundKey_fu_191_word_address1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        word_address1 = grp_encrypt_MixColumn_AddRoundKey_fu_171_word_address1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        word_address1 = grp_encrypt_KeySchedule_fu_158_word_address1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or grp_encrypt_KeySchedule_fu_158_word_ce0 or grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce0 or grp_encrypt_AddRoundKey_fu_191_word_ce0 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        word_ce0 = grp_encrypt_AddRoundKey_fu_191_word_ce0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        word_ce0 = grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        word_ce0 = grp_encrypt_KeySchedule_fu_158_word_ce0;
    end else begin
        word_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or grp_encrypt_KeySchedule_fu_158_word_ce1 or grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce1 or grp_encrypt_AddRoundKey_fu_191_word_ce1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st13_fsm_12) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12))) begin
        word_ce1 = grp_encrypt_AddRoundKey_fu_191_word_ce1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        word_ce1 = grp_encrypt_MixColumn_AddRoundKey_fu_171_word_ce1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        word_ce1 = grp_encrypt_KeySchedule_fu_158_word_ce1;
    end else begin
        word_ce1 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3 or grp_encrypt_KeySchedule_fu_158_word_we0) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        word_we0 = grp_encrypt_KeySchedule_fu_158_word_we0;
    end else begin
        word_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_1_fu_261_p2 or grp_encrypt_KeySchedule_fu_158_ap_done or exitcond_fu_273_p2 or grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_done or grp_encrypt_ByteSub_ShiftRow_fu_182_ap_done or grp_encrypt_AddRoundKey_fu_191_ap_done) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_logic_0 == grp_encrypt_KeySchedule_fu_158_ap_done)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(ap_const_logic_0 == grp_encrypt_AddRoundKey_fu_191_ap_done)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(tmp_1_fu_261_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(ap_const_logic_0 == grp_encrypt_ByteSub_ShiftRow_fu_182_ap_done)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_logic_0 == grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_done)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            if (~(ap_const_logic_0 == grp_encrypt_ByteSub_ShiftRow_fu_182_ap_done)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            if (~(ap_const_logic_0 == grp_encrypt_AddRoundKey_fu_191_ap_done)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        end
        ap_ST_st14_fsm_13 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_273_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign ap_return = (n + m);


always @ (ap_CS_fsm) begin
    ap_sig_bdd_112 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_140 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_156 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_247 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_257 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_270 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_278 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_287 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_318 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_32 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_325 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_341 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_348 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_98 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

assign exitcond_fu_273_p2 = (i_1_reg_147 == ap_const_lv5_10? 1'b1: 1'b0);

assign grp_encrypt_AddRoundKey_fu_191_ap_start = grp_encrypt_AddRoundKey_fu_191_ap_start_ap_start_reg;

assign grp_encrypt_AddRoundKey_fu_191_statemt_q0 = buff_q0;

assign grp_encrypt_AddRoundKey_fu_191_statemt_q1 = buff_q1;

assign grp_encrypt_AddRoundKey_fu_191_type_r = type_reg_320;

assign grp_encrypt_AddRoundKey_fu_191_word_q0 = word_q0;

assign grp_encrypt_AddRoundKey_fu_191_word_q1 = word_q1;

assign grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start = grp_encrypt_ByteSub_ShiftRow_fu_182_ap_start_ap_start_reg;

assign grp_encrypt_ByteSub_ShiftRow_fu_182_nb = reg_233;

assign grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_q0 = buff_q0;

assign grp_encrypt_ByteSub_ShiftRow_fu_182_statemt_q1 = buff_q1;

assign grp_encrypt_KeySchedule_fu_158_ap_start = grp_encrypt_KeySchedule_fu_158_ap_start_ap_start_reg;

assign grp_encrypt_KeySchedule_fu_158_key_q0 = buff_q0;

assign grp_encrypt_KeySchedule_fu_158_type_r = type_reg_320;

assign grp_encrypt_KeySchedule_fu_158_word_q0 = word_q0;

assign grp_encrypt_KeySchedule_fu_158_word_q1 = word_q1;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start = grp_encrypt_MixColumn_AddRoundKey_fu_171_ap_start_ap_start_reg;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_n = i_reg_135;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_nb = reg_233;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_q0 = buff_q0;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_statemt_q1 = buff_q1;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_word_q0 = word_q0;

assign grp_encrypt_MixColumn_AddRoundKey_fu_171_word_q1 = word_q1;

assign i_2_fu_267_p2 = (i_reg_135 + ap_const_lv32_1);

assign i_3_fu_279_p2 = (i_1_reg_147 + ap_const_lv5_1);

assign main_result_gep_fu_107_p3 = ap_const_lv64_40;

assign out_enc_statemt_address0 = tmp_4_fu_285_p1;

assign out_enc_statemt_load_cast_fu_295_p1 = out_enc_statemt_q0;

assign tmp_1_fu_261_p2 = ($signed(i_reg_135) > $signed(tmp_fu_255_p2)? 1'b1: 1'b0);

assign tmp_4_fu_285_p1 = i_1_reg_147;

assign tmp_5_fu_299_p2 = (buff_q0 != out_enc_statemt_load_cast_fu_295_p1? 1'b1: 1'b0);

assign tmp_6_fu_305_p1 = tmp_5_reg_367;

assign tmp_7_fu_308_p2 = (buff_q0 + tmp_6_fu_305_p1);

assign tmp_fu_255_p2 = (round + ap_const_lv32_9);

assign word_d0 = grp_encrypt_KeySchedule_fu_158_word_d0;
always @ (posedge ap_clk) begin
    round[0] <= 1'b0;
    round[31:3] <= 29'b00000000000000000000000000000;
    nb[0] <= 1'b0;
    nb[31:4] <= 28'b0000000000000000000000000000;
    reg_233[0] <= 1'b0;
    reg_233[31:4] <= 28'b0000000000000000000000000000;
    main_result_reg_336[6:0] <= 7'b1000000;
end



endmodule //encrypt

