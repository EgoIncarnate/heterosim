// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decode_start_WriteOneBlock (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        store_offset,
        tmp_12,
        out_buf_address0,
        out_buf_ce0,
        out_buf_we0,
        out_buf_d0,
        tmp_122,
        width,
        height,
        voffs,
        hoffs,
        rgb_buf_0_0,
        rgb_buf_0_1,
        rgb_buf_0_2,
        rgb_buf_0_3,
        rgb_buf_0_4,
        rgb_buf_0_5,
        rgb_buf_0_6,
        rgb_buf_0_7,
        rgb_buf_0_8,
        rgb_buf_0_9,
        rgb_buf_0_10,
        rgb_buf_0_11,
        rgb_buf_0_12,
        rgb_buf_0_13,
        rgb_buf_0_14,
        rgb_buf_0_15,
        rgb_buf_0_16,
        rgb_buf_0_17,
        rgb_buf_0_18,
        rgb_buf_0_19,
        rgb_buf_0_20,
        rgb_buf_0_21,
        rgb_buf_0_22,
        rgb_buf_0_23,
        rgb_buf_0_24,
        rgb_buf_0_25,
        rgb_buf_0_26,
        rgb_buf_0_27,
        rgb_buf_0_28,
        rgb_buf_0_29,
        rgb_buf_0_30,
        rgb_buf_0_31,
        rgb_buf_0_32,
        rgb_buf_0_33,
        rgb_buf_0_34,
        rgb_buf_0_35,
        rgb_buf_0_36,
        rgb_buf_0_37,
        rgb_buf_0_38,
        rgb_buf_0_39,
        rgb_buf_0_40,
        rgb_buf_0_41,
        rgb_buf_0_42,
        rgb_buf_0_43,
        rgb_buf_0_44,
        rgb_buf_0_45,
        rgb_buf_0_46,
        rgb_buf_0_47,
        rgb_buf_0_48,
        rgb_buf_0_49,
        rgb_buf_0_50,
        rgb_buf_0_51,
        rgb_buf_0_52,
        rgb_buf_0_53,
        rgb_buf_0_54,
        rgb_buf_0_55,
        rgb_buf_0_56,
        rgb_buf_0_57,
        rgb_buf_0_58,
        rgb_buf_0_59,
        rgb_buf_0_60,
        rgb_buf_0_61,
        rgb_buf_0_62,
        rgb_buf_0_63,
        rgb_buf_1_0,
        rgb_buf_1_1,
        rgb_buf_1_2,
        rgb_buf_1_3,
        rgb_buf_1_4,
        rgb_buf_1_5,
        rgb_buf_1_6,
        rgb_buf_1_7,
        rgb_buf_1_8,
        rgb_buf_1_9,
        rgb_buf_1_10,
        rgb_buf_1_11,
        rgb_buf_1_12,
        rgb_buf_1_13,
        rgb_buf_1_14,
        rgb_buf_1_15,
        rgb_buf_1_16,
        rgb_buf_1_17,
        rgb_buf_1_18,
        rgb_buf_1_19,
        rgb_buf_1_20,
        rgb_buf_1_21,
        rgb_buf_1_22,
        rgb_buf_1_23,
        rgb_buf_1_24,
        rgb_buf_1_25,
        rgb_buf_1_26,
        rgb_buf_1_27,
        rgb_buf_1_28,
        rgb_buf_1_29,
        rgb_buf_1_30,
        rgb_buf_1_31,
        rgb_buf_1_32,
        rgb_buf_1_33,
        rgb_buf_1_34,
        rgb_buf_1_35,
        rgb_buf_1_36,
        rgb_buf_1_37,
        rgb_buf_1_38,
        rgb_buf_1_39,
        rgb_buf_1_40,
        rgb_buf_1_41,
        rgb_buf_1_42,
        rgb_buf_1_43,
        rgb_buf_1_44,
        rgb_buf_1_45,
        rgb_buf_1_46,
        rgb_buf_1_47,
        rgb_buf_1_48,
        rgb_buf_1_49,
        rgb_buf_1_50,
        rgb_buf_1_51,
        rgb_buf_1_52,
        rgb_buf_1_53,
        rgb_buf_1_54,
        rgb_buf_1_55,
        rgb_buf_1_56,
        rgb_buf_1_57,
        rgb_buf_1_58,
        rgb_buf_1_59,
        rgb_buf_1_60,
        rgb_buf_1_61,
        rgb_buf_1_62,
        rgb_buf_1_63,
        rgb_buf_2_0,
        rgb_buf_2_1,
        rgb_buf_2_2,
        rgb_buf_2_3,
        rgb_buf_2_4,
        rgb_buf_2_5,
        rgb_buf_2_6,
        rgb_buf_2_7,
        rgb_buf_2_8,
        rgb_buf_2_9,
        rgb_buf_2_10,
        rgb_buf_2_11,
        rgb_buf_2_12,
        rgb_buf_2_13,
        rgb_buf_2_14,
        rgb_buf_2_15,
        rgb_buf_2_16,
        rgb_buf_2_17,
        rgb_buf_2_18,
        rgb_buf_2_19,
        rgb_buf_2_20,
        rgb_buf_2_21,
        rgb_buf_2_22,
        rgb_buf_2_23,
        rgb_buf_2_24,
        rgb_buf_2_25,
        rgb_buf_2_26,
        rgb_buf_2_27,
        rgb_buf_2_28,
        rgb_buf_2_29,
        rgb_buf_2_30,
        rgb_buf_2_31,
        rgb_buf_2_32,
        rgb_buf_2_33,
        rgb_buf_2_34,
        rgb_buf_2_35,
        rgb_buf_2_36,
        rgb_buf_2_37,
        rgb_buf_2_38,
        rgb_buf_2_39,
        rgb_buf_2_40,
        rgb_buf_2_41,
        rgb_buf_2_42,
        rgb_buf_2_43,
        rgb_buf_2_44,
        rgb_buf_2_45,
        rgb_buf_2_46,
        rgb_buf_2_47,
        rgb_buf_2_48,
        rgb_buf_2_49,
        rgb_buf_2_50,
        rgb_buf_2_51,
        rgb_buf_2_52,
        rgb_buf_2_53,
        rgb_buf_2_54,
        rgb_buf_2_55,
        rgb_buf_2_56,
        rgb_buf_2_57,
        rgb_buf_2_58,
        rgb_buf_2_59,
        rgb_buf_2_60,
        rgb_buf_2_61,
        rgb_buf_2_62,
        rgb_buf_2_63
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b1;
parameter    ap_ST_st2_fsm_1 = 6'b10;
parameter    ap_ST_st3_fsm_2 = 6'b100;
parameter    ap_ST_st4_fsm_3 = 6'b1000;
parameter    ap_ST_st5_fsm_4 = 6'b10000;
parameter    ap_ST_st6_fsm_5 = 6'b100000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv15_14BE = 15'b1010010111110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv7_1F = 7'b11111;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv32_7F = 32'b1111111;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv128_lc_5 = 128'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] store_offset;
input  [1:0] tmp_12;
output  [13:0] out_buf_address0;
output   out_buf_ce0;
output   out_buf_we0;
output  [7:0] out_buf_d0;
input  [1:0] tmp_122;
input  [15:0] width;
input  [15:0] height;
input  [31:0] voffs;
input  [31:0] hoffs;
input  [127:0] rgb_buf_0_0;
input  [127:0] rgb_buf_0_1;
input  [127:0] rgb_buf_0_2;
input  [127:0] rgb_buf_0_3;
input  [127:0] rgb_buf_0_4;
input  [127:0] rgb_buf_0_5;
input  [127:0] rgb_buf_0_6;
input  [127:0] rgb_buf_0_7;
input  [127:0] rgb_buf_0_8;
input  [127:0] rgb_buf_0_9;
input  [127:0] rgb_buf_0_10;
input  [127:0] rgb_buf_0_11;
input  [127:0] rgb_buf_0_12;
input  [127:0] rgb_buf_0_13;
input  [127:0] rgb_buf_0_14;
input  [127:0] rgb_buf_0_15;
input  [127:0] rgb_buf_0_16;
input  [127:0] rgb_buf_0_17;
input  [127:0] rgb_buf_0_18;
input  [127:0] rgb_buf_0_19;
input  [127:0] rgb_buf_0_20;
input  [127:0] rgb_buf_0_21;
input  [127:0] rgb_buf_0_22;
input  [127:0] rgb_buf_0_23;
input  [127:0] rgb_buf_0_24;
input  [127:0] rgb_buf_0_25;
input  [127:0] rgb_buf_0_26;
input  [127:0] rgb_buf_0_27;
input  [127:0] rgb_buf_0_28;
input  [127:0] rgb_buf_0_29;
input  [127:0] rgb_buf_0_30;
input  [127:0] rgb_buf_0_31;
input  [127:0] rgb_buf_0_32;
input  [127:0] rgb_buf_0_33;
input  [127:0] rgb_buf_0_34;
input  [127:0] rgb_buf_0_35;
input  [127:0] rgb_buf_0_36;
input  [127:0] rgb_buf_0_37;
input  [127:0] rgb_buf_0_38;
input  [127:0] rgb_buf_0_39;
input  [127:0] rgb_buf_0_40;
input  [127:0] rgb_buf_0_41;
input  [127:0] rgb_buf_0_42;
input  [127:0] rgb_buf_0_43;
input  [127:0] rgb_buf_0_44;
input  [127:0] rgb_buf_0_45;
input  [127:0] rgb_buf_0_46;
input  [127:0] rgb_buf_0_47;
input  [127:0] rgb_buf_0_48;
input  [127:0] rgb_buf_0_49;
input  [127:0] rgb_buf_0_50;
input  [127:0] rgb_buf_0_51;
input  [127:0] rgb_buf_0_52;
input  [127:0] rgb_buf_0_53;
input  [127:0] rgb_buf_0_54;
input  [127:0] rgb_buf_0_55;
input  [127:0] rgb_buf_0_56;
input  [127:0] rgb_buf_0_57;
input  [127:0] rgb_buf_0_58;
input  [127:0] rgb_buf_0_59;
input  [127:0] rgb_buf_0_60;
input  [127:0] rgb_buf_0_61;
input  [127:0] rgb_buf_0_62;
input  [127:0] rgb_buf_0_63;
input  [127:0] rgb_buf_1_0;
input  [127:0] rgb_buf_1_1;
input  [127:0] rgb_buf_1_2;
input  [127:0] rgb_buf_1_3;
input  [127:0] rgb_buf_1_4;
input  [127:0] rgb_buf_1_5;
input  [127:0] rgb_buf_1_6;
input  [127:0] rgb_buf_1_7;
input  [127:0] rgb_buf_1_8;
input  [127:0] rgb_buf_1_9;
input  [127:0] rgb_buf_1_10;
input  [127:0] rgb_buf_1_11;
input  [127:0] rgb_buf_1_12;
input  [127:0] rgb_buf_1_13;
input  [127:0] rgb_buf_1_14;
input  [127:0] rgb_buf_1_15;
input  [127:0] rgb_buf_1_16;
input  [127:0] rgb_buf_1_17;
input  [127:0] rgb_buf_1_18;
input  [127:0] rgb_buf_1_19;
input  [127:0] rgb_buf_1_20;
input  [127:0] rgb_buf_1_21;
input  [127:0] rgb_buf_1_22;
input  [127:0] rgb_buf_1_23;
input  [127:0] rgb_buf_1_24;
input  [127:0] rgb_buf_1_25;
input  [127:0] rgb_buf_1_26;
input  [127:0] rgb_buf_1_27;
input  [127:0] rgb_buf_1_28;
input  [127:0] rgb_buf_1_29;
input  [127:0] rgb_buf_1_30;
input  [127:0] rgb_buf_1_31;
input  [127:0] rgb_buf_1_32;
input  [127:0] rgb_buf_1_33;
input  [127:0] rgb_buf_1_34;
input  [127:0] rgb_buf_1_35;
input  [127:0] rgb_buf_1_36;
input  [127:0] rgb_buf_1_37;
input  [127:0] rgb_buf_1_38;
input  [127:0] rgb_buf_1_39;
input  [127:0] rgb_buf_1_40;
input  [127:0] rgb_buf_1_41;
input  [127:0] rgb_buf_1_42;
input  [127:0] rgb_buf_1_43;
input  [127:0] rgb_buf_1_44;
input  [127:0] rgb_buf_1_45;
input  [127:0] rgb_buf_1_46;
input  [127:0] rgb_buf_1_47;
input  [127:0] rgb_buf_1_48;
input  [127:0] rgb_buf_1_49;
input  [127:0] rgb_buf_1_50;
input  [127:0] rgb_buf_1_51;
input  [127:0] rgb_buf_1_52;
input  [127:0] rgb_buf_1_53;
input  [127:0] rgb_buf_1_54;
input  [127:0] rgb_buf_1_55;
input  [127:0] rgb_buf_1_56;
input  [127:0] rgb_buf_1_57;
input  [127:0] rgb_buf_1_58;
input  [127:0] rgb_buf_1_59;
input  [127:0] rgb_buf_1_60;
input  [127:0] rgb_buf_1_61;
input  [127:0] rgb_buf_1_62;
input  [127:0] rgb_buf_1_63;
input  [127:0] rgb_buf_2_0;
input  [127:0] rgb_buf_2_1;
input  [127:0] rgb_buf_2_2;
input  [127:0] rgb_buf_2_3;
input  [127:0] rgb_buf_2_4;
input  [127:0] rgb_buf_2_5;
input  [127:0] rgb_buf_2_6;
input  [127:0] rgb_buf_2_7;
input  [127:0] rgb_buf_2_8;
input  [127:0] rgb_buf_2_9;
input  [127:0] rgb_buf_2_10;
input  [127:0] rgb_buf_2_11;
input  [127:0] rgb_buf_2_12;
input  [127:0] rgb_buf_2_13;
input  [127:0] rgb_buf_2_14;
input  [127:0] rgb_buf_2_15;
input  [127:0] rgb_buf_2_16;
input  [127:0] rgb_buf_2_17;
input  [127:0] rgb_buf_2_18;
input  [127:0] rgb_buf_2_19;
input  [127:0] rgb_buf_2_20;
input  [127:0] rgb_buf_2_21;
input  [127:0] rgb_buf_2_22;
input  [127:0] rgb_buf_2_23;
input  [127:0] rgb_buf_2_24;
input  [127:0] rgb_buf_2_25;
input  [127:0] rgb_buf_2_26;
input  [127:0] rgb_buf_2_27;
input  [127:0] rgb_buf_2_28;
input  [127:0] rgb_buf_2_29;
input  [127:0] rgb_buf_2_30;
input  [127:0] rgb_buf_2_31;
input  [127:0] rgb_buf_2_32;
input  [127:0] rgb_buf_2_33;
input  [127:0] rgb_buf_2_34;
input  [127:0] rgb_buf_2_35;
input  [127:0] rgb_buf_2_36;
input  [127:0] rgb_buf_2_37;
input  [127:0] rgb_buf_2_38;
input  [127:0] rgb_buf_2_39;
input  [127:0] rgb_buf_2_40;
input  [127:0] rgb_buf_2_41;
input  [127:0] rgb_buf_2_42;
input  [127:0] rgb_buf_2_43;
input  [127:0] rgb_buf_2_44;
input  [127:0] rgb_buf_2_45;
input  [127:0] rgb_buf_2_46;
input  [127:0] rgb_buf_2_47;
input  [127:0] rgb_buf_2_48;
input  [127:0] rgb_buf_2_49;
input  [127:0] rgb_buf_2_50;
input  [127:0] rgb_buf_2_51;
input  [127:0] rgb_buf_2_52;
input  [127:0] rgb_buf_2_53;
input  [127:0] rgb_buf_2_54;
input  [127:0] rgb_buf_2_55;
input  [127:0] rgb_buf_2_56;
input  [127:0] rgb_buf_2_57;
input  [127:0] rgb_buf_2_58;
input  [127:0] rgb_buf_2_59;
input  [127:0] rgb_buf_2_60;
input  [127:0] rgb_buf_2_61;
input  [127:0] rgb_buf_2_62;
input  [127:0] rgb_buf_2_63;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_buf_ce0;
reg out_buf_we0;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm = 6'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_24;
wire  signed [31:0] height_cast_fu_550_p1;
reg  signed [31:0] height_cast_reg_1945;
wire  signed [31:0] width_cast_fu_554_p1;
reg  signed [31:0] width_cast_reg_1950;
wire   [14:0] tmp_1821_fu_562_p2;
reg   [14:0] tmp_1821_reg_1956;
wire   [31:0] tmp_fu_568_p2;
reg   [31:0] tmp_reg_1961;
wire   [31:0] tmp_s_fu_574_p2;
reg   [31:0] tmp_s_reg_1966;
wire   [6:0] tmp_1022_fu_584_p3;
reg   [6:0] tmp_1022_reg_1971;
wire   [6:0] tmp_1023_fu_592_p2;
reg   [6:0] tmp_1023_reg_1977;
wire   [31:0] grp_fu_608_p2;
reg   [31:0] diff_reg_1989;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_265;
wire   [63:0] store_addr_sum_fu_613_p2;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_274;
wire   [63:0] p_rec_fu_624_p2;
reg   [63:0] p_rec_reg_2002;
wire   [7:0] tmp_8494_fu_1842_p3;
reg   [7:0] tmp_8494_reg_2010;
wire   [0:0] tmp_19_fu_619_p2;
wire   [0:0] tmp_20_fu_630_p2;
wire   [127:0] tmp_8495_fu_1850_p3;
reg   [127:0] tmp_8495_reg_2015;
wire   [7:0] tmp_8496_fu_1858_p3;
reg   [7:0] tmp_8496_reg_2020;
wire   [14:0] tmp_1822_fu_1875_p2;
reg   [14:0] tmp_1822_reg_2025;
wire   [31:0] e_1_fu_1880_p2;
reg   [31:0] e_1_reg_2030;
wire   [31:0] i_1_fu_1886_p2;
reg  signed [31:0] i_reg_508;
reg   [63:0] p_0_idx_reg_518;
reg   [31:0] e_reg_530;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_313;
reg   [63:0] p_1_rec_reg_539;
wire  signed [63:0] tmp_1823_cast_fu_1926_p1;
wire   [1:0] tmp_1821_fu_562_p1;
wire   [1:0] tmp_8485_fu_580_p1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_544;
wire  signed [15:0] grp_fu_608_p1;
wire   [5:0] tmp_8486_fu_635_p1;
wire   [7:0] tmp_1577_fu_1414_p193;
wire   [127:0] tmp_1577_fu_1414_p194;
wire   [7:0] tmp_8488_fu_1808_p1;
wire   [7:0] tmp_8489_fu_1811_p1;
wire   [0:0] tmp_8487_fu_1804_p2;
wire   [7:0] tmp_8491_fu_1824_p2;
wire   [7:0] tmp_8493_fu_1836_p2;
reg   [127:0] tmp_8490_fu_1814_p4;
wire   [7:0] tmp_8492_fu_1830_p2;
wire   [31:0] tmp_22_fu_1866_p2;
wire   [14:0] tmp_8504_fu_1871_p1;
wire   [7:0] tmp_8497_fu_1892_p2;
wire   [9:0] tmp_8498_fu_1897_p1;
wire   [9:0] tmp_8499_fu_1900_p1;
wire   [127:0] tmp_8500_fu_1904_p2;
wire   [127:0] tmp_8501_fu_1909_p2;
wire   [127:0] tmp_8502_fu_1915_p2;
wire   [0:0] tmp_17_fu_598_p2;
wire   [0:0] tmp_18_fu_603_p2;
wire    grp_fu_608_ce;
reg   [5:0] ap_NS_fsm;
wire   [14:0] tmp_1821_fu_562_p10;


decode_start_mul_32s_16s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
decode_start_mul_32s_16s_32_3_U1488(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( i_reg_508 ),
    .din1( grp_fu_608_p1 ),
    .ce( grp_fu_608_ce ),
    .dout( grp_fu_608_p2 )
);

decode_start_mux_192to1_sel8_128_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 128 ),
    .din2_WIDTH( 128 ),
    .din3_WIDTH( 128 ),
    .din4_WIDTH( 128 ),
    .din5_WIDTH( 128 ),
    .din6_WIDTH( 128 ),
    .din7_WIDTH( 128 ),
    .din8_WIDTH( 128 ),
    .din9_WIDTH( 128 ),
    .din10_WIDTH( 128 ),
    .din11_WIDTH( 128 ),
    .din12_WIDTH( 128 ),
    .din13_WIDTH( 128 ),
    .din14_WIDTH( 128 ),
    .din15_WIDTH( 128 ),
    .din16_WIDTH( 128 ),
    .din17_WIDTH( 128 ),
    .din18_WIDTH( 128 ),
    .din19_WIDTH( 128 ),
    .din20_WIDTH( 128 ),
    .din21_WIDTH( 128 ),
    .din22_WIDTH( 128 ),
    .din23_WIDTH( 128 ),
    .din24_WIDTH( 128 ),
    .din25_WIDTH( 128 ),
    .din26_WIDTH( 128 ),
    .din27_WIDTH( 128 ),
    .din28_WIDTH( 128 ),
    .din29_WIDTH( 128 ),
    .din30_WIDTH( 128 ),
    .din31_WIDTH( 128 ),
    .din32_WIDTH( 128 ),
    .din33_WIDTH( 128 ),
    .din34_WIDTH( 128 ),
    .din35_WIDTH( 128 ),
    .din36_WIDTH( 128 ),
    .din37_WIDTH( 128 ),
    .din38_WIDTH( 128 ),
    .din39_WIDTH( 128 ),
    .din40_WIDTH( 128 ),
    .din41_WIDTH( 128 ),
    .din42_WIDTH( 128 ),
    .din43_WIDTH( 128 ),
    .din44_WIDTH( 128 ),
    .din45_WIDTH( 128 ),
    .din46_WIDTH( 128 ),
    .din47_WIDTH( 128 ),
    .din48_WIDTH( 128 ),
    .din49_WIDTH( 128 ),
    .din50_WIDTH( 128 ),
    .din51_WIDTH( 128 ),
    .din52_WIDTH( 128 ),
    .din53_WIDTH( 128 ),
    .din54_WIDTH( 128 ),
    .din55_WIDTH( 128 ),
    .din56_WIDTH( 128 ),
    .din57_WIDTH( 128 ),
    .din58_WIDTH( 128 ),
    .din59_WIDTH( 128 ),
    .din60_WIDTH( 128 ),
    .din61_WIDTH( 128 ),
    .din62_WIDTH( 128 ),
    .din63_WIDTH( 128 ),
    .din64_WIDTH( 128 ),
    .din65_WIDTH( 128 ),
    .din66_WIDTH( 128 ),
    .din67_WIDTH( 128 ),
    .din68_WIDTH( 128 ),
    .din69_WIDTH( 128 ),
    .din70_WIDTH( 128 ),
    .din71_WIDTH( 128 ),
    .din72_WIDTH( 128 ),
    .din73_WIDTH( 128 ),
    .din74_WIDTH( 128 ),
    .din75_WIDTH( 128 ),
    .din76_WIDTH( 128 ),
    .din77_WIDTH( 128 ),
    .din78_WIDTH( 128 ),
    .din79_WIDTH( 128 ),
    .din80_WIDTH( 128 ),
    .din81_WIDTH( 128 ),
    .din82_WIDTH( 128 ),
    .din83_WIDTH( 128 ),
    .din84_WIDTH( 128 ),
    .din85_WIDTH( 128 ),
    .din86_WIDTH( 128 ),
    .din87_WIDTH( 128 ),
    .din88_WIDTH( 128 ),
    .din89_WIDTH( 128 ),
    .din90_WIDTH( 128 ),
    .din91_WIDTH( 128 ),
    .din92_WIDTH( 128 ),
    .din93_WIDTH( 128 ),
    .din94_WIDTH( 128 ),
    .din95_WIDTH( 128 ),
    .din96_WIDTH( 128 ),
    .din97_WIDTH( 128 ),
    .din98_WIDTH( 128 ),
    .din99_WIDTH( 128 ),
    .din100_WIDTH( 128 ),
    .din101_WIDTH( 128 ),
    .din102_WIDTH( 128 ),
    .din103_WIDTH( 128 ),
    .din104_WIDTH( 128 ),
    .din105_WIDTH( 128 ),
    .din106_WIDTH( 128 ),
    .din107_WIDTH( 128 ),
    .din108_WIDTH( 128 ),
    .din109_WIDTH( 128 ),
    .din110_WIDTH( 128 ),
    .din111_WIDTH( 128 ),
    .din112_WIDTH( 128 ),
    .din113_WIDTH( 128 ),
    .din114_WIDTH( 128 ),
    .din115_WIDTH( 128 ),
    .din116_WIDTH( 128 ),
    .din117_WIDTH( 128 ),
    .din118_WIDTH( 128 ),
    .din119_WIDTH( 128 ),
    .din120_WIDTH( 128 ),
    .din121_WIDTH( 128 ),
    .din122_WIDTH( 128 ),
    .din123_WIDTH( 128 ),
    .din124_WIDTH( 128 ),
    .din125_WIDTH( 128 ),
    .din126_WIDTH( 128 ),
    .din127_WIDTH( 128 ),
    .din128_WIDTH( 128 ),
    .din129_WIDTH( 128 ),
    .din130_WIDTH( 128 ),
    .din131_WIDTH( 128 ),
    .din132_WIDTH( 128 ),
    .din133_WIDTH( 128 ),
    .din134_WIDTH( 128 ),
    .din135_WIDTH( 128 ),
    .din136_WIDTH( 128 ),
    .din137_WIDTH( 128 ),
    .din138_WIDTH( 128 ),
    .din139_WIDTH( 128 ),
    .din140_WIDTH( 128 ),
    .din141_WIDTH( 128 ),
    .din142_WIDTH( 128 ),
    .din143_WIDTH( 128 ),
    .din144_WIDTH( 128 ),
    .din145_WIDTH( 128 ),
    .din146_WIDTH( 128 ),
    .din147_WIDTH( 128 ),
    .din148_WIDTH( 128 ),
    .din149_WIDTH( 128 ),
    .din150_WIDTH( 128 ),
    .din151_WIDTH( 128 ),
    .din152_WIDTH( 128 ),
    .din153_WIDTH( 128 ),
    .din154_WIDTH( 128 ),
    .din155_WIDTH( 128 ),
    .din156_WIDTH( 128 ),
    .din157_WIDTH( 128 ),
    .din158_WIDTH( 128 ),
    .din159_WIDTH( 128 ),
    .din160_WIDTH( 128 ),
    .din161_WIDTH( 128 ),
    .din162_WIDTH( 128 ),
    .din163_WIDTH( 128 ),
    .din164_WIDTH( 128 ),
    .din165_WIDTH( 128 ),
    .din166_WIDTH( 128 ),
    .din167_WIDTH( 128 ),
    .din168_WIDTH( 128 ),
    .din169_WIDTH( 128 ),
    .din170_WIDTH( 128 ),
    .din171_WIDTH( 128 ),
    .din172_WIDTH( 128 ),
    .din173_WIDTH( 128 ),
    .din174_WIDTH( 128 ),
    .din175_WIDTH( 128 ),
    .din176_WIDTH( 128 ),
    .din177_WIDTH( 128 ),
    .din178_WIDTH( 128 ),
    .din179_WIDTH( 128 ),
    .din180_WIDTH( 128 ),
    .din181_WIDTH( 128 ),
    .din182_WIDTH( 128 ),
    .din183_WIDTH( 128 ),
    .din184_WIDTH( 128 ),
    .din185_WIDTH( 128 ),
    .din186_WIDTH( 128 ),
    .din187_WIDTH( 128 ),
    .din188_WIDTH( 128 ),
    .din189_WIDTH( 128 ),
    .din190_WIDTH( 128 ),
    .din191_WIDTH( 128 ),
    .din192_WIDTH( 128 ),
    .din193_WIDTH( 8 ),
    .dout_WIDTH( 128 ))
decode_start_mux_192to1_sel8_128_1_U1489(
    .din1( rgb_buf_0_0 ),
    .din2( rgb_buf_0_1 ),
    .din3( rgb_buf_0_2 ),
    .din4( rgb_buf_0_3 ),
    .din5( rgb_buf_0_4 ),
    .din6( rgb_buf_0_5 ),
    .din7( rgb_buf_0_6 ),
    .din8( rgb_buf_0_7 ),
    .din9( rgb_buf_0_8 ),
    .din10( rgb_buf_0_9 ),
    .din11( rgb_buf_0_10 ),
    .din12( rgb_buf_0_11 ),
    .din13( rgb_buf_0_12 ),
    .din14( rgb_buf_0_13 ),
    .din15( rgb_buf_0_14 ),
    .din16( rgb_buf_0_15 ),
    .din17( rgb_buf_0_16 ),
    .din18( rgb_buf_0_17 ),
    .din19( rgb_buf_0_18 ),
    .din20( rgb_buf_0_19 ),
    .din21( rgb_buf_0_20 ),
    .din22( rgb_buf_0_21 ),
    .din23( rgb_buf_0_22 ),
    .din24( rgb_buf_0_23 ),
    .din25( rgb_buf_0_24 ),
    .din26( rgb_buf_0_25 ),
    .din27( rgb_buf_0_26 ),
    .din28( rgb_buf_0_27 ),
    .din29( rgb_buf_0_28 ),
    .din30( rgb_buf_0_29 ),
    .din31( rgb_buf_0_30 ),
    .din32( rgb_buf_0_31 ),
    .din33( rgb_buf_0_32 ),
    .din34( rgb_buf_0_33 ),
    .din35( rgb_buf_0_34 ),
    .din36( rgb_buf_0_35 ),
    .din37( rgb_buf_0_36 ),
    .din38( rgb_buf_0_37 ),
    .din39( rgb_buf_0_38 ),
    .din40( rgb_buf_0_39 ),
    .din41( rgb_buf_0_40 ),
    .din42( rgb_buf_0_41 ),
    .din43( rgb_buf_0_42 ),
    .din44( rgb_buf_0_43 ),
    .din45( rgb_buf_0_44 ),
    .din46( rgb_buf_0_45 ),
    .din47( rgb_buf_0_46 ),
    .din48( rgb_buf_0_47 ),
    .din49( rgb_buf_0_48 ),
    .din50( rgb_buf_0_49 ),
    .din51( rgb_buf_0_50 ),
    .din52( rgb_buf_0_51 ),
    .din53( rgb_buf_0_52 ),
    .din54( rgb_buf_0_53 ),
    .din55( rgb_buf_0_54 ),
    .din56( rgb_buf_0_55 ),
    .din57( rgb_buf_0_56 ),
    .din58( rgb_buf_0_57 ),
    .din59( rgb_buf_0_58 ),
    .din60( rgb_buf_0_59 ),
    .din61( rgb_buf_0_60 ),
    .din62( rgb_buf_0_61 ),
    .din63( rgb_buf_0_62 ),
    .din64( rgb_buf_0_63 ),
    .din65( rgb_buf_1_0 ),
    .din66( rgb_buf_1_1 ),
    .din67( rgb_buf_1_2 ),
    .din68( rgb_buf_1_3 ),
    .din69( rgb_buf_1_4 ),
    .din70( rgb_buf_1_5 ),
    .din71( rgb_buf_1_6 ),
    .din72( rgb_buf_1_7 ),
    .din73( rgb_buf_1_8 ),
    .din74( rgb_buf_1_9 ),
    .din75( rgb_buf_1_10 ),
    .din76( rgb_buf_1_11 ),
    .din77( rgb_buf_1_12 ),
    .din78( rgb_buf_1_13 ),
    .din79( rgb_buf_1_14 ),
    .din80( rgb_buf_1_15 ),
    .din81( rgb_buf_1_16 ),
    .din82( rgb_buf_1_17 ),
    .din83( rgb_buf_1_18 ),
    .din84( rgb_buf_1_19 ),
    .din85( rgb_buf_1_20 ),
    .din86( rgb_buf_1_21 ),
    .din87( rgb_buf_1_22 ),
    .din88( rgb_buf_1_23 ),
    .din89( rgb_buf_1_24 ),
    .din90( rgb_buf_1_25 ),
    .din91( rgb_buf_1_26 ),
    .din92( rgb_buf_1_27 ),
    .din93( rgb_buf_1_28 ),
    .din94( rgb_buf_1_29 ),
    .din95( rgb_buf_1_30 ),
    .din96( rgb_buf_1_31 ),
    .din97( rgb_buf_1_32 ),
    .din98( rgb_buf_1_33 ),
    .din99( rgb_buf_1_34 ),
    .din100( rgb_buf_1_35 ),
    .din101( rgb_buf_1_36 ),
    .din102( rgb_buf_1_37 ),
    .din103( rgb_buf_1_38 ),
    .din104( rgb_buf_1_39 ),
    .din105( rgb_buf_1_40 ),
    .din106( rgb_buf_1_41 ),
    .din107( rgb_buf_1_42 ),
    .din108( rgb_buf_1_43 ),
    .din109( rgb_buf_1_44 ),
    .din110( rgb_buf_1_45 ),
    .din111( rgb_buf_1_46 ),
    .din112( rgb_buf_1_47 ),
    .din113( rgb_buf_1_48 ),
    .din114( rgb_buf_1_49 ),
    .din115( rgb_buf_1_50 ),
    .din116( rgb_buf_1_51 ),
    .din117( rgb_buf_1_52 ),
    .din118( rgb_buf_1_53 ),
    .din119( rgb_buf_1_54 ),
    .din120( rgb_buf_1_55 ),
    .din121( rgb_buf_1_56 ),
    .din122( rgb_buf_1_57 ),
    .din123( rgb_buf_1_58 ),
    .din124( rgb_buf_1_59 ),
    .din125( rgb_buf_1_60 ),
    .din126( rgb_buf_1_61 ),
    .din127( rgb_buf_1_62 ),
    .din128( rgb_buf_1_63 ),
    .din129( rgb_buf_2_0 ),
    .din130( rgb_buf_2_1 ),
    .din131( rgb_buf_2_2 ),
    .din132( rgb_buf_2_3 ),
    .din133( rgb_buf_2_4 ),
    .din134( rgb_buf_2_5 ),
    .din135( rgb_buf_2_6 ),
    .din136( rgb_buf_2_7 ),
    .din137( rgb_buf_2_8 ),
    .din138( rgb_buf_2_9 ),
    .din139( rgb_buf_2_10 ),
    .din140( rgb_buf_2_11 ),
    .din141( rgb_buf_2_12 ),
    .din142( rgb_buf_2_13 ),
    .din143( rgb_buf_2_14 ),
    .din144( rgb_buf_2_15 ),
    .din145( rgb_buf_2_16 ),
    .din146( rgb_buf_2_17 ),
    .din147( rgb_buf_2_18 ),
    .din148( rgb_buf_2_19 ),
    .din149( rgb_buf_2_20 ),
    .din150( rgb_buf_2_21 ),
    .din151( rgb_buf_2_22 ),
    .din152( rgb_buf_2_23 ),
    .din153( rgb_buf_2_24 ),
    .din154( rgb_buf_2_25 ),
    .din155( rgb_buf_2_26 ),
    .din156( rgb_buf_2_27 ),
    .din157( rgb_buf_2_28 ),
    .din158( rgb_buf_2_29 ),
    .din159( rgb_buf_2_30 ),
    .din160( rgb_buf_2_31 ),
    .din161( rgb_buf_2_32 ),
    .din162( rgb_buf_2_33 ),
    .din163( rgb_buf_2_34 ),
    .din164( rgb_buf_2_35 ),
    .din165( rgb_buf_2_36 ),
    .din166( rgb_buf_2_37 ),
    .din167( rgb_buf_2_38 ),
    .din168( rgb_buf_2_39 ),
    .din169( rgb_buf_2_40 ),
    .din170( rgb_buf_2_41 ),
    .din171( rgb_buf_2_42 ),
    .din172( rgb_buf_2_43 ),
    .din173( rgb_buf_2_44 ),
    .din174( rgb_buf_2_45 ),
    .din175( rgb_buf_2_46 ),
    .din176( rgb_buf_2_47 ),
    .din177( rgb_buf_2_48 ),
    .din178( rgb_buf_2_49 ),
    .din179( rgb_buf_2_50 ),
    .din180( rgb_buf_2_51 ),
    .din181( rgb_buf_2_52 ),
    .din182( rgb_buf_2_53 ),
    .din183( rgb_buf_2_54 ),
    .din184( rgb_buf_2_55 ),
    .din185( rgb_buf_2_56 ),
    .din186( rgb_buf_2_57 ),
    .din187( rgb_buf_2_58 ),
    .din188( rgb_buf_2_59 ),
    .din189( rgb_buf_2_60 ),
    .din190( rgb_buf_2_61 ),
    .din191( rgb_buf_2_62 ),
    .din192( rgb_buf_2_63 ),
    .din193( tmp_1577_fu_1414_p193 ),
    .dout( tmp_1577_fu_1414_p194 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        e_reg_530 <= e_1_reg_2030;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        e_reg_530 <= hoffs;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ((tmp_19_fu_619_p2 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_20_fu_630_p2)))) begin
        i_reg_508 <= i_1_fu_1886_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_508 <= voffs;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ((tmp_19_fu_619_p2 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_20_fu_630_p2)))) begin
        p_0_idx_reg_518 <= store_addr_sum_fu_613_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        p_0_idx_reg_518 <= ap_const_lv64_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        p_1_rec_reg_539 <= p_rec_reg_2002;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        p_1_rec_reg_539 <= ap_const_lv64_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        diff_reg_1989 <= grp_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) & ~(tmp_19_fu_619_p2 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_20_fu_630_p2))) begin
        e_1_reg_2030 <= e_1_fu_1880_p2;
        tmp_1822_reg_2025 <= tmp_1822_fu_1875_p2;
        tmp_8494_reg_2010[7 : 1] <= tmp_8494_fu_1842_p3[7 : 1];
        tmp_8495_reg_2015 <= tmp_8495_fu_1850_p3;
        tmp_8496_reg_2020 <= tmp_8496_fu_1858_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        height_cast_reg_1945 <= height_cast_fu_550_p1;
        tmp_1022_reg_1971[6 : 5] <= tmp_1022_fu_584_p3[6 : 5];
        tmp_1023_reg_1977[6 : 5] <= tmp_1023_fu_592_p2[6 : 5];
        tmp_1821_reg_1956 <= tmp_1821_fu_562_p2;
        tmp_reg_1961 <= tmp_fu_568_p2;
        tmp_s_reg_1966 <= tmp_s_fu_574_p2;
        width_cast_reg_1950 <= width_cast_fu_554_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        p_rec_reg_2002 <= p_rec_fu_624_p2;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or tmp_17_fu_598_p2 or tmp_18_fu_603_p2) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((ap_const_lv1_0 == tmp_17_fu_598_p2) | (ap_const_lv1_0 == tmp_18_fu_603_p2))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_17_fu_598_p2 or tmp_18_fu_603_p2) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ((ap_const_lv1_0 == tmp_17_fu_598_p2) | (ap_const_lv1_0 == tmp_18_fu_603_p2)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_24) begin
    if (ap_sig_bdd_24) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_544) begin
    if (ap_sig_bdd_544) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_265) begin
    if (ap_sig_bdd_265) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_274) begin
    if (ap_sig_bdd_274) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_313) begin
    if (ap_sig_bdd_313) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st6_fsm_5) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        out_buf_ce0 = ap_const_logic_1;
    end else begin
        out_buf_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st6_fsm_5) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        out_buf_we0 = ap_const_logic_1;
    end else begin
        out_buf_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_19_fu_619_p2 or tmp_20_fu_630_p2 or tmp_17_fu_598_p2 or tmp_18_fu_603_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (((ap_const_lv1_0 == tmp_17_fu_598_p2) | (ap_const_lv1_0 == tmp_18_fu_603_p2))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (((tmp_19_fu_619_p2 == ap_const_lv1_0) | (ap_const_lv1_0 == tmp_20_fu_630_p2))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end



always @ (ap_CS_fsm) begin
    ap_sig_bdd_24 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_265 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_274 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_313 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_544 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign e_1_fu_1880_p2 = (ap_const_lv32_1 + e_reg_530);

assign grp_fu_608_ce = ap_const_logic_1;

assign grp_fu_608_p1 = width_cast_reg_1950;

assign height_cast_fu_550_p1 = $signed(height);

assign i_1_fu_1886_p2 = ($signed(i_reg_508) + $signed(ap_const_lv32_1));

assign out_buf_address0 = tmp_1823_cast_fu_1926_p1;

assign out_buf_d0 = tmp_8502_fu_1915_p2[7:0];

assign p_rec_fu_624_p2 = (p_1_rec_reg_539 + ap_const_lv64_1);

assign store_addr_sum_fu_613_p2 = (p_1_rec_reg_539 + p_0_idx_reg_518);

assign tmp_1022_fu_584_p3 = {{tmp_8485_fu_580_p1}, {ap_const_lv5_0}};

assign tmp_1023_fu_592_p2 = (tmp_1022_fu_584_p3 | ap_const_lv7_1F);

assign tmp_1577_fu_1414_p193 = {{tmp_12}, {tmp_8486_fu_635_p1}};

assign tmp_17_fu_598_p2 = ($signed(i_reg_508) < $signed(tmp_reg_1961)? 1'b1: 1'b0);

assign tmp_1821_fu_562_p1 = tmp_1821_fu_562_p10;

assign tmp_1821_fu_562_p10 = tmp_122;

assign tmp_1821_fu_562_p2 = (ap_const_lv15_14BE * tmp_1821_fu_562_p1);

assign tmp_1822_fu_1875_p2 = (tmp_8504_fu_1871_p1 + tmp_1821_reg_1956);

assign tmp_1823_cast_fu_1926_p1 = $signed(tmp_1822_reg_2025);

assign tmp_18_fu_603_p2 = ($signed(i_reg_508) < $signed(height_cast_reg_1945)? 1'b1: 1'b0);

assign tmp_19_fu_619_p2 = ($signed(e_reg_530) < $signed(tmp_s_reg_1966)? 1'b1: 1'b0);

assign tmp_20_fu_630_p2 = ($signed(e_reg_530) < $signed(width_cast_reg_1950)? 1'b1: 1'b0);

assign tmp_22_fu_1866_p2 = (e_reg_530 + diff_reg_1989);

assign tmp_8485_fu_580_p1 = store_offset[1:0];

assign tmp_8486_fu_635_p1 = store_addr_sum_fu_613_p2[5:0];

assign tmp_8487_fu_1804_p2 = (tmp_1022_reg_1971 > tmp_1023_reg_1977? 1'b1: 1'b0);

assign tmp_8488_fu_1808_p1 = tmp_1022_reg_1971;

assign tmp_8489_fu_1811_p1 = tmp_1023_reg_1977;


integer ap_tvar_int_0;

always @ (tmp_1577_fu_1414_p194) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7F - ap_const_lv32_0) begin
            tmp_8490_fu_1814_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_8490_fu_1814_p4[ap_tvar_int_0] = tmp_1577_fu_1414_p194[ap_const_lv32_7F - ap_tvar_int_0];
        end
    end
end



assign tmp_8491_fu_1824_p2 = (tmp_8488_fu_1808_p1 - tmp_8489_fu_1811_p1);

assign tmp_8492_fu_1830_p2 = (tmp_8488_fu_1808_p1 ^ ap_const_lv8_7F);

assign tmp_8493_fu_1836_p2 = (tmp_8489_fu_1811_p1 - tmp_8488_fu_1808_p1);

assign tmp_8494_fu_1842_p3 = ((tmp_8487_fu_1804_p2[0:0] === 1'b1) ? tmp_8491_fu_1824_p2 : tmp_8493_fu_1836_p2);

assign tmp_8495_fu_1850_p3 = ((tmp_8487_fu_1804_p2[0:0] === 1'b1) ? tmp_8490_fu_1814_p4 : tmp_1577_fu_1414_p194);

assign tmp_8496_fu_1858_p3 = ((tmp_8487_fu_1804_p2[0:0] === 1'b1) ? tmp_8492_fu_1830_p2 : tmp_8488_fu_1808_p1);

assign tmp_8497_fu_1892_p2 = (ap_const_lv8_7F - tmp_8494_reg_2010);

assign tmp_8498_fu_1897_p1 = tmp_8496_reg_2020;

assign tmp_8499_fu_1900_p1 = tmp_8497_fu_1892_p2;

assign tmp_8500_fu_1904_p2 = tmp_8495_reg_2015 >> tmp_8498_fu_1897_p1;

assign tmp_8501_fu_1909_p2 = ap_const_lv128_lc_5 >> tmp_8499_fu_1900_p1;

assign tmp_8502_fu_1915_p2 = (tmp_8500_fu_1904_p2 & tmp_8501_fu_1909_p2);

assign tmp_8504_fu_1871_p1 = tmp_22_fu_1866_p2[14:0];

assign tmp_fu_568_p2 = (ap_const_lv32_8 + voffs);

assign tmp_s_fu_574_p2 = (ap_const_lv32_8 + hoffs);

assign width_cast_fu_554_p1 = $signed(width);
always @ (posedge ap_clk) begin
    tmp_1022_reg_1971[4:0] <= 5'b00000;
    tmp_1023_reg_1977[4:0] <= 5'b11111;
    tmp_8494_reg_2010[0] <= 1'b1;
end



endmodule //decode_start_WriteOneBlock

