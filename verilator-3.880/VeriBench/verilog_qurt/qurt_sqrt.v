// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module qurt_sqrt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        val_r,
        ap_return
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] val_r;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
reg   [5:0] ap_CS_fsm = 6'b000000;
wire   [63:0] grp_fu_99_p2;
reg   [63:0] reg_110;
wire   [63:0] grp_fu_94_p2;
reg   [63:0] reg_115;
wire   [63:0] grp_fu_90_p2;
reg   [63:0] reg_121;
reg   [63:0] x_1_load_reg_502;
wire   [0:0] tmp_s_fu_153_p2;
reg   [0:0] tmp_s_reg_513;
wire   [0:0] exitcond_fu_144_p2;
reg   [0:0] p_Result_s_reg_517;
reg   [31:0] p_Val2_11_reg_522;
wire   [4:0] i_1_fu_338_p2;
reg   [4:0] i_reg_66;
reg   [63:0] x_assign_2_reg_78;
wire   [0:0] grp_fu_105_p2;
reg   [63:0] x_1_fu_52;
reg   [31:0] flag_fu_56;
wire   [31:0] p_flag_fu_329_p1;
reg   [63:0] grp_fu_90_p0;
reg   [63:0] grp_fu_90_p1;
reg   [63:0] grp_fu_94_p0;
reg   [63:0] grp_fu_94_p1;
reg   [63:0] grp_fu_99_p0;
reg   [63:0] grp_fu_99_p1;
reg   [63:0] grp_fu_105_p0;
wire   [63:0] grp_fu_105_p1;
wire   [63:0] f_to_int_i_fu_170_p1;
wire   [63:0] f_neg_i_fu_174_p2;
wire   [0:0] tmp_10_fu_164_p2;
wire   [63:0] f_fu_180_p1;
wire   [63:0] x_assign_fu_184_p3;
wire   [63:0] p_Val2_7_fu_192_p1;
wire   [51:0] p_Result_2_fu_214_p1;
wire   [52:0] p_Result_3_fu_218_p3;
wire   [10:0] p_Result_1_fu_204_p4;
wire   [11:0] tmp_i_i_i_i_cast2_fu_230_p1;
wire   [11:0] sh_assign_2_fu_234_p2;
wire   [10:0] tmp_i_i_i_9_fu_248_p2;
wire   [0:0] isNeg_1_fu_240_p3;
wire   [11:0] sh_assign_3_fu_258_p1;
wire   [11:0] sh_assign_3_fu_258_p3;
wire   [31:0] tmp_8_i_i_i_fu_270_p0;
wire   [31:0] sh_assign_3_cast_fu_266_p1;
wire   [31:0] tmp_8_i_i_i_cast_fu_274_p0;
wire   [52:0] tmp_8_i_i_i_cast_fu_274_p1;
wire   [52:0] tmp_9_i_i_i_fu_278_p2;
wire   [135:0] tmp_i_i_i_fu_226_p1;
wire   [135:0] tmp_8_i_i_i_fu_270_p1;
wire   [135:0] tmp_9_i_i_i_cast_fu_284_p1;
wire   [135:0] tmp_11_i_i_i_fu_288_p2;
wire   [135:0] p_Val2_10_fu_294_p3;
wire   [31:0] p_Val2_7_i_i_i_fu_312_p2;
wire   [31:0] p_Val2_13_fu_317_p3;
wire   [0:0] tmp_7_fu_323_p2;
wire   [63:0] p_Val2_s_fu_344_p1;
wire   [51:0] p_Result_6_fu_366_p1;
wire   [52:0] p_Result_7_fu_370_p3;
wire   [10:0] p_Result_5_fu_356_p4;
wire   [11:0] tmp_i_i_i2_cast1_fu_382_p1;
wire   [11:0] sh_assign_fu_386_p2;
wire   [10:0] tmp_i_i_10_fu_400_p2;
wire   [0:0] isNeg_fu_392_p3;
wire   [11:0] sh_assign_1_fu_410_p1;
wire   [11:0] sh_assign_1_fu_410_p3;
wire   [31:0] tmp_8_i_i_fu_422_p0;
wire   [31:0] sh_assign_1_cast_fu_418_p1;
wire   [31:0] tmp_8_i_i_cast_fu_426_p0;
wire   [52:0] tmp_8_i_i_cast_fu_426_p1;
wire   [52:0] tmp_9_i_i_fu_430_p2;
wire   [135:0] tmp_i_i_fu_378_p1;
wire   [135:0] tmp_8_i_i_fu_422_p1;
wire   [135:0] tmp_9_i_i_cast_fu_436_p1;
wire   [135:0] tmp_11_i_i_fu_440_p2;
wire   [135:0] p_Val2_3_fu_446_p3;
wire   [31:0] p_Val2_4_fu_454_p4;
wire   [0:0] p_Result_4_fu_348_p3;
wire   [31:0] p_Val2_7_i_i_fu_464_p2;
reg   [1:0] grp_fu_90_opcode;
wire    grp_fu_90_ce;
wire    grp_fu_94_ce;
wire    grp_fu_99_ce;
wire    grp_fu_105_ce;
reg   [4:0] grp_fu_105_opcode;
wire   [31:0] p_Val2_6_fu_470_p3;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [5:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 6'b000000;
parameter    ap_ST_st2_fsm_1 = 6'b1;
parameter    ap_ST_st3_fsm_2 = 6'b10;
parameter    ap_ST_st4_fsm_3 = 6'b11;
parameter    ap_ST_st5_fsm_4 = 6'b100;
parameter    ap_ST_st6_fsm_5 = 6'b101;
parameter    ap_ST_st7_fsm_6 = 6'b110;
parameter    ap_ST_st8_fsm_7 = 6'b111;
parameter    ap_ST_st9_fsm_8 = 6'b1000;
parameter    ap_ST_st10_fsm_9 = 6'b1001;
parameter    ap_ST_st11_fsm_10 = 6'b1010;
parameter    ap_ST_st12_fsm_11 = 6'b1011;
parameter    ap_ST_st13_fsm_12 = 6'b1100;
parameter    ap_ST_st14_fsm_13 = 6'b1101;
parameter    ap_ST_st15_fsm_14 = 6'b1110;
parameter    ap_ST_st16_fsm_15 = 6'b1111;
parameter    ap_ST_st17_fsm_16 = 6'b10000;
parameter    ap_ST_st18_fsm_17 = 6'b10001;
parameter    ap_ST_st19_fsm_18 = 6'b10010;
parameter    ap_ST_st20_fsm_19 = 6'b10011;
parameter    ap_ST_st21_fsm_20 = 6'b10100;
parameter    ap_ST_st22_fsm_21 = 6'b10101;
parameter    ap_ST_st23_fsm_22 = 6'b10110;
parameter    ap_ST_st24_fsm_23 = 6'b10111;
parameter    ap_ST_st25_fsm_24 = 6'b11000;
parameter    ap_ST_st26_fsm_25 = 6'b11001;
parameter    ap_ST_st27_fsm_26 = 6'b11010;
parameter    ap_ST_st28_fsm_27 = 6'b11011;
parameter    ap_ST_st29_fsm_28 = 6'b11100;
parameter    ap_ST_st30_fsm_29 = 6'b11101;
parameter    ap_ST_st31_fsm_30 = 6'b11110;
parameter    ap_ST_st32_fsm_31 = 6'b11111;
parameter    ap_ST_st33_fsm_32 = 6'b100000;
parameter    ap_ST_st34_fsm_33 = 6'b100001;
parameter    ap_ST_st35_fsm_34 = 6'b100010;
parameter    ap_ST_st36_fsm_35 = 6'b100011;
parameter    ap_ST_st37_fsm_36 = 6'b100100;
parameter    ap_ST_st38_fsm_37 = 6'b100101;
parameter    ap_ST_st39_fsm_38 = 6'b100110;
parameter    ap_ST_st40_fsm_39 = 6'b100111;
parameter    ap_ST_st41_fsm_40 = 6'b101000;
parameter    ap_ST_st42_fsm_41 = 6'b101001;
parameter    ap_ST_st43_fsm_42 = 6'b101010;
parameter    ap_ST_st44_fsm_43 = 6'b101011;
parameter    ap_ST_st45_fsm_44 = 6'b101100;
parameter    ap_ST_st46_fsm_45 = 6'b101101;
parameter    ap_ST_st47_fsm_46 = 6'b101110;
parameter    ap_ST_st48_fsm_47 = 6'b101111;
parameter    ap_ST_st49_fsm_48 = 6'b110000;
parameter    ap_ST_st50_fsm_49 = 6'b110001;
parameter    ap_ST_st51_fsm_50 = 6'b110010;
parameter    ap_ST_st52_fsm_51 = 6'b110011;
parameter    ap_ST_st53_fsm_52 = 6'b110100;
parameter    ap_ST_st54_fsm_53 = 6'b110101;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv5_1 = 5'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv64_4000000000000000 = 64'b100000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4024000000000000 = 64'b100000000100100000000000000000000000000000000000000000000000000;
parameter    ap_const_lv5_14 = 5'b10100;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv64_8000000000000000 = 64'b1000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_34 = 32'b110100;
parameter    ap_const_lv32_3E = 32'b111110;
parameter    ap_const_lv12_C01 = 12'b110000000001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv11_3FF = 11'b1111111111;
parameter    ap_const_lv32_53 = 32'b1010011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_3 = 5'b11;
parameter    ap_true = 1'b1;


qurt_dadddsub_64ns_64ns_64_4_full_dsp #(
    .ID( 0 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
qurt_dadddsub_64ns_64ns_64_4_full_dsp_U0(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_90_p0 ),
    .din1( grp_fu_90_p1 ),
    .opcode( grp_fu_90_opcode ),
    .ce( grp_fu_90_ce ),
    .dout( grp_fu_90_p2 )
);

qurt_dmul_64ns_64ns_64_4_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
qurt_dmul_64ns_64ns_64_4_max_dsp_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_94_p0 ),
    .din1( grp_fu_94_p1 ),
    .ce( grp_fu_94_ce ),
    .dout( grp_fu_94_p2 )
);

qurt_ddiv_64ns_64ns_64_14 #(
    .ID( 2 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
qurt_ddiv_64ns_64ns_64_14_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_99_p0 ),
    .din1( grp_fu_99_p1 ),
    .ce( grp_fu_99_ce ),
    .dout( grp_fu_99_p2 )
);

qurt_dcmp_64ns_64ns_1_3 #(
    .ID( 3 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
qurt_dcmp_64ns_64ns_1_3_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_105_p0 ),
    .din1( grp_fu_105_p1 ),
    .ce( grp_fu_105_ce ),
    .opcode( grp_fu_105_opcode ),
    .dout( grp_fu_105_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv32_0;
    end else begin
        if ((ap_ST_st54_fsm_53 == ap_CS_fsm)) begin
            ap_return_preg <= p_Val2_6_fu_470_p3;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st53_fsm_52 == ap_CS_fsm) & ~(tmp_s_reg_513 == ap_const_lv1_0))) begin
        flag_fu_56[0] <= p_flag_fu_329_p1[0];
    end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        flag_fu_56[0] <= 1'b0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        i_reg_66 <= ap_const_lv5_1;
    end else if ((ap_ST_st53_fsm_52 == ap_CS_fsm)) begin
        i_reg_66 <= i_1_fu_338_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st41_fsm_40 == ap_CS_fsm)) begin
        x_1_fu_52 <= grp_fu_90_p2;
    end else if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        x_1_fu_52 <= reg_110;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & ~(exitcond_fu_144_p2 == ap_const_lv1_0))) begin
        x_assign_2_reg_78 <= x_1_fu_52;
    end else if (((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~(ap_const_lv1_0 == grp_fu_105_p2))) begin
        x_assign_2_reg_78 <= ap_const_lv64_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st52_fsm_51 == ap_CS_fsm)) begin
        p_Result_s_reg_517 <= p_Val2_7_fu_192_p1[ap_const_lv32_3F];
        p_Val2_11_reg_522 <= {{p_Val2_10_fu_294_p3[ap_const_lv32_53 : ap_const_lv32_34]}};
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st14_fsm_13 == ap_CS_fsm) | (ap_ST_st37_fsm_36 == ap_CS_fsm))) begin
        reg_110 <= grp_fu_99_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st19_fsm_18 == ap_CS_fsm) | (ap_ST_st23_fsm_22 == ap_CS_fsm) | (ap_ST_st45_fsm_44 == ap_CS_fsm))) begin
        reg_115 <= grp_fu_94_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st23_fsm_22 == ap_CS_fsm) | (ap_ST_st41_fsm_40 == ap_CS_fsm) | (ap_ST_st49_fsm_48 == ap_CS_fsm))) begin
        reg_121 <= grp_fu_90_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st16_fsm_15 == ap_CS_fsm) & (exitcond_fu_144_p2 == ap_const_lv1_0))) begin
        tmp_s_reg_513 <= tmp_s_fu_153_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        x_1_load_reg_502 <= x_1_fu_52;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | (ap_ST_st54_fsm_53 == ap_CS_fsm))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st54_fsm_53 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (ap_CS_fsm or p_Val2_6_fu_470_p3 or ap_return_preg)
begin
    if ((ap_ST_st54_fsm_53 == ap_CS_fsm)) begin
        ap_return = p_Val2_6_fu_470_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// grp_fu_105_opcode assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st50_fsm_49 == ap_CS_fsm)) begin
        grp_fu_105_opcode = ap_const_lv5_3;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        grp_fu_105_opcode = ap_const_lv5_1;
    end else begin
        grp_fu_105_opcode = 'bx;
    end
end

/// grp_fu_105_p0 assign process. ///
always @ (ap_CS_fsm or val_r or reg_121)
begin
    if ((ap_ST_st50_fsm_49 == ap_CS_fsm)) begin
        grp_fu_105_p0 = reg_121;
    end else if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
        grp_fu_105_p0 = val_r;
    end else begin
        grp_fu_105_p0 = 'bx;
    end
end

/// grp_fu_90_opcode assign process. ///
always @ (ap_CS_fsm)
begin
    if (((ap_ST_st20_fsm_19 == ap_CS_fsm) | (ap_ST_st46_fsm_45 == ap_CS_fsm))) begin
        grp_fu_90_opcode = ap_const_lv2_1;
    end else if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_90_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_90_opcode = 'bx;
    end
end

/// grp_fu_90_p0 assign process. ///
always @ (ap_CS_fsm or val_r or x_1_load_reg_502)
begin
    if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_90_p0 = x_1_load_reg_502;
    end else if (((ap_ST_st20_fsm_19 == ap_CS_fsm) | (ap_ST_st46_fsm_45 == ap_CS_fsm))) begin
        grp_fu_90_p0 = val_r;
    end else begin
        grp_fu_90_p0 = 'bx;
    end
end

/// grp_fu_90_p1 assign process. ///
always @ (ap_CS_fsm or reg_110 or reg_115)
begin
    if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_90_p1 = reg_110;
    end else if (((ap_ST_st20_fsm_19 == ap_CS_fsm) | (ap_ST_st46_fsm_45 == ap_CS_fsm))) begin
        grp_fu_90_p1 = reg_115;
    end else begin
        grp_fu_90_p1 = 'bx;
    end
end

/// grp_fu_94_p0 assign process. ///
always @ (ap_CS_fsm or reg_121 or x_1_load_reg_502 or x_1_fu_52)
begin
    if ((ap_ST_st42_fsm_41 == ap_CS_fsm)) begin
        grp_fu_94_p0 = reg_121;
    end else if ((ap_ST_st20_fsm_19 == ap_CS_fsm)) begin
        grp_fu_94_p0 = x_1_load_reg_502;
    end else if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        grp_fu_94_p0 = x_1_fu_52;
    end else begin
        grp_fu_94_p0 = 'bx;
    end
end

/// grp_fu_94_p1 assign process. ///
always @ (ap_CS_fsm or reg_121 or x_1_fu_52)
begin
    if ((ap_ST_st42_fsm_41 == ap_CS_fsm)) begin
        grp_fu_94_p1 = reg_121;
    end else if ((ap_ST_st20_fsm_19 == ap_CS_fsm)) begin
        grp_fu_94_p1 = ap_const_lv64_4000000000000000;
    end else if ((ap_ST_st16_fsm_15 == ap_CS_fsm)) begin
        grp_fu_94_p1 = x_1_fu_52;
    end else begin
        grp_fu_94_p1 = 'bx;
    end
end

/// grp_fu_99_p0 assign process. ///
always @ (ap_CS_fsm or val_r or reg_121)
begin
    if ((ap_ST_st24_fsm_23 == ap_CS_fsm)) begin
        grp_fu_99_p0 = reg_121;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        grp_fu_99_p0 = val_r;
    end else begin
        grp_fu_99_p0 = 'bx;
    end
end

/// grp_fu_99_p1 assign process. ///
always @ (ap_CS_fsm or reg_115)
begin
    if ((ap_ST_st24_fsm_23 == ap_CS_fsm)) begin
        grp_fu_99_p1 = reg_115;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        grp_fu_99_p1 = ap_const_lv64_4024000000000000;
    end else begin
        grp_fu_99_p1 = 'bx;
    end
end
always @ (ap_start or ap_CS_fsm or tmp_s_fu_153_p2 or exitcond_fu_144_p2 or grp_fu_105_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_st3_fsm_2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
        ap_ST_st5_fsm_4 : 
            ap_NS_fsm = ap_ST_st6_fsm_5;
        ap_ST_st6_fsm_5 : 
            ap_NS_fsm = ap_ST_st7_fsm_6;
        ap_ST_st7_fsm_6 : 
            ap_NS_fsm = ap_ST_st8_fsm_7;
        ap_ST_st8_fsm_7 : 
            ap_NS_fsm = ap_ST_st9_fsm_8;
        ap_ST_st9_fsm_8 : 
            ap_NS_fsm = ap_ST_st10_fsm_9;
        ap_ST_st10_fsm_9 : 
            ap_NS_fsm = ap_ST_st11_fsm_10;
        ap_ST_st11_fsm_10 : 
            ap_NS_fsm = ap_ST_st12_fsm_11;
        ap_ST_st12_fsm_11 : 
            ap_NS_fsm = ap_ST_st13_fsm_12;
        ap_ST_st13_fsm_12 : 
            ap_NS_fsm = ap_ST_st14_fsm_13;
        ap_ST_st14_fsm_13 : 
            if (~(ap_const_lv1_0 == grp_fu_105_p2)) begin
                ap_NS_fsm = ap_ST_st54_fsm_53;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        ap_ST_st15_fsm_14 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st16_fsm_15 : 
            if (((exitcond_fu_144_p2 == ap_const_lv1_0) & (tmp_s_fu_153_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st53_fsm_52;
            end else if (((exitcond_fu_144_p2 == ap_const_lv1_0) & ~(tmp_s_fu_153_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st54_fsm_53;
            end
        ap_ST_st17_fsm_16 : 
            ap_NS_fsm = ap_ST_st18_fsm_17;
        ap_ST_st18_fsm_17 : 
            ap_NS_fsm = ap_ST_st19_fsm_18;
        ap_ST_st19_fsm_18 : 
            ap_NS_fsm = ap_ST_st20_fsm_19;
        ap_ST_st20_fsm_19 : 
            ap_NS_fsm = ap_ST_st21_fsm_20;
        ap_ST_st21_fsm_20 : 
            ap_NS_fsm = ap_ST_st22_fsm_21;
        ap_ST_st22_fsm_21 : 
            ap_NS_fsm = ap_ST_st23_fsm_22;
        ap_ST_st23_fsm_22 : 
            ap_NS_fsm = ap_ST_st24_fsm_23;
        ap_ST_st24_fsm_23 : 
            ap_NS_fsm = ap_ST_st25_fsm_24;
        ap_ST_st25_fsm_24 : 
            ap_NS_fsm = ap_ST_st26_fsm_25;
        ap_ST_st26_fsm_25 : 
            ap_NS_fsm = ap_ST_st27_fsm_26;
        ap_ST_st27_fsm_26 : 
            ap_NS_fsm = ap_ST_st28_fsm_27;
        ap_ST_st28_fsm_27 : 
            ap_NS_fsm = ap_ST_st29_fsm_28;
        ap_ST_st29_fsm_28 : 
            ap_NS_fsm = ap_ST_st30_fsm_29;
        ap_ST_st30_fsm_29 : 
            ap_NS_fsm = ap_ST_st31_fsm_30;
        ap_ST_st31_fsm_30 : 
            ap_NS_fsm = ap_ST_st32_fsm_31;
        ap_ST_st32_fsm_31 : 
            ap_NS_fsm = ap_ST_st33_fsm_32;
        ap_ST_st33_fsm_32 : 
            ap_NS_fsm = ap_ST_st34_fsm_33;
        ap_ST_st34_fsm_33 : 
            ap_NS_fsm = ap_ST_st35_fsm_34;
        ap_ST_st35_fsm_34 : 
            ap_NS_fsm = ap_ST_st36_fsm_35;
        ap_ST_st36_fsm_35 : 
            ap_NS_fsm = ap_ST_st37_fsm_36;
        ap_ST_st37_fsm_36 : 
            ap_NS_fsm = ap_ST_st38_fsm_37;
        ap_ST_st38_fsm_37 : 
            ap_NS_fsm = ap_ST_st39_fsm_38;
        ap_ST_st39_fsm_38 : 
            ap_NS_fsm = ap_ST_st40_fsm_39;
        ap_ST_st40_fsm_39 : 
            ap_NS_fsm = ap_ST_st41_fsm_40;
        ap_ST_st41_fsm_40 : 
            ap_NS_fsm = ap_ST_st42_fsm_41;
        ap_ST_st42_fsm_41 : 
            ap_NS_fsm = ap_ST_st43_fsm_42;
        ap_ST_st43_fsm_42 : 
            ap_NS_fsm = ap_ST_st44_fsm_43;
        ap_ST_st44_fsm_43 : 
            ap_NS_fsm = ap_ST_st45_fsm_44;
        ap_ST_st45_fsm_44 : 
            ap_NS_fsm = ap_ST_st46_fsm_45;
        ap_ST_st46_fsm_45 : 
            ap_NS_fsm = ap_ST_st47_fsm_46;
        ap_ST_st47_fsm_46 : 
            ap_NS_fsm = ap_ST_st48_fsm_47;
        ap_ST_st48_fsm_47 : 
            ap_NS_fsm = ap_ST_st49_fsm_48;
        ap_ST_st49_fsm_48 : 
            ap_NS_fsm = ap_ST_st50_fsm_49;
        ap_ST_st50_fsm_49 : 
            ap_NS_fsm = ap_ST_st51_fsm_50;
        ap_ST_st51_fsm_50 : 
            ap_NS_fsm = ap_ST_st52_fsm_51;
        ap_ST_st52_fsm_51 : 
            ap_NS_fsm = ap_ST_st53_fsm_52;
        ap_ST_st53_fsm_52 : 
            ap_NS_fsm = ap_ST_st16_fsm_15;
        ap_ST_st54_fsm_53 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign exitcond_fu_144_p2 = (i_reg_66 == ap_const_lv5_14? 1'b1: 1'b0);
assign f_fu_180_p1 = f_neg_i_fu_174_p2;
assign f_neg_i_fu_174_p2 = (f_to_int_i_fu_170_p1 ^ ap_const_lv64_8000000000000000);
assign f_to_int_i_fu_170_p1 = reg_121;
assign grp_fu_105_ce = ap_const_logic_1;
assign grp_fu_105_p1 = ap_const_lv64_0;
assign grp_fu_90_ce = ap_const_logic_1;
assign grp_fu_94_ce = ap_const_logic_1;
assign grp_fu_99_ce = ap_const_logic_1;
assign i_1_fu_338_p2 = (i_reg_66 + ap_const_lv5_1);
assign isNeg_1_fu_240_p3 = sh_assign_2_fu_234_p2[ap_const_lv32_B];
assign isNeg_fu_392_p3 = sh_assign_fu_386_p2[ap_const_lv32_B];
assign p_Result_1_fu_204_p4 = {{p_Val2_7_fu_192_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign p_Result_2_fu_214_p1 = p_Val2_7_fu_192_p1[51:0];
assign p_Result_3_fu_218_p3 = {{ap_const_lv1_1}, {p_Result_2_fu_214_p1}};
assign p_Result_4_fu_348_p3 = p_Val2_s_fu_344_p1[ap_const_lv32_3F];
assign p_Result_5_fu_356_p4 = {{p_Val2_s_fu_344_p1[ap_const_lv32_3E : ap_const_lv32_34]}};
assign p_Result_6_fu_366_p1 = p_Val2_s_fu_344_p1[51:0];
assign p_Result_7_fu_370_p3 = {{ap_const_lv1_1}, {p_Result_6_fu_366_p1}};
assign p_Val2_10_fu_294_p3 = ((isNeg_1_fu_240_p3)? tmp_9_i_i_i_cast_fu_284_p1: tmp_11_i_i_i_fu_288_p2);
assign p_Val2_13_fu_317_p3 = ((p_Result_s_reg_517)? p_Val2_7_i_i_i_fu_312_p2: p_Val2_11_reg_522);
assign p_Val2_3_fu_446_p3 = ((isNeg_fu_392_p3)? tmp_9_i_i_cast_fu_436_p1: tmp_11_i_i_fu_440_p2);
assign p_Val2_4_fu_454_p4 = {{p_Val2_3_fu_446_p3[ap_const_lv32_53 : ap_const_lv32_34]}};
assign p_Val2_6_fu_470_p3 = ((p_Result_4_fu_348_p3)? p_Val2_7_i_i_fu_464_p2: p_Val2_4_fu_454_p4);
assign p_Val2_7_fu_192_p1 = x_assign_fu_184_p3;
assign p_Val2_7_i_i_fu_464_p2 = (ap_const_lv32_0 - p_Val2_4_fu_454_p4);
assign p_Val2_7_i_i_i_fu_312_p2 = (ap_const_lv32_0 - p_Val2_11_reg_522);
assign p_Val2_s_fu_344_p1 = x_assign_2_reg_78;
assign p_flag_fu_329_p1 = $unsigned(tmp_7_fu_323_p2);
assign sh_assign_1_cast_fu_418_p1 = $signed(sh_assign_1_fu_410_p3);
assign sh_assign_1_fu_410_p1 = $signed(tmp_i_i_10_fu_400_p2);
assign sh_assign_1_fu_410_p3 = ((isNeg_fu_392_p3)? sh_assign_1_fu_410_p1: sh_assign_fu_386_p2);
assign sh_assign_2_fu_234_p2 = (tmp_i_i_i_i_cast2_fu_230_p1 + ap_const_lv12_C01);
assign sh_assign_3_cast_fu_266_p1 = $signed(sh_assign_3_fu_258_p3);
assign sh_assign_3_fu_258_p1 = $signed(tmp_i_i_i_9_fu_248_p2);
assign sh_assign_3_fu_258_p3 = ((isNeg_1_fu_240_p3)? sh_assign_3_fu_258_p1: sh_assign_2_fu_234_p2);
assign sh_assign_fu_386_p2 = (tmp_i_i_i2_cast1_fu_382_p1 + ap_const_lv12_C01);
assign tmp_10_fu_164_p2 = (grp_fu_105_p2 ^ ap_const_lv1_1);
assign tmp_11_i_i_fu_440_p2 = tmp_i_i_fu_378_p1 << tmp_8_i_i_fu_422_p1;
assign tmp_11_i_i_i_fu_288_p2 = tmp_i_i_i_fu_226_p1 << tmp_8_i_i_i_fu_270_p1;
assign tmp_7_fu_323_p2 = ($signed(p_Val2_13_fu_317_p3) < $signed(32'b1)? 1'b1: 1'b0);
assign tmp_8_i_i_cast_fu_426_p0 = sh_assign_1_cast_fu_418_p1;
assign tmp_8_i_i_cast_fu_426_p1 = $unsigned(tmp_8_i_i_cast_fu_426_p0);
assign tmp_8_i_i_fu_422_p0 = sh_assign_1_cast_fu_418_p1;
assign tmp_8_i_i_fu_422_p1 = $unsigned(tmp_8_i_i_fu_422_p0);
assign tmp_8_i_i_i_cast_fu_274_p0 = sh_assign_3_cast_fu_266_p1;
assign tmp_8_i_i_i_cast_fu_274_p1 = $unsigned(tmp_8_i_i_i_cast_fu_274_p0);
assign tmp_8_i_i_i_fu_270_p0 = sh_assign_3_cast_fu_266_p1;
assign tmp_8_i_i_i_fu_270_p1 = $unsigned(tmp_8_i_i_i_fu_270_p0);
assign tmp_9_i_i_cast_fu_436_p1 = $unsigned(tmp_9_i_i_fu_430_p2);
assign tmp_9_i_i_fu_430_p2 = p_Result_7_fu_370_p3 >> tmp_8_i_i_cast_fu_426_p1;
assign tmp_9_i_i_i_cast_fu_284_p1 = $unsigned(tmp_9_i_i_i_fu_278_p2);
assign tmp_9_i_i_i_fu_278_p2 = p_Result_3_fu_218_p3 >> tmp_8_i_i_i_cast_fu_274_p1;
assign tmp_i_i_10_fu_400_p2 = (ap_const_lv11_3FF - p_Result_5_fu_356_p4);
assign tmp_i_i_fu_378_p1 = $unsigned(p_Result_7_fu_370_p3);
assign tmp_i_i_i2_cast1_fu_382_p1 = $unsigned(p_Result_5_fu_356_p4);
assign tmp_i_i_i_9_fu_248_p2 = (ap_const_lv11_3FF - p_Result_1_fu_204_p4);
assign tmp_i_i_i_fu_226_p1 = $unsigned(p_Result_3_fu_218_p3);
assign tmp_i_i_i_i_cast2_fu_230_p1 = $unsigned(p_Result_1_fu_204_p4);
assign tmp_s_fu_153_p2 = (flag_fu_56 == ap_const_lv32_0? 1'b1: 1'b0);
assign x_assign_fu_184_p3 = ((tmp_10_fu_164_p2)? f_fu_180_p1: reg_121);
always @ (posedge ap_clk)
begin
    flag_fu_56[31:1] <= 31'b0000000000000000000000000000000;
end



endmodule //qurt_sqrt

